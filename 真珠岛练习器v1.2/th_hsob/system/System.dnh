#include "./lib/lib_Common.dnh"
#include "./lib/lib_Display.dnh"
#include "./lib/lib_Util.dnh"
#include "./lib/lib_Boss.dnh"
#include "./lib/lib_Check.dnh"
#include "./../lib/lib_Common.dnh"
#include "./../lib/lib_Item.dnh"
#include "./../lib/fx_function.dnh"
#include "./../lib/lib_ChapterSkip.dnh"
#include "./../lib/lib_ChapterSkip_InGame.dnh"

@Initialize
{
	InitCommonData();
//	MakeSystemCommonDataArea();
	SetAreaCommonData(CAREA_SYSTEM, "ScriptBoss", GetOwnScriptID());	//ID記録
	SetSystemInit();
	InitFrame();
	//描画優先度
	SetShotRenderPriorityI(60);
	//システムスクリプト
	SetPauseScriptPath(GetCurrentScriptDirectory() ~ "ScenePause.dnh");
	SetReplaySaveSceneScriptPath(GetCurrentScriptDirectory() ~ "SceneReplay.dnh");
	SetEndSceneScriptPath(GetCurrentScriptDirectory() ~ "SceneEnd.dnh");
	TMain();
}

@Event
{
	alternative(GetEventType())
	case(EV_PLAYER_SHOOTDOWN)
	{
		CheckContinue();
	}
	//　敵撃破イベント
	case( ev_EnemyKilled )
	{
		let tmp	= GetEventArgument(0);	//　敵撃破カウント数（でかい敵は複数カウント）
		EnemyKillCount += tmp;
	}
}

@MainLoop
{
	yield;
}

task TMain
{
	//　デバッグ用
	if (DEBUG_MODE) { WriteLogText(""); }
	
	//FPS表示
	TFPS();
	if (IsReplay()) { TFPS_Replay(); }
	
	let scriptDIR = GetCurrentScriptDirectory();
	//効果音再生スクリプト
	local
	{
		let scriptSE	= scriptDIR ~ "ControlSound.dnh";
		let SoundSystem = LoadScript(scriptSE);
		StartScript(SoundSystem);
	}
	//アイテムスクリプト起動
	local
	{
		let scriptItem	= scriptDIR ~ "ControlItem.dnh";
		StartItemScript(scriptItem);
	}
	//チャプターシステム起動
	local
	{
		let scriptChapter = scriptDIR ~ "ChapterSystem.dnh";
		let idChapter = LoadScript(scriptChapter);
		StartScript(idChapter);
	}
	
	WaitForPlayerObject();	//プレイヤー読み込みまで待機
	
	//　各種情報描画
	if (GetPlayMode() == GAME_MAIN && IsFirstStage())
	{
		let base_y = 40;
		if (DrawHiTokuten || true)
		{
			THiScore      (420,  base_y, 0+105);
		}
		base_y += 28; TScore      (420,  base_y, -1);
		base_y += 32; TPlayerLife (428,  base_y, -1);
		base_y += 32; TPlayerSpell(428, base_y, -1);

		base_y += 48; TMaxScore   (452, base_y, -1);
		base_y += 24; TGraze      (452, base_y, -1);
		
		TPlayerExtendZSpell(-1);

		DisplayDifficulty([640-112,24], layFront+1, 120);
		DisplayEquipment([640-112,24], layFront, 120);
	} else {
		let base_y = 40;
		if (DrawHiTokuten || true)
		{
			THiScore      (420,  base_y, -1);
		}
		base_y += 28; TScore      (420,  base_y, -1);
		base_y += 32; TPlayerLife (428,  base_y, -1);
		base_y += 32; TPlayerSpell(428, base_y, -1);

		base_y += 48; TMaxScore   (452, base_y, -1);
		base_y += 24; TGraze      (452, base_y, -1);

		TPlayerExtendZSpell(-1);

		DisplayDifficulty([640-112,24], layFront+1, 0);
		DisplayEquipment([640-112,24], layFront, 0);
	}
	
	//エクステンド監視
	TCheckExtend();
	//グレイズ時に最大得点加算
	TAddMaxScore();
	//ボスシーンチェック
	CheckScene();
	//デバッグ用
	TDebugWeaponChange();
	TDebugDisplay();
	DisPlayChapterMiss();
}

//コンティニューチェック
task CheckContinue()
{
	if (!(GetPlayMode() == GAME_MAIN || GetPlayMode() == GAME_PRACTICE)) { return; }

	if (GetPlayerLife() < 0)
	{
		// コンティニュー呼び出し
		let continue = GetContinueCount();
		SetAreaCommonData(CAREA_SYSTEM, "PACKAGE_CONTINUE", true);
		SetPlayerLife(0);	//即死回避
		
		yield;
		
		// コンティニューした？
		if (continue < GetContinueCount())
		{
			// 色々リセット
			AddScore( -GetScore() + GetContinueCount() );
			AddGraze(-GetGraze());
			SetPlayerLife(3);
			SetPlayerSpell(3);
			SetAreaCommonData(CAREA_SYSTEM, "MAX_SCORE", 10000 );
			SetAreaCommonData(CAREA_SYSTEM, "TIME_ITEM_COUNT", 0);
		}
		else
		{
			// ゲーム終了呼び出し
			SetAreaCommonData(CAREA_SYSTEM, "PACKAGE_END", true);
			if (!IsReplay())
			{
				// リプレイ用コモンデータ保存
				SaveCommonDataAreaToReplayFile(CAREA_REPLAY);
			}
			CloseStgScene();
		}
	}
}

//コモンデータの初期化
sub InitCommonData()
{
	if (!IsCommonDataAreaExists(CAREA_STAGE)) { CreateCommonDataArea(CAREA_STAGE); }
	if (!IsCommonDataAreaExists(CAREA_SYSTEM)) { CreateCommonDataArea(CAREA_SYSTEM); }
	if (!IsCommonDataAreaExists(CAREA_REPLAY)) { CreateCommonDataArea(CAREA_REPLAY); }
	LoadSystemCommonData();
}

//コモンデータ更新
sub LoadSystemCommonData()
{
	if (IsReplay()) {
		LoadCommonDataAreaFromReplayFile(CAREA_STAGE);
		LoadCommonDataAreaFromReplayFile(CAREA_SYSTEM);
		LoadCommonDataAreaFromReplayFile(CAREA_REPLAY);
	} else {
		SaveCommonDataAreaToReplayFile(CAREA_STAGE);
		SaveCommonDataAreaToReplayFile(CAREA_SYSTEM);
	}
	// 初期値を設定
	SetAreaCommonData(CAREA_SYSTEM, "AsciiTexts", []);
	SetAreaCommonData(CAREA_SYSTEM, "AsciiTextWait", 0);
}
