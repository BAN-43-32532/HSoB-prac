#include "./lib/lib_SystemScene.dnh"


// 一時停止中スクリプト

let startRealTime = 0;
let startRealTimeStage = 0;

@Initialize{
	SetAutoDeleteObject(true);
	CallSoundPackage(sndTtPause);
	
	startRealTime = GetStageTime();	//実時間記録
	startRealTimeStage = GetStageTime();	//実時間記録
	TBackground();
	TMenu();
}

@MainLoop{
	yield;
}

@Finalize{
	// 実時間の記録を補正（スペカ）
	SetAreaCommonData(CAREA_STAGE, "SpellRealTime", 
		GetAreaCommonData(CAREA_STAGE, "SpellRealTime", GetStageTime()) + GetStageTime() - startRealTime
	);
}

//----------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------
//　メニューメイン
task TMenu
{
	//メニュー配置
	let mx			= 172+24;
	let my			= 224+96;
	let texts		= [ "再開", "操作説明", "タイトルに戻る", "最初から始める" ];
	let countMenu	= length(texts);
	let myRESULT_HELP = 107777;
	
	//　リザルト
	let listResult = [ RESULT_CANCEL, myRESULT_HELP, RESULT_END, RESULT_RETRY ];
	let listReverify = [ false, false, true, true ];

	//　メニュータイトル作成
	let objParent = ObjText_Create();	//適当なオブジェクトを生成（データのやり取り用）
	Obj_SetValue(objParent, "VALUE", 0);
	Obj_SetValue(objParent, "ACTIVE", true);

	//　わかめ
	SetWakame(objParent, [mx-96,my-64], [0,192,255]);

	//　項目作成
	TMenuItem(objParent, countMenu+1, mx, my-80, "一時停止" );
	
	ascent( var iText in 0 .. countMenu )
	{
		TMenuItem(objParent, iText, mx-12, my-32, texts[iText] );
		my += 32;
		mx += 8;
	//	if (iText == 0) { mx += 32; }
	}
	
	//　8フレーム待機
	loop( 8 ){ yield; }
	
	// えへくと
	TSquareEffect(objParent);
	
	// Tips
	if (Difficult() != D_EXTRA)
	{
		SetTips(objParent, 0, 420, 0, TIPS_NORMAL);
	}
	else
	{
		if (GetAreaCommonData(CAREA_SAVE, "EXTRA_BOSS_FIRST", false))
		{
			SetTips(objParent, 0, 420, 0, TIPS_EXTRA);
		}
		else
		{
			SetTips(objParent, 0, 420, 0, TIPS_NORMAL);
		}
	}
	
	//キー状態がリセットされるまで待機
	WaitForResetKeyEx([VK_OK, VK_CANCEL, VK_PAUSE]);
	
	loop
	{
		//キー入力待ち
		let downKey = CheckKey_Menu(8, [VK_UP, VK_DOWN, VK_CANCEL, VK_OK]);

		alternative (downKey)
		case (VK_UP)
		{
			CallSoundPackage(sndTtSelect);
			Menu_AddValue(objParent, "VALUE", -1, countMenu);
		}
		case (VK_DOWN)
		{
			CallSoundPackage(sndTtSelect);
			Menu_AddValue(objParent, "VALUE", 1, countMenu);
		}
		case (VK_CANCEL)
		{
			Obj_SetValue(objParent, "VALUE", 0);
			CallSoundPackage(sndTtCancel);
		}
		case (VK_OK)
		{
			let selectIndex = Obj_GetValueD(objParent, "VALUE", 0);
			Obj_SetValue(objParent, "ACTIVE", false);
			
			let menu_flg = true;
			if (listReverify[selectIndex])
			{
				CallSoundPackage(sndTtDecide);
				menu_flg = TReverify(330, 270);
			}

			if (menu_flg)
			{
				if (listResult[selectIndex] == myRESULT_HELP)
				{
					// ヘルプ
					CallSoundPackage(sndTtDecide);
					SceneManual(-1);
				}
				else
				{
					//　リザルトセット
					SetScriptResult( listResult[selectIndex] );
					
					// BGM再開
					if (listResult[selectIndex] == RESULT_CANCEL) { RestartMusic(); }
					//　効果音
					CallSoundPackage(sndTtDecide);
					
					//　このスクリプトを終了
					loop( 12 ){ yield; }
					CloseScript( GetOwnScriptID() );
					return;
				}
			}
			Obj_SetValue(objParent, "ACTIVE", true);
		}
		loop(3) { yield; }	//適当に固定ディレイ
	}
	Obj_Delete(objParent);
}


