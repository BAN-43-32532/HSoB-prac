//------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------
//　真珠島　霊撃・瑞（これもしかして碧じゃね…？
//------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------

// 初期設定
function InitBlue( v_obj, v_playerNo )
{
	//なし
}

//　凍結付与
task SetIceDamage( v_obj, v_value ){
	// 耐性
	let resistICE = GetEffectResist(v_obj);
	if (resistICE >= 1) { break; }

	let GetICEval = Obj_GetValueD( v_obj, "ICE", 0 );
	if( GetICEval > 0 ){
		Obj_SetValue( v_obj, "ICE", GetICEval + IceAmount*(1-resistICE)*v_value );
		break;
	}
	else{
		Obj_SetValue( v_obj, "ICE", GetICEval + IceAmount*(1-resistICE)*v_value );
	}
	
	//　テクスチャidの取得と凍結シェーダ適用
	let tex		= Obj_GetValueD( v_obj, "IMAGE_ID", -1 );
	let shader	= CreateShaderObject( tex, 2 );
	let g_mask	= imgPlMask03a;
	let frame 	= 0;
	
	//　fxにマスク用テクスチャを渡す
	ObjShader_SetTexture( shader, "g_Texture", g_mask );
	
	//　氷エフェクト描画
	let iceMaxVal = 60;
	let ang = rand(0,1);
	ascent( let i in 0..round(ang+1) ){
		SetIceDamage_Draw( v_obj, ang*360 + i*120, 1.2, 192, iceMaxVal );
	}
	SetIceFog_Draw( v_obj, 0.4, 128 );
	
	//　( iceMaxVal / 3 )発毎に凍結レベル上昇。Lv3で割合ダメージ発動
	let frozenLv = 0;
	while( !Obj_IsDeleted(v_obj) && GetICEval < iceMaxVal ){
		GetICEval = Obj_GetValueD( v_obj, "ICE", 0 );
		if( GetICEval > 0 && frozenLv/3 > GetICEval/iceMaxVal ){
			//　凍結レベル + 1
			frozenLv++;
			Obj_SetValue( v_obj, "ICE", GetICEval + 1 );
		}
		//　a値反映レベル(0〜1)
		ObjShader_SetFloat( shader, "m_frame", frame );
		ObjShader_SetVector( shader, "m_xyzw", (1/255)*255, (1/255)*255, (1/255)*255, (1/255)*0 );
		ObjShader_SetFloat( shader, "m_param", 1 );
		ObjShader_SetFloat( shader, "m_alpha", (1/3)*frozenLv );
		frame++;
		yield;
	}
	
	if( !Obj_IsDeleted(v_obj) ){
		// 時間停止
		let stop_frame = trunc( 120 * (1-GetTimeResist(v_obj)) );
		if (stop_frame > 0)
		{
			SetTimeStopFlagObj(v_obj, stop_frame);
			// 効果音
			ObjSound_Play( Player_SE[2] );
		}
		//　n%割合ダメージ
		let enmLife = ObjEnemy_GetInfo( v_obj, INFO_LIFE );
		let dmgRate = ObjEnemy_GetInfo( v_obj, INFO_DAMAGE_RATE_SHOT );
		let dmg = enmLife*IceDamage/100 * GetAddDamageRate();
		if (dmgRate <= 0) {
			dmg = 0;
		} else {
			let dmgReal = dmg / (dmgRate/100);
			dmgReal = min(dmgReal, IceDamageLimit);
			dmg = dmgReal * (dmgRate/100);
		}
		if (enmLife > 99999) { dmg = 0; }	// 実質無敵キャラには割合ダメージ無効
		ObjEnemy_AddLife( v_obj, -dmg );
	}
	
	//　終了処理
	let move1 = 0;
	let moveA = 0;
	while( !Obj_IsDeleted(v_obj) && move1 < 1 ){
		move1 = 1 * sin( moveA );
		ObjShader_SetFloat( shader, "m_frame", frame );
		ObjShader_SetVector( shader, "m_xyzw", (1/255)*255, (1/255)*255, (1/255)*255, (1/255)*0 );
		ObjShader_SetFloat( shader, "m_param", 1 );
		ObjShader_SetFloat( shader, "m_alpha", 1 - move1 );
		moveA += 1;
		frame++;
		yield;
	}
	
	//　シェーダ適用を解除　オブジェクト削除
	ObjShader_ResetShader( tex );
	Obj_Delete( shader );
	Obj_SetValue( v_obj, "ICE", 0 );
}

//　凍結エフェクト描画
// ダメージ判定も担っているので処理省略しちゃ駄目！！！
task SetIceDamage_Draw( v_obj, v_angle, v_scale, v_alpha, v_iceMaxVal ){
	
	let obj		= ObjPrim_Create(OBJ_SPRITE_2D);
	let frame	= 0;
	let move1	= 0;
	let moveA	= 0;
	let seed	= rand(0,1);	// 残留ダメージ発生座標に影響する為、randEffectにしない事！
	let _rect	= 0;
	let pos		= [ 0, 0 ];
	
	//　fxにマスク用テクスチャを渡す
	let shader	= CreateShaderObject( obj, 2 );
	let g_mask	= imgPlMask03a;
	ObjShader_SetTexture( shader, "g_Texture", g_mask );
	
	ObjPrim_SetTexture( obj, imgPlAura01c );
	Obj_SetRenderPriorityI( obj, 49 );
	ObjRender_SetBlendType( obj, BLEND_ALPHA );
	ObjSprite2D_SetSourceRect( obj, 0, 0, 64, 64 );
	ObjSprite2D_SetDestCenter( obj );
	ObjRender_SetAlpha( obj, 128 );
	
	//　凍結レベル
	let GetICEval = Obj_GetValueD( v_obj, "ICE", 0 );
	
	while( !Obj_IsDeleted(v_obj) && GetICEval < v_iceMaxVal ){
		GetICEval = Obj_GetValueD( v_obj, "ICE", 0 );
		move1 = 1 * sin( moveA );
		
		pos = [
			ObjMove_GetX(v_obj) + seed*16 * cos( v_angle ),
			ObjMove_GetY(v_obj) + seed*16 * sin( v_angle ),
		];
		let sca = [
			v_scale*2 - move1*v_scale,
			v_scale*2 - move1*v_scale,
		];
		if( GetICEval > 0 && GetICEval < v_iceMaxVal/3*1 ){ _rect = 0; }
		else if( GetICEval >= v_iceMaxVal/3*1 && GetICEval < v_iceMaxVal/3*2 ){ _rect = 1; }
		else if( GetICEval >= v_iceMaxVal/3*2 && GetICEval < v_iceMaxVal/3*3 ){ _rect = 2; }
		else{ _rect = 3; }
		
		
		ObjRender_SetPosition( obj, pos[0], pos[1], 0 );
		ObjRender_SetScaleXYZ( obj, sca[0]/1.4, sca[1], 0 );
		ObjSprite2D_SetSourceRect( obj, 0 + 64*_rect, 0, 64 + 64*_rect, 64 );
		
		//　a値反映レベル(0〜1)
		ObjShader_SetFloat( shader, "m_frame", frame );
		ObjShader_SetVector( shader, "m_xyzw", (1/255)*255, (1/255)*255, (1/255)*255, (1/255)*0 );
		ObjShader_SetFloat( shader, "m_param", move1 * ( (1/255) * v_alpha ) );
		ObjShader_SetFloat( shader, "m_alpha", 0.5 );
		
		if( move1 < 1 ){ moveA += 10; }
		frame++;
		
		yield;
	}
	
	//　凍結残留ダメージ
	let sht = CreateIceDamage( pos[0], pos[1], (_rect+1) * RemainDamage * GetAddDamageRate(), (_rect+1)*10 );
	
	move1 = 0;
	moveA = 0;
	while( move1 < 1 ){
		move1 = 1 * sin( moveA );
		
		let sca = [
			v_scale - move1*v_scale,
			v_scale - move1*v_scale,
		];
		ObjRender_SetScaleXYZ( obj, sca[0]/1.4, sca[1], 0 );
		ObjSprite2D_SetSourceRect( obj, 0 + 64*_rect, 0, 64 + 64*_rect, 64 );
		
		//　a値反映レベル(0〜1)
		ObjShader_SetFloat( shader, "m_frame", frame );
		ObjShader_SetVector( shader, "m_xyzw", (1/255)*255, (1/255)*255, (1/255)*255, (1/255)*0 );
		ObjShader_SetFloat( shader, "m_param", ( (1/255) * v_alpha ) - move1*( (1/255) * v_alpha ) );
		ObjShader_SetFloat( shader, "m_alpha", 0.5 );
		
		moveA += 0.5;
		frame++;
		
		yield;
	}
	ObjShader_ResetShader( obj );
	Obj_Delete( shader );
	Obj_Delete( obj );
	Obj_Delete( sht );
}

//　冷気エフェクト描画
task SetIceFog_Draw( v_obj, v_scale, v_alpha ){
	
	if (IsDrawEffect() < 2) { return; }
	
	let obj		= ObjPrim_Create(OBJ_SPRITE_2D);
	let frame	= 0;
	let move1	= 0;
	let moveA	= 0;
	let seed	= randEffect(0,1);
	let _rect	= 0;
	
	//　fxにマスク用テクスチャを渡す
	let shader	= CreateShaderObject( obj, 3 );
	let g_mask	= imgPlMask04a;
	ObjShader_SetTexture( shader, "g_Texture", g_mask );
	
	ObjPrim_SetTexture( obj, imgPlAura01d );
	Obj_SetRenderPriorityI( obj, 49 );
	ObjRender_SetBlendType( obj, BLEND_ADD_ARGB );
	ObjSprite2D_SetSourceRect( obj, 0, 0, 256, 256 );
	ObjSprite2D_SetDestCenter( obj );
	ObjRender_SetScaleXYZ( obj, v_scale, v_scale, 0 );
	ObjRender_SetColor( obj, 128, 192, 255 );
	
	while( !Obj_IsDeleted(v_obj) ){
		move1 = 1 * sin( moveA );
		
		let pos = [
			ObjMove_GetX(v_obj),
			ObjMove_GetY(v_obj),
		];
		ObjRender_SetPosition( obj, pos[0], pos[1], 0 );
		ObjRender_SetAlpha( obj, (move1 * v_alpha) / 4 );
		
		//　a値反映レベル(0〜1)
		ObjShader_SetFloat( shader, "m_frame", seed + frame );
		ObjShader_SetVector( shader, "m_xyzw", (1/255)*128, (1/255)*192, (1/255)*255, (1/255)*0 );
		ObjShader_SetFloat( shader, "m_param", move1 * ( (1/255) * v_alpha ) );
		ObjShader_SetFloat( shader, "m_alpha", 1 );
		
		if( move1 < 1 ){ moveA += 10; }
		frame++;
		
		yield;
	}
	
	move1 = 0;
	moveA = 0;
	while( move1 < 1 ){
		move1 = 1 * sin( moveA );
		
		let sca = [
			v_scale + move1*v_scale,
			v_scale + move1*v_scale,
		];
		ObjRender_SetScaleXYZ( obj, sca[0], sca[1], 0 );
		ObjRender_SetAlpha( obj, (255 - move1*255) / 4 );
		
		//　a値反映レベル(0〜1)
		ObjShader_SetFloat( shader, "m_frame", seed + frame );
		ObjShader_SetVector( shader, "m_xyzw", (1/255)*128, (1/255)*192, (1/255)*255, (1/255)*0 );
		ObjShader_SetFloat( shader, "m_param", ( (1/255) * v_alpha ) - move1*( (1/255) * v_alpha ) );
		ObjShader_SetFloat( shader, "m_alpha", 1 );
		
		moveA += 0.5;
		frame++;
		
		yield;
	}
	
	ObjShader_ResetShader( v_obj );
	Obj_Delete( shader );
	Obj_Delete( obj );
}

//　凍結残留ダメージ
function CreateIceDamage( v_x, v_y, v_damage, v_col ){
	let obj = CreateShotA1( v_x, v_y, 0, 0, 0, 0 );
	ObjShot_SetDamage( obj, v_damage );
	ObjShot_SetPenetration( obj, 128 );
	PLShotIntersection( obj, v_col );
	return obj;
}