//------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------
//　オプション作成　輝夜用
//------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------

//　オプション作成
function CreateOptionPl04( v_distNormal, v_distSlow, v_angleNormal, v_angleSlow, v_optCount ){
	let obj = [
		ObjPrim_Create(OBJ_SPRITE_2D),
		ObjPrim_Create(OBJ_SPRITE_2D),
	];
	let blend = [
		BLEND_ALPHA,
		BLEND_ADD_ARGB,
	];
	let color = [
		//　赤
		[
			[ 255, 255, 255, 128 ],
			[ 255, 128, 128, 255 ],
		],
		//　紫
		[
			[ 255, 255, 255, 128 ],
			[ 255, 128, 255, 255 ],
		],
		//　青
		[
			[ 255, 255, 255, 128 ],
			[ 128, 128, 255, 255 ],
		],
		//　緑
		[
			[ 255, 255, 255, 128 ],
			[ 128, 255, 128, 255 ],
		],
		//　黄
		[
			[ 255, 255, 255, 128 ],
			[ 255, 255, 128, 255 ],
		],
	];
	
	// 虹装備用
	let rainbow_color = [[ 255, 255, 255, 128 ], [ 255, 255, 255, 255 ]];
	if (IsRainbow())
	{
		alternative(GetPlayerWeapon())
		case(WEAPON_RED)	{ rainbow_color = [[255,255,255,128], [255,128,128,255]]; }
		case(WEAPON_PURPLE)	{ rainbow_color = [[255,255,255,128], [255,128,255,255]]; }
		case(WEAPON_BLUE)	{ rainbow_color = [[255,255,255,128], [128,128,255,255]]; }
		case(WEAPON_SKY)	{ rainbow_color = [[255,255,255,128], [128,255,255,255]]; }
		case(WEAPON_GREEN)	{ rainbow_color = [[255,255,255,128], [128,255,128,255]]; }
		case(WEAPON_YELLOW)	{ rainbow_color = [[255,255,255,128], [255,255,128,255]]; }
		case(WEAPON_ORANGE)	{ rainbow_color = [[255,255,255,128], [255,192,128,255]]; }
	}
	
	ascent( let i in 0..length(obj) ){
		OptionUpdate( obj[i], v_distNormal, v_distSlow, v_angleNormal, v_angleSlow );
		if (IsRainbow()) { OptionDrawSphere( obj[i], blend[i], 0.6 + i*0.2, rainbow_color[i] ); }
		else { OptionDrawSphere( obj[i], blend[i], 0.6 + i*0.2, color[v_optCount][i] ); }
		SetVisible( obj[i] );
	}
	
	SetAlpha( obj[1], [ 128, 64 ], 8 );
	
	return obj[0];
}

//　皇用オプション作成
function CreateYellowOptionPl04( v_distNormal, v_distSlow, v_angleNormal, v_angleSlow, v_optCount ){
	let obj = [
		ObjPrim_Create(OBJ_SPRITE_2D),
		ObjPrim_Create(OBJ_SPRITE_2D),
	];
	let blend = [
		BLEND_SUBTRACT,
		BLEND_ADD_ARGB,
	];
	let color = [
		//　赤
		[
			[ 255, 255, 255, 128 ],
			[ 255, 128, 128, 255 ],
		],
		//　紫
		[
			[ 255, 255, 255, 128 ],
			[ 255, 128, 255, 255 ],
		],
		//　青
		[
			[ 255, 255, 255, 128 ],
			[ 128, 128, 255, 255 ],
		],
		//　緑
		[
			[ 255, 255, 255, 128 ],
			[ 128, 255, 128, 255 ],
		],
		//　黄
		[
			[ 255, 255, 255, 128 ],
			[ 255, 255, 128, 255 ],
		],
	];
	
	ascent( let i in 0..length(obj) ){
		OptionUpdate( obj[i], v_distNormal, v_distSlow, v_angleNormal, v_angleSlow );
		OptionDrawSphere( obj[i], blend[i], 0.6 + i*0.2, color[v_optCount][i] );
		SetVisible( obj[i] );
	}
	
	SetAlpha( obj[1], [ 128, 64 ], 8 );
	
	return obj[0];
}

//　素用オプション作成
function CreateWhiteOptionPl04( v_distNormal, v_distSlow, v_angleNormal, v_angleSlow, v_optCount ){
	let obj = [
		ObjPrim_Create(OBJ_SPRITE_2D),
		ObjPrim_Create(OBJ_SPRITE_2D),
	];
	let blend = [
		BLEND_SUBTRACT,
		BLEND_ADD_ARGB,
	];
	let color = [
		//　赤
		[
			[ 255, 255, 255, 128 ],
			[ 255, 128, 128, 255 ],
		],
		//　紫
		[
			[ 255, 255, 255, 128 ],
			[ 255, 128, 255, 255 ],
		],
		//　青
		[
			[ 255, 255, 255, 128 ],
			[ 128, 128, 255, 255 ],
		],
		//　緑
		[
			[ 255, 255, 255, 128 ],
			[ 128, 255, 128, 255 ],
		],
		//　黄
		[
			[ 255, 255, 255, 128 ],
			[ 255, 255, 255, 255 ],
		],
	];
	
	ascent( let i in 0..length(obj) ){
		OptionUpdate( obj[i], v_distNormal, v_distSlow, v_angleNormal, v_angleSlow );
		OptionDrawSphere( obj[i], blend[i], 0.6 + i*0.2, color[v_optCount][i] );
		SetVisible( obj[i] );
	}
	
	SetAlpha( obj[1], [ 128, 64 ], 8 );
	
	return obj[0];
}