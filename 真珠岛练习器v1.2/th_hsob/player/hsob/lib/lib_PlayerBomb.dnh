//------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------
//　ボム関連
//------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------

//　Zボム関連
#include "./lib_ZBombEffect.dnh"

// 霊撃レベル（＝所持ボム数）
function GetSpellLevel()
{
	return(trunc(GetPlayerSpell()));
}
// 霊撃範囲取得
function GetSpellRange()
{
	let lv = GetSpellLevel;
	let wp = GetPlayerWeapon();
	
	let wp_rate = 1;
	alternative(wp)
	case(WEAPON_PURPLE)	{ wp_rate = 5; }
	case(WEAPON_SKY)	{ wp_rate = 1.5; }
	case(WEAPON_ORANGE)	{ wp_rate = 0.25; }
	case(WEAPON_WHITE)	{ wp_rate = 1.5; }
	others			{ wp_rate = 1; }

	let lv_rate = 1;
	if (lv <= 1)		{ lv_rate = 0.33; }	/* Lv1 */
	else if (lv <= 2)	{ lv_rate = 0.66; }	/* Lv2 */
	else if (lv <= 3)	{ lv_rate = 1; }	/* Lv3：この辺り基準にする */
	else if (lv <= 4)	{ lv_rate = 1.33; }	/* Lv4 */
	else if (lv <= 5)	{ lv_rate = 1.66; }	/* Lv5 */
	else if (lv <= 6)	{ lv_rate = 2; }	/* Lv6 */
	else if (lv <= 7)	{ lv_rate = 2.33; }	/* Lv7 */
	else			{ lv_rate = 2.66; }	/* Lv8 */
	
	let rate = (wp_rate * lv_rate) ^ 0.5;
	
	let range = ceil(128*rate);
	if (range > 384) { range = 384; }
	if (range < 32) { range = 32; }
	
	// 白黒は固定
	if (wp == WEAPON_WHITE) { range = 180; }
	if (wp == WEAPON_BLACK) { range = 108; }

	return(range);
}
// 霊撃持続時間
function GetSpellFrame()
{
	let lv = GetSpellLevel;
	let wp = GetPlayerWeapon();
	
	let wp_rate = 1;
	alternative(wp)
	case(WEAPON_PURPLE)	{ wp_rate = 0.25; }
	case(WEAPON_SKY)	{ wp_rate = 2; }
	others			{ wp_rate = 1; }

	let lv_rate = 1;
	if (lv <= 1)		{ lv_rate = 0.33; }	/* Lv1 */
	else if (lv <= 2)	{ lv_rate = 0.66; }	/* Lv2 */
	else if (lv <= 3)	{ lv_rate = 1; }	/* Lv3：この辺り基準にする */
	else if (lv <= 4)	{ lv_rate = 1.2; }	/* Lv4 */
	else if (lv <= 5)	{ lv_rate = 1.4; }	/* Lv5 */
	else if (lv <= 6)	{ lv_rate = 1.6; }	/* Lv6 */
	else if (lv <= 7)	{ lv_rate = 1.8; }	/* Lv7 */
	else			{ lv_rate = 2; }	/* Lv8 */
	
	let rate = (wp_rate * lv_rate) ^ 0.5;
	
	let timer = ceil(120*rate);
	if (timer > 240) { timer = 240; }
	if (timer < 45) { timer = 45; }
	
	// 白黒は固定
	if (wp == WEAPON_WHITE) { timer = 180; }
	if (wp == WEAPON_BLACK) { timer = 60; }

	return(timer);
}
// 霊撃威力
function GetSpellDamage()
{
	let lv = GetSpellLevel;
	let wp = GetPlayerWeapon();
	
	let wp_rate = 1;
	alternative(wp)
	case(WEAPON_PURPLE)	{ wp_rate = 3; }
	case(WEAPON_BLUE)	{ wp_rate = 0.5; }
	case(WEAPON_SKY)	{ wp_rate = 0.5; }
	case(WEAPON_ORANGE)	{ wp_rate = 3; }
	case(WEAPON_WHITE)	{ wp_rate = 1.5; }
	others			{ wp_rate = 1; }

	let lv_rate = 1;
	
	let rate = (wp_rate * lv_rate) ^ 0.5;
	
	// 白黒は固定
	if (wp == WEAPON_WHITE) { rate = 2; }
	if (wp == WEAPON_BLACK) { rate = 1; }

	let dmg = SpellDamage*rate;
	return(dmg);
}

// 霊撃の追加効果チェック
function GetSpellEffect( effect_type )
{
	alternative( effect_type )
	case( "BOMB_FOLLOW" )
	{
		return(GetPlayerWeapon() == WEAPON_GREEN);
	}
	case( "BOMB_EFFECT" )
	{
		return(GetAttribute(GetPlayerWeapon()));
	}
	case( "BOMB_BARRIER" )
	{
		let timer = 0;
		if (GetPlayerWeapon() == WEAPON_PURPLE)
		{
			alternative(GetSpellLevel())
			case(1) { timer = 60*6; }
			case(2) { timer = 60*8; }
			case(3) { timer = 60*10; }
			case(4) { timer = 60*12; }
			case(5) { timer = 60*14; }
			case(6) { timer = 60*16; }
			case(7) { timer = 60*18; }
			case(8) { timer = 60*20; }
			others { timer = 1; }
			WriteLog(timer);
		}
		return(timer);
	}
	return(-1);
}

//------------------------------------------------------------------------------------------------------------
//　ボム実処理
//------------------------------------------------------------------------------------------------------------
task PlayerBomb()
{
	if (IsRainbow())
	{
		// 虹装備の時は禁呪返しが通常ボムになる
		alternative(PlayerNumber)
		case(0) { Player01ZBomb(); }
		case(1) { Player02ZBomb(); }
		case(2) { Player03ZBomb(); }
		case(3) { Player04ZBomb(); }

		let v_frame = 300;
		let objManage = GetSpellManageObject();
		loop( v_frame )
		{
			if (!IsPermitPlayerSpell()) { break; }
			yield;
		}
		Obj_Delete(objManage);
	}
	else
	{
		PlayerBomb_Reigeki();
	}
}

task PlayerBomb_Reigeki()
{
	let move1	= 0;
	let moveA	= 0;

	let objManage = GetSpellManageObject();
	let objSpell = ObjSpell_Create();
	
	// 追加効果用のダミー（なんでかobjSpellだとエラーになる）
	let objDummyShot = CreateShotA1( 0, 0, 0, 0, 0, 0 );
	ObjShot_SetDamage(objDummyShot, 0);
	ObjShot_SetSpellFactor(objDummyShot, true);
	ObjShot_SetPenetration(objDummyShot, 99999);
	ObjShot_SetAutoDelete(objDummyShot, false);

	let obj = [
		CreatePrimitiveObject(),
		CreatePrimitiveObject(),
		CreatePrimitiveObject(),
	];
	let path = [
		imgPlBomb01a,
		imgPlBomb01b,
	];
	
	// ボム性能関係
	let lv = GetSpellLevel;
	let distance = GetSpellRange();
	let v_frame = GetSpellFrame();
	let dmg = GetSpellDamage();
	let attribute = GetSpellEffect("BOMB_EFFECT");
	let timeBarrier = GetSpellEffect("BOMB_BARRIER");

	let distance_in = distance;
	
	// 移動関係
	let pang = GetPlayerAngle();
	let pos = [ GetPlayerX, GetPlayerY ];
	let speed = 1;
	let angle = 270 + pang;
	let flgFollowPlayer = GetSpellEffect("BOMB_FOLLOW");
	
	//SetPlayerSpell( GetPlayerSpell() - 1 );
	ResetPlayerInvincibility( v_frame+120 );
	ObjSpell_SetDamage( objSpell, dmg );
	ObjSpell_Regist( objSpell );
	
	SetAttributeEx( objDummyShot, attribute, 1, 20 );

	//　wepon選択から
	let color = GetPlayerWeapon();
	let argb;
	let argbBG;
	let btype = [BLEND_ADD_ARGB, BLEND_SUBTRACT, BLEND_SUBTRACT];
	
	alternative( color )
	case( WEAPON_RED ){	//　緋
		argb = [ [ 255, 255, 128, 128 ], [ 255, 255, 255, 255 ] ];
		argbBG = [ [ 255, 255, 255, 255 ], [ 0, 0, 255, 255 ] ];
	}
	case( WEAPON_PURPLE ){	//　紫
		argb = [ [ 255, 255, 255, 128 ], [ 128, 255, 255, 255 ] ];
		argbBG = [ [ 128, 128, 255, 128 ], [ 0, 0, 255, 0 ] ];
		distance_in *= 0.8;
	}
	case( WEAPON_BLUE ){	//　碧
		argb = [ [ 255, 128, 128, 255 ], [ 255, 255, 255, 255 ] ];
		argbBG = [ [ 255, 255, 255, 255 ], [ 0, 255, 255, 0 ] ];
	}
	case( WEAPON_SKY ){	//　瑞
		argb = [ [ 255, 128, 255, 255 ], [ 255, 255, 255, 255 ] ];
		argbBG = [ [ 255, 255, 255, 255 ], [ 0, 255, 0, 0 ] ];
	}
	case( WEAPON_GREEN ){	//　翠
		argb = [ [ 255, 128, 255, 128 ], [ 255, 255, 255, 255 ] ];
		argbBG = [ [ 255, 255, 255, 255 ], [ 0, 255, 0, 255 ] ];
	}
	case( WEAPON_YELLOW ){	//　皇
		argb = [ [ 255, 255, 255, 128 ], [ 255, 255, 255, 255 ] ];
		argbBG = [ [ 255, 255, 255, 255 ], [ 0, 0, 0, 255 ] ];
	}
	case( WEAPON_ORANGE ){	//　朱
		argb = [ [ 255, 255, 192, 128 ], [ 255, 255, 255, 255 ] ];
		argbBG = [ [ 255, 255, 255, 255 ], [ 0, 0, 128, 255 ] ];
	}
	case( WEAPON_WHITE ){	//　白
		argb = [ [ 255, 255, 255, 255 ], [ 255, 128, 128, 128 ] ];
		argbBG = [ [ 255, 255, 255, 255 ], [ 0, 128, 128, 128 ] ];
		btype = [BLEND_ADD_ARGB, BLEND_SUBTRACT, BLEND_ADD_ARGB];
	}
	case( WEAPON_BLACK ){	//　黒
		argb = [ [ 255, 255, 255, 255 ], [ 255, 255, 255, 255 ] ];
		argbBG = [ [ 255, 255, 255, 255 ], [ 0, 128, 128, 128 ] ];
	}
	others {	// とりあえず未対応
		argb = [ [ 255, 255, 255, 255 ], [ 255, 255, 255, 255 ] ];
		argbBG = [ [ 255, 255, 255, 255 ], [ 0, 128, 128, 128 ] ];
	}
	
	ShotDeleteToItem( obj[0], distance, v_frame+30 );
	PlayerBombEffect( obj[0], path[0], [distance_in,distance], 32, 16, v_frame, argb, btype[0], true );
	PlayerBombEffect( obj[1], path[0], [distance_in,distance], 16, 16, v_frame, argb, btype[1], true );
	PlayerBombEffect( obj[2], path[1], [0,distance], 16, 16, v_frame, argbBG, btype[2], true );
	ObjSound_Play( PlayerEnviron_SE[7] );
	
	// 白黒時はアイテム回収
	if (GetItemLegacyMode()) { SetAreaCommonData(CAREA_SYSTEM, "COLLECT_FLG", true ); }
	
	let frame = 0;
	loop( v_frame ){
		
		if (!IsPermitPlayerSpell() || GetAreaCommonData(CAREA_SYSTEM, "ZBOMB_ACTIVE", false)) { break; }

		move1 = 1 * sin( moveA );
		
		if (flgFollowPlayer)
		{
			pos = [ GetPlayerX,
				GetPlayerY ];
		}
		else
		{
			pos = [ pos[0] + speed*cos(angle),
				pos[1] + speed*sin(angle) ];
		}
		
		let tmp_dis = move1 * distance;

		// 霊撃位置を記録
		SetAreaCommonData(CAREA_SYSTEM, "PLAYER_SPELL_POS", pos);
		SetAreaCommonData(CAREA_SYSTEM, "PLAYER_SPELL_SIZE", tmp_dis);
		SetAreaCommonData(CAREA_SYSTEM, "PLAYER_SPELL_LV", lv);

		// 判定用
		ObjSpell_SetIntersectionCircle( objSpell, pos[0], pos[1], tmp_dis );
		ObjMove_SetPosition( objDummyShot, pos[0], pos[1] );
		ObjShot_SetIntersectionCircleA1( objDummyShot, tmp_dis );
//		DeleteShotInCircle( TYPE_SHOT, TYPE_ITEM, pos[0], pos[1], tmp_dis );
		ascent(i in 0 .. 3) { ObjRender_SetPosition( obj[i], pos[0], pos[1], 0); }
		
		if( IsDrawEffect() > 1 && frame%2 == 0 ){
			let angle = randEffect( 0, 360 );
			let spos = [
				pos[0] + distance * cos( angle ),
				pos[1] + distance * sin( angle ),
			];
			let alpha = randEffect( 128, 255 );
			BombParticleToPlayer( obj[0], spos, angle, randEffect(0,32), 0, 0.2, 16, [255,255,255], alpha );
			BombParticleToPlayer( obj[0], spos, angle+180, randEffect(0,64), 0, 0.2, 16, [argb[0][1],argb[0][2],argb[0][3]], alpha );
		}
		if( move1 < 1 ){ moveA += 5; }
		frame++;
		yield;
	}
	// えへくと削除
	ascent(i in 0 .. 3) { Obj_SetValue(obj[i],"DEL",true); }
	// バリア張り
	if (timeBarrier > 0) { PlayerBarrier(timeBarrier); }
	// 初期化
	SetAreaCommonData(CAREA_SYSTEM, "PLAYER_SPELL_SIZE", 0);
	SetAreaCommonData(CAREA_SYSTEM, "PLAYER_SPELL_LV", 0);
	// アイテム回収フラグoff
	if (GetItemLegacyMode()) { SetAreaCommonData(CAREA_SYSTEM, "COLLECT_FLG", false ); }
	
	Obj_Delete( objManage );
	Obj_Delete( objSpell );
	Obj_Delete( objDummyShot );
}


//　円形エフェクト
function CreatePrimitiveObject(){
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	return obj;
}
task PlayerBombEffect( v_obj, v_path, v_distArray, v_wight, v_spin, v_frame, v_argbArray, v_blend, is_spell_effect ){
	let i		= 0;
	let i2		= 1;
	let pc		= 0;
	let move1	= 0;
	let moveA	= 0;
	let move2	= 0;
	let moveB	= 0;
	let frame	= 0;
	let count	= 0;
	
	//　Ｎ角形の定義
	let kaku		= 16;
	//　Ｎ角形＋１＊２が頂点の数になる
	let ver			= ( kaku + 1 ) * 2;
	//　サイズ / 頂点数
	let _rect		= 0;
	//　円の太さ
	let wight		= v_wight;
	//　回転
	let spin		= 0;
	// dist
	let distA		= v_distArray;
	Obj_SetValue(v_obj, "DIST", v_distArray);
	
	ObjPrim_SetTexture( v_obj, v_path );
	Obj_SetRenderPriorityI( v_obj, 31 );
	ObjRender_SetBlendType( v_obj, v_blend );
	ObjPrim_SetPrimitiveType( v_obj, PRIMITIVE_TRIANGLESTRIP );
	ObjPrim_SetVertexCount( v_obj, ver );
	
	while( frame < v_frame || v_frame < 0 && !Obj_GetValueD(v_obj,"DEL",false) && !Obj_IsDeleted(v_obj) ){
		
		if (is_spell_effect && GetAreaCommonData(CAREA_SYSTEM, "ZBOMB_ACTIVE", false)) { break; }
		
		move1 = 1 * sin( moveA );
		move2 = 1 * sin( moveB );
		distA = Obj_GetValueD(v_obj, "DIST", [0,0]);
//		ObjRender_SetPosition( v_obj, pos[0], pos[1], 0 );
		
		loop( kaku + 1 ){
			if( count > 0 && count%2 == 0 ){
				ObjPrim_SetVertexPosition( v_obj, i, move1*(distA[0]-wight/2) * cos(pc+spin), move1*(distA[0]-wight/2) * sin(pc+spin), 0 );
				ObjPrim_SetVertexPosition( v_obj, i2, move1*(distA[1]+wight/2) * cos(pc+spin), move1*(distA[1]+wight/2) * sin(pc+spin), 0 );
			}
			else{
				ObjPrim_SetVertexPosition( v_obj, i, move2*(distA[0]-wight/2) * cos(pc+spin), move2*(distA[0]-wight/2) * sin(pc+spin), 0 );
				ObjPrim_SetVertexPosition( v_obj, i2, move2*(distA[1]+wight/2) * cos(pc+spin), move2*(distA[1]+wight/2) * sin(pc+spin), 0 );
			}
			ObjPrim_SetVertexAlpha( v_obj, i, move2 * v_argbArray[0][0] );
			ObjPrim_SetVertexAlpha( v_obj, i2, move2 * v_argbArray[1][0] );
			ObjPrim_SetVertexColor( v_obj, i, v_argbArray[0][1], v_argbArray[0][2], v_argbArray[0][3] );
			ObjPrim_SetVertexColor( v_obj, i2, v_argbArray[1][1], v_argbArray[1][2], v_argbArray[1][3] );
			ObjPrim_SetVertexUVT( v_obj, i, 0 + _rect, 0 );
			ObjPrim_SetVertexUVT( v_obj, i2, 0 + _rect, 32 );
			pc		+= 360/kaku;
			i		+= 2;
			i2		+= 2;
			_rect	+= 512/kaku;
			count++;
		}
		pc		= 0;
		i		= 0;
		i2		= 1;
		_rect	= 0;
		count	= 0;
		
		spin += v_spin;
		if( move1 < 1 ){ moveA += 5; }
		if( move2 < 1 ){ moveB += 3; }
		frame++;
		
		yield;
	}
	move1 = 0;
	moveA = 0;
	move2 = 0;
	moveB = 0;
	while( (move1 < 1 || move2 < 1) && !Obj_IsDeleted(v_obj) ){
		move1 = 1 * sin( moveA );
		move2 = 1 * sin( moveB );
		distA = Obj_GetValueD(v_obj, "DIST", [0,0]);
//		ObjRender_SetPosition( v_obj, pos[0], pos[1], 0 );
		ObjRender_SetScaleXYZ( v_obj, 1 - move2, 1 - move2, 0 );
		
		let dist;
		loop( kaku + 1 ){
			if( count > 0 && count%2 == 0 ){
				dist = move1*64;
				ObjPrim_SetVertexPosition( v_obj, i, (distA[0]-wight/2) * cos(pc+spin), (distA[0]-wight/2) * sin(pc+spin), 0 );
				ObjPrim_SetVertexPosition( v_obj, i2, (distA[1]+wight/2+dist) * cos(pc+spin), (distA[1]+wight/2+dist) * sin(pc+spin), 0 );
			}
			else{
				dist = move2*64;
				ObjPrim_SetVertexPosition( v_obj, i, (distA[0]-wight/2) * cos(pc+spin), (distA[0]-wight/2) * sin(pc+spin), 0 );
				ObjPrim_SetVertexPosition( v_obj, i2, (distA[1]+wight/2+dist) * cos(pc+spin), (distA[1]+wight/2+dist) * sin(pc+spin), 0 );
			}
			ObjPrim_SetVertexAlpha( v_obj, i, v_argbArray[0][0] - move1 * v_argbArray[0][0] );
			ObjPrim_SetVertexAlpha( v_obj, i2, v_argbArray[1][0] - move1 * v_argbArray[1][0] );
			ObjPrim_SetVertexColor( v_obj, i, v_argbArray[0][1], v_argbArray[0][2], v_argbArray[0][3] );
			ObjPrim_SetVertexColor( v_obj, i2, v_argbArray[1][1], v_argbArray[1][2], v_argbArray[1][3] );
			ObjPrim_SetVertexUVT( v_obj, i, 0 + _rect, 0 );
			ObjPrim_SetVertexUVT( v_obj, i2, 0 + _rect, 32 );
			pc		+= 360/kaku;
			i		+= 2;
			i2		+= 2;
			_rect	= _rect + 16;
			count++;
		}
		pc		= 0;
		i		= 0;
		i2		= 1;
		_rect	= 0;
		count	= 0;
		
		spin += v_spin;
		if( move1 < 1 ){ moveA += 3; }
		if( move2 < 1 ){ moveB += 1; }
		frame++;
		
		yield;
	}
	Obj_Delete( v_obj );
}

//　回パーティクル
task BombParticleToPlayer( v_obj, v_pos, v_angle, v_disD, v_speed, v_acc, v_mx, v_rgb_array, v_alpha ){
	let obj		= ObjPrim_Create(OBJ_SPRITE_2D);
	let gp		= [ v_pos[0], v_pos[1] ];
	let path	= imgPlParticle01a;
	let dis		= 0;
	let move1	= 0;
	let moveA	= 0;
	let frame	= 0;
	let sca		= randEffect( 0.05, 0.15 );
	let spin	= randEffect( 0, 360 );
	let spinp	= randEffect( -16, 16 );
	let count	= 0;
	let actr	= 0;
	let anime	= 0;
	
	while( spinp == 0 ){
		spinp = randEffect( -8, 8 );
	}
	
	ObjRender_SetBlendType( obj, BLEND_ADD_ARGB );
	ObjPrim_SetTexture( obj, path );
	Obj_SetRenderPriorityI( obj, 32 );
	ObjRender_SetColor( obj, v_rgb_array[0], v_rgb_array[1], v_rgb_array[2] );
	ObjSprite2D_SetSourceRect( obj, 0, 0, 128, 128 );
	ObjSprite2D_SetDestCenter( obj );
	
	//　自機からの距離
	let pl_dis	= GetObjectDistance( GetPlayerObjectID(), obj );
	
	while( !Obj_IsDeleted(obj) && move1 < 1 ){
		move1	= 1 * sin( moveA );
		
		ObjRender_SetPosition( obj, gp[0] + move1*v_disD * cos(v_angle), gp[1] + move1*v_disD * sin(v_angle), 0 );
		ObjRender_SetAngleXYZ( obj, 0, 0, spin + spinp );
		ObjRender_SetScaleXYZ( obj, sca*2 - move1*sca, sca*2 - move1*sca, 0 );
		ObjSprite2D_SetSourceRect( obj, 0 + anime*128, 0, 128 + anime*128, 128 );
		ObjRender_SetAlpha( obj, move1*v_alpha );
		
		spin += spinp;
		if( move1 < 1 ){ moveA += 3; }
		if( actr > 0 && actr%4 == 0 && anime < 7 ){ anime++; }
		actr++;
		
		yield;
	}
	move1 = 0;
	moveA = 0;
	/*
	while( !Obj_IsDeleted(obj) && pl_dis > 16 ){
		pl_dis	= GetObjectDistance( GetPlayerObjectID(), obj );
		v_angle	= atan2( GetPlayerY() - ObjRender_GetY(obj), GetPlayerX() - ObjRender_GetX(obj) );
		move1	= 1 * sin( moveA );
		
		ObjRender_SetPosition( obj, ObjRender_GetX(obj) + dis * cos(v_angle), ObjRender_GetY(obj) + dis * sin(v_angle), 0 );
		ObjRender_SetAngleXYZ( obj, 0, 0, spin + spinp );
		ObjSprite2D_SetSourceRect( obj, 0 + anime*32, 0, 32 + anime*32, 32 );
		ObjRender_SetAlpha( obj, pl_dis*8 );
		
		dis = 0;
		
		spin += spinp;
		dis += v_speed;
		if( v_speed < v_mx ){ v_speed += v_acc; }
		if( move1 < 1 ){ moveA += 10; }
		if( actr > 0 && actr%4 == 0 && anime < 7 ){ anime++; }
		count++;
		actr++;
		
		yield;
	}
	*/
	while( !Obj_IsDeleted(obj) && move1 < 1 ){
		move1	= 1 * sin( moveA );
		ObjRender_SetAngleXYZ( obj, 0, 0, spin + spinp );
		ObjSprite2D_SetSourceRect( obj, 0 + anime*128, 0, 128 + anime*128, 128 );
		ObjRender_SetAlpha( obj, v_alpha - move1*v_alpha );
		spin += spinp;
		if( move1 < 1 ){ moveA += 5; }
		if( actr > 0 && actr%4 == 0 && anime < 7 ){ anime++; }
		actr++;
		yield;
	}
	Obj_Delete( obj );
}

// ----------------------------------------
// バーリアーｗｗｗｗｗｗ
// ----------------------------------------
task PlayerBarrier(v_frame)
{
	let obj = [
		CreatePrimitiveObject(),
		CreatePrimitiveObject(),
	];
	let path = imgPlBomb01a;
	let dist = 128;
	
	PlayerBombEffect( obj[0], path, [dist/3,dist], 32, 2, v_frame+999999, [ [ 160, 255, 255, 255 ], [ 0, 255, 0, 255 ] ], BLEND_ADD_ARGB, false );
	PlayerBombEffect( obj[1], path, [dist/3,dist], 32, -2, v_frame+999999, [ [ 96, 255, 255, 255 ], [ 0, 0, 255, 0 ] ], BLEND_SUBTRACT, false );
	
	let t = v_frame;
	SetAreaCommonData(CAREA_SYSTEM, "PLAYER_BARRIER", t);

	while(!Obj_IsDeleted(obj[0]) && t > 0)
	{
		let d = dist*(0.25 + t/1200*1);
		ascent(i in 0 .. 2)
		{
			Obj_SetValue(obj[i], "DIST", [d/3,d]);
			ObjRender_SetPosition(obj[i], GetPlayerX, GetPlayerY, 0);
		}
		if (t >= 0)
		{
			// ヘイキダモーンｗｗｗｗｗ
			if (GetAreaCommonData(CAREA_SYSTEM, "PLAYER_BARRIER", 0) <= 0)
			{
				ascent(i in 0 .. 2) { Obj_SetValue(obj[i], "DEL", true); }
				break;
			}
			SetAreaCommonData(CAREA_SYSTEM, "PLAYER_BARRIER", t);
		}
		if (IsPermitPlayerShot)
		{
			t--;
		}
		if (ObjEnemyBossScene_GetInfo(GetEnemyBossSceneObjectID(), INFO_IS_LAST_SPELL))
		{
			// ラスワ中は強制終了（どうせこの後使わないしいいでしょ！）
			break;
		}
		yield;
	}
	if (t <= 0)
	{
		ObjSound_Play( PlayerEnviron_SE[4] );
	}
	SetAreaCommonData(CAREA_SYSTEM, "PLAYER_BARRIER", 0);
	ascent(i in 0 .. 2) { Obj_SetValue(obj[i],"DEL",true); }
}

task BarrierBomb(){

	let move1	= 0;
	let moveA	= 0;
	let dmg = GetSpellDamage() / 6;

	let objManage = GetSpellManageObject();
	ResetPlayerInvincibility( 60 );
	SetAreaCommonData(CAREA_SYSTEM, "PLAYER_BARRIER", 0);
	ObjSound_Play( PlayerEnviron_SE[7] );

	let objSpell = ObjSpell_Create();
	ObjSpell_SetDamage( objSpell, dmg );
	ObjSpell_Regist( objSpell );

	let path = [
		imgPlBomb01a,
		imgPlBomb01b,
	];
	let obj = [
		CreatePrimitiveObject(),
		CreatePrimitiveObject(),
	];
	
	let dist = 256;
	PlayerBombEffect( obj[0], path[1], [0,dist], 32, 16, 30, [ [ 96, 255, 255, 255 ], [ 0, 0, 255, 0 ] ], BLEND_SUBTRACT, false );
	PlayerBombEffect( obj[1], path[0], [dist/4,dist], 32, 16, 30, [ [ 255, 255, 255, 255 ], [ 128, 255, 0, 255 ] ], BLEND_ADD_ARGB, false );
	ShotDeleteToItem( obj[0], dist, 30 );
	ascent(i in 0 .. 2) { ObjRender_SetPosition(obj[i], GetPlayerX, GetPlayerY, 0); }

	loop(30)
	{
		if (!IsPermitPlayerSpell() || GetAreaCommonData(CAREA_SYSTEM, "ZBOMB_ACTIVE", false)) { break; }

		move1 = 1 * sin( moveA );
		let tmp_dis = move1 * dist;

		ObjSpell_SetIntersectionCircle( objSpell, ObjRender_GetX(obj[0]), ObjRender_GetY(obj[0]), tmp_dis );
//		DeleteShotInCircle( TYPE_SHOT, TYPE_ITEM, ObjRender_GetX(obj[0]), ObjRender_GetY(obj[0]), tmp_dis );

		if( move1 < 1 ){ moveA += 5; }
		yield;
	}
	ascent(i in 0 .. 2) { Obj_SetValue(obj[i],"DEL",true); }
	Obj_Delete( objSpell );
	Obj_Delete( objManage );
}


//　アイテム化弾消し
task ShotDeleteToItem( v_obj, v_distance, v_frame ){
	let move1 = 0;
	let moveA = 0;
	let frame = 0;
	while( !Obj_IsDeleted(v_obj) && frame < v_frame ){
		move1 = 1 * sin( moveA );
		DeleteShotInCircle( TYPE_SHOT, TYPE_ITEM, ObjRender_GetX(v_obj), ObjRender_GetY(v_obj), move1*v_distance );
		if( move1 < 1 ){ moveA += 5; }
		frame++;
		yield;
	}
}
