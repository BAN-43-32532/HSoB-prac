// MUSIC

#include "./lib/MusicData.dnh"
#include "./lib/lib_Common.dnh"
#include "../lib/lib_ChapterSkip.dnh"

let objMusic = -1;
let objMusic2 = -1;
let objOldMusic = -1;

@Initialize
{
	SetAreaCommonData(CAREA_TITLE, "SCRIPT_MUSIC", GetOwnScriptID());	//IDを記録
	SetAutoDeleteObject(true);
	T_MainTask();
}

@MainLoop { yield; }

@Finalize { }

function ResetMusicLoop(musicnum,musicid){

}

// 監視タスク
task T_MainTask()
{
	let flgStop = false;
	let musicID = -1;
	let musicID2 = -1;
	
	loop
	{
		if (musicID != GetAreaCommonData(CAREA_TITLE, "Music_ID", -1))
		{
			musicID = GetAreaCommonData(CAREA_TITLE, "Music_ID", -1);
			let intFadeout = GetAreaCommonData(CAREA_TITLE, "Music_Fadeout", -1);
			let intDelay = GetAreaCommonData(CAREA_TITLE, "Music_Delay", -1);
			
			Package_ChangeMusic(musicID, intFadeout, intDelay);
		}
		if (musicID2 != GetAreaCommonData(CAREA_TITLE, "Music_ID2", -1))
		{
			musicID2 = GetAreaCommonData(CAREA_TITLE, "Music_ID2", -1);
			let intFadeout = GetAreaCommonData(CAREA_TITLE, "Music_Fadeout", -1);
			let intDelay = GetAreaCommonData(CAREA_TITLE, "Music_Delay", -1);

			Package_PlaySubMusic( musicID2, intFadeout, intDelay);
		}
		yield;
	}
}

//　BGM変更
task Package_ChangeMusic( int_play_num, int_fade_out, int_delay )
{
	// 前のBGMの削除処理
	if (!Obj_IsDeleted(objMusic))
	{
		objOldMusic = objMusic;	// 前のBGM
		Package_DeleteMusic(objMusic);
		Package_DeleteMusic(objMusic2);
	}
	// BGMを鳴らす処理
	if (int_play_num >= 0)
	{
		Package_PlayMusic( int_play_num, int_fade_out, int_delay);
		// フラグをONに
		CDM_SetMusicFlag( int_play_num );
		// カスタム音量倍率リセット
		SetMusicVolumeMultiply(1);
		SetMusicVolumeMultiply2(1);
	}
}

// BGM削除
task Package_DeleteMusic(obj)
{
	Obj_SetValue(obj, "MusicEnd", true);
}

//　ゲーム中用
task Package_PlayMusic( int_play_num, int_fade_out, int_delay )
{
	let ID		= ObjSound_Create();
	let play	= false;
	let vol1	= 0;
	let volA	= 0;
	let path	= GetMusicPath(int_play_num);
	let sample	= GetMusicSample(int_play_num);
	
	ObjSound_Load(ID, path );
	ObjSound_SetSoundDivision(ID, SOUND_BGM );
	if (sample[0] >= 0)
	{
		ObjSound_SetLoopEnable(ID, true );
		
		ObjSound_SetLoopSampleCount(ID, sample[0], sample[1] );
	}
	ObjSound_SetRestartEnable(ID, true );
	
	//プレイ中のBGMに登録
	objMusic = ID;
	
	loop( int_delay ){ yield; }
	
	ObjSound_Play(ID);
	
	let flgStop = GetAreaCommonData(CAREA_TITLE, "Music_Stop", false);
	while(!Obj_IsDeleted(ID) && !Obj_GetValueD(ID, "MusicEnd", false) ){
		
		// 毎フレームチェックする
		ObjSound_SetVolumeRate(ID, GetMusicVolume() );
		let stop	= GetAreaCommonData(CAREA_TITLE, "Music_Stop", false);
		if( flgStop != stop )
		{
			if (stop) { ObjSound_Stop(ID); }
			else { ObjSound_Play(ID); }
			flgStop = stop;
		}
		yield;
	}
	if (int_fade_out > 0 && !flgStop)
	{
		while( volA < 90 ){
			let volume	= GetMusicVolume();
			
			vol1 = 1 * sin( volA );
			
			ObjSound_SetVolumeRate(ID, volume - vol1*volume );
			
			volA += 90/int_fade_out;
			
			yield;
		}
	}
	Obj_Delete(ID);
}


//　単体で鳴らす場合（今の時点ではBGM変化と共に削除）
task Package_PlaySubMusic( int_play_num, int_fade_out, int_delay )
{
	let ID		= ObjSound_Create();
	let play	= false;
	let vol1	= 0;
	let volA	= 0;
	let path	= GetMusicPath(int_play_num);
	let sample	= GetMusicSample(int_play_num);
	
	ObjSound_Load(ID, path );
	ObjSound_SetSoundDivision(ID, SOUND_BGM );
	if (sample[0] >= 0)
	{
		ObjSound_SetLoopEnable(ID, true );
		ObjSound_SetLoopSampleCount(ID, sample[0], sample[1] );
	}
	ObjSound_SetRestartEnable(ID, true );
	
	//プレイ中のBGMに登録
	objMusic2 = ID;
	
	loop( int_delay ){ yield; }
	
	ObjSound_Play(ID);
	
	let flgStop = GetAreaCommonData(CAREA_TITLE, "Music_Stop", false);
	while(!Obj_IsDeleted(ID) && !Obj_GetValueD(ID, "MusicEnd", false) ){
		
		// 毎フレームチェックする
		ObjSound_SetVolumeRate(ID, GetMusicVolume2() );
		let stop	= GetAreaCommonData(CAREA_TITLE, "Music_Stop", false);
		if( flgStop != stop )
		{
			if (stop) { ObjSound_Stop(ID); }
			else { ObjSound_Play(ID); }
			flgStop = stop;
		}
		yield;
	}
	if (int_fade_out > 0 && !flgStop)
	{
		while( volA < 90 ){
			let volume	= GetMusicVolume2();
			
			vol1 = 1 * sin( volA );
			
			ObjSound_SetVolumeRate(ID, volume - vol1*volume );
			
			volA += 90/int_fade_out;
			
			yield;
		}
	}
	Obj_Delete(ID);
}
