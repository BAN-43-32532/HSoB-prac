
#include "../lib/lib_Common.dnh"
#include "../lib/lib_Switch.dnh"
#include "../../lib/lib_ChapterSkip.dnh"
let SMODE_NONE		= 0;
let SMODE_CONTINUE	= 1;
let SMODE_RETRY		= 2;
let SMODE_QUICK_RETRY	= 3;

@Initialize
{
	SetAutoDeleteObject(true);
	TStageScene(SMODE_NONE);
	DeleteMusic();
}

@MainLoop{ yield; }


task TStageScene(stageMode)
{
	let gpt			= GetAreaCommonData(CAREA_TITLE, "PlayerType", 0 );
	let _PlayerType		= trunc(gpt/100);
	let _PlayerEquip	= gpt%100;
	let _PlayerSubEquip	= GetAreaCommonData(CAREA_TITLE, "PlayerSubWeapon", [] );
	let _GetPlayMode	= GetAreaCommonData(CAREA_TITLE, "PlayMode", GAME_NONE );
	let _GetRank		= GetAreaCommonData(CAREA_TITLE, "GameRank", D_EASY );
	let _GetRankEx		= GetAreaCommonData(CAREA_TITLE, "GameRankEx", D_EX_NORM );
	let _GetStage		= GetAreaCommonData(CAREA_TITLE, "StageIndex", 1 );
	let _GetChapter		= GetAreaCommonData(CAREA_TITLE, "ChapterIndex", 0 );
	let _ReplayPath		= GetAreaCommonData(CAREA_TITLE, "ReplayPath", "" );
	let _StgRebirthFlag	= GetAreaCommonData(CAREA_CONFIG, "Rebirth", 1 );
	let _StgSpeedMod	= GetAreaCommonData(CAREA_CONFIG, "RoadSpeed", 0 ) / 1000;
	let _AutoTalk		= GetAreaCommonData(CAREA_CONFIG, "Auto_Talk", 0 );
	let isExtraStage	= GetAreaCommonData(CAREA_TITLE, "ExtraMode", 0 );
	let _GetReplayStage	= GetAreaCommonData(CAREA_TITLE, "ReplayStageIndex", 1 );
	let pathPlayer		= SCRIPT_PLAYERS[ _PlayerType ];
	let flg = 0;
	
	let _GetContinue		= 0;	//こんてぬー
	if (stageMode == SMODE_CONTINUE) { _GetContinue = GetAreaCommonData(CAREA_SYSTEM, "CONTINUE", 0) + 1; }
	
	//コンティニュー時は終わったステージから
	if (stageMode == SMODE_CONTINUE)
	{
		_GetStage = GetAreaCommonData(CAREA_STAGE, "StageIndex", _GetStage );
	}
	
	//  ステージ用のコモンデータをリフレッシュ
	if (IsCommonDataAreaExists(CAREA_SYSTEM)) { ClearAreaCommonData(CAREA_SYSTEM); }
	if (IsCommonDataAreaExists(CAREA_STAGE)) { ClearAreaCommonData(CAREA_STAGE); }
	if (IsCommonDataAreaExists(CAREA_REPLAY)) { ClearAreaCommonData(CAREA_REPLAY); }
	CreateCommonDataArea(CAREA_SYSTEM);
	CreateCommonDataArea(CAREA_STAGE);
	CreateCommonDataArea(CAREA_REPLAY);

	//　値をセット
	SetAreaCommonData(CAREA_SYSTEM, "StgWorldBreak", false );
	SetAreaCommonData(CAREA_SYSTEM, "CONTINUE", _GetContinue );
	SetAreaCommonData(CAREA_SYSTEM, "PlayerDisabled", true);
	SetAreaCommonData(CAREA_SYSTEM, "PlayerType", _PlayerEquip );	// 一時保存領域
	SetAreaCommonData(CAREA_SYSTEM, "PlayerType_Base", _PlayerEquip );	// 永続保存領域
	SetAreaCommonData(CAREA_SYSTEM, "PlayerSubWeapon", _PlayerSubEquip );	// サブ霊撃
	SetAreaCommonData(CAREA_STAGE, "Difficult", _GetRank );
	SetAreaCommonData(CAREA_STAGE, "DifficultEx", _GetRankEx );
	SetAreaCommonData(CAREA_STAGE, "PlayMode", _GetPlayMode );
	SetAreaCommonData(CAREA_STAGE, "StageIndex", _GetStage );
	SetAreaCommonData(CAREA_STAGE, "ChapterIndex", _GetChapter );
	SetAreaCommonData(CAREA_STAGE, "FirstStage", _GetStage );
	SetAreaCommonData(CAREA_STAGE, "Rebirth", _StgRebirthFlag );
	SetAreaCommonData(CAREA_STAGE, "StageModification", _StgSpeedMod );
	SetAreaCommonData(CAREA_SYSTEM, "Auto_Talk", _AutoTalk );
	SetAreaCommonData(CAREA_SYSTEM, "QuickRestart", false );
	// プラクティス初期設定
	SetAreaCommonData(CAREA_STAGE, "Prac_Player", GetAreaCommonData(CAREA_CONFIG, "Prac_Player", 0) );
	SetAreaCommonData(CAREA_STAGE, "Prac_Spell", GetAreaCommonData(CAREA_CONFIG, "Prac_Spell", 0) );
	SetAreaCommonData(CAREA_STAGE, "Prac_ZSpell", GetAreaCommonData(CAREA_CONFIG, "Prac_ZSpell", 0) );
	SetAreaCommonData(CAREA_STAGE, "Prac_PlayerEx", GetAreaCommonData(CAREA_CONFIG, "Prac_PlayerEx", 0) );
	SetAreaCommonData(CAREA_STAGE, "Prac_SpellEx", GetAreaCommonData(CAREA_CONFIG, "Prac_SpellEx", 0) );
	
	// 撮影用
	if (GetPlayMode == GAME_MAIN && DEBUG_FILMING_MODE)
	{
		SetAreaCommonData(CAREA_STAGE, "StageIndex", 3 );
		SetAreaCommonData(CAREA_STAGE, "FirstStage", 3 );
	}
	
	
	//　画面遷移
	RenderSceneToTransitionTexture();
	if (stageMode != SMODE_QUICK_RETRY)
	{
		//　画面遷移効果音
		CallSoundPackage(sndTtBoonUp);
		CallSoundPackage(sndTtBoonDown);

		CallSwitch( 120, 99 );
		loop( 30 ){ yield; }
		LoadingDefaultTimer( 520, 430, 75+30 );
		loop( 45 ){ yield; }
	}
	else
	{
		SetAreaCommonData(CAREA_SYSTEM, "QuickRestart", true );
	}
	
	//　タイトル終了
	SetAreaCommonData(CAREA_TITLE, "title_end", true );
	
	//　ステージ初期化
	InitializeStageScene();
	
	//　リプレイの時はリプレイモードにする
	if( length(_ReplayPath) > 0 ){
		SetStageReplayFile(_ReplayPath);
	}
	//display miss count
	//DisPlayChapterMiss();
	InItDisplayChapterMiss();
	//　初期ステージ設定
	let indexStage = _GetReplayStage; //　ステージインデックス
	My_StartStage(false);

	loop
	{
		//--------------------------------------------------------------------
		//--------------------------------------------------------------------
		//　ステージ終了呼び出し
		if (GetAreaCommonData(CAREA_SYSTEM, "PACKAGE_END", false))
		{
			SetAreaCommonData(CAREA_SYSTEM, "PACKAGE_END", false);
			//　自機残機0
			
			//　スペプラ以外はBGM消してもOK
			if( GetPlayMode != GAME_SPELL ){
				DeleteMusic();
			}
			
			//　本編の時はハイスコア保存
			if( GetPlayMode == GAME_MAIN ){
			//	SaveHighScore();
			}
			TEndScene( GetPlayMode );
			flg++;
			
			break;
		}
		//　コンティニュー呼び出し
		if (!IsReplay && GetAreaCommonData(CAREA_SYSTEM, "PACKAGE_CONTINUE", false))
		{
			SetAreaCommonData(CAREA_SYSTEM, "PACKAGE_CONTINUE", false);
			TSubScene_Continue( GetPlayMode );
		}
		//　カットイン呼び出し
		else if (GetAreaCommonData(CAREA_SYSTEM, "PACKAGE_CUTIN", false))
		{
			let id = GetAreaCommonData(CAREA_SYSTEM, "PACKAGE_CUTIN_ID", 0 );
			let timer = GetAreaCommonData(CAREA_SYSTEM, "PACKAGE_CUTIN_TIMER", 0 );
			SetAreaCommonData(CAREA_SYSTEM, "PACKAGE_CUTIN", false);
			SetAreaCommonData(CAREA_SYSTEM, "PACKAGE_CUTIN_ID", 0);
			SetAreaCommonData(CAREA_SYSTEM, "PACKAGE_CUTIN_TIMER", 0);
			if (timer <= 0) { timer = 75; }
			TSubScene_Cutin( GetPlayMode, id, timer );
		}
		//　一時停止
		else if( GetVirtualKeyState(VK_PAUSE) == KEY_PUSH || GetVirtualKeyState(VK_PAUSE) == KEY_HOLD )
		{
			let resPause = RunPauseScene( GetPlayMode );
			alternative( resPause )
			case( RESULT_RETRY ){
				//　リトライ選択時
				if( GetPlayMode != GAME_SPELL ){
					DeleteMusic();
				}
				TerminateStageScene();
				//　ハイスコアをセーブして再帰
			//	SaveHighScore();
				TStageScene(SMODE_RETRY);
				return;
			}
			case( RESULT_END ){
				//　一時停止中の終了
				TerminateStageScene();
			}
		}
		//--------------------------------------------------------------------
		//--------------------------------------------------------------------
		
		
		//--------------------------------------------------------------------
		//--------------------------------------------------------------------
		//　ステージ終了待機
		let stgSceneState = GetStageSceneState();
		if(stgSceneState == STAGE_STATE_FINISHED)
		{
			//　ステージ終了結果
			let stageResult = GetStageSceneResult();
			
			//　結果で処理分岐
			alternative( stageResult )
			case( STAGE_RESULT_CLEARED )
			{
				//　ステージクリア時
				if( GetPlayMode == GAME_DEBUG )
				{
					TEndScene_Clear( GetPlayMode );
					flg++;
					break;
				}
				else if( GetPlayMode == GAME_MAIN )
				{
					//　本編の時
					if ( GetAreaCommonData(CAREA_STAGE, "NextStageIndex", 1) < 0)
					{
						if( !IsReplay )
						{
							// 最後のステージだよ
						//	SaveHighScore();
							if (isExtraStage) { TEndScene( GetPlayMode ); }
							else { TEndScene_Clear( GetPlayMode ); }
							flg++;
							break;
						}
						else
						{
							//　リプレイへ戻る
							Default();
							CallTitleSceneEx([4]);
							flg++;
							break;
						}
					}
					else
					{
						//次のステージへ遷移
						TTransition();
						My_StartStage(true);
					}
				}
				else if( !IsReplay && GetPlayMode == GAME_PRACTICE )
				{
					//　ステージプラクティスなら
					//　スクリプト終了のお知らせ
					DeleteMusic();
					SetAreaCommonData(CAREA_TITLE, "ClearSpellPractice", true );
					TEndScene( GetPlayMode );
					flg++;
					break;
				}
				else if( !IsReplay && GetPlayMode == GAME_SPELL )
				{
					//　スペルプラクティスなら
					//　スクリプト終了のお知らせ
					SetAreaCommonData(CAREA_TITLE, "ClearSpellPractice", true );
					TEndScene( GetPlayMode );
					flg++;
					break;
				}
				else if( IsReplay )
				{
					//　リプレイへ戻る
					Default();
					CallTitleSceneEx([4]);
					flg++;
					break;
				}
			}
			case( STAGE_RESULT_PLAYER_DOWN ){
				//　自機残機0
				
				//　スペプラ以外はBGM消してもOK
				if( GetPlayMode != GAME_SPELL ){
					DeleteMusic();
				}
				
				// クイックリスタート
				if ( !IsReplay() && GetPlayMode == GAME_SPELL && IsQuickRestart()
					&& !(GetAreaCommonData(CAREA_STAGE, "BeforeGetSpell", false) || GetAreaCommonData(CAREA_STAGE, "BeforeTimeout", false)) )
				{
					TerminateStageScene();
					TStageScene(SMODE_QUICK_RETRY);
					return;
				}
				
				//　本編の時はハイスコア保存
				if( GetPlayMode == GAME_MAIN ){
				//	SaveHighScore();
				}
				TEndScene( GetPlayMode );
				flg++;
				break;
			}
			case( STAGE_RESULT_BREAK_OFF ){
				//　途中でメニュー開いて終了
				
				//　本編の時はハイスコア保存
				if( GetPlayMode == GAME_MAIN ){
				//	SaveHighScore();
				}
				Default();
				break;
			}
		}
		//--------------------------------------------------------------------
		//--------------------------------------------------------------------
		
		yield;
	}
	
	TTransition();
	
	//　途中でメニュー開いて終了を行った場合
	if( flg == 0 )
	{
		if( !IsReplay )
		{
			//　本編の時
			if ( GetPlayMode == GAME_MAIN || GetPlayMode == GAME_DEBUG ){
				//　タイトルシーン開始
				CallTitleSceneEx([-1]);
			}
			//　ステプラの時
			else if( GetPlayMode == GAME_PRACTICE ){
				//　タイトルシーン開始
				CallTitleSceneEx([2]);
			}
			//　スペプラの時
			else if( GetPlayMode == GAME_SPELL ){
				//　タイトルシーン開始
				CallTitleSceneEx([3]);
			}
			//　デバッグの時
			else if( GetPlayMode == GAME_DEBUG ){
				//　タイトルシーン開始
				CallTitleSceneEx([-1]);
			}
			else {
				//　タイトルシーン開始
				CallTitleSceneEx([-1]);
			}
		}
		//　リプレイ鑑賞の時
		else {
			//　リプレイへ
			Default();
			//　タイトルシーン開始
			CallTitleSceneEx([4]);
		}
	}

	// ステージ単体
	function My_StartStage(isNextStage)
	{
		if (isNextStage)
		{
			// ステージ移行処理
			SetAreaCommonData(CAREA_STAGE, "StageIndex",
				GetAreaCommonData(CAREA_STAGE, "NextStageIndex", 1));
			SetAreaCommonData(CAREA_SYSTEM, "FirstStage", false);
			indexStage++;
		}
		SetStageIndex(indexStage);
		SetStageMainScript(MAIN_STAGE_SCRIPT);
		SetStagePlayerScript(pathPlayer);
		StartStageScene();
	}

}






//----------------------------------------------------
// 終了シーン
//----------------------------------------------------
//　スペプラ、ステプラクリア時やゲームオーバー時の終了シーン
function TEndScene( GetPlayMode )
{
	//　ステージ終了処理
	FinalizeStageScene();
	
	//　終了シーンスクリプト起動
	let pathScript	= GetCurrentScriptDirectory() ~ "../../system/SceneEnd.dnh";
	let idScript	= LoadScript(pathScript);
	
	StartScript(idScript);
	
	while( !IsCloseScript(idScript) ){
		yield;
	}
	
	//　終了シーン結果処理
	let res = GetScriptResult(idScript);
	alternative( res )
	case( RESULT_SAVE_REPLAY ){
		//　リプレイ保存
		TReplaySaveScene( GetPlayMode );
	}
	case( RESULT_END ){
		//　再生終了
		RenderSceneToTransitionTexture();
		Default();
		if( !IsReplay && GetPlayMode == GAME_MAIN ){
			//　タイトルへ戻る
			DeleteMusic();
			CallTitleSceneEx([-1]);
		}
		if( !IsReplay && GetPlayMode == GAME_PRACTICE ){
			//　ｽﾃﾌﾟﾗへ戻る
			DeleteMusic();
			CallTitleSceneEx([2]);
		}
		if( !IsReplay && GetPlayMode == GAME_SPELL ){
			//　ｽﾍﾟﾌﾟﾗへ戻る
			DeleteMusic();
			CallTitleSceneEx([3]);
		}
		if( IsReplay ){
			//　リプレイへ戻る
			DeleteMusic();
			CallTitleSceneEx([4]);
		}
	}
	case( RESULT_RETRY ){
		//　リトライ　リプレイ中なら同じのもっかい再生
		TStageScene(SMODE_RETRY);
		return(true);
	}
	case( MY_RESULT_CONTINUE ){
		//　こんてぬー
		TStageScene(SMODE_CONTINUE);
		return(true);
	}
	return(false);
}

//----------------------------------------------------
//　本編クリア時の終了シーン
//----------------------------------------------------
function TEndScene_Clear( GetPlayMode )
{
	//　ステージ終了処理
	FinalizeStageScene();
	
	//　終了シーンスクリプト起動
	let pathScript	= GetCurrentScriptDirectory() ~ "../../system/SceneEnd_Clear.dnh";
	let idScript	= LoadScript(pathScript);
	
	StartScript(idScript);
	
	while( !IsCloseScript(idScript) ){
		yield;
	}
	
	//　終了シーン結果処理
	let res = GetScriptResult(idScript);
	alternative( res )
	case( RESULT_SAVE_REPLAY ){
		//　リプ保存シーンを開く
		TReplaySaveScene_Clear( GetPlayMode );
	}
	case( RESULT_END ){
		//　いろいろ初期化
		Default();
		RenderSceneToTransitionTexture();
		//　タイトルへ戻る
		CallTitleSceneEx([-1]);
	}
	return(false);
}

//----------------------------------------------------
// 一時停止シーン
//----------------------------------------------------
function RunPauseScene( GetPlayMode )
{
	//　BGM停止
	if( GetPlayMode != GAME_SPELL ){
		StopMusic();
	}
	//　画面推移
	RenderSceneToTransitionTexture();
	//　ステージシーン停止
	PauseStageScene( true );
	
	let pathScript	= GetCurrentScriptDirectory() ~ "../../system/ScenePause.dnh";
	
	//--------------------------------
	//一時停止シーンンスクリプト起動
	let idScript = LoadScript( pathScript );
	StartScript( idScript );
	
	//　ポーズシーンが終了するまで待機
	while( !IsCloseScript(idScript) ){
		yield;
	}
	
	PauseStageScene( false );
	
	let res = GetScriptResult( idScript );
	return res;
}

//----------------------------------------------------
// リプレイ保存シーン
//----------------------------------------------------
function TReplaySaveScene( GetPlayMode )
{
	let pathScript	= GetCurrentScriptDirectory() ~ "../../system/SceneReplay.dnh";
	
	//リプレイ保存シーンスクリプト起動
	let idScript = LoadScript(pathScript);
	StartScript(idScript);
	
	while(!IsCloseScript(idScript)){
		yield;
	}
	
	//　初期化後、タイトルへ分岐
	DeleteMusic();
	alternative( GetPlayMode )
	case( GAME_MAIN ){
		//　タイトルへ
		CallTitleSceneEx([-1]);
	}
	case( GAME_PRACTICE ){
		//　ｽﾃﾌﾟﾗへ
		CallTitleSceneEx([2]);
	}
	case( GAME_SPELL ){
		//　ｽﾍﾟﾌﾟﾗへ
		CallTitleSceneEx([3]);
	}
	others{
		//　よくわからん時はタイトルへ
		CallTitleSceneEx([-1]);
	}
}

//　ゲームクリア時のリプレイセーブシーン
function TReplaySaveScene_Clear( GetPlayMode )
{
	let pathScript	= GetCurrentScriptDirectory() ~ "../system/Default_ReplaySaveScene.dnh";
	
	SetAreaCommonData(CAREA_TITLE,"PlayMode",GAME_MAIN);
	
	//リプレイ保存シーンスクリプト起動
	let idScript = LoadScript(pathScript);
	StartScript(idScript);
	
	while( !IsCloseScript(idScript) ){
		yield;
	}
	//　初期化後、タイトルへ分岐
	Default();
	CallTitleSceneEx([-1]);
}

//----------------------------------------------------
// 演出用シーン
//----------------------------------------------------
// カットイン
function TSubScene_Continue( GetPlayMode )
{
	let pathScript	= GetCurrentScriptDirectory() ~ "../../system/SceneContinue.dnh";

	RenderSceneToTransitionTexture();
	
	//　ステージシーン停止
	PauseStageScene( true );

	//スクリプト起動
	let idScript = LoadScript(pathScript);
	StartScript(idScript);
	
	while( !IsCloseScript(idScript) ){
		yield;
	}

	PauseStageScene( false );
	
	return(true);
}
// カットイン
function TSubScene_Cutin( GetPlayMode, CutinID, CutinTimer )
{
	let pathScript	= GetCurrentScriptDirectory() ~ "../../system/SceneCutin.dnh";

	RenderSceneToTransitionTexture();
	
	//　ステージシーン停止
	PauseStageScene( true );

	//スクリプト起動
	let idScript = LoadScript(pathScript);
	SetScriptArgument(idScript, 0, [CutinID, CutinTimer]);
	StartScript(idScript);
	
	/*
	while( !IsCloseScript(idScript) ){
		yield;
	}
	*/
	
	loop(CutinTimer) { yield; }

	PauseStageScene( false );
	
	return(true);
}

//----------------------------------------------------
// 画面遷移エフェクト
//----------------------------------------------------
function RenderSceneToTransitionTexture()
{
	//現在のシーン内容を画面遷移用テクスチャに描画
	let textureName = GetTransitionRenderTargetName();
	RenderToTextureA1(textureName, 0, 100, true);
}

task TTransition
{
	let textureName = GetTransitionRenderTargetName();
	
	let objImage = ObjPrim_Create(OBJ_SPRITE_2D); //2Dスプライトオブジェクト生成
	Obj_SetRenderPriorityI(objImage, 100); //描画優先度を設定
	ObjPrim_SetTexture(objImage, textureName); //テクスチャを設定
	ObjSprite2D_SetSourceRect(objImage, 0, 0, 640, 480);
	ObjSprite2D_SetDestRect(objImage, 0, 0, 640, 480);

	let alpha = 255;
	while(alpha > 0){
		ObjRender_SetAlpha(objImage, alpha);
		alpha -= 15;
		yield;
	}
	Obj_Delete(objImage);
}


//----------------------------------------------------------------------------------------------------------------

//　共通データ初期化
task Default()
{
	SetAreaCommonData(CAREA_TITLE, "ReplayPath", "" );
	SetAreaCommonData(CAREA_TITLE, "PlayerType", 0 );
	SetAreaCommonData(CAREA_TITLE, "PlayMode", GAME_NONE );
	SetAreaCommonData(CAREA_TITLE, "GameRank", D_EASY );
	SetAreaCommonData(CAREA_TITLE, "StageIndex", 0 );
	SetAreaCommonData(CAREA_TITLE, "ExtraMode", 0 );
}


task CallTitleSceneEx(selected_id)
{
	//　タイトルシーン開始
	local
	{
		let pathScript = GetCurrentScriptDirectory() ~ "../Title.dnh";
		let idScript = LoadScript( pathScript );
		SetScriptArgument(idScript, 0, selected_id);
		StartScript( idScript );
	}
}

