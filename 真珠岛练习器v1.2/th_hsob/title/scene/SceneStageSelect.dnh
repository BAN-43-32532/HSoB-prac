// ステージ選択画面
function SceneStageSelect(selectedDefault)
{
	let playMode = GetAreaCommonData(CAREA_TITLE, "PlayMode", GAME_NONE );
	let selectedDifficult = GetAreaCommonData(CAREA_TITLE, "GameRank", 0 );
	
	//自動選択
	/*
	let tmpMemory = CheckAutoSelectMemory();
	if (tmpMemory >= 0)
	{
		ShotKeyEvent(tmpMemory);
		return;
	}
	*/
	//選択記憶
	selectedDefault = LoadMenuMemory("Menu_Stage", selectedDefault);
	
	// 全ステージ
	let imgValue = [];
	ascent(i in 0 .. STAGE_MAX) { if (i != STAGE_EXTRA-1) { imgValue = imgValue ~ [i]; } }
	
	let selectMax = length(imgValue);
	let resultIndex = -1;
	let animeTimer = 20;
	
	let objParent = ObjText_Create();	//適当なオブジェクトを生成（データのやり取り用）
	Obj_SetValue(objParent, "VALUE", selectedDefault);
	
	//メニュー配置
	local
	{
		let mx = GetScreenWidth/2;
		let my = 255;
		ascent(i in 0 .. selectMax)
		{
			TMenuItemStage(objParent, i, mx, my, imgValue[i]);
		}
		// タイトル
		MenuPartsFace(objParent, 3);
	}
	wait(animeTimer-10);
	//キー状態がリセットされるまで待機
	WaitForResetKeyEx([VK_OK, VK_CANCEL]);

	loop
	{
		//キー入力待ち
		let downKey = CheckKey_MenuEx(30, 6, [VK_UP, VK_DOWN, VK_LEFT, VK_RIGHT, VK_OK, VK_CANCEL]);
		
		alternative (downKey)
		case (VK_UP, VK_LEFT)
		{
			CallSoundPackage(sndTtSelect);
			Menu_AddValue(objParent, "VALUE", -1, selectMax);
		}
		case (VK_DOWN, VK_RIGHT)
		{
			CallSoundPackage(sndTtSelect);
			Menu_AddValue(objParent, "VALUE", 1, selectMax);
		}
		case (VK_OK)
		{
			if (GetIgnoreMenuIndex(objParent, Obj_GetValueD(objParent, "VALUE", -1)))
			{
				CallSoundPackage(sndTtCancel);
			}
			else
			{
				resultIndex = Obj_GetValueD(objParent, "VALUE", selectedDefault);
				baseMenuFlag++;
				MenuEnter(objParent);
				break;
			}
		}
		case (VK_CANCEL)
		{
			CallSoundPackage(sndTtCancel);
			baseMenuFlag--;
			break;
		}
		wait(2);	//適当に固定ディレイ
	}

	//選択記憶
	SetMenuMemory("Menu_Stage", Obj_GetValueD(objParent, "VALUE", 0));
	Obj_Delete(objParent);

	// 値をセット
	SetAreaCommonData(CAREA_TITLE, "StageIndex", resultIndex+1 );
	return(resultIndex);
	
	// メニュー選択時モーション
	function MenuEnter(parent)
	{
		CallSoundPackage(sndTtDecide);
		Obj_SetValue(parent, "FLASH", 1);
		wait(15);
	}
	// メニューパーツ
	task TMenuItemStage(parent, index, base_x, base_y, img_index)
	{
		// 選択可否フラグ
		let flg = CDM_GetPracticeStageFlag_Stage(img_index, selectedDifficult);
		
		let base_ix = 0;
		let base_iy = img_index*256;
		let offset_x = 256;
		let offset_y = 72;
		let base_color = 255;
		
		let objText = ObjPrim_Create(OBJ_SPRITE_2D);
		Obj_SetRenderPriorityI(objText, 20);
		if (index < 4) { ObjPrim_SetTexture(objText, imgTtSelectStage1); }
		else { ObjPrim_SetTexture(objText, imgTtSelectStage2); }
		ObjSprite2D_SetDestRect(objText, -256, -128, 256, 128);
		ObjRender_SetPosition(objText, base_x, base_y, 0);
		
		// 選択拒否
		if (!flg)
		{
			SetIgnoreMenuIndex(parent, index);
			base_color = 128;
		}
		
		let t = 0;
		let before_index = -99999;
		let selected_index = -1;
		while(!Obj_IsDeleted(parent))
		{
			selected_index = Obj_GetValueD(parent, "VALUE", -1);
			let now_index = index-selected_index;
			
			// 開幕アニメ
			if (t < animeTimer)
			{
				let tmp = sin((t+1)/animeTimer*90);
				let tmp_index = now_index*tmp;
				let bx = base_x + tmp_index*offset_x;
				let by = base_y + tmp_index*offset_y;
				ObjRender_SetAlpha(objText, tmp*255);
				ObjRender_SetPosition(objText, bx, by, 0);
			}
			// 選択決定
			if (Obj_GetValueD(parent, "FLASH", 0))
			{
				if (selected_index == index) {
					descent(t in 0 .. 20)
					{
						let alpha = 255 - ((trunc(t/3)+1)%2)*128;
						ObjRender_SetAlpha(objText, alpha);
						yield;
					}
				} else {
					descent(t in 0 .. 20)
					{
						let alpha = 255*((t+1)/20);
						ObjRender_SetAlpha(objText, alpha);
						yield;
					}
				}
				break;
			}
			
			if (before_index != now_index)
			{
				let timer = 10;
				if (before_index == -99999) { before_index = now_index; timer = 1; }
				
				// 画像せっつ
				if (index == selected_index) {
					ObjSprite2D_SetSourceRect(objText, base_ix, base_iy, base_ix+512, base_iy+256);
				} else {
					ObjSprite2D_SetSourceRect(objText, base_ix+512, base_iy, base_ix+1024, base_iy+256);
				}
				ascent(t in 0 .. timer)
				{
					let tmp_index = (timer-t-1)/timer*before_index + (t+1)/timer*now_index;
					let bx = base_x + tmp_index*offset_x;
					let by = base_y + tmp_index*offset_y;
					ObjRender_SetPosition(objText, bx, by, 0);
					yield;
				}
				before_index = now_index;
				local
				{
					let bx = base_x + now_index*offset_x;
					let by = base_y + now_index*offset_y;
					ObjRender_SetPosition(objText, bx, by, 0);
				}
				// 振動
				if (timer > 1 && index == selected_index) { ShakeImage(objText, [-256,-128,256,128], 8, 6); }
			}
			// 明滅
			if (flg && selected_index == index) {
				let tmp_c = base_color - (sin(t*10)+0.75)*32;
				ObjRender_SetColor(objText, tmp_c, tmp_c, tmp_c);
			} else {
				ObjRender_SetColor(objText, base_color, base_color, base_color);
			}
			t++;
			yield;
		}
		Obj_Delete(objText);
	}
}



