// モード選択画面
function SceneModeSelect(selectedDefault)
{
	let playMode = GetAreaCommonData(CAREA_TITLE, "PlayMode", GAME_NONE );

	//自動選択
	/*
	let tmpMemory = CheckAutoSelectMemory();
	if (tmpMemory >= 0)
	{
		ShotKeyEvent(tmpMemory);
		return;
	}
	*/
	//選択記憶
	selectedDefault = LoadMenuMemory("Menu_Mode", selectedDefault);
	
	let imgValue = [0, 1];
	let selectMax = length(imgValue);
	let resultIndex = -1;
	
	let objParent = ObjText_Create();	//適当なオブジェクトを生成（データのやり取り用）
	Obj_SetValue(objParent, "VALUE", selectedDefault);
	
	//メニュー配置
	local
	{
		let mx = GetScreenWidth/2;
		let my = 180;
		ascent(i in 0 .. selectMax)
		{
			TMenuItemMode(objParent, i, mx, my, imgValue[i]);
			my += 160;
		}
		// タイトル
		MenuPartsFace(objParent, 0);
	}
	wait(5);
	//キー状態がリセットされるまで待機
	WaitForResetKeyEx([VK_OK, VK_CANCEL]);

	loop
	{
		//キー入力待ち
		let downKey = CheckKey_MenuEx(30, 6, [VK_UP, VK_DOWN, VK_OK, VK_CANCEL]);
		
		alternative (downKey)
		case (VK_UP)
		{
			CallSoundPackage(sndTtSelect);
			Menu_AddValue2(objParent, "VALUE", -1, selectMax);
		}
		case (VK_DOWN)
		{
			CallSoundPackage(sndTtSelect);
			Menu_AddValue2(objParent, "VALUE", 1, selectMax);
		}
		case (VK_OK)
		{
			resultIndex = Obj_GetValueD(objParent, "VALUE", selectedDefault);
			baseMenuFlag++;
			MenuEnter(objParent);
			break;
		}
		case (VK_CANCEL)
		{
			CallSoundPackage(sndTtCancel);
			baseMenuFlag--;
			break;
		}
		wait(2);	//適当に固定ディレイ
	}
	//選択記憶
	SetMenuMemory("Menu_Mode", Obj_GetValueD(objParent, "VALUE", 0));

	Obj_Delete(objParent);
	return(resultIndex);
	
	// メニュー選択時モーション
	function MenuEnter(parent)
	{
		CallSoundPackage(sndTtDecide);
		Obj_SetValue(parent, "FLASH", 1);
		wait(15);
	}
	// メニューパーツ
	task TMenuItemMode(parent, index, base_x, base_y, img_index)
	{
		let base_ix = 0;
		let base_iy = img_index*256;
		
		let objText = ObjPrim_Create(OBJ_SPRITE_2D);
		Obj_SetRenderPriorityI(objText, 20);
		ObjPrim_SetTexture(objText, imgTtSelectMode);
		ObjSprite2D_SetDestRect(objText, -256, -64, 256, 64);
		ObjRender_SetPosition(objText, base_x, base_y, 0);
		
		let t = 0;
		let before_index = -99999;
		let selected_index = -1;
		while(!Obj_IsDeleted(parent))
		{
			selected_index = Obj_GetValueD(parent, "VALUE", -1);
			
			// 開幕アニメ
			if (t < 10)
			{
				ObjRender_SetAlpha(objText, (t+1)/10*255);
			}
			// 選択決定
			if (Obj_GetValueD(parent, "FLASH", 0))
			{
				if (selected_index == index) {
					descent(t in 0 .. 20)
					{
						let alpha = 255 - ((trunc(t/3)+1)%2)*128;
						ObjRender_SetAlpha(objText, alpha);
						yield;
					}
					// 決定済みの文字を移動
					TMenuItemMode_Selected(base_x, base_y, GetScreenWidth/2+80, GetScreenHeight-64+32, base_ix, base_iy);
				} else {
					descent(t in 0 .. 20)
					{
						let alpha = 255*((t+1)/20);
						ObjRender_SetAlpha(objText, alpha);
						yield;
					}
				}
				break;
			}
			
			let now_index = index-selected_index;
			if (before_index != now_index)
			{
				let timer = 5;
				if (before_index == -99999) { before_index = now_index; timer = 1; }
				
				// 画像せっつ
				if (index == selected_index) {
					ObjSprite2D_SetSourceRect(objText, base_ix, base_iy, base_ix+512, base_iy+128);
					// 解説せっつ
					TMenuItemMode_Child(parent, index, base_x, base_y, base_ix, base_iy);
				} else {
					ObjSprite2D_SetSourceRect(objText, base_ix, base_iy+128, base_ix+512, base_iy+256);
				}
				// 振動
				if (timer > 1 && index == selected_index) { ShakeImage(objText, [-256,-64,256,64], 8, 6); }
				ascent(t in 0 .. timer)
				{
					yield;
				}
				ObjRender_SetPosition(objText, base_x, base_y, 0);
				before_index = now_index;
			}
			// 明滅
			if (selected_index == index) {
				let tmp_c = 255 - (sin(t*10)+0.75)*32;
				ObjRender_SetColor(objText, tmp_c, tmp_c, tmp_c);
			} else {
				ObjRender_SetColor(objText, 255, 255, 255);
			}
			t++;
			yield;
		}
		Obj_Delete(objText);
	}

	// 解説用
	task TMenuItemMode_Child(parent, index, base_x, base_y, base_ix, base_iy)
	{
		let objText = ObjPrim_Create(OBJ_SPRITE_2D);
		Obj_SetRenderPriorityI(objText, 20);
		ObjPrim_SetTexture(objText, imgTtSelectMode);
		ObjSprite2D_SetDestRect(objText, -256, -64, 256, 64);
		ObjRender_SetPosition(objText, base_x, base_y+78, 0);
		ObjSprite2D_SetSourceRect(objText, base_ix+512, base_iy, base_ix+1024, base_iy+128);
		
		let t = 0;
		while(!Obj_IsDeleted(parent) && Obj_GetValueD(parent, "VALUE", -1) == index && !Obj_GetValueD(parent, "FLASH", 0))
		{
			// 開幕アニメ
			if (t < 5)
			{
				ObjRender_SetScaleX(objText, ((t+1)/5)^2);
			}
			t++;
			yield;
		}
		descent(t in 0 .. 5)
		{
			ObjRender_SetScaleX(objText, ((t+1)/5)^2);
			yield;
		}
		Obj_Delete(objText);
	}

	// 選択後画面に残る奴
	task TMenuItemMode_Selected(base_x, base_y, to_x, to_y, base_ix, base_iy)
	{
		let timer = 20;
		let objText = ObjPrim_Create(OBJ_SPRITE_2D);
		Obj_SetRenderPriorityI(objText, 22);
		ObjPrim_SetTexture(objText, imgTtSelectMode);
		ObjSprite2D_SetDestRect(objText, -256, -64, 256, 64);
		ObjRender_SetPosition(objText, base_x, base_y, 0);
		ObjSprite2D_SetSourceRect(objText, base_ix, base_iy, base_ix+512, base_iy+128);
		
		let tmpFlag = baseMenuFlag;
		ascent(t in 0 .. timer)
		{
			let tmp = sin((t+1)/timer*90);
			let tmp_s = 1 - tmp/2;
			ObjRender_SetPosition(objText, base_x*(1-tmp)+to_x*tmp, base_y*(1-tmp)+to_y*tmp, 0);
			ObjRender_SetScaleXYZ(objText, tmp_s, tmp_s, tmp_s);
			yield;
		}
		while(tmpFlag <= baseMenuFlag)
		{
			yield;
		}
		descent(t in 0 .. 15)
		{
			let alpha = 255*((t+1)/15);
			ObjRender_SetAlpha(objText, alpha);
			yield;
		}
		Obj_Delete(objText);
	}
}
