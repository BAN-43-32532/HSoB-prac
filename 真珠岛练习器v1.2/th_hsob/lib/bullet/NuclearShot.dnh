// Šj’e
function NuclearShot(x, y, color, size, delay)
{
	let obj = CreateShotA1(x, y, 0, 0, BGW_BALL_S_RED, 0);
	SetShotDisabled(obj);
	Obj_SetVisible(obj, false);
	Obj_SetValue(obj, "COLOR", color);
	Obj_SetValue(obj, "SIZE", size);
	
	_NuclearShot(obj, delay);
	return(obj);
}

task _NuclearShot(parent, delay)
{
	let obj = [ObjPrim_Create(OBJ_SPRITE_2D), ObjPrim_Create(OBJ_SPRITE_2D), ObjPrim_Create(OBJ_SPRITE_2D)];
	Obj_SetValue(parent, "IMAGE_ID", obj[0]);
	Obj_SetValue(parent, "IMAGE_ID_ALL", obj);
	ascent(i in 0 .. 3)
	{
		let iy = [0, 512, 512][i];
		Obj_SetRenderPriorityI(obj[i], GetShotRenderPriorityI());
		ObjPrim_SetTexture(obj[i], imgEffectNuclear);
		ObjSprite2D_SetSourceRect(obj[i], 0, 0+iy, 512, 512+iy);
		ObjSprite2D_SetDestCenter(obj[i]);
		ObjRender_SetBlendType(obj[i], BLEND_ADD_ARGB);
	}
	ObjRender_SetAlpha(obj[1], 192);
	ObjRender_SetAlpha(obj[2], 96);
	
	let t = 0;
	let sz = 0;
	while(!Obj_IsDeleted(parent))
	{
		sz = Obj_GetValueD(parent, "SIZE", 0);
		if (t < delay)
		{
			sz *= sin((t+1)/delay*90);
		}
		
		let sc = (sz+12)/160;
		let col = Obj_GetValueD(parent, "COLOR", [255,0,0]);
		ObjRender_SetColor(obj[1], col[0], col[1], col[2]);
		ObjRender_SetColor(obj[2], col[0], col[1], col[2]);
		
		ObjShot_SetIntersectionCircleA1(parent, sz);
		ascent(i in 0 .. 2)
		{
			ObjRender_SetPosition(obj[i], ObjMove_GetX(parent), ObjMove_GetY(parent), 0);
			ObjRender_SetScaleXYZ(obj[i], sc, sc, 1);
		}
		ObjRender_SetPosition(obj[2], ObjMove_GetX(parent), ObjMove_GetY(parent), 0);
		ObjRender_SetScaleXYZ(obj[2], sc*1.5, sc*1.5, 1);
		ObjRender_SetAngleZ(obj[0], -t/5);
		ObjRender_SetAngleZ(obj[1], t*133);
		ObjRender_SetAngleZ(obj[2], -t*133);
		t++;
		yield;
	}
	descent(i in 0 .. 30)
	{
		let sc = ((sz+12)*sin((i+1)/30*90))/160;
		ascent(i in 0 .. 2)
		{
			ObjRender_SetScaleXYZ(obj[i], sc, sc, 1);
		}
		ObjRender_SetScaleXYZ(obj[2], sc*1.5, sc*1.5, 1);
		ObjRender_SetAngleZ(obj[0], -t/3);
		ObjRender_SetAngleZ(obj[1], t*133);
		ObjRender_SetAngleZ(obj[2], -t*133);
		t++;
		yield;
	}
	ascent(i in 0 .. 3)
	{
		Obj_Delete(obj[i]);
	}
}


task NuclearExplodeEffect(x, y, color, scale, timer)
{
	if (IsDrawEffect() < 2) { return; }

	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(obj, GetShotRenderPriorityI());
	ObjPrim_SetTexture(obj, imgEffectNuclear);
	ObjSprite2D_SetSourceRect(obj, 0, 256, 256, 512);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
	ObjRender_SetPosition(obj, x, y, 0);
	ObjRender_SetColor(obj, color[0], color[1], color[2]);
	ascent(i in 0 .. timer)
	{
		let tmp = sin((i+1)/timer*90);
		let tmp_s = tmp*tmp;
		ObjRender_SetScaleXYZ(obj, tmp*scale, tmp*scale, 1);
		ObjRender_SetAlpha(obj, (1-tmp)*255);
		ObjRender_SetAngleZ(obj, randEffect(0,360));
		yield;
	}
	Obj_Delete(obj);
}
