let defaultLaserGraze = 6;	//グレイズ間隔

//射出レーザー
//CreateLooseLaserA1に初期設定とディレイえへくとを付けた奴
function My_CreateLooseLaserA1(x, y, speed, angle, l_len, l_wid, graphic, delay)
{
	let obj = CreateLooseLaserA1(x, y, speed, angle, l_len, l_wid, graphic, delay);
	ObjLaser_SetGrazeInvalidFrame(obj, defaultLaserGraze);
	LaserDelayEffect(obj, l_wid, delay);
	return(obj);
}
//射出レーザー
//加速度付き
function My_CreateLooseLaserA2(x, y, speed, angle, add_s, max_s, l_len, l_wid, graphic, delay)
{
	let obj = CreateLooseLaserA1(x, y, speed, angle, l_len, l_wid, graphic, delay);
	ObjMove_AddPatternA2(obj, 0, NO_CHANGE, NO_CHANGE, add_s, 0, max_s);
	ObjLaser_SetGrazeInvalidFrame(obj, defaultLaserGraze);
	LaserDelayEffect(obj, l_wid, delay);
	return(obj);
}

//へにょりレーザー
//CreateCurveLaserA1に初期設定とディレイえへくとを付けた奴
function My_CreateCurveLaserA1(x, y, speed, angle, l_len, l_wid, graphic, delay)
{
	let obj = CreateCurveLaserA1(x, y, speed, angle, l_len, l_wid, graphic, delay);
	ObjLaser_SetGrazeInvalidFrame(obj, defaultLaserGraze);
	ObjCrLaser_SetTipDecrement(obj, 0);
	if (delay > 0) { LaserDelayEffect(obj, l_wid, delay); }
	return(obj);
}

// 色々弄りたい時用の設置レーザー
//CreateStraightLaserA1に初期設定を付けた奴
function My_CreateSimpleLaserA1(x, y, angle, l_length, l_width, timer, graphic, delay)
{
	let obj = CreateStraightLaserA1(x, y, angle, l_length, l_width, timer, graphic, delay);
	ObjStLaser_SetSource(obj, false);
	ObjLaser_SetGrazeInvalidFrame(obj, defaultLaserGraze);
	return(obj);
}

// 設置レーザー
//flgSource=trueならレーザー両端にえへくとが付く
function My_CreateStraightLaserA1(x, y, angle, l_length, l_width, timer, graphic, delay, flgSource)
{
	let objDummy = My_CreateStraightLaserA1Ex(x, y, angle, l_length, l_width, timer, graphic, delay, [flgSource, flgSource]);
	return(objDummy);
}
//flgSource=[先端えへくと,根本えへくと]
function My_CreateStraightLaserA1Ex(x, y, angle, l_length, l_width, timer, graphic, delay, flgSource)
{
	// 予告線＆操作用
	let objDummy = CreateStraightLaserA1(x, y, angle, l_length, 2, timer+delay, graphic, 0);
	ObjStLaser_SetSource(objDummy, false);
//	ObjShot_SetAutoDelete(objDummy, false);
	ObjShot_SetItemChange(objDummy, false);
	ObjShot_SetIntersectionEnable(objDummy, false);
	ObjRender_SetAlpha(objDummy, 192);
	
	My_CreateStraightLaserA1_sub(objDummy, l_width, delay, flgSource);
	return(objDummy);
}
task My_CreateStraightLaserA1_sub(parent, l_width, delay, flgSource)
{
	let max_scale = l_width/20;
	let scale = 0;
	let t = 0;

	// ディレイえへくと
	let objEffect = [-1, -1];
	if (flgSource[0]) { objEffect[0] = CreateDelayEffect(parent); }
	if (flgSource[1]) { objEffect[1] = CreateDelayEffect(parent); }
	descent(i in 0 .. delay)
	{
		if (Obj_IsDeleted(parent)) { break; }
		scale = (1 + (t%4)/8) * max_scale;
		if (t < 10) { scale *= (t+1)/10; }
		// 根本
		ObjRender_SetScaleXYZ(objEffect[0], scale, scale, 1);
		ObjRender_SetAngleZ(objEffect[0], t*166);
		ObjRender_SetPosition(objEffect[0], ObjMove_GetX(parent), ObjMove_GetY(parent), 0);
		// 先っちょ
		ObjRender_SetScaleXYZ(objEffect[1], scale, scale, 1);
		ObjRender_SetAngleZ(objEffect[1], t*166);
		ObjRender_SetPosition(objEffect[1],
			ObjMove_GetX(parent)+ObjLaser_GetLength(parent)*cos(ObjStLaser_GetAngle(parent)), ObjMove_GetY(parent)+ObjLaser_GetLength(parent)*sin(ObjStLaser_GetAngle(parent)), 0);
		t++;
		wait(1);
	}
	
	// レーザー本体
	let obj = -1;
	if (!Obj_IsDeleted(parent))
	{
		let pri = Obj_GetValueD(parent, "PRIORITY", GetShotRenderPriorityI());
		obj = CreateStraightLaserA1(ObjMove_GetX(parent), ObjMove_GetY(parent),
			ObjStLaser_GetAngle(parent), ObjLaser_GetLength(parent), 0, 99999, ObjShot_GetImageID(parent), 0);
		ObjLaser_SetGrazeInvalidFrame(obj, defaultLaserGraze);
		ObjStLaser_SetSource(obj, false);
		ObjShot_SetAutoDelete(obj, false);
		Obj_SetRenderPriorityI(obj, pri);
	}
	
	t = 0;
	while(!Obj_IsDeleted(parent))
	{
		if (t < 15)
		{
			let tmp = ((t+1)/15)^2;
			ObjLaser_SetRenderWidth(obj, l_width*tmp);
			ObjLaser_SetIntersectionWidth(obj, l_width*tmp/2);
			ObjRender_SetAlpha(parent, (1-tmp)*192);
		}
		scale = (1 + (t%4)/8) * max_scale;
		// レーザー
		ObjMove_SetPosition(obj, ObjMove_GetX(parent), ObjMove_GetY(parent));
		ObjStLaser_SetAngle(obj, ObjStLaser_GetAngle(parent));
		ObjLaser_SetLength(obj, ObjLaser_GetLength(parent));
		ObjLaser_SetInvalidLength(obj, 0, 0);
		// 根本
		ObjRender_SetScaleXYZ(objEffect[0], scale, scale, 1);
		ObjRender_SetAngleZ(objEffect[0], t*166);
		ObjRender_SetPosition(objEffect[0], ObjMove_GetX(parent), ObjMove_GetY(parent), 0);
		// 先っちょ
		ObjRender_SetScaleXYZ(objEffect[1], scale, scale, 1);
		ObjRender_SetAngleZ(objEffect[1], t*166);
		ObjRender_SetPosition(objEffect[1],
			ObjMove_GetX(parent)+ObjLaser_GetLength(parent)*cos(ObjStLaser_GetAngle(parent)), ObjMove_GetY(parent)+ObjLaser_GetLength(parent)*sin(ObjStLaser_GetAngle(parent)), 0);
		t++;
		wait(1);
	}
	ObjShot_SetIntersectionEnable(obj, false);
	descent(i in 0 .. 15)
	{
		if (Obj_IsDeleted(obj)) { break; }
		let tmp = ((i+1)/15)^2;
		ObjLaser_SetRenderWidth(obj, l_width*tmp);
		// 根本
		ObjRender_SetScaleXYZ(objEffect[0], scale*tmp, scale*tmp, 1);
		// 先っちょ
		ObjRender_SetScaleXYZ(objEffect[1], scale*tmp, scale*tmp, 1);
		wait(1);
	}
	Obj_Delete(obj);
	Obj_Delete(objEffect[0]);
	Obj_Delete(objEffect[1]);
}

//射出レーザーの根本えへくと
task LaserDelayEffect(objLaser, width, delay)
{
	let timer = delay;
	if (ObjMove_GetSpeed(objLaser) > 0) { timer += ObjLaser_GetLength(objLaser) / ObjMove_GetSpeed(objLaser); }
	let scale = width / 20;
	let obj = CreateDelayEffect(objLaser);
	ascent(t in 0 .. timer)
	{
		if (Obj_IsDeleted(objLaser)) { break; }
		let tmp_scale = (1 + (t%4)/8) * scale;
		if (t > timer-10) { tmp_scale *= (timer-t)/10; }
		if (t < delay/2) { tmp_scale *= (t+1)/delay*2; }
		ObjRender_SetScaleXYZ(obj, tmp_scale, tmp_scale, 1);
		ObjRender_SetAngleZ(obj, t*166);
		wait(1);
	}
	Obj_Delete(obj);
}
// えへくと製作
function CreateDelayEffect(objLaser)
{
	let ix = BULLET_EFFECT[ObjShot_GetImageID(objLaser)%8] * 32;	//えへくと色
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(obj, GetShotRenderPriorityI()+1);
	ObjPrim_SetTexture(obj, imgEffectBullet);
	ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
	ObjRender_SetPosition(obj, ObjMove_GetX(objLaser), ObjMove_GetY(objLaser), 0);
	ObjSprite2D_SetSourceRect(obj, ix, 96, ix+32, 128);
	ObjSprite2D_SetDestCenter(obj);
	return(obj);
}
