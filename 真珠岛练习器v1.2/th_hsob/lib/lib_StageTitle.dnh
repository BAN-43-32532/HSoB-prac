

//----------------------------------------------------
//　ｽﾃｰｼﾞﾀｲﾄﾙ表示
//----------------------------------------------------

let path_stgttl01	= imgEffectStageParticle;
let path_stgttl02	= imgEffectStageLine;
//let path_stgttl03	= GetCurrentScriptDirectory() ~ "./../img/world/stg1img/stage-temp.png";

// ステージタイトル共通
task DisplayStage( stage_id, wait )
{
	loop( wait ){ yield; }

	let pos		= [ CenX, CenY - 96 ];
	let layer	= 71;
	let long	= 390;

	StageTitleDisplay( pos, long-90, LoadingImageFile_StgTitle(stage_id)[0], [255,255,255], layer );
	
	waitEx(long-75);
	if (IsDrawEffect() > 0) { StageTitleLine(pos[0], pos[1]-4*45, 240); }
}


//　ﾀｲﾄﾙ表示
task StageTitleDisplay( pos, long, path, rgb, layer )
{
	let sef		= [
		ObjPrim_Create(OBJ_SPRITE_2D),
		ObjPrim_Create(OBJ_SPRITE_2D),
		ObjPrim_Create(OBJ_SPRITE_2D),
	];
	
	StageTitleDisplay00( pos, long, path, rgb, layer, 0.7, [0,0,512,64] );
	wait(90);
	StageTitleDisplay01( [pos[0]+128, pos[1]+32], long-240, path, rgb, layer, 0.6, [192,128,512,192], [-0.1,0] );
	StageTitleDisplay01( [pos[0]-160, pos[1]-32], long-240, path, rgb, layer, 0.6, [0,128,192,192], [0.1,0] );
	
	StageTitleDisplay02( pos, long-120, path, rgb );
	
	task StageTitleDisplay00( pos, long, path, rgb, layer, sca, rect )
	{
		// タイトル
		let objTitle = CreateDigitalFadeinTexture(path, layer, rect, [24,3], long);
		ObjRender_SetScaleXYZ(objTitle[0], sca, sca, 0 );
		ObjRender_SetPosition(objTitle[0], pos[0]-sca*512/2, pos[1]-sca*64/2, 0 );
		ObjRender_SetScaleXYZ(objTitle[1], sca, sca, 0 );
		ObjRender_SetPosition(objTitle[1], pos[0]-sca*512/2, pos[1]-sca*64/2, 0 );
	}
	
	task StageTitleDisplay01( pos, long, path, rgb, layer, sca, rect, mpos )
	{
		let sef		= ObjPrim_Create(OBJ_SPRITE_2D);
		
		ObjPrim_SetTexture(sef, path );
		Obj_SetRenderPriorityI(sef, layer );
		ObjRender_SetBlendType(sef, BLEND_ALPHA );
		ObjRender_SetAngleXYZ(sef, 0, 0, 0 );
		ObjRender_SetScaleXYZ(sef, sca, sca, 0 );
		ObjRender_SetAlpha(sef, 0 );
		
		ObjSprite2D_SetSourceRect(sef, rect[0], rect[1], rect[2], rect[3] );
		ObjSprite2D_SetDestCenter(sef);

		let bx = pos[0];
		let by = pos[1];
		ascent(t in 0 .. 180)
		{
			let tmp = sin((t+1)/180*90);
			let tmp2 = 1 - cos(sin(tmp*90)*90);
			let tmp3 = sin(tmp2*90);

			ObjRender_SetAlpha(sef, tmp*255 );
			ObjRender_SetScaleXYZ(sef, (1+tmp3)*sca/2, tmp3*sca, 0 );
			ObjRender_SetPosition(sef, bx, by-(1-tmp2)*sca*48, 0 );
			bx += mpos[0]*(5-tmp*4);
			by += mpos[1]*(5-tmp*4);
			yield;
		}
		loop(long)
		{
			ObjRender_SetPosition(sef, bx, by, 0 );
			bx += mpos[0];
			by += mpos[1];
			yield;
		}
		descent(t in 0 .. 60)
		{
			let tmp = sin((t+1)/60*90);
			ObjRender_SetPosition(sef, bx, by, 0 );
			ObjRender_SetAlpha(sef, tmp*255 );
			bx += mpos[0]*(5-tmp*4);
			by += mpos[1]*(5-tmp*4);
			yield;
		}
		Obj_Delete(sef);
	}
	
}

// ポエム部分
task StageTitleDisplay02( pos, long, path, rgb )
{
	let sef		= [
		ObjPrim_Create(OBJ_SPRITE_2D),
		ObjPrim_Create(OBJ_SPRITE_2D),
		ObjPrim_Create(OBJ_SPRITE_2D),
	];
	let i		= 0;
	let sca		= 0.7;
	let move1	= 0;
	let moveA	= 0;
	let move2	= 0;
	let moveB	= 0;
	let offset_x	= 0;
	let offset_y	= 64;
	let moveX	= [-48, 48, -24];
	let moveY	= [0, 0, 0];
	
	ascent( i in 0..length(sef) ){
		ObjPrim_SetTexture(sef[i], path );
		Obj_SetRenderPriorityI(sef[i], 72 );
		ObjRender_SetBlendType(sef[i], BLEND_ALPHA );
		ObjRender_SetAngleXYZ(sef[i], 0, 0, 0 );
		ObjRender_SetScaleXYZ(sef[i], sca, sca, 0 );
		ObjRender_SetAlpha(sef[i], 0 );
		ObjSprite2D_SetSourceRect(sef[i], 0, 192+i*32, 512, 192+(i+1)*32 );
		ObjSprite2D_SetDestCenter(sef[i]);
		ObjRender_SetScaleXYZ(sef[i], sca, sca, 0 );
	}
	
	while( move1 < 1 || move2 < 1 ){
		if( move1 < 1 ){ move1 = 1 * sin( moveA ); }
		if( move2 < 1 ){ move2 = 1 * sin( moveB ); }
		
		let muki = 1;
		ascent( i in 0..length(sef) ){
			ObjRender_SetAlpha(sef[i], move1*255 );
			ObjRender_SetPosition(sef[i], pos[0] + offset_x+(1-move2)*moveX[i], pos[1]+offset_y+i*18*sca+(1-move2)*moveY[i], 0 );
			muki = -muki;
		}
		
		moveA += 2;
		moveB += 1;
		
		yield;
	}
	move1 = 0;
	moveA = 0;
	move2 = 0;
	moveB = 0;
	
	loop( long ){
		let muki = 1;
		ascent( i in 0..length(sef) ){
			ObjRender_SetPosition(sef[i], pos[0] + offset_x, pos[1]+offset_y+i*18*sca, 0 );
			muki = -muki;
		}
		
		yield;
	}
	while( move1 < 1 || move2 < 1 ){
		if( move1 < 1 ){ move1 = 1 * sin( moveA ); }
		
		let muki = 1;
		ascent( i in 0..length(sef) ){
			ObjRender_SetAlpha(sef[i], (1-move1)*255 );
			ObjRender_SetPosition(sef[i], pos[0] + offset_x+move2*moveX[i], pos[1]+offset_y+i*18*sca+move2*moveY[i], 0 );
			muki = -muki;
		}
		
		moveA += 2;
		move2 += moveB;
		moveB += 0.001;
		
		yield;
	}
	ascent( i in 0..length(sef) ){
		Obj_Delete(sef[i]);
	}
}

// 一直線に伸びる線えへくと
task StageTitleLine(x, y, timer)
{
	let len = 10;
	let bx = x; let by = y;
	
	local
	{
		let speed = 4;
		let va = 90;
		let vx = cos(va)*speed;
		let vy = sin(va)*speed;
		let move_timer = 45;
		StageTitleLineSingle(bx, by, vx, vy, len, move_timer);
		bx += vx*move_timer; by += vy*move_timer;
		timer -= move_timer;
		waitEx(move_timer);
	}
	
	ascent(i in 0 .. 3)
	{
		_StageTitleLine(bx, by, 90+i*120, timer, 6, 8, 2);
	}

	task _StageTitleLine(bx, by, va, timer, speed, move_timer, count)
	{
		let vx = cos(va)*speed;
		let vy = sin(va)*speed;
		StageTitleLineSingle(bx, by, vx, vy, len, min(move_timer,timer));
		waitEx(move_timer);
		
		bx += vx*move_timer; by += vy*move_timer;
		timer -= move_timer;
		if (timer > 0)
		{
			if (count > 0)
			{
				count--;
				_StageTitleLine(bx, by, va+60, timer, speed, move_timer, count);
				_StageTitleLine(bx, by, va-60, timer, speed, move_timer, count);
			}
			else if (count == 0)
			{
				timer -= trunc(randEffect(0,timer-move_timer+1));
				va += (trunc(randEffect(0,2))-0.5)*2*60;
				_StageTitleLine(bx, by, va, timer, speed, move_timer, count);
			}
			else
			{
				va += (trunc(randEffect(0,2))-0.5)*2*60;
				_StageTitleLine(bx, by, va, timer, speed, move_timer, count);
			}
		}
	}
}
task StageTitleLineSingle(x, y, vx, vy, len, move_frame)
{
	let obj = [ObjPrim_Create(OBJ_PRIMITIVE_2D), ObjPrim_Create(OBJ_PRIMITIVE_2D)];
	ascent(i in 0 .. 2)
	{
		Obj_SetRenderPriorityI( obj[i], 70+i );
		ObjPrim_SetPrimitiveType( obj[i], PRIMITIVE_LINELIST );
		ObjPrim_SetVertexCount( obj[i], 2 );
	}
	ObjRender_SetBlendType( obj[0], BLEND_ADD_ARGB );
	ObjRender_SetBlendType( obj[1], BLEND_ADD_ARGB );
	ObjRender_SetColor( obj[0], 192, 192, 0 );
	ObjRender_SetColor( obj[1], 0, 64, 255 );
	
	ascent(t in 0 .. move_frame+len)
	{
		let r2 = min(move_frame, t);
		let r1 = max(0, t-len);
		ascent(i in 0 .. 2)
		{
			ObjPrim_SetVertexPosition(obj[i], 0, x+r1*vx+i, y+r1*vy+i, 0);
			ObjPrim_SetVertexPosition(obj[i], 1, x+r2*vx+i, y+r2*vy+i, 0);
			ObjPrim_SetVertexAlpha(obj[i], 0, 255);
			ObjPrim_SetVertexAlpha(obj[i], 1, 255);
		}
		yield;
	}
	ascent(i in 0 .. 2) { Obj_Delete(obj[i]); }
}

// ipos = [x, y, width, height]
// isplit = [split_x, split_y]
function CreateDigitalFadeinTexture(path, layer, ipos, isplit, timer)
{
	let objs		= [ObjPrim_Create(OBJ_SPRITE_2D), ObjPrim_Create(OBJ_SPRITE_2D)];
	ascent(i in 0 .. 2)
	{
		ObjPrim_SetPrimitiveType(objs[i], PRIMITIVE_TRIANGLELIST);
		ObjPrim_SetVertexCount(objs[i], 6*isplit[0]*isplit[1]);
		ObjPrim_SetTexture(objs[i], path);
		Obj_SetRenderPriorityI(objs[i], layer+i);
	}
	ObjRender_SetBlendType(objs[1], BLEND_ADD_ARGB);
	ObjRender_SetColor(objs[1], 64, 160, 255);
	
	ascent(x in 0 .. isplit[0])
	{
		ascent(y in 0 .. isplit[1])
		{
			let pnum = y + isplit[1]*x;
			let tmp_split = [x, y] ~ isplit;
			DigitalFadein(objs, pnum, ipos, tmp_split, timer);
		}
	}
	return(objs);

	// ■部分単体
	task DigitalFadein(obj, prim_num, ipos, isplit, timer)
	{
		// 最大待機フレームは最後の数字基準（90フレーム）
		let wait_time = trunc(((isplit[0]) / (isplit[2]+isplit[3])) * 90);
//		let wait_time = trunc(((isplit[0]+isplit[1]*6) / (isplit[2]+isplit[3])) * 90);
		waitEx(wait_time);
		
		let ox = ipos[2]/isplit[2] * randEffect(-6, 0);
		let oy = ipos[3]/isplit[3] * randEffect(-3, 3);
		let ox2 = ipos[2]/isplit[2] * randEffect(-1.5, 1.5);
		let oy2 = ipos[3]/isplit[3] * randEffect(-1.5, 1.5);
		let fadeout = 30 + trunc(randEffect(0,60));
		
		ascent(t in 0 .. 60)
		{
			let tmp = 1-cos((t+1)/60*90);
			SetPositionToObj(objs, prim_num, ipos, isplit, [(1-tmp)*ox, (1-tmp)*oy], 1, tmp^3, tmp*255);
			yield;
		}
		SetPositionToObj(objs, prim_num, ipos, isplit, [0,0], 1, 1, 255);
		waitEx(timer-wait_time);
		descent(t in 0 .. fadeout)
		{
			let tmp = sin((t+1)/fadeout*90);
			SetPositionToObj(objs, prim_num, ipos, isplit, [(tmp-1)*ox2, (tmp-1)*oy2], 1, tmp^3, tmp*255);
			yield;
		}
		SetPositionToObj(objs, prim_num, ipos, isplit, [0,0], 1, 1, 0);
		waitEx(60);
		ascent(i in 0 .. 2) { Obj_Delete(objs[i]); }
	}
	
	// 座標配置用
	function SetPositionToObj(obj, prim_num, ipos, isplit, opos, scale, scaleuv, alpha)
	{
		let tmp_x1 = isplit[0] / isplit[2];
		let tmp_y1 = isplit[1] / isplit[3];
		let tmp_x2 = (isplit[0]+1) / isplit[2];
		let tmp_y2 = (isplit[1]+1) / isplit[3];
		
		let ox = 0.5 * 1 / isplit[2] * (scale-1);
		let oy = 0.5 * 1 / isplit[3] * (scale-1);
		let posx1 = opos[0]+ipos[0]+(tmp_x1-ox)*ipos[2];
		let posy1 = opos[1]+ipos[1]+(tmp_y1-oy)*ipos[3];
		let posx2 = opos[0]+ipos[0]+(tmp_x2+ox)*ipos[2];
		let posy2 = opos[1]+ipos[1]+(tmp_y2+oy)*ipos[3];

		let oxuv = 0.5 * 1 / isplit[2] * (scaleuv-1);
		let oyuv = 0.5 * 1 / isplit[3] * (scaleuv-1);
		let uvx1 = ipos[0]+(tmp_x1-oxuv)*ipos[2];
		let uvy1 = ipos[1]+(tmp_y1-oyuv)*ipos[3];
		let uvx2 = ipos[0]+(tmp_x2+oxuv)*ipos[2];
		let uvy2 = ipos[1]+(tmp_y2+oyuv)*ipos[3];

		ascent(i in 0 .. 2)
		{
			ObjPrim_SetVertexPosition(obj[i], prim_num*6+0, posx1, posy1, 0);
			ObjPrim_SetVertexPosition(obj[i], prim_num*6+1, posx2, posy1, 0);
			ObjPrim_SetVertexPosition(obj[i], prim_num*6+2, posx1, posy2, 0);
			ObjPrim_SetVertexPosition(obj[i], prim_num*6+3, posx1, posy2, 0);
			ObjPrim_SetVertexPosition(obj[i], prim_num*6+4, posx2, posy1, 0);
			ObjPrim_SetVertexPosition(obj[i], prim_num*6+5, posx2, posy2, 0);

			ObjPrim_SetVertexUVT(obj[i], prim_num*6+0, uvx1, uvy1);
			ObjPrim_SetVertexUVT(obj[i], prim_num*6+1, uvx2, uvy1);
			ObjPrim_SetVertexUVT(obj[i], prim_num*6+2, uvx1, uvy2);
			ObjPrim_SetVertexUVT(obj[i], prim_num*6+3, uvx1, uvy2);
			ObjPrim_SetVertexUVT(obj[i], prim_num*6+4, uvx2, uvy1);
			ObjPrim_SetVertexUVT(obj[i], prim_num*6+5, uvx2, uvy2);
		}

		let a1 = alpha*3-510;
		ObjPrim_SetVertexAlpha(obj[0], prim_num*6+0, a1);
		ObjPrim_SetVertexAlpha(obj[0], prim_num*6+1, a1);
		ObjPrim_SetVertexAlpha(obj[0], prim_num*6+2, a1);
		ObjPrim_SetVertexAlpha(obj[0], prim_num*6+3, a1);
		ObjPrim_SetVertexAlpha(obj[0], prim_num*6+4, a1);
		ObjPrim_SetVertexAlpha(obj[0], prim_num*6+5, a1);
		let a2 = (255-a1)*alpha/255*2;
		ObjPrim_SetVertexAlpha(obj[1], prim_num*6+0, a2);
		ObjPrim_SetVertexAlpha(obj[1], prim_num*6+1, a2);
		ObjPrim_SetVertexAlpha(obj[1], prim_num*6+2, a2);
		ObjPrim_SetVertexAlpha(obj[1], prim_num*6+3, a2);
		ObjPrim_SetVertexAlpha(obj[1], prim_num*6+4, a2);
		ObjPrim_SetVertexAlpha(obj[1], prim_num*6+5, a2);
	}
}


/*
task StageTitleLineSingle(x, y, vx, vy, len, frame, move_frame)
{
	let pos_x = [];
	let pos_y = [];
	
	let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	Obj_SetRenderPriorityI( obj, 70 );
	ObjRender_SetBlendType( obj, BLEND_ADD_ARGB );
	ObjPrim_SetPrimitiveType( obj, PRIMITIVE_LINELIST );
	ObjPrim_SetVertexCount( obj, len*2 );
	
	// 各点の制御
	ascent(i in 0 .. len+1)
		{ StageTitleLine_point(obj, i); }
	
	let tmp_x = x; let tmp_y = y;
	ascent(t in 0 .. frame)
	{
		pos_x = [tmp_x] ~ pos_x;
		pos_y = [tmp_y] ~ pos_y;
		if (length(pos_x) > len+2) { pos_x = erase(pos_x, len+2); }
		if (length(pos_y) > len+2) { pos_y = erase(pos_y, len+2); }

		if (t >= move_frame+frame) { break; }
		if (t < move_frame) { tmp_x += vx; tmp_y += vy; }
		yield;
	}
	Obj_Delete(obj);
	
	// 各点の制御
	task StageTitleLine_point(obj, fpos)
	{
		ascent(t in 0 .. frame)
		{
			if (length(pos_x) > fpos)
			{
				let a = 255;
				if (t > frame-len-fpos) { a *= ((frame-fpos)-t)/len; }
				if (fpos < len+1)
				{
					ObjPrim_SetVertexPosition(obj, fpos*2, pos_x[fpos], pos_y[fpos], 0);
					ObjPrim_SetVertexAlpha(obj, fpos*2, a);
				}
				if (fpos > 0)
				{
					ObjPrim_SetVertexPosition(obj, fpos*2-1, pos_x[fpos], pos_y[fpos], 0);
					ObjPrim_SetVertexAlpha(obj, fpos*2-1, a);
				}
			}
			else
			{
				if (fpos < len+1)
				{
					ObjPrim_SetVertexPosition(obj, fpos*2, x, y, 0);
					ObjPrim_SetVertexAlpha(obj, fpos*2, 0);
				}
				if (fpos > 0)
				{
					ObjPrim_SetVertexPosition(obj, fpos*2-1, x, y, 0);
					ObjPrim_SetVertexAlpha(obj, fpos*2-1, 0);
				}
			}
			yield;
		}
	}
}
*/



// ----------------- Ex用 ----------------- //

task DisplayStageExtra( stage_id, chapter_id, wait )
{
	loop( wait ){ yield; }

	let pos		= [ CenX - 160, CenY - 64 ];
	let layer	= 71;
	let long	= 240;
	let col		= [255, 255, 255];
	
	alternative(chapter_id)
	case(0) { col = [224,0,0]; }
	case(1) { col = [144,144,0]; }
	case(2) { col = [0,48,224]; }
	case(4) { col = [160,0,160]; }
	case(3) { col = [128,128,128]; }

	StageTitleDisplayExtra( chapter_id, pos, long-90, LoadingImageFile_StgTitle(stage_id)[1], col, layer );
}


//　ﾀｲﾄﾙ表示
task StageTitleDisplayExtra( chapter_id, pos, long, path, rgb, layer )
{
	let sef		= [
		ObjPrim_Create(OBJ_SPRITE_2D),
		ObjPrim_Create(OBJ_SPRITE_2D),
		ObjPrim_Create(OBJ_SPRITE_2D),
	];
	
	let ipos = [ 0,    96 + 96 * chapter_id ];
	
	StageTitleDisplay01Ex( [pos[0]+128, pos[1]+8], long, path, rgb, layer, 1, [0,0,512,48], [-0.1,0], BLEND_ADD_ARGB );
	StageTitleDisplay01Ex( pos, long, path, [255,255,255], layer, 0.8, [ipos[0],ipos[1],ipos[0]+512,ipos[1]+48], [0.1,0], BLEND_ALPHA );
	StageTitleDisplay02Ex( [pos[0]+128, pos[1]+4], ipos, long-30, path, [255,255,255] );
	waitEx(long+60);
	ascent(i in 0 .. 45)
	{
		let tmp = i/44;
		let ix = CenX + (tmp-0.33)*360;
		let iy = pos[1];
		ascent(i in 0 .. 2)
		{
			StageTitleDisplayEx_Paeticle(ix, iy, randEffect(1,3), 135+randEffect(-60,60), 60+i*60, randEffect(0.2,0.4), rgb);
		}
		yield;
	}
	

	task StageTitleDisplay01Ex( pos, long, path, rgb, layer, sca, rect, mpos, blend )
	{
		let sef		= ObjPrim_Create(OBJ_SPRITE_2D);
		
		ObjPrim_SetTexture(sef, path );
		Obj_SetRenderPriorityI(sef, layer );
		ObjRender_SetBlendType(sef, blend );
		ObjRender_SetAngleXYZ(sef, 0, 0, 0 );
		ObjRender_SetScaleXYZ(sef, sca, sca, 0 );
		ObjRender_SetAlpha(sef, 0 );
		ObjRender_SetColor(sef, rgb[0], rgb[1], rgb[2]);
		
		ObjSprite2D_SetSourceRect(sef, rect[0], rect[1], rect[2], rect[3] );
		ObjSprite2D_SetDestCenter(sef);

		let bx = pos[0];
		let by = pos[1];
		ascent(t in 0 .. 60)
		{
			let tmp = sin((t+1)/60*90);
			let tmp2 = 1 - cos(sin(tmp*90)*90);
			let tmp3 = sin(tmp2*90);

			ObjRender_SetAlpha(sef, tmp*255 );
			ObjRender_SetScaleXYZ(sef, (1+tmp3)*sca/2, tmp3*sca, 0 );
			ObjRender_SetPosition(sef, bx, by-(1-tmp2)*sca*48, 0 );
			bx += mpos[0]*(30-tmp*29);
			by += mpos[1]*(5-tmp*4);
			yield;
		}
		loop(long)
		{
			ObjRender_SetPosition(sef, bx, by, 0 );
			bx += mpos[0];
			by += mpos[1];
			yield;
		}
		descent(t in 0 .. 30)
		{
			let tmp = sin((t+1)/30*90);
			ObjRender_SetPosition(sef, bx, by, 0 );
			ObjRender_SetAlpha(sef, tmp*255 );
			if (blend == BLEND_ADD_ARGB)
			{
				ObjRender_SetScaleXYZ(sef, 1.5-tmp/2, tmp, 1 );
			}
			bx += mpos[0]*(30-tmp*29);
			by += mpos[1]*(5-tmp*4);
			yield;
		}
		Obj_Delete(sef);
	}
	
	// ポエム部分
	task StageTitleDisplay02Ex( pos, ipos, long, path, rgb )
	{
		let sef		= [
			ObjPrim_Create(OBJ_SPRITE_2D),
			ObjPrim_Create(OBJ_SPRITE_2D),
		];
		let i		= 0;
		let sca		= 0.7;
		let move1	= 0;
		let moveA	= 0;
		let move2	= 0;
		let moveB	= 0;
		let offset_x	= 0;
		let offset_y	= 24;
		let moveX	= [48, 96, -24];
		let moveY	= [0, 0, 0];
		
		ascent( i in 0..length(sef) ){
			ObjPrim_SetTexture(sef[i], path );
			Obj_SetRenderPriorityI(sef[i], 72 );
			ObjRender_SetBlendType(sef[i], BLEND_ALPHA );
			ObjRender_SetAngleXYZ(sef[i], 0, 0, 0 );
			ObjRender_SetScaleXYZ(sef[i], sca, sca, 0 );
			ObjRender_SetAlpha(sef[i], 0 );
			ObjSprite2D_SetSourceRect(sef[i], ipos[0], ipos[1]+i*24+48, ipos[0]+512, ipos[1]+(i+1)*24+48 );
			ObjSprite2D_SetDestCenter(sef[i]);
			ObjRender_SetScaleXYZ(sef[i], sca, sca, 0 );
		}
		
		while( move1 < 1 || move2 < 1 ){
			if( move1 < 1 ){ move1 = 1 * sin( moveA ); }
			if( move2 < 1 ){ move2 = 1 * sin( moveB ); }
			
			let muki = 1;
			ascent( i in 0..length(sef) ){
				ObjRender_SetAlpha(sef[i], move1*255 );
				ObjRender_SetPosition(sef[i], pos[0] + offset_x+(1-move2)*moveX[i], pos[1]+offset_y+i*15*sca+(1-move2)*moveY[i], 0 );
				muki = -muki;
			}
			
			moveA += 2;
			moveB += 1;
			
			yield;
		}
		move1 = 0;
		moveA = 0;
		move2 = 0;
		moveB = 0;
		
		loop( long ){
			let muki = 1;
			ascent( i in 0..length(sef) ){
				ObjRender_SetPosition(sef[i], pos[0] + offset_x, pos[1]+offset_y+i*15*sca, 0 );
				muki = -muki;
			}
			
			yield;
		}
		while( move1 < 1 || move2 < 1 ){
			if( move1 < 1 ){ move1 = 1 * sin( moveA ); }
			
			let muki = 1;
			ascent( i in 0..length(sef) ){
				ObjRender_SetAlpha(sef[i], (1-move1)*255 );
				ObjRender_SetPosition(sef[i], pos[0] + offset_x-move2*moveX[i], pos[1]+offset_y+i*15*sca+move2*moveY[i], 0 );
				muki = -muki;
			}
			
			moveA += 2;
			move2 += moveB;
			moveB += 0.001;
			
			yield;
		}
		ascent( i in 0..length(sef) ){
			Obj_Delete(sef[i]);
		}
	}

	task StageTitleDisplayEx_Paeticle(x, y, speed, angle, timer, size, rgb)
	{
		if (IsDrawEffect() < 1) { return; }
		let mx = speed*cos(angle);
		let my = speed*sin(angle);
		let blink = randEffect(15,90);
		let ea = angle;
		let obj = CreateParticleEffect([x, y], size, 2);
		ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
		ObjRender_SetColor(obj, rgb[0]+64, rgb[1]+64, rgb[2]+64);

		ascent(i in 0 .. timer)
		{
			let tmp = sin((i+1)/timer*90);
			ObjRender_SetPosition(obj, x, y, 0);
			ObjRender_SetScaleXYZ(obj, tmp, tmp, tmp);
			ObjRender_SetAlpha(obj, (1-tmp)*512 + sin(i*blink)*64);
			ObjRender_SetAngleZ(obj, ea);
			ea += (1-tmp)*6;
			x += mx*tmp;
			y += my*tmp;
			yield;
		}
		Obj_Delete(obj);
	}
}

