//========================================
// 集中エフェクトライブラリ
//========================================



//----------------------------------------
// セットモノ
//----------------------------------------

//集中エフェクト
task EffectChargeSetA(objTarget, eff_color, timer)
{
	EffectConcentrationA(objTarget, eff_color, timer);
}

//集中エフェクト（通常）
task EffectConcentrationA(objTarget, eff_color, timer)
{
	let size = 2.5;
	_EffectConcentration(objTarget, eff_color, size, timer);
}

// 集中エフェクト（ライン）
task EffectConcentrationLine(objTarget, eff_color, timer, scale)
{
	_EffectConcentrationLine(objTarget, eff_color, timer, scale);
}
task EffectConcentrationLineEx(x, y, eff_color, timer, scale)
{
	let objTarget = ObjEnemy_Create(OBJ_ENEMY);
	ObjMove_SetPosition(objTarget, x, y);
	
	_EffectConcentrationLine(objTarget, eff_color, timer, scale);
	wait(timer+120);
	Obj_Delete(objTarget);
}

//----------------------------------------
// 集中エフェクト
//----------------------------------------
task _EffectConcentration(objTarget, c_index, size, timer)
{
	if (IsDrawEffect() < 2) { return; }
	
	let t = max(timer/2, timer-60);
	let timer2 = 60;
	if (t < 60) { timer2 = t+30; }
	let count = ceil(t/2);
	ascent(i in 0 .. count)
	{
		if (Obj_IsDeleted(objTarget)) { break; }
		let c = c_index;
	//	if (c_index < EFF_WHITE) { c = (c_index+(i%3-1)+7)%7; }
		let color = GetEffectColorCharge(c);
		let scolor = GetEffectSubtractColor(c);
		_EffectConcentrationP(objTarget, size, timer2, priorityEffectBack, color, scolor);
		waitEx(2);
	}
}

// エフェクト単品
task _EffectConcentrationP(objTarget, size, timer, lay, color, scolor)
{
	let ax = randEffect(-60,60);
	let ay = randEffect(-60,60);
	//初期設定
	let obj = [ObjPrim_Create(OBJ_SPRITE_2D), ObjPrim_Create(OBJ_SPRITE_2D)];
	ascent(i in 0 .. 2)
	{
		Obj_SetRenderPriorityI(obj[i], lay+i);
		ObjPrim_SetTexture(obj[i], imgEffectPower);
		ObjSprite2D_SetSourceRect(obj[i], 0, 0, 256, 256);
		ObjSprite2D_SetDestCenter(obj[i]);
		ObjRender_SetAngleX(obj[i], ay);
		ObjRender_SetAngleY(obj[i], ax);
	}
	ObjRender_SetColor(obj[0], scolor[0], scolor[1], scolor[2]);
	ObjRender_SetColor(obj[1], color[0], color[1], color[2]);
	ObjRender_SetBlendType(obj[0], BLEND_SUBTRACT);
	ObjRender_SetBlendType(obj[1], BLEND_ADD_ARGB);
	
	let az = randEffect(0,360);
	let add_angle = randEffect(-360,360);
	ascent(t in 0 .. timer)
	{
		if (Obj_IsDeleted(objTarget)) { break; }
		let tmp = sin((t+1)/timer*90);
		let tmp2 = (1-tmp)^0.33;
		let tmp_scale = tmp2 * size;
		let tmp_a = az + add_angle*tmp2;
		let tmp_alpha = min(108, 192*tmp);
		ascent(i in 0 .. 2)
		{
			ObjRender_SetAngleZ(obj[i], tmp_a);
			ObjRender_SetPosition(obj[i], ObjMove_GetX(objTarget), ObjMove_GetY(objTarget), 0);
			ObjRender_SetScaleXYZ(obj[i], tmp_scale, tmp_scale, 1);
		}
		ObjRender_SetAlpha(obj[0], tmp_alpha*0.75);
		ObjRender_SetAlpha(obj[1], tmp_alpha);
		yield;
	}
	Obj_Delete(obj[0]);
	Obj_Delete(obj[1]);
}

//----------------------------------------
// 撃破エフェクト
//----------------------------------------
function BossFinalExplode(objTarget, bigEffect)
{
	BossFinalExplodeA(objTarget, bigEffect);
	CallSound(sndBossEndBigin);
	if (bigEffect) { BossFinalExplode_SetSlow(90); }
	wait(90);
	if (!Obj_GetValueD(objTarget, "NOT_BOSS", false))
	{
		if (bigEffect) { DisplayShake(60, 36); }
		else { DisplayShake(60, 36); }
	}
	
	local
	{
		let bx = ObjMove_GetX(objTarget);
		let by = ObjMove_GetY(objTarget);
		let timer = 120;
		let size = 6;
		CallSound(sndBossEnd);
		ascent (i in 0 .. 45)
		{
			_BossFinalExplodeB(bx, by,
				randEffect(0,360), timer, randEffect(0,size^2)^0.5, randEffect(128,255), randEffect(128,255), 128);
			yield;
		}
	}
}
task BossFinalExplode_SetSlow(timer)
{
	StartSlow(TARGET_ALL, 30);
	wait(timer);
	StopSlow(TARGET_ALL);
}

task BossFinalExplodeA(objTarget, bigEffect)
{
	ascent (i in 0 .. 20)
	{
		let tmp = i/19;
		_BossFinalExplodeA(objTarget, 45, 4+tmp*10, tmp*360);
		wait(3);
	}
}

task _BossFinalExplodeA(objTarget, timer, size, effect_c)
{
//	let size = 7;
	let rz = randEffect(0, 360);
	let rz_add = randEffect(-1, 1);
	
	//初期設定
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(obj, priorityEffect);
	ObjPrim_SetTexture(obj, imgEffectExplode2);
	ObjSprite2D_SetSourceRect(obj, 0, 0, 128, 128);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
	ObjRender_SetPosition(obj, ObjMove_GetX(objTarget), ObjMove_GetY(objTarget), 0);
	ObjRender_SetColorHSV(obj, effect_c, 128, 255);

	descent(i in 0 .. timer)
	{
		if (Obj_IsDeleted(objTarget)) { break; }
		let tmp = (i+1)/timer;
		let tmp_s = size * sin(tmp*180) * (1+tmp)/2;
		ObjRender_SetScaleXYZ(obj, tmp_s, tmp_s, 1);
		ObjRender_SetAlpha(obj, (1-tmp)*128);
		ObjRender_SetPosition(obj, ObjMove_GetX(objTarget), ObjMove_GetY(objTarget), 0);
		ObjRender_SetAngleZ(obj, rz);
		rz += rz_add;
		yield;
	}
	Obj_Delete(obj);
}

task _BossFinalExplodeB(x, y, angle, timer, size, cr, cg, cb)
{
	let ax = randEffect(-60,60);
	let ay = randEffect(-60,60);
	let az = randEffect(0,360);
	//初期設定
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(obj, priorityEffect);
	ObjPrim_SetTexture(obj, imgEffectExplode3);
	ObjSprite2D_SetSourceRect(obj, 0, 0, 256, 256);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetAngleX(obj, ay);
	ObjRender_SetAngleY(obj, ax);
	ObjRender_SetAngleZ(obj, az);
	ObjRender_SetColor(obj, cr, cg, cb);
	ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
	ObjRender_SetPosition(obj, x, y, 0);
	
	descent(t in 0 .. timer)
	{
		let tmp = sin((t+1)/timer*90);
		let tmp2 = (1-tmp)^0.33;
		let tmp_scale = tmp2 * size;
		let tmp_alpha = min(108, 192*tmp);
		ObjRender_SetScaleXYZ(obj, tmp_scale, tmp_scale, 1);
		ObjRender_SetAlpha(obj, tmp_alpha*0.75);
		ObjRender_SetAlpha(obj, tmp_alpha);
		yield;
	}
	Obj_Delete(obj);
}

//----------------------------------------
// 集中エフェクト（円）
//----------------------------------------
task EffectConcentrationCircle(objTarget, scale, timer)
{
//	//_EffectConcentration02(objTarget, [EFF_WHITE] , 60, -3.5, 400, timer-15);
//	_EffectConcentration02(objTarget, [EFF_WHITE] , 60+180, -3.5, 400, timer-15);
	_EffectConcentrationCircle(ObjMove_GetX(objTarget), ObjMove_GetY(objTarget), scale, timer);
}

task _EffectConcentrationCircle(x, y, scale, timer)
{
	
	//初期設定
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(obj, priorityEffectBack);
	ObjPrim_SetTexture(obj, imgEffectChargeC);
	ObjSprite2D_SetSourceRect(obj, 0, 0, 256, 256);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
	ObjRender_SetPosition(obj, x, y, 0);
	
	let angle = 0;
	descent(t in 0 .. timer)
	{
		let tmp = (t+1)/timer;
		let tmp_scale = (tmp^0.5)*scale;
		let tmp_alpha = 255*(1-tmp);
		ObjRender_SetAngleZ(obj, angle);
		ObjRender_SetScaleXYZ(obj, tmp_scale, tmp_scale, 1);
		ObjRender_SetAlpha(obj, tmp_alpha);
		angle += (t+5)^2;
		yield;
	}
	Obj_Delete(obj);
}

//----------------------------------------
// 集中エフェクト（ライン）
//----------------------------------------
task _EffectConcentrationLine(objTarget, eff_color, timer, scale)
{
	// エフェクトOFFでも描画（プレイに支障が出そうなので）
//	if (IsDrawEffect() < 2) { return; }

	let eff_t = 30;
	let tmp_c = GetEffectColorL(eff_color);
	let eff_c = [tmp_c[0]*0.75+64, tmp_c[1]*0.75+64, tmp_c[2]*0.75+64];

	let tmp_t = timer-eff_t;
	ascent(i in 0 .. tmp_t)
	{
		if (Obj_IsDeleted(objTarget)) { break; }
		let tmp = (i+1)/tmp_t;
		_EffectConcentrationL(objTarget, scale*(1-tmp/2), eff_c, eff_t, priorityEffect);
		yield;
	}
}

// エフェクト単品
task _EffectConcentrationL(objTarget, scale, color, timer, lay)
{
	//初期設定
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(obj, lay);
	ObjPrim_SetTexture(obj, imgEffectCon);
	ObjSprite2D_SetSourceRect(obj, 0, 0, 16, 128);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
	ObjRender_SetColor(obj, color[0], color[1], color[2]);
	
	let az = randEffect(0,360); let add_az = randEffect(-1,1);
	
	descent(t in 0 .. timer)
	{
		if (Obj_IsDeleted(objTarget)) { break; }
		let tmp = t/timer;
		let tmp_scale = scale * tmp;
		ObjRender_SetAngleZ(obj, az);
		ObjRender_SetPosition(obj, ObjMove_GetX(objTarget), ObjMove_GetY(objTarget), 0);
		ObjRender_SetScaleXYZ(obj, 0.5, tmp_scale, 1);
		ObjRender_SetAlpha(obj, 255*(1-tmp^2));
		az += add_az;
		yield;
	}
	Obj_Delete(obj);
}

//----------------------------------------------------------------
//----------------------------------------------------------------
//　追加

task EffectConcentration( parentID, eff_color ){
	let GetX = ObjMove_GetX( parentID );
	ascent( let i in 0..4 ){
		let obj = [];
		ascent( let j in 0..11 ){
			if( GetX < CenX ){
				obj = obj ~ [ CreateVertexPoint( parentID, 192+j*64, 45-j*4, 485-i*32, j*4 ) ];
			}
			else{
				obj = obj ~ [ CreateVertexPoint( parentID, 192+j*64, 135+j*4, -485+i*32, j*4 ) ];
			}
		}
		CreateVertex( obj, parentID, 16, BLEND_SUBTRACT, 255, eff_color );
		CreateVertex( obj, parentID, 48, BLEND_ADD_ARGB, 192, eff_color );
		loop( 12 ){ yield; }
	}
}

//　頂点ﾎﾟｲﾝﾄ作成
function CreateVertexPoint( parentID, distance, angle, m_angle, delay ){
	let obj = CreateShotA1( 0, 0, 0, 0, 1, 0 );
	ObjShot_SetAutoDelete( obj, false );
	ObjShot_SetSpellResist( obj, true );
	ObjShot_SetIntersectionEnable( obj, false );
	ObjShot_SetItemChange( obj, false );
	ObjRender_SetAlpha( obj, 0 );
	
	VertexPointUpdate( parentID, obj, distance, angle, m_angle, delay );
	
	return obj;
}

task VertexPointUpdate( parentID, objID, distance, angle, m_angle, delay ){
	let move1 = 0;
	let moveA = 0;
	
	//　初期値
	let gpos = [
		ObjMove_GetX(parentID),
		ObjMove_GetY(parentID),
	];
	let dist = distance - move1*distance;
	let ang = angle + move1*m_angle;
	ObjMove_SetPosition( objID, gpos[0] + dist * cos(ang), gpos[1] + dist * sin(ang) );
	
	loop( delay ){ yield; }
	//　更新
	while( !Obj_IsDeleted(parentID) && move1 < 1 ){
		move1 = 1 * sin( moveA );
		
		gpos = [
			ObjMove_GetX(parentID),
			ObjMove_GetY(parentID),
		];
		dist = distance - move1*distance;
		ang = angle + move1*m_angle;
		ObjMove_SetPosition( objID, gpos[0] + dist * cos(ang), gpos[1] + dist * sin(ang) );
		
		moveA += 1;
		
		yield;
	}
	Obj_Delete( objID );
};

//　線描画
task CreateVertex( obj_array, parentID, width, blend, alpha, color ){
	let obj = ObjPrim_Create( OBJ_PRIMITIVE_2D );
	ObjPrim_SetPrimitiveType( obj, PRIMITIVE_TRIANGLESTRIP );
	ObjPrim_SetVertexCount( obj, length(obj_array) * 2 );
	ObjPrim_SetTexture( obj, imgEffectSlash );
	ObjRender_SetBlendType( obj, blend );
	Obj_SetRenderPriorityI( obj, priorityEffect );
	ObjRender_SetColor( obj, color[0], color[1], color[2] );
	
	let move1 = 0;
	let moveA = 0;
	let animec = 0;
	let anime = 0;
	
	//　作成された頂点ﾎﾟｲﾝﾄにﾌﾟﾘﾐﾃｨﾌﾞの頂点割り当て
	while( !Obj_IsDeleted(obj_array[ length(obj_array)-1 ]) ){
		
		move1 = 1 * sin( moveA );
		
		ascent( i in 0..length(obj_array) ){
			//　頂点ﾎﾟｲﾝﾄ
			let pos1 = [ ObjMove_GetX(obj_array[i]), ObjMove_GetY(obj_array[i]) ];
			
			//　親の座標
			let pos2 = [ ObjMove_GetX(parentID), ObjMove_GetY(parentID) ];
			
			//　頂点ﾎﾟｲﾝﾄから親への角度
			let angle = GetGapAngle( pos1, pos2 );
			
			if( !Obj_IsDeleted(obj_array[i]) ){
				ObjPrim_SetVertexPosition( obj, 0 + i*2, pos1[0] + width/2 * cos(angle), pos1[1] + width/2 * sin(angle), 0 );
				ObjPrim_SetVertexPosition( obj, 1 + i*2, pos1[0] + width/2 * cos(angle+180), pos1[1] + width/2 * sin(angle+180), 0 );
			}
			let UVT = 512 / ( length(obj_array) - 1 );
			ObjPrim_SetVertexUVT( obj, 0 + i*2, 0 + i*UVT, 0 + anime*32 );
			ObjPrim_SetVertexUVT( obj, 1 + i*2, 0 + i*UVT, 0 + (anime+1)*32 );
			ObjPrim_SetVertexAlpha( obj, 0 + i*2, move1*alpha );
			ObjPrim_SetVertexAlpha( obj, 1 + i*2, move1*alpha );
		}
		
		if( move1 < 1 ){ moveA += 2; }
		if( animec > 0 && animec%2 == 0 ){ anime++; }
		animec++;
		yield;
	}
	Obj_Delete( obj );
}

//----------------------------------------------------------------
// ターゲットえへくと
//----------------------------------------------------------------
function TargetEffect(x, y, delay, timer, scale)
{
	let objBase = CreateShotA1( x, y, 0, 0, 1, 0 );
	ObjShot_SetIntersectionEnable(objBase, false);
	ObjShot_SetSpellResist(objBase, true);
	Obj_SetVisible(objBase, false);
	
	_TargetEffect(objBase, delay, timer, scale);
	
	return(objBase);
}
task _TargetEffect(objBase, delay, timer, scale)
{
	let obj = [ObjPrim_Create(OBJ_SPRITE_2D), ObjPrim_Create(OBJ_SPRITE_2D)];
	ascent(i in 0 .. 2)
	{
		Obj_SetRenderPriorityI(obj[i], GetShotRenderPriorityI+1);
		ObjPrim_SetTexture(obj[i], imgEffectTarget);
		ObjRender_SetPosition(obj[i], ObjMove_GetX(objBase), ObjMove_GetY(objBase), 0);
		ObjRender_SetBlendType(obj[i], BLEND_ADD_ARGB);
		ObjRender_SetColor(obj[i], 192, 0, 0);
	}
	ObjSprite2D_SetSourceRect(obj[0], 0, 0, 128, 128);
	ObjSprite2D_SetDestCenter(obj[0]);
	ObjSprite2D_SetSourceRect(obj[1], 128, 0, 256, 128);
	ObjSprite2D_SetDestCenter(obj[1]);
	
	ascent(t in 0 .. delay)
	{
		if (Obj_IsDeleted(objBase)) { break; }
		let tmp = sin((t+1)/delay*90);
		ObjRender_SetAlpha(obj[0], max(0,tmp*2-1)*255);
		ObjRender_SetAlpha(obj[1], min(1,tmp*2)*255);
		ObjRender_SetAngleZ(obj[0], (1-tmp)*360);
		ObjRender_SetAngleZ(obj[1], -(1-tmp)*360);
		ObjRender_SetScaleXYZ(obj[0], tmp*scale, tmp*scale, 1);
		ObjRender_SetScaleXYZ(obj[1], (2-tmp)*scale, (2-tmp)*scale, 1);
		ascent(i in 0 .. 2)
			{ ObjRender_SetPosition(obj[i], ObjMove_GetX(objBase), ObjMove_GetY(objBase), 0); }
		yield;
	}
	ascent(t in 0 .. timer)
	{
		if (Obj_IsDeleted(objBase)) { break; }
		ObjRender_SetAlpha(obj[0], (1.5-(t%8)/6)*255);
		ObjRender_SetAlpha(obj[1], (1.5-(t%8)/6)*255);
		ascent(i in 0 .. 2)
			{ ObjRender_SetPosition(obj[i], ObjMove_GetX(objBase), ObjMove_GetY(objBase), 0); }
		yield;
	}
	descent(t in 0 .. 30)
	{
		if (Obj_IsDeleted(objBase)) { break; }
		let tmp = sin((t+1)/30*90);
		ObjRender_SetAlpha(obj[0], max(0,tmp*2-1)*255);
		ObjRender_SetAlpha(obj[1], min(1,tmp*2)*255);
		ObjRender_SetAngleZ(obj[0], (1-tmp)*360);
		ObjRender_SetAngleZ(obj[1], -(1-tmp)*360);
		ObjRender_SetScaleXYZ(obj[0], tmp*scale, tmp*scale, 1);
		ObjRender_SetScaleXYZ(obj[1], tmp*scale, tmp*scale, 1);
		ascent(i in 0 .. 2)
			{ ObjRender_SetPosition(obj[i], ObjMove_GetX(objBase), ObjMove_GetY(objBase), 0); }
		yield;
	}
	ascent(i in 0 .. 2) { Obj_Delete(obj[i]); }
	Obj_Delete(objBase);
}

//----------------------------------------------------------------
// 爆発えへくと
//----------------------------------------------------------------

task EffectExplode(x, y, scale, color, timer)
{
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(obj, priorityEffect);
	ObjPrim_SetTexture(obj, imgEffectExpNormal);
	ObjSprite2D_SetSourceRect(obj, 0, 0, 128, 128);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
	ObjRender_SetColor(obj, color[0], color[1], color[2]);
	ObjRender_SetPosition(obj, x, y, 0);
	ObjRender_SetAngleZ(obj, randEffect(0,360));
	
	ascent(t in 0 .. timer)
	{
		let tmp = GetCurve((t+1)/timer);
		ObjRender_SetScaleXYZ(obj, tmp*scale, tmp*scale, 1);
		ObjRender_SetAlpha(obj, 255*(1-tmp));
		yield;
	}
	Obj_Delete(obj);
}
task EffectCharge(x, y, scale, color, timer)
{
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(obj, priorityEffect);
	ObjPrim_SetTexture(obj, imgEffectExpNormal);
	ObjSprite2D_SetSourceRect(obj, 0, 0, 128, 128);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
	ObjRender_SetColor(obj, color[0], color[1], color[2]);
	ObjRender_SetPosition(obj, x, y, 0);
	ObjRender_SetAngleZ(obj, randEffect(0,360));
	
	ascent(t in 0 .. timer)
	{
		let tmp = GetCurve((t+1)/timer);
		ObjRender_SetScaleXYZ(obj, (1-tmp)*scale, (1-tmp)*scale, 1);
		ObjRender_SetAlpha(obj, 255*(1-tmp));
		yield;
	}
	Obj_Delete(obj);
}

task EffectExplodeCloudSet(x, y, scale, color, timer, count)
{
	loop(count)
	{
		EffectExplodeCloud(x, y, scale, color, timer);
		yield;
	}
}
task EffectExplodeCloud(x, y, scale, color, timer)
{
	if (IsDrawEffect() < 2) { return; }
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(obj, priorityEffect);
	ObjPrim_SetTexture(obj, imgEffectExpCloud);
	ObjSprite2D_SetSourceRect(obj, 0, 0, 128, 128);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
	ObjRender_SetColor(obj, color[0], color[1], color[2]);
	ObjRender_SetPosition(obj, x, y, 0);
	ObjRender_SetAngleZ(obj, randEffect(0,360));
	
	ascent(t in 0 .. timer)
	{
		let tmp = GetCurve((t+1)/timer);
		ObjRender_SetScaleXYZ(obj, tmp*scale, tmp*scale, 1);
		ObjRender_SetAlpha(obj, 255*(1-tmp));
		yield;
	}
	Obj_Delete(obj);
}

//----------------------------------------------------------------
// 爆発えへくと
//----------------------------------------------------------------

task EffectConcentrationPoint(x, y, objTarget, color, count, timer)
{
	EffectConcentrationPointEx(x, y, objTarget, color, count, 3, 180, timer);
}
task EffectConcentrationPointEx(x, y, objTarget, color, count, wt, size, timer)
{
	if (IsDrawEffect() < 1) { return; }
	
	ascent(i in 0 .. count)
	{
		if (Obj_IsDeleted(objTarget)) { break; }
		_EffectConcentrationPoint(x, y, objTarget, color, size, timer);
		waitEx(wt);
	}
}

task _EffectConcentrationPoint(x, y, objTarget, color, size, timer)
{
	if (IsDrawEffect() < 1) { return; }
	
	let ex = x;
	let ey = y;
	let ea = randEffect(0,360);
	let add_ea = ([3, -3][randEffect(0,2)>1]);
	let oa = randEffect(0,360);
	ascent(t in 0 .. timer/3)
	{
		if (Obj_IsDeleted(objTarget)) { break; }
		let tmp = GetCurve(t/(timer/3));
		let er = tmp*size;
		let pos = Rotate2D_XY(er*cos(ea),er/2*sin(ea),oa);
		SingleParticleEffect([ex+pos[0],ey+pos[1]], 0.5, 2, color, 30);
		ea += add_ea;
		waitEx(1);
	}
	ascent(t in 0 .. timer*2/3)
	{
		if (Obj_IsDeleted(objTarget)) { break; }
		let tmp = GetCurve_a((t+1)/(timer*2/3));
		let er = (1-tmp)*size;
		let pos = Rotate2D_XY(er*cos(ea),er/2*sin(ea),oa);
		ex = ObjMove_GetX(objTarget)*tmp + x*(1-tmp);
		ey = ObjMove_GetY(objTarget)*tmp + y*(1-tmp);
		SingleParticleEffect([ex+pos[0],ey+pos[1]], 0.5, 2, color, 30);
		ea += add_ea*(1-tmp);
		waitEx(1);
	}
}
