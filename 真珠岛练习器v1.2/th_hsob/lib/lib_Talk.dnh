#include "./lib_Fukidashi.dnh"

let FINISH_TALK = false;
let SKIP_FLAG = 0;
let FIRST_WAIT_FLAG = true;

let priorityTalk = 92;
let objTalkObject = [];


//  会話開始
sub StartTalk
{
	SetForbidPlayerShot(true);
	SetForbidPlayerSpell(true);
	FINISH_TALK = false;
}

//  会話終了
function FinishTalk(fadeOut)
{
	if (fadeOut) { FINISH_TALK = true; }
	// 吹き出し削除
	DeleteAllFukidashi();
	wait(45);
	SetForbidPlayerShot(false);
	SetForbidPlayerSpell(false);
}

// -------------------------------------------------
// 母体的なアレ
// -------------------------------------------------
// 画像の範囲を指定、キャラごとに自動判別
function CreateTalkObject(characterID, isBoss)
{
	return(_CreateTalkObject(characterID, isBoss, 0, 0));
}
function CreateTalkObjectEx(characterID, isBoss, offset_x, offset_y)
{
	return(_CreateTalkObject(characterID, isBoss, offset_x, offset_y));
}
// 地の文を出したい場合はこちら！
function CreateDescriptiveObject()
{
	let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	Obj_SetValue(obj, "DES", true);		// 地の文フラグ立て
	Obj_SetValue(obj, "FW", false);
	ChangeDescriptive(obj);
	objTalkObject = objTalkObject ~ [obj];	//配列に登録
	return(obj);
}

function _CreateTalkObject(characterID, isBoss, offset_x, offset_y)
{
	// 配置位置
	let imgX = 0;
	let imgY = 0;
	// 画像サイズ
	let cutinSizeX = 256;
	let cutinSizeY = 256;
	// 吹き出し位置オフセット
	let fukiX = 0;
	let fukiY = 0;
	// 立ち絵の移動方向
	let move_position = [-1, 1][isBoss];
	// 吹き出しの上下方向
	let fukidashi_top = true;
	
	if (isBoss)
	{
		// ボス
		alternative(characterID)
		case(BOSS_ID_RANRAN)
		{
			cutinSizeX = 512*1.2;
			cutinSizeY = 512*1.2;
			imgX = MaxX;
			imgY = MaxY-160;
			fukiX = 64;
			fukiY = -10;
		}
		case(BOSS_ID_CHII)
		{
			cutinSizeX = 512*1.3;
			cutinSizeY = 512*1.3;
			imgX = MaxX;
			imgY = MaxY-160-64;
			fukiX = 32;
			fukiY = -10+64;
		}
		case(BOSS_ID_HIKARIKO)
		{
			cutinSizeX = 512*1.2;
			cutinSizeY = 512*1.2;
			imgX = MaxX;
			imgY = MaxY-160;
			fukiX = 64;
			fukiY = -10;
		}
		case(BOSS_ID_SIRAN)
		{
			cutinSizeX = 512*1.25;
			cutinSizeY = 512*1.25;
			imgX = MaxX+32;
			imgY = MaxY-160;
			fukiX = 64-32;
			fukiY = -10;
		}
		case(BOSS_ID_MYSTIA)
		{
			cutinSizeX = 512*1.3;
			cutinSizeY = 512*1.3;
			imgX = MaxX+32;
			imgY = MaxY-160;
			fukiX = 64-32;
			fukiY = -10;
		}
		case(BOSS_ID_SET)
		{
			cutinSizeX = 512*1.15;
			cutinSizeY = 512*1.15;
			imgX = MaxX+32;
			imgY = MaxY-160;
			fukiX = 64-32;
			fukiY = -10;
		}
		case(BOSS_ID_HOROU)
		{
			cutinSizeX = 512*1.15;
			cutinSizeY = 512*1.15;
			imgX = MaxX+16;
			imgY = MaxY-160-32;
			fukiX = 64-16;
			fukiY = -10+32;
		}
		case(BOSS_ID_MUMEI)
		{
			cutinSizeX = 512*1.15;
			cutinSizeY = 512*1.15;
			imgX = MaxX+16;
			imgY = MaxY-160+8;
			fukiX = 64-16;
			fukiY = -10-8;
		}
		case(BOSS_ID_DUMMY)
		{
			cutinSizeX = 0;
			cutinSizeY = 0;
			imgX = MaxX;
			imgY = MaxY-160;
			fukiX = 64;
			fukiY = -10;
		}
		others
		{
			cutinSizeX = 512;
			cutinSizeY = 512;
			imgX = MaxX;
			imgY = MaxY;
			fukiX = 0;
			fukiY = 0;
		}
	}
	else
	{
		// 自機
		alternative(characterID)
		case(BOSS_ID_REIMU)
		{
			cutinSizeX = 512*1.1;
			cutinSizeY = 512*1.1;
			imgX = 180-40;
			imgY = MaxY-120;
			fukiX = -64-48+40;
			fukiY = -10-40+16;
		}
		case(BOSS_ID_MARISA)
		{
			cutinSizeX = 512*1.1;
			cutinSizeY = 512*1.1;
			imgX = 180-40;
			imgY = MaxY-120;
			fukiX = -64-48+40;
			fukiY = -10-40+16;
		}
		case(BOSS_ID_SAKUYA)
		{
			cutinSizeX = 512*1.05;
			cutinSizeY = 512*1.05;
			imgX = 180+60;
			imgY = MaxY-120;
			fukiX = -64-48-60;
			fukiY = -10-40+16;
		}
		case(BOSS_ID_KAGUYA)
		{
			cutinSizeX = 512*1.1;
			cutinSizeY = 512*1.1;
			imgX = 180-40;
			imgY = MaxY-120+12;
			fukiX = -64-48+40;
			fukiY = -10-40+16-12;
		}
		others
		{
			cutinSizeX = 512;
			cutinSizeY = 512;
			imgX = 120;
			imgY = MaxY-cutinSizeY/2+64;
			fukiX = 0;
			fukiY = 0;
		}
	}
	// オフセット
	imgX += offset_x;
	imgY += offset_y;
	// オブジェクト作成
	return( SetTalkImage(characterID, imgX, imgY, cutinSizeX, cutinSizeY, fukiX, fukiY, move_position, fukidashi_top) );
}

// 会話処理の親分さん
function SetTalkImage(characterID, x, y, iw, ih, fuki_x, fuki_y, move_position, fukidashi_top)
{
	let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	Obj_SetValue(obj, "IW", iw);
	Obj_SetValue(obj, "IH", ih);
	Obj_SetValue(obj, "BOSS_ID", characterID);	// IDセット
	ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLEFAN);
	Obj_SetRenderPriorityI(obj, priorityTalk);
	ObjPrim_SetVertexCount(obj, 4);
//	ObjPrim_SetTexture(obj, imgFile);
	ObjPrim_SetVertexUV(obj, 0, 0, 1/512);
	ObjPrim_SetVertexUV(obj, 1, 0, 1);
	ObjPrim_SetVertexUV(obj, 2, 1, 1);
	ObjPrim_SetVertexUV(obj, 3, 1, 1/512);
	ObjPrim_SetVertexPosition(obj, 0, -iw/2, -ih/2, 0);
	ObjPrim_SetVertexPosition(obj, 1, -iw/2, ih/2, 0);
	ObjPrim_SetVertexPosition(obj, 2, iw/2, ih/2, 0);
	ObjPrim_SetVertexPosition(obj, 3, iw/2, -ih/2, 0);
	ObjRender_SetPosition(obj, x, y, 0);
	// 画像セット
	ChangeTalkTexture(obj, I_NORMAL);
	// 吹き出しの向き
	if (fukidashi_top)
		{ Obj_SetValue(obj, "F_POSITION", [FUKIDASHI_TOP_LEFT, FUKIDASHI_TOP_RIGHT][move_position > 0]) }
	else
		{ Obj_SetValue(obj, "F_POSITION", [FUKIDASHI_LEFT, FUKIDASHI_RIGHT][move_position > 0]) }
	
	Obj_SetValue(obj, "FW", false);
	Obj_SetValue(obj, "VIS", true);
	Obj_SetValue(obj, "POSITION", move_position);
	TTalkImage(obj, x, y);
	ChangeFukidashi(obj, x+fuki_x, y+fuki_y);
	objTalkObject = objTalkObject ~ [obj];	//配列に登録
	return(obj);
}

// -------------------------------------------------
// 会話構成
// -------------------------------------------------

// 会話メッセージ（吹き出し消去機能つき）
function SetTalkEx(obj, text)
{
	_SetTalkEx(obj, text, 0, 0);
}
// 座標オフセット
function SetTalkEx2(obj, text, offset_x, offset_y)
{
	_SetTalkEx(obj, text, offset_x, offset_y);
}
// 吹き出し追加（前の奴を削除しない）
function SetTalkEx3(obj, text, offset_x, offset_y)
{
	// 吹き出しリセット
	SetFukidashiType(obj, FUKIDASHI_NORMAL);
	// 会話
	_AddTalk(obj, text, offset_x, offset_y);
}
function _SetTalkEx(obj, text, offset_x, offset_y)
{
	// 吹き出しリセット
	SetFukidashiType(obj, FUKIDASHI_NORMAL);
	// 吹き出し削除
	DeleteAllFukidashi();
	// 会話
	_SetTalk(obj, text, offset_x, offset_y);
	// カットインを前面に出す
	ChangeImageFoward(obj);
}

// 会話メッセージ
function SetTalk(obj, text)
{
	_SetTalk(obj, text, 0, 0);
}
function _SetTalk(obj, text, offset_x, offset_y)
{
	Obj_SetValue(obj, "NEXT", true);
	Obj_SetValue(obj, "TEXT", text);
	Obj_SetValue(obj, "OFFSET_X", offset_x);
	Obj_SetValue(obj, "OFFSET_Y", offset_y);
	Obj_SetValue(obj, "ADD", 0);
	
	if (length(text) > 0)
	{
		let tmpObj = ObjText_Create();
		ObjText_SetText(tmpObj, text);
		SetAreaCommonData(CAREA_STAGE, "BeforeTalk", ObjText_GetTextLengthCU(tmpObj));
		Obj_Delete(tmpObj);
	}
}
function _AddTalk(obj, text, offset_x, offset_y)
{
	Obj_SetValue(obj, "NEXT", true);
	Obj_SetValue(obj, "TEXT", text);
	Obj_SetValue(obj, "OFFSET_X", offset_x);
	Obj_SetValue(obj, "OFFSET_Y", offset_y);
	Obj_SetValue(obj, "ADD", 1);
	
	if (length(text) > 0)
	{
		let tmpObj = ObjText_Create();
		ObjText_SetText(tmpObj, text);
		SetAreaCommonData(CAREA_STAGE, "BeforeTalk", ObjText_GetTextLengthCU(tmpObj));
		Obj_Delete(tmpObj);
	}
}

// 吹き出し削除
sub DeleteAllFukidashi()
{
	ascent(i in 0 .. length(objTalkObject))
	{
		SetTalk(objTalkObject[i], "");
	}
}

// 選択肢表示（地の文用）
function SetChoiseWindow(bx, by, selects)
{
	return(_MakeChoiseWindow(bx, by, selects, 99));
}

//  ボタン待機
function WaitNext()
{
	return(WaitNextEx(1200));
}
function WaitNextEx(max_timer)
{
	if (FIRST_WAIT_FLAG)
	{
		FIRST_WAIT_FLAG = false;
		while(GetVirtualKeyState(VK_OK) != KEY_FREE) { yield; }
	}
	if (GetAutoTalk() > 0)
	{
		// オート送りモード
		let timer = 120;
		let len = GetAreaCommonData(CAREA_STAGE, "BeforeTalk", 0);
		if (len > 0)
		{
			timer = 90 + len*5;
			timer = max(1, ceil(timer*GetAutoTalk()));
		}

		let t = 0;
		loop
		{
			// キー送りは普通におーけー、キャンセルボタン押している間は進まない
			if (t > 2 && GetVirtualKeyState(VK_OK) == KEY_PUSH ||
				(t >= timer && GetVirtualKeyState(VK_CANCEL) != KEY_HOLD))
			{
				return(1);
			}
			t++;
			yield;
		}
	}
	else
	{
		let t = 0;
		loop
		{
			if (t > 2 && (GetVirtualKeyState(VK_OK) == KEY_PUSH || IsSkip() || t > max_timer))
				{ return(1); }
			if (GetVirtualKeyState(VK_OK) == KEY_PUSH || GetVirtualKeyState(VK_OK) == KEY_HOLD)
				{ SKIP_FLAG++; }
			else { SKIP_FLAG = 0; }
			t++;
			yield;
		}
	}
}
//  タイマー送り
function WaitNextTimer(timer)
{
	wait(timer);
	return(1);
}

// 画像変更
function ChangeTalkTexture(obj, imgType)
{
	if (imgType == I_NONE) { Obj_SetVisible(obj, false); }
	else { Obj_SetVisible(obj, true); }
	ObjPrim_SetTexture(obj, GetBossTexture(obj, imgType));
}

// 会話スキップ中？
function IsSkip()
{
	return(SKIP_FLAG > 45);
}

// 吹き出し位置変更
function SetFukidashiPosition(obj, fpos)
{
	Obj_SetValue(obj, "SP_TYPE", fpos);
}

// 吹き出し変更のモーションを省く
function SetFukidashiRefresh(obj)
{
	Obj_SetValue(obj, "REFRESH", 1);
}

// 立ち絵を手動でずらす
function ResetTalkImagePosition(obj, offset_x, offset_y, scale)
{
	let iw = Obj_GetValueD(obj, "IW", 0) * scale;
	let ih = Obj_GetValueD(obj, "IH", 0) * scale;
	ObjPrim_SetVertexPosition(obj, 0, -iw/2+offset_x, -ih/2+offset_y, 0);
	ObjPrim_SetVertexPosition(obj, 1, -iw/2+offset_x, ih/2+offset_y, 0);
	ObjPrim_SetVertexPosition(obj, 2, iw/2+offset_x, ih/2+offset_y, 0);
	ObjPrim_SetVertexPosition(obj, 3, iw/2+offset_x, -ih/2+offset_y, 0);
}

// -------------------------------------------------
// 会話処理
// -------------------------------------------------
task TTalkImage(obj, bx, by)
{
	let vx = -32*Obj_GetValueD(obj, "POSITION", 1);
	let vy = -32;
	let offset_r = -2;
	
	let alpha = 0;
	let t = 0;
	while(!Obj_IsDeleted(obj) || alpha < 0)
	{
		if (FINISH_TALK) {
			alpha -= 255/20;
			offset_r -= 0.1;
			ObjRender_SetAlpha(obj, alpha);
		} else {
			if (!Obj_GetValueD(obj, "VIS", true))
			{
				offset_r = max(-2, offset_r-0.15);
				alpha = max(0, alpha-30);
				Obj_SetRenderPriorityI(obj, priorityTalk);	//レイヤー設定
			}
			else if (Obj_GetValueD(obj, "FW", false))
			{
				offset_r = min(0, offset_r+0.15);
				Obj_SetRenderPriorityI(obj, priorityTalk+1);	//レイヤー設定
			}
			else if (offset_r < -1)
			{
				offset_r = min(-1, offset_r+0.15);
				Obj_SetRenderPriorityI(obj, priorityTalk);	//レイヤー設定
			}
			else
			{
				offset_r = max(-1, offset_r-0.15);
				Obj_SetRenderPriorityI(obj, priorityTalk);	//レイヤー設定
			}
			if (alpha < 255)
			{
				if (Obj_GetValueD(obj, "VIS", true)) { alpha += 255/30; }
				ObjRender_SetAlpha(obj, alpha);
			}
		}
		ObjRender_SetPosition(obj, bx+offset_r*vx, by+offset_r*vy, 0);
		let tmp_c = max(128, 128+(offset_r+1)*128);
		ObjRender_SetColor(obj, tmp_c, tmp_c, tmp_c);
		yield;
	}
}
function SetImageFoward(obj, tmp_value)
{
	Obj_SetValue(obj, "FW", tmp_value);
}
function SetImageVisible(obj, tmp_value)
{
	Obj_SetValue(obj, "VIS", tmp_value);
}

// 画像を手前に
function ChangeImageFoward(obj)
{
	ascent(i in 0 .. length(objTalkObject))
	{
		if (obj == objTalkObject[i]) { Obj_SetValue(objTalkObject[i], "FW", true); }
		else { Obj_SetValue(objTalkObject[i], "FW", false); }
	}
}
// 上の複数バージョン、引数は配列
function ChangeImageFowardEx(objs)
{
	ascent(i in 0 .. length(objTalkObject))
	{
		Obj_SetValue(objTalkObject[i], "FW", false);
	}
	ascent(i in 0 .. length(objTalkObject))
	{
		ascent(j in 0 .. length(objs))
		{
			if (objs[j] == objTalkObject[i]) { Obj_SetValue(objTalkObject[i], "FW", true); break; }
		}
	}
}

task FadeTalkImage(obj, timer)
{
	let move_position = Obj_GetValueD(obj, "POSITION", 1);
	if (timer > 0)
	{
		let tmp_t = timer;
		let bx = ObjRender_GetX(obj);
		let by = ObjRender_GetY(obj);
		ascent(t in 0 .. tmp_t)
		{
			ObjRender_SetPosition(obj,
				bx+(tmp_t-t-1)/tmp_t*64*move_position, by+(tmp_t-t-1)/tmp_t*64, 0);
			ObjRender_SetAlpha(obj, 255*(t+1)/tmp_t);
			yield;
		}
	}
	else
	{
		let tmp_t = -timer;
		let bx = ObjRender_GetX(obj);
		let by = ObjRender_GetY(obj);
		descent(t in 0 .. tmp_t)
		{
			ObjRender_SetPosition(obj,
				bx+(tmp_t-t-1)/tmp_t*64*move_position, by+(tmp_t-t-1)/tmp_t*64, 0);
			ObjRender_SetAlpha(obj, 255*(t+1)/tmp_t);
			yield;
		}
		Obj_Delete(obj);
	}
}
// 吹き出し変更監視
task ChangeFukidashi(parent, fuki_x, fuki_y)
{
	let objFukidashi = [];
	let f_position = Obj_GetValueD(parent, "F_POSITION", 1);
	while(!Obj_IsDeleted(parent))
	{
		if (Obj_GetValueD(parent, "NEXT", false))
		{
			f_position = Obj_GetValueD(parent, "F_POSITION", 1);
			
			let tx = Obj_GetValueD(parent, "TEXT", "");
			let offset_x = Obj_GetValueD(parent, "OFFSET_X", 0);
			let offset_y = Obj_GetValueD(parent, "OFFSET_Y", 0);
			let add_talk = Obj_GetValueD(parent, "ADD", 0);
			let sptype = Obj_GetValueD(parent, "SP_TYPE", f_position);
			let flg_refresh = Obj_GetValueD(parent, "REFRESH", 0);
			if (!add_talk)
			{
				if (length(objFukidashi) > 0)
				{
					// 前の吹き出し削除
					ascent(i in 0 .. length(objFukidashi)) { DeleteFukidashi(objFukidashi[i], flg_refresh); }
				}
			}
			if (length(tx) > 0)
			{
				let tmpObj = MakeFukidashiFront(fuki_x+offset_x, fuki_y+offset_y,
					Obj_GetValueD(parent, "F_TYPE", FUKIDASHI_NORMAL), sptype, tx, flg_refresh);
				objFukidashi = objFukidashi ~ [tmpObj];
			}
			Obj_SetValue(parent, "TEXT", "");
			Obj_SetValue(parent, "NEXT", false);
			Obj_SetValue(parent, "ADD", 0);
			Obj_SetValue(parent, "SP_TYPE", f_position);
			Obj_SetValue(parent, "F_COUNT", Obj_GetValueD(parent, "F_COUNT", 0) + 1);
			Obj_SetValue(parent, "REFRESH", 0);
		}
		yield;
	}
	// 吹き出し削除
	if (length(objFukidashi) > 0)
	{
		ascent(i in 0 .. length(objFukidashi)) { DeleteFukidashi(objFukidashi[i], 0); }
	}
}

function SetFukidashiType(obj, f_type)
{
	Obj_SetValue(obj, "F_TYPE", f_type);
}


// -------------------------------------------------
// 地の文
// -------------------------------------------------
// 吹き出し変更監視（地の文用）
task ChangeDescriptive(parent)
{
	let objFukidashi = -1;
	let f_position = Obj_GetValueD(parent, "F_POSITION", 1);
	while(!Obj_IsDeleted(parent))
	{
		if (Obj_GetValueD(parent, "NEXT", false))
		{
			if (objFukidashi != -1) { DeleteFukidashi(objFukidashi, 0); }
			let tx = Obj_GetValueD(parent, "TEXT", "");
			if (length(tx) > 0)
			{
				objFukidashi = _MakeDescriptive(tx, 99);
			}
			Obj_SetValue(parent, "TEXT", "");
			Obj_SetValue(parent, "NEXT", false);
			Obj_SetValue(parent, "F_COUNT", Obj_GetValueD(parent, "F_COUNT", 0) + 1);
		}
		yield;
	}
	if (objFukidashi != -1) { DeleteFukidashi(objFukidashi, 0); }
}

// -------------------------------------------------
// 名前表示
// -------------------------------------------------
task SetBossName(obj, objEnemy)
{
	let x = 300-96;
	let y = 240-48;
	let timer = 600;
	let msg_wait = 0;
	_SetBossName(obj, x, y, timer, msg_wait, objEnemy);
}
task SetBossNameEx(obj, x, y, timer, msg_wait, objEnemy)
{
	x += 300-96;
	y += 240-48;
	if (timer < 0) { timer = 600; }
	_SetBossName(obj, x, y, timer, msg_wait, objEnemy);
}
task _SetBossName(obj, x, y, timer, msg_wait, objEnemy)
{
	if (Obj_GetValueD(obj, "B_NAME", false)) { return; }
	Obj_SetValue(obj, "B_NAME", true);
	
	let cut_x = 12;
	let cut_y = 6;
	let scale = 1;
	
	let flgNext = false;
	CheckNext(msg_wait);
	SetEff();
	ascent(i in 0 .. cut_y)
	{
		SetY(i/cut_y, (i+1)/cut_y);
		wait(4);
	}
	
	task SetY(set_y, set_y2)
	{
		ascent(i in 0 .. cut_x)
		{
			_SetBossName_sinle(obj, [i/cut_x,set_y,(i+1)/cut_x,set_y2], timer);
			wait(2);
		}
	}
	task SetEff()
	{
		ascent(i in 0 .. 30)
		{
			_SetBossName_ring(obj, x+(randEffect(0,256)-32)*scale, y+(randEffect(0,128)-16)*scale, randEffect(0.5,1), 60);
			wait(1);
		}
	}
	
	task CheckNext(msg_wait)
	{
		yield;
		let ct = Obj_GetValueD(obj, "F_COUNT", 0);
		let wait_flg = 0;
		loop(timer+120)
		{
			if (ct != Obj_GetValueD(obj, "F_COUNT", 0))
			{
				wait_flg++;
				ct = Obj_GetValueD(obj, "F_COUNT", 0);
				if (wait_flg > msg_wait)
				{
					flgNext = true;
					break;
				}
			}
			wait(1);
		}
	}
	
	task _SetBossName_sinle(obj, ipos, timer)
	{
		let bx = x + 256*ipos[0]*scale;
		let by = y + 128*ipos[1]*scale;
		let sx = 256*(ipos[2]-ipos[0])*scale;
		let sy = 128*(ipos[3]-ipos[1])*scale;
		let ox = randEffect(0, 32)*scale;
		let oy = randEffect(0, 32)*scale;
		let sc = 1;

		let objEff = ObjPrim_Create(OBJ_SPRITE_2D);
		Obj_SetRenderPriorityI(objEff, priorityTalk+2);
		ObjPrim_SetTexture(objEff, Boss_GetBossNameImage(objEnemy));
		ObjSprite2D_SetSourceRect(objEff, 256*ipos[0], 128*ipos[1], 256*ipos[2], 128*ipos[3]);
		ObjSprite2D_SetDestRect(objEff, -sx/2, -sy/2, sx/2, sy/2);
		ObjRender_SetPosition(objEff, bx, by, 0);
		
		ascent(t in 0 .. 30)
		{
			let tmp = sin((t+1)/30*90);
			ObjRender_SetAlpha(objEff, tmp*255);
			ObjRender_SetPosition(objEff, bx+(1-tmp)*ox, by+(1-tmp)*oy, 0);
			yield;
		}
		loop(timer)
		{
			if (flgNext) { break; }
			yield;
		}
		descent(t in 0 .. 30)
		{
			let tmp = sin((t+1)/30*90);
			ObjRender_SetAlpha(objEff, tmp*255);
			ObjRender_SetPosition(objEff, bx-(1-tmp)*ox, by-(1-tmp)*oy, 0);
			yield;
		}
		Obj_Delete(objEff);
	}

	task _SetBossName_ring(obj, ex, ey, size, timer)
	{
		let objEff = CreateParticleEffect([ex, ey], size, 11);
		ObjRender_SetBlendType(objEff, BLEND_ADD_ARGB);
		ObjRender_SetColor(objEff, 96, randEffect(64,255), 255);
		Obj_SetRenderPriorityI(objEff, priorityTalk+2);
		
		ascent(t in 0 .. timer)
		{
			let tmp = sin((t+1)/timer*90);
			ObjRender_SetScaleXYZ(objEff, tmp, tmp, tmp);
			ObjRender_SetAlpha(objEff, (1-tmp)*255*(1+sin(t*45)/2));
			yield;
		}
		Obj_Delete(objEff);
	}
}
/*
task _SetBossName(obj, x, y, timer, objEnemy)
{
	if (Obj_GetValueD(obj, "B_NAME", false)) { return; }
	Obj_SetValue(obj, "B_NAME", true);
	
	let cut_x = 12;
	let cut_y = 6;
	ascent(i in 0 .. cut_y)
	{
		SetY(i/cut_y, (i+1)/cut_y);
		wait(4);
	}
	waitEx(40-cut_y*4);
	ascent(i in 0 .. 4)
	{
		_SetBossName_ring(obj, x+randEffect(0,128)+64, y+randEffect(0,64)+32, 2+i*0.75, 60+i*15);
		wait(5);
	}
	
	task SetY(set_y, set_y2)
	{
		ascent(i in 0 .. cut_x)
		{
			_SetBossName_sinle(obj, [i/cut_x,set_y,(i+1)/cut_x,set_y2], timer);
			wait(2);
		}
	}
	
	task _SetBossName_sinle(obj, ipos, timer)
	{
		let bx = x + 256*ipos[0];
		let by = y + 128*ipos[1];
		let sx = 256*(ipos[2]-ipos[0]);
		let sy = 128*(ipos[3]-ipos[1]);
		let sc = 1;

		let objEff = ObjPrim_Create(OBJ_SPRITE_2D);
		Obj_SetRenderPriorityI(objEff, priorityTalk+2);
		ObjPrim_SetTexture(objEff, Boss_GetBossNameImage(objEnemy));
		ObjSprite2D_SetSourceRect(objEff, 256*ipos[0], 128*ipos[1], 256*ipos[2], 128*ipos[3]);
		ObjSprite2D_SetDestRect(objEff, -sx/2, -sy/2, sx/2, sy/2);
		ObjRender_SetPosition(objEff, bx, by, 0);
		ObjRender_SetScaleXYZ(objEff, 0, 0, 0);

		let objGlow = ObjPrim_Create(OBJ_SPRITE_2D);
		Obj_SetRenderPriorityI(objGlow, priorityTalk+3);
		ObjPrim_SetTexture(objGlow, Boss_GetBossNameImage(objEnemy));
		ObjSprite2D_SetSourceRect(objGlow, 0, 128, 128, 256);
		ObjSprite2D_SetDestRect(objGlow, -sx*sc, -sy*sc, sx*sc, sy*sc);
		ObjRender_SetPosition(objGlow, bx, by, 0);
		ObjRender_SetBlendType(objGlow, BLEND_ADD_ARGB);
		if (ipos[0] > 0.1 && ipos[2] < 0.9 && ipos[1] > 0.1 && ipos[3] < 0.9)
		{
			ObjRender_SetColor(objGlow, 64, randEffect(64,192), randEffect(96,192));
		}
		else
		{
			ObjRender_SetColor(objGlow, 0, 0, 0);
		}
		
		ascent(t in 0 .. 30)
		{
			let tmp = (t+1)/30;
			ObjRender_SetScaleXYZ(objGlow, tmp, tmp, tmp);
			ObjRender_SetAlpha(objGlow, (1-tmp)*4*255);
			if (t >= 15)
			{
				let tmp2 = (t-15+1)/15;
				ObjRender_SetScaleXYZ(objEff, tmp2, tmp2, tmp2);
			}
			yield;
		}
		Obj_Delete(objGlow);
		loop(timer)
		{
			yield;
		}
		descent(t in 0 .. 15)
		{
			let tmp = (t+1)/15;
			ObjRender_SetScaleXYZ(objEff, tmp, tmp, tmp);
			yield;
		}
		Obj_Delete(objEff);
	}

	task _SetBossName_ring(obj, ex, ey, size, timer)
	{
		let objEff = CreateParticleEffect([ex, ey], size, 9);
		ObjRender_SetBlendType(objEff, BLEND_ADD_ARGB);
		ObjRender_SetColor(objEff, 96, randEffect(64,255), 255);
		Obj_SetRenderPriorityI(objEff, priorityTalk+2);
		
		ascent(t in 0 .. timer)
		{
			let tmp = sin((t+1)/timer*90);
			ObjRender_SetScaleXYZ(objEff, tmp, tmp, tmp);
			ObjRender_SetAlpha(objEff, (1-tmp)*255*(1+sin(t*45)/2));
			yield;
		}
		Obj_Delete(objEff);
	}
}
*/
