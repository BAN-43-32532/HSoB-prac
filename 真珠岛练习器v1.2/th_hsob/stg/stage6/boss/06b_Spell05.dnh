#東方弾幕風[Single]
#ScriptVersion[3]
#Title["ﾎﾛｳﾁｬﾝスペカ5"]
#Text["ﾎﾛｳﾁｬﾝスペカ5"]
#Background[""]
#System["./../../../system/System.dnh"]

//---------------------------------------------------------------------

// 関数取り込み
#include"./../../../lib/lib_boss.dnh"
#include"./lib_Horou.dnh"

@Event {
	alternative(GetEventType())
	case(EV_REQUEST_LIFE)		{ SetScriptResult(777);	}
	case(EV_REQUEST_TIMER)		{ SetScriptResult(77);		}
	BossEvent();
}

@Initialize {
	let SPELL_ID = 75;
	let SPELL_NAME = [12, 12, 13, 14][Difficult];

	// アイテム数
	bossDropItem = 150;
	//ダメージ透過率
	dIni_Shot = 16;
	if (Difficult == D_LUNA) { dIni_Shot = 16.5; }
	// 停止無効
	bossResistTime = 1;

	Boss_Init();	//初期設定
	objEnemy = CreateBoss(BOSS_ID_HOROU);	//ボスセット

	//スペカデータ・セット
	SetSpellCardData(GetSpellCardID(SPELL_ID), SPELL_NAME, 
			GetCurrentScriptDirectory()~"06b_Background.dnh",
			GetBossTexture(objEnemy, I_CUTIN), 0.65, CUTMOTION_NORMAL);

	// チャプター開始
	ChapterStartBoss(GetBossID(objEnemy), SPELL_NAME, CHAPTER_SPELL);

	// 使い魔と体力連動
	CheckLinkLife_Boss(objEnemy);

	InitHorou();

	Task_Main();
}

@MainLoop {
	yield;
}



// メインタスク
task Task_Main
{
	// オプション配置
	SetEffect06_Opt(objEnemy, 0, 0);
	objHorouEffect = SetEffect06(objEnemy);

	standBy(objEnemy, CenX, 160, 60);
	waitObj(objEnemy, 120);
	CallSpellCard(true);	//スペカ起動
	
	// ベクターキャノンの広がり具合
	let LASER_R = [64, 64, 64, 96][Difficult];
	let LASER_WIDTH = 10;
	let HORMING_RATE = [0.015, 0.015, 0.015, 0.033][Difficult];
	let HORMING_RATE_SHOT = [0, 0, 0, 0.02][Difficult];	// レーザー発射中のホーミング具合
	
	let muki = rand_dir();
	
	while(eAlive)
	{
		SetAction(objEnemy, ACT_SHOT2, 360+150);
		waitObj(objEnemy, 30);
		if (!eAlive) { return; }
		RingEffect(CenX, ObjMove_GetY(objEnemy)+64, 90, muki);
		waitObj(objEnemy, 720+180+360+60-300);
		if (!eAlive) { return; }
		CallSound(sndPower2);
		waitObj(objEnemy, 240-120);
		muki = -muki;
	}
	
	task RingEffect(x, y, angle, muki)
	{
		let base_angle = angle;
		let to_angle = angle;
		let delay = 360;
		let shot_timer = 360;
		let eff_color = [32, 64, 160];
		if (Difficult == D_HARD) { eff_color = [48, 48, 72]; }
		if (Difficult == D_LUNA) { eff_color = [128, 96, 32]; }
		
		let objBase = MakeEnemyFamilier(x, y, 999999, ENEMY_SS);
		SetEnemyVisible(objBase, false);
		ObjMove_SetAngle(objBase, base_angle);
		Obj_SetValue(objBase, "A", 0);
		Obj_SetValue(objBase, "R", 0);
		Obj_SetValue(objBase, "R_rate", 0.01);
		
		let t = 0;
		ascent(i in 0 .. 120)
		{
			if (!eAlive) { break; }

			// 集中えへくと
			if (i%10 == 0) { EffectConcentrationPoint(ObjMove_GetX(objEnemy)-20, ObjMove_GetY(objEnemy)-60, objBase, eff_color, 1, 120); }
			if (i == 0) { CallSound(sndPower3); }

			// ホーミング→固定角度に変更
//			let horming_a = (GetAngleToPlayer(objEnemy) - base_angle) % 360;
/*
			let horming_a = (to_angle - base_angle) % 360;
			if (horming_a > 180) { horming_a -= 360; }
			horming_a *= HORMING_RATE;
			horming_a = min(HORMING_RATE*15, max(-HORMING_RATE*15, horming_a));
			base_angle += horming_a;
*/
			// 角度セット（ホーミング気味だが必ず斜め下に撃つ）
			if (Difficult >= D_LUNA)
			{
				let pang = (GetAngleToPlayer(objEnemy)+270) % 360;
				if (pang > 180) { pang -= 360; }
				if (pang > 45) { pang = 45; }
				if (muki > 0)
				{
					if (pang <= 0 && pang > -24) { pang = -24; }
					else if (pang >= 0 && pang < 24) { pang = 24; }
				}
				else
				{
					if (pang >= 0 && pang < 24) { pang = 24; }
					else if (pang <= 0 && pang > -24) { pang = -24; }
				}
				to_angle = pang+90;
			}
			else
			{
				to_angle = GetAngleToPlayer(objEnemy);
			}
			base_angle = to_angle;

			ObjMove_SetPosition(objBase, ObjMove_GetX(objEnemy)+64*cos(base_angle), ObjMove_GetY(objEnemy)+64*sin(base_angle));
			ObjMove_SetAngle(objBase, base_angle);
			t++;
			wait(1);
		}
		if (eAlive)
		{
			// えへくと追加
			ascent(i in 0 .. 3)
			{
				RingEffectSingle(objBase, i*360/3, delay);
			}
			// ショット追加
			RingBubbleShot(objBase, delay-60);
		}
		
		ascent(i in 0 .. delay)
		{
			if (!eAlive) { break; }

			// 集中えへくと
			if (i < delay-120 && i%10 == 0) { EffectConcentrationPoint(ObjMove_GetX(objEnemy)-20, ObjMove_GetY(objEnemy)-60, objBase, eff_color, 1, 120); }
			if (i < delay-120 && i%60 == 0) { CallSound(sndPower1); }

			// 角度セット（ホーミング気味だが必ず斜め下に撃つ）
			if (Difficult >= D_LUNA)
			{
				let pang = (GetAngleToPlayer(objEnemy)+270) % 360;
				if (pang > 180) { pang -= 360; }
				if (cos(to_angle) < 0)
				{
					if (pang > 45) { pang = 45; }
					else if (pang < 24) { pang = 24; }
				}
				else
				{
					if (pang < -45) { pang = -45; }
					else if (pang > -24) { pang = -24; }
				}
				to_angle = pang+90;
			}
			else
			{
				to_angle = GetAngleToPlayer(objEnemy);
			}

			// ホーミング→固定角度に変更
//			let horming_a = (GetAngleToPlayer(objEnemy) - base_angle) % 360;
			let horming_a = (to_angle - base_angle) % 360;
			if (horming_a > 180) { horming_a -= 360; }
			let rate = HORMING_RATE;
			if (i > delay-360) { rate *= max(0, (delay-i-180)/180); }
			horming_a *= rate;
			horming_a = min(HORMING_RATE*15, max(-HORMING_RATE*15, horming_a));
			base_angle += horming_a;
			ObjMove_SetPosition(objBase, ObjMove_GetX(objEnemy)+64*cos(base_angle), ObjMove_GetY(objEnemy)+64*sin(base_angle));
			ObjMove_SetAngle(objBase, base_angle);

			let tmp = GetCurve((i+1)/delay);
			let r = tmp * LASER_R;
			Obj_SetValue(objBase, "R", r);
			Obj_SetValue(objBase, "R_rate", tmp);
			Obj_SetValue(objBase, "A", t*4);
			t++;
			wait(1);
		}

		if (eAlive)
		{
			// レーザー発射！
			CannonLaser(objBase, shot_timer, muki);
			// ショット追加
			RingBubbleShot2(objBase, shot_timer);
			
			SetAction(objEnemy, ACT_SHOT1, shot_timer);
			CallSound(sndCrash);
			
			DisplayShakeS05(420, 2);
		}
		
		descent(i in 0 .. shot_timer)
		{
			if (!eAlive) { break; }
			// ホーミング
			let horming_a = (GetAngleToPlayer(objEnemy) - base_angle) % 360;
			if (horming_a > 180) { horming_a -= 360; }
			let rate = HORMING_RATE_SHOT * min(1, (shot_timer-i)/shot_timer*2);
			horming_a *= rate;
			horming_a = min(HORMING_RATE_SHOT*10, max(-HORMING_RATE_SHOT*10, horming_a));
			base_angle += horming_a;

			ObjMove_SetPosition(objBase, ObjMove_GetX(objEnemy)+64*cos(base_angle), ObjMove_GetY(objEnemy)+64*sin(base_angle));
			ObjMove_SetAngle(objBase, base_angle);
			Obj_SetValue(objBase, "A", t*4);
			Obj_SetValue(objBase, "R_rate", 0);
			t++;
			wait(1);
		}
		Obj_Delete(objBase);
	}
	
	task RingBubbleShot(objBase, timer)
	{
		let speed = 2;
		let wt = 2;
		
		let t = 0;
		while(!Obj_IsDeleted(objBase) && t < timer)
		{
			if (!eAlive) { break; }

			let r = Obj_GetValueD(objBase, "R", 0);

			let a = (t^1.1)*137.5;
			if (cos(a) < -0.66)
			{
				let ba = ObjMove_GetAngle(objBase);
				let pos = Rotate2D_XY(r/4*cos(a), r*sin(a), ba);
				let sx = ObjMove_GetX(objBase) + pos[0];
				let sy = ObjMove_GetY(objBase) + pos[1];
				
				let sa = a + ba;
				let ss = speed * (1+t/timer)/2;
				let ts = speed * rand(0.75, 1);
				SetBubble01(sx, sy, ss, sa, ts, ba);
			}

			t += wt;
			wait(wt);
		}
	}
	task RingBubbleShot2(objBase, timer)
	{
		let speed = [1.5, 1.5, 1.5, 1.5][Difficult];
		let graphic = [ADD_BGW_BALL_L_SKY, ADD_BGW_BALL_L_SKY, ADD_BGW_LIGHT_L_SKY, ADD_BGW_BALL_L_YELLOW][Difficult];
		let wt = [8, 5, 4, 4][Difficult];
		
		let t = 0;
		while(!Obj_IsDeleted(objBase) && t < timer)
		{
			if (!eAlive) { break; }
			let tmp = rand(-1,1);
			let or = 320 + rand(-16,16);
			let ba = ObjMove_GetAngle(objBase)+180;
			let sx = ObjMove_GetX(objBase) - or*cos(ba) + tmp*128*cos(ba+90);
			let sy = ObjMove_GetY(objBase) - or*sin(ba) + tmp*128*sin(ba+90);
			
			let sa = ba + tmp*40;
			let ss = speed * rand(0.5, 1);
			RingBubbleShot2_sub(sx, sy, ss, sa, graphic, 15, 630-t*2/3);
			t += wt;
			wait(wt);
		}
		
		task RingBubbleShot2_sub(x, y, speed, angle, graphic, delay, timer)
		{
			let obj = My_CreateShotA2(x, y, 0, angle, speed/300, speed, graphic, delay);
			ObjMove_AddPatternA2(obj, timer-120, NO_CHANGE, NO_CHANGE, -speed/120, 0, 0);
			ObjShot_SetAutoDelete(obj, false);
			ObjShot_SetSpellResist(obj, true);
			
			let hit_r = GetShotDataInfoA1(graphic, TARGET_ENEMY, INFO_COLLISION);

			let t = 0;
			while(!Obj_IsDeleted(obj))
			{
				let rate = 1;
				if (t > timer-120) { rate = (timer-t)/120*0.75 + 0.25; }
				if (t > timer)
				{
					if (CheckDispIN(obj, 0))
					{
						let way = [6, 6, 6, 6][Difficult];
						let speed = [1, 1, 1, 1][Difficult];
						let graphic = [BGW_CHRYSTAL_S_SKY, BGW_CHRYSTAL_S_SKY, BGW_CHRYSTAL_S_WHITE, BGW_CHRYSTAL_S_YELLOW][Difficult];
						let ba = angle;
						
						CreateShotCircleA2(ObjMove_GetX(obj), ObjMove_GetY(obj),
							0, ba, speed/360, speed, graphic, 15, way, 0);
						CallSound(sndShot6);
					}
					Obj_Delete(obj);
					break;
				}
				ObjShot_SetIntersectionCircleA1(obj, hit_r*rate);
				ObjRender_SetScaleXYZ(obj, rate, rate, 1);
				t++;
				yield;
			}
		}
	}
	
	task RingEffectSingle(objBase, offset_angle, timer)
	{
		let color = [16, 48, 128];
		let color2 = [32, 64, 160];
		if (Difficult == D_HARD) { color = [48, 48, 72]; color2 = [48, 48, 72]; }
		if (Difficult == D_LUNA) { color = [96, 64, 24]; color2 = [128, 96, 32]; }

		let t = 0;
		while(!Obj_IsDeleted(objBase) && t < timer)
		{
			let r = Obj_GetValueD(objBase, "R", 0);
			let a = Obj_GetValueD(objBase, "A", 0) + offset_angle;
			let rr = Obj_GetValueD(objBase, "R_rate", 0);
			let pos = Rotate2D_XY(r/4*cos(a), r*sin(a), ObjMove_GetAngle(objBase));
			SingleParticleEffect([ObjMove_GetX(objBase)+pos[0], ObjMove_GetY(objBase)+pos[1]], 0.66, 3, color2, 30);
			RingLaserEffect(objBase, a, color);
			t++;
			yield;
		}
	}
	
	task RingLaserEffect(objBase, eff_angle, color)
	{
		let objEffect = CreateStraightLaserA1(ObjMove_GetX(objBase), ObjMove_GetY(objBase), ObjMove_GetAngle(objBase), 600, 6, 9999, BGW_BEAM_WHITE, 0);
		ObjShot_SetIntersectionEnable(objEffect, false);
		ObjShot_SetItemChange(objEffect, false);
		ObjRender_SetColor(objEffect, color[0], color[1], color[2]);
		ObjShot_FadeDelete(objEffect);
		
		while(!Obj_IsDeleted(objEffect))
		{
			if (Obj_IsDeleted(objBase)) { break; }
			let r = Obj_GetValueD(objBase, "R", 0);
			let rr = Obj_GetValueD(objBase, "R_rate", 0);
			let pos = Rotate2D_XY(r/4*cos(eff_angle), r*sin(eff_angle), ObjMove_GetAngle(objBase));
			ObjMove_SetPosition(objEffect, ObjMove_GetX(objBase)+pos[0], ObjMove_GetY(objBase)+pos[1]);
			ObjStLaser_SetAngle(objEffect, ObjMove_GetAngle(objBase) + cos(eff_angle)*LASER_WIDTH*rr);
			yield;
		}

	}
	
	// ベクターキャノン本体
	task CannonLaser(objBase, timer, muki)
	{
		let laser_way = [1, 1, 1, 2][Difficult];
		let shot_way = 3;
		let color = [0, 64, 128];
		let graphic = [BGW_CHRYSTAL_M_BLUE, BGW_CHRYSTAL_M_BLUE, BGW_CHRYSTAL_M_BLUE, BGW_CHRYSTAL_M_RED][Difficult];
		if (Difficult == D_HARD) { color = [64, 64, 64]; }
		if (Difficult == D_LUNA) { color = [64, 64, 0]; }
		
		_CannonLaser(objBase, timer, LASER_R, muki);
	//	_CannonLaserShot(x, y, angle, timer, 64*2, muki);
		
		task _CannonLaser(objBase, timer, r, muki)
		{
		//	wait(60);

			let speed = 16;
			let base_angle = rand(0,360);

			ascent(i in 0 .. timer)
			{
				if (Obj_IsDeleted(objBase) || !eAlive) { return; }
				
				let l_wid = 1;
				let ss = speed;
				let x = ObjMove_GetX(objBase);
				let y = ObjMove_GetY(objBase);
				let angle = ObjMove_GetAngle(objBase);
				
				//if (i < 60) { l_wid *= (i+1)/60; ss *= ((i+1)/60+1)/2; }
				if (i > timer-60) { l_wid *= (timer-i)/60; ss *= (2-(timer-i)/60); }
				
				ascent(j in 0 .. laser_way)
				{
					let or = r*l_wid;
					let oa = base_angle + (j+i*1.618)*360/laser_way*muki;
					let pos = Rotate2D_XY(or*cos(oa)/4, or*sin(oa), angle);
					let sx = x + pos[0];
					let sy = y + pos[1];
					let sa = angle + cos(oa)*LASER_WIDTH*l_wid;
					let lw = 32*(0.2+l_wid*0.8);
					My_CreateLooseLaserA1(sx, sy, ss, sa, 256, lw, graphic, 0);
					let objEffect = CreateLooseLaserA1(sx, sy, ss, sa, 256, lw*8, graphic, 0);
					ObjShot_SetIntersectionEnable(objEffect, false);
					ObjRender_SetColor(objEffect, color[0], color[1], color[2]);
					ObjShot_SetItemChange(objEffect, false);
				}
				ascent(j in 0 .. shot_way)
				{
					let or = r*l_wid;
					let oa = base_angle + (j+i*1.618)*360/shot_way*muki;
					let pos = Rotate2D_XY(or*cos(oa)/4, or*sin(oa), angle);
					let sx = x + pos[0];
					let sy = y + pos[1];
					let ss = 6;
					let sa = angle+180-sin(oa)*75;
					if (i < 180) { ss *= (0.25+0.75*i/180); }
					let objS = My_CreateShotA1(sx, sy, ss, sa, graphic, 5);
					ObjRender_SetBlendType(objS, BLEND_ADD_ARGB);
					let objEffect = CreateLooseLaserA1(sx, sy, ss, sa, 128, 32, graphic, 0);
					ObjShot_SetIntersectionEnable(objEffect, false);
					ObjRender_SetColor(objEffect, color[0], color[1], color[2]);
					ObjShot_SetItemChange(objEffect, false);
				}
				if (i < timer-30 && i%3 == 0) { CallSound(sndShot6); }
				wait(1);
			}
		}

		/*
		task _CannonLaserShot(x, y, angle, timer, r, muki)
		{
			let speed = 5;
			let way = 3;
			let rotate_angle = 4;
			let graphic = BGW_CHRYSTAL_M_BLUE;
			
			let base_angle = rand(0,360);
			
			ascent(i in 0 .. timer)
			{
				if (!eAlive) { return; }
				
				let sr = r;
				if (i < 90) { sr = GetCurve((i+1)/90)*r; }
				let tmp = (i+1)/timer;
				let delay = 90-i;
				let add_a = (1+tmp^2) * rotate_angle*muki;
				let sx = x - r*cos(angle)*0.5;
				let sy = y - r*sin(angle)*0.5;
				
				ascent(j in 0 .. way)
				{
					let or = 64;
					let sa = base_angle + j*360/way;
					LinerShot(sx, sy, speed, angle, graphic, delay, sr, 0.2, sa, add_a, 105);
				}
				wait(1);
			}
		}
		*/
	}
	
	task LinerShot(x, y, speed, angle, graphic, delay, r, add_r, offset_a, add_a, timer)
	{
		let obj = CreateShotA1(x, y, 0, 0, graphic, 0);
		ObjShot_SetAutoDelete(obj, false);
		ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
		if (delay > 0) { ObjRender_SetScaleX(obj, 0.25); }
		
		let vx = speed * cos(angle);
		let vy = speed * sin(angle);
		let va = offset_a;
		let t = 0;
		while(!Obj_IsDeleted(obj) && t < timer)
		{
			let pos = Rotate2D_XY(r*cos(va)/3, r*sin(va), angle);
			let alpha = (cos(va)+0.8)*255*4;
			ObjMove_SetDestAtFrame(obj, x+pos[0], y+pos[1], 1);
			ObjRender_SetAlpha(obj, alpha);
			ObjShot_SetIntersectionEnable(obj, (alpha>192)&&(delay<=0));
			x += vx; y += vy;
			r += add_r*speed;
			va += add_a;
			t++;
			yield;
		}
		Obj_Delete(obj);
	}
}


// しゃぼんだま
task SetBubble01(iniX, iniY, iniSpeed, iniAngle, iniMaxSpeed, iniGravAngle)
{
	let scale = 0.75;
	let eSize = ENEMY_S;
	let eColor = EFF_SKY;
	
	let objFamilier = MakeEnemyFamilier(iniX, iniY, 10, eSize);
	DrawBubbleEnemy( objFamilier, scale );
	TAct();
	// 判定サイズ
	WaitForKilledFamilier(objFamilier, scale*16, scale*16);
	if (CheckKillType(objFamilier) == 2)
	{
		// 撃ち返し
		TUchikaeshi();
	}
	ZakoFinalizeEx(objFamilier, EFF_BLUE, false);
	
	task TAct()
	{
		TMove;
	}
	
	task TMove()
	{
		ObjMove_AddPatternA2(objFamilier, 0, iniSpeed*6, iniAngle, -iniSpeed/30*5, 0, 0);
		Enemy_WaitForDispOUT(objFamilier, 64, 300);
		waitObj(objFamilier, 30);
		
		let t = 0;
		let vx = iniSpeed * cos(iniAngle-iniGravAngle+90);
		let vy = iniSpeed * sin(iniAngle-iniGravAngle+90);
		while(!Obj_IsDeleted(objFamilier))
		{
			if ((cos(iniGravAngle) > 0 && ObjMove_GetX(objFamilier) > MaxX) ||
				(cos(iniGravAngle) < 0 && ObjMove_GetX(objFamilier) < MinX) ||
				(sin(iniGravAngle) > 0 && ObjMove_GetY(objFamilier) > MaxY) ||
				(sin(iniGravAngle) < 0 && ObjMove_GetY(objFamilier) < MinY))
			{
				TUchikaeshi();
				EraseEnemy(objFamilier);
				break;
			}
			let tmp_s = (vx^2 + vy^2)^0.5;
			let tmp_a = atan2(vy, vx)+iniGravAngle-90;
			if (tmp_s > iniMaxSpeed)
			{
				let tmp = tmp_s/iniMaxSpeed;
				vx /= tmp; vy /= tmp; tmp_s = iniMaxSpeed;
			}
			ObjMove_SetSpeed(objFamilier, tmp_s);
			ObjMove_SetAngle(objFamilier, tmp_a);
			vy += iniMaxSpeed/60;
			t++;
			waitObj(objFamilier, 1);
		}
	}
	
	task TUchikaeshi()
	{
		let speed = [1, 1, 1.25, 0.75][Difficult];
		let way = [6, 12, 12, 10][Difficult];

		if (way <= 0) { return; }
		
		let graphic = [BGW_LIGHT_S_BLUE, BGW_LIGHT_S_BLUE, BGW_LIGHT_S_WHITE, BGW_LIGHT_S_SKY][Difficult];
		
		let ba = rand(0,360);
		ascent(i in 0 .. way)
		{
			let ss = speed;
			let sa = ba + i*360/way;
			My_CreateShotA2(ObjMove_GetX(objFamilier), ObjMove_GetY(objFamilier),
				0, sa, ss/120, ss, graphic, 30);
		}
		CallSound(sndShot5);
	}
}

/* 画面震動 */
task DisplayShakeS05(flame, power)
{
	let kx = Get2DCameraX();
	let ky = Get2DCameraY();
	
	let gain_flame = 30;
	let dec_flame = trunc(flame/4);
	let main_flame = flame - gain_flame - dec_flame;

	ascent(i in 0 .. gain_flame)
	{
		if (!eAlive) { break; }
		let pw = power + (1-i/gain_flame)*16;
		Set2DCameraFocusX(kx + rand(-pw,pw));
		Set2DCameraFocusY(ky + rand(-pw,pw));
		waitEx(1);
	}
	loop(main_flame)
	{
		if (!eAlive) { break; }
		Set2DCameraFocusX(kx + rand(-power,power));
		Set2DCameraFocusY(ky + rand(-power,power));
		waitEx(1);
	}
	descent(i in 0 .. dec_flame)
	{
		if (!eAlive) { break; }
		Set2DCameraFocusX(kx + rand(-i/dec_flame*power,i/dec_flame*power));
		Set2DCameraFocusY(ky + rand(-i/dec_flame*power,i/dec_flame*power));
		waitEx(1);
	}
	Reset2DCamera();
}
