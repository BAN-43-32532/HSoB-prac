//　Stage2
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------

#include "./../../lib/wor_function.dnh"
#include "./../../lib/lib_Effect.dnh"
#include "./../../lib/lib_ChapterSkip.dnh"

#include "./lib_World06_Objects01.dnh"
#include "./lib_World06_Objects02.dnh"

let flagEnd = false;
let flgScriptValue = 0;
let global_nwait=0;
let BGChange_StageScene = 2;

let dest=GetStartChapter(6);

//　ステージの背景テクスチャ
let world06_path;

@Event
{
	alternative(GetEventType())
	case(ev_CloseScript)
	{
		//背景削除
		flagEnd = true;
		CloseMine(300);
	}
}

@Initialize
{
	init();	//初期設定
	
	// 画像パスをセット
	world06_path = LoadingImageFile_StgWorld(6);

	// 背景スクリプト起動
	if (IsDrawBackground() >= 2) { SetWorld06b(); }
	else if (IsDrawBackground() >= 1) { BackGroundLite(); }
}

@MainLoop
{
	yield;
}


task SetWorld06a()
{
	let obj		= [
		CreateTexture01( world06_path[0] ),
		CreateTexture01( world06_path[1] ),
	];
	let frame = 0;
	let move1 = 0;
	let moveA = 0;
	
	//　霧用のダミー
	ObjRender_SetPosition( obj[0], -1500, 0, 0 );
	ObjRender_SetScaleXYZ( obj[0], 2, 2, 0 );
	ObjRender_SetColor( obj[0], 0, 0, 0 );
	ObjSprite3D_SetBillboard( obj[0], true );
	
	//　砂漠
	ObjRender_SetColor( obj[1], 64, 128, 255 );
	
	while( !GetAreaCommonData(CAREA_STAGE, "STG6B_ATK1", false) ){
		move1 = 1 * sin( moveA );
		
		SetFogParam( 0, move1*1024, move1*16, move1*32, move1*64 );
		SetCameraFocusXYZ( 0, 0, 384/2 );
		SetCameraRadius( 256 );
		SetCameraAzimuthAngle( 0 );
		SetCameraElevationAngle( 20 );
		
		let spd = move1 * 1.6;
		
		if( frame%1 == 0 ){
			CreateFlashLight( [randEffect(0,-1024),randEffect(-256,256),randEffect(-256,256)], [randEffect(1,2)+spd,0,0], 0.1, randEffect(64,128), 60, [255,255,255] );
		}
		
		ObjRender_SetPosition( obj[1], -512, 128*cos(180), 128*sin(180) );
		ObjRender_SetAngleXYZ( obj[1], 90, 0, 0 );
		ObjSprite3D_SetSourceDestRect( obj[1], 0 - frame*spd, 0, 1024 - frame*spd, 1024 );
		
		frame++;
		if( move1 < 1 ){ moveA += 1; }
		
		yield;
	}
	while( move1 > 0 ){
		move1 = 1 * sin( moveA );
		
		let spd = move1 * 1.6;
		
		ObjRender_SetAlpha( obj[0], move1*255 );
		ObjRender_SetAlpha( obj[1], move1*255 );
		ObjSprite3D_SetSourceDestRect( obj[1], 0 - frame*spd, 0, 1024 - frame*spd, 1024 );
		
		frame++;
		moveA += 1;
		yield;
	}
	ascent( i in 0..length(obj) ){
		Obj_Delete( obj[i] );
	}
}

let BG_POSITION = 0;
task SetWorld06b()
{
	let speedMod = GetAreaCommonData(CAREA_STAGE, "StageModification", 0 );
	let stage_addTimer = 1 + speedMod;

	let cpos = [ 0, 64+128*0, 10, 0, 12 ];
	let opos = [ -800, 0, 0 ];
	let cmove = [[0.25, 0, 240], [0.25, 0, 240], [0.25, 0, 240], [0.25, 0, 240], [0.25, 0, 240]];	// カメラ補間用
	
	// 0(配列内では+6番) - 直線
	// 1 - T字路
	// 2 - らせん通路
	// 3 - L字カーブ(左カーブ)
	// 4 - 隠し通路入口(右側)
	// 5 - 隠し通路内
	// 6 - 隠し通路出口
	// 7 - 隠し通路用扉
	// 8 - 玄室
	// 9 - 上昇通路
	
	TBase();
	World06Object01b_m( [CenX, CenY], 1200, -3000, [68,64,60], BLEND_ADD_ARGB );
	World06Object01b_m( [CenX, CenY], -1200, -1800, [28,32,36], BLEND_SUBTRACT );
	if(dest<=1){
		PHASE_01();
		PHASE_02();
	}
	else if(dest<=6){
		p12move();
	}
	if(dest<=2){
		PHASE_03();
	}
	else if(dest<=6){
		p3move();
	}
	if(dest<=3){
		
	}
	else if(dest<=6){
		
	}
	if(dest<=4){
		PHASE_04();
		
	}
	else if(dest<=6){
		p4move();
		
	}
	if(dest<=5){
		PHASE_05();
	}
	else if(dest<=6){
		p5move();
	}
	if(dest<=6){
		PHASE_06();
	}
	
	while(GetStageScene() < BGChange_StageScene) { yield; }
	yield;	// ほけん
	if (!flagEnd) { SetWorld06a(); }	// 砂漠へ移行
	//SetWorld06a();
	// chapter01 - 直進
	function PHASE_01()
	{
		// 初期配置の道
		World06Object01b( [0, 0, 0], [0, 0, 0], 0, 3, 1 );
		World06Object01b( [-400, 0, 0], [0, 0, 0], 0, 3, 1 );
		World06Object01b( [-800, 0, 0], [0, 0, 0], 0, 3, 1 );
		AddPosition([-400, 0, 0]);
		MoveCameraXYZ([-400, 0, 0], 270+90, 0);
		wait_bg2(270+90);
		
		loop(3)
		{
			// 直進
			World06Object01b( opos, [0, 0, 0], 0, 3, 1 );
			AddPosition([-400, 0, 0]);
			MoveCameraXYZ([-400, 0, 0], 210, 0);
			wait_bg2(210);
		}
	}
	// chapter02 - らせん通路
	function PHASE_02()
	{
		// 通路配置
		MoveCameraXYZ([-400, 0, 0], 210, 0);
		World06Object01b( opos, [0, 0, 0], 2, 4, 1 );
		AddPosition([100, 75*4, 0]);
		wait_bg2(210);
		
		MoveCameraXYZ([-400, 0, 0], 210, 0);
		MoveCameraAngle([0, -12], 210, 1);
		wait_bg2(210);
		
		// カメラをぐるっと回転
		MoveCameraXYZ([-375, 75, 0], 255, 1);
		wait_bg2(120);
		MoveCameraAngle([90, 0], 150, 1);
		wait_bg2(135);

		MoveCameraXYZ([0, 75, -425], 255, 1);
		wait_bg2(120);
		MoveCameraAngle([90, 0], 150, 1);
		wait_bg2(135);

		// 次のオブジェクトを準備
		World06Object01b( opos, [0, 180, 0], 0, 3, 1 );
		AddPosition([400, 0, 0]);
		World06Object01b( opos, [0, 180, 0], 1, 4, 1 );

		MoveCameraXYZ([425, 75, 0], 255, 1);
		wait_bg2(120+45);
		MoveCameraAngle([90, 0], 150, 1);
		wait_bg2(135-45);

		MoveCameraXYZ([0, 75, 400], 255, 1);
		wait_bg2(120+45);
		MoveCameraAngle([-90, 12], 150, 1);
		wait_bg2(135-45);

		MoveCameraXYZ([450, 0, 0], 360, 1);
		wait_bg2(360);
	}
	
	function p12move(){
		global_nwait=1;
		AddPosition([-400, 0, 0]);
		MoveCameraXYZ([-400, 0, 0], 270+90, 0);
		wait_bg2(270+90);
		loop(3)
		{
			// 直進
			AddPosition([-400, 0, 0]);
			MoveCameraXYZ([-400, 0, 0], 210, 0);
			wait_bg2(210);
		}
		MoveCameraXYZ([-400, 0, 0], 210, 0);
		AddPosition([100, 75*4, 0]);
		wait_bg2(210);
		
		MoveCameraXYZ([-400, 0, 0], 210, 0);
		MoveCameraAngle([0, -12], 210, 1);
		wait_bg2(210);
		
		// カメラをぐるっと回転
		MoveCameraXYZ([-375, 75, 0], 255, 1);
		wait_bg2(120);
		MoveCameraAngle([90, 0], 150, 1);
		wait_bg2(135);

		MoveCameraXYZ([0, 75, -425], 255, 1);
		wait_bg2(120);
		MoveCameraAngle([90, 0], 150, 1);
		wait_bg2(135);

		// 次のオブジェクトを準備
		AddPosition([400, 0, 0]);

		MoveCameraXYZ([425, 75, 0], 255, 1);
		wait_bg2(120+45);
		MoveCameraAngle([90, 0], 150, 1);
		wait_bg2(135-45);

		MoveCameraXYZ([0, 75, 400], 255, 1);
		wait_bg2(120+45);
		MoveCameraAngle([-90, 12], 150, 1);
		wait_bg2(135-45);

		MoveCameraXYZ([450, 0, 0], 360, 1);
		wait_bg2(360);
		global_nwait=0;
	}
	// chapter03 - 分岐路
	function PHASE_03()
	{
		let route = GetAreaCommonData(CAREA_STAGE, "STG6R_ROUTE1", 0);
		if (route == 0) { PHASE_03a; }
		else { PHASE_03b; }
		
		function PHASE_03a()
		{
			// 次の道と曲がり角配置
			AddPosition([200, 0, 200]);
			World06Object01b( opos, [0, 90, 0], 3, 3, -1 );
			AddPosition([200, 0, 200]);
			World06Object01b( opos, [0, 180, 0], 0, 3, 1 );
			AddPosition([400, 0, 0]);
			World06Object01b( opos, [0, 180, 0], 0, 3, 1 );
			AddPosition([400, 0, 0]);

			// 曲がりモーション
			MoveCameraXYZ([200-25, 0, 0], 180, 1);
			wait_bg2(90);
			MoveCameraAngle([75, 0], 120, 1);
			wait_bg2(90);
			MoveCameraXYZ([0, 0, 400], 240, 1);
			wait_bg2(240-90);
			MoveCameraAngle([-75, 0], 120, 1);
			wait_bg2(90);
			MoveCameraXYZ([200+25, 0, 0], 120, 0);
			wait_bg2(120);
		}

		function PHASE_03b()
		{
			// 次の道と曲がり角配置
			AddPosition([200, 0, -200]);
			World06Object01b( opos, [0, -90, 0], 3, 3, 1 );
			AddPosition([200, 0, -200]);
			World06Object01b( opos, [0, 180, 0], 0, 3, 1 );
			AddPosition([400, 0, 0]);
			World06Object01b( opos, [0, 180, 0], 0, 3, 1 );
			AddPosition([400, 0, 0]);

			// 曲がりモーション
			MoveCameraXYZ([200-25, 0, 0], 180, 1);
			wait_bg2(90);
			MoveCameraAngle([-75, 0], 120, 1);
			wait_bg2(90);
			MoveCameraXYZ([0, 0, -400], 240, 1);
			wait_bg2(240-90);
			MoveCameraAngle([75, 0], 120, 1);
			wait_bg2(90);
			MoveCameraXYZ([200+25, 0, 0], 120, 0);
			wait_bg2(120);
		}
	}
	function p3move(){
		global_nwait=1;
			let route = GetAreaCommonData(CAREA_STAGE, "STG6R_ROUTE1", 0);
			if (route == 0) { P3a; }
			else { P3b; }
			
			function P3a()
			{
				// 次の道と曲がり角配置
				AddPosition([200, 0, 200]);
				AddPosition([200, 0, 200]);
				AddPosition([400, 0, 0]);
				AddPosition([400, 0, 0]);

				// 曲がりモーション
				MoveCameraXYZ([200-25, 0, 0], 180, 1);
				wait_bg2(90);
				MoveCameraAngle([75, 0], 120, 1);
				wait_bg2(90);
				MoveCameraXYZ([0, 0, 400], 240, 1);
				wait_bg2(240-90);
				MoveCameraAngle([-75, 0], 120, 1);
				wait_bg2(90);
				MoveCameraXYZ([200+25, 0, 0], 120, 0);
				wait_bg2(120);
			}

			function P3b()
			{
				// 次の道と曲がり角配置
				AddPosition([200, 0, -200]);
				AddPosition([200, 0, -200]);
				AddPosition([400, 0, 0]);
				AddPosition([400, 0, 0]);

				// 曲がりモーション
				MoveCameraXYZ([200-25, 0, 0], 180, 1);
				wait_bg2(90);
				MoveCameraAngle([-75, 0], 120, 1);
				wait_bg2(90);
				MoveCameraXYZ([0, 0, -400], 240, 1);
				wait_bg2(240-90);
				MoveCameraAngle([75, 0], 120, 1);
				wait_bg2(90);
				MoveCameraXYZ([200+25, 0, 0], 120, 0);
				wait_bg2(120);
			}
		global_nwait=0;
	}
	// chapter04 - 隠し通路へ分岐〜合流
	function PHASE_04()
	{
		let route = GetAreaCommonData(CAREA_STAGE, "STG6R_ROUTE1", 0);
		// 分岐路
		if (route == 0)	{ World06Object01b( opos, [0, 180, 0], 4, 4, 1 ); }
		else		{ World06Object01b( opos, [0, 180, 0], 4, 4, -1 ); }
		AddPosition([400, 0, 0]);
		MoveCameraXYZ([400, 0, 0], 210, 0);
		wait_bg2(210);
		loop(1)
		{
			// 直進
			World06Object01b( opos, [0, 180, 0], 0, 4, 1 );
			AddPosition([400, 0, 0]);
			MoveCameraXYZ([400, 0, 0], 210, 0);
			wait_bg2(210);
		}

		let route2 = GetAreaCommonData(CAREA_STAGE, "STG6R_ROUTE2", 0);
		if (route2 == 0) { PHASE_04a(); }
		else { PHASE_04b(); }
		
		function PHASE_04a()
		{
			loop(4)
			{
				// 直進
				World06Object01b( opos, [0, 180, 0], 0, 4, 1 );
				AddPosition([400, 0, 0]);
				MoveCameraXYZ([400, 0, 0], 210, 0);
				wait_bg2(210);
			}

			MoveCameraXYZ([400, 0, 0], 210, 0);
			wait_bg2(210);
			
			// 合流部分
			if (route == 0)
			{
				World06Object01b( opos, [0, 180, 0], 3, 4, -1 );
				World06Object01b( [opos[0]+200,opos[1],opos[2]-600], [0, 270, 0], 3, 4, -1 );	// 反対側
				AddPosition([400, 0, -400]);
				World06Object01b( opos, [0, 0, 0], 1, 4, 1 );
		//		AddPosition([200, 0, -200]);
				MoveCameraXYZ([400-50, 0, 0], 270, 0);
				wait_bg2(270);
				// 次のオブジェクトを準備
				World06Object01b( opos, [0, 180, 0], 2, 4, -1 );
				AddPosition([0, 75*4, 0]);

				// 曲がりモーション
				MoveCameraXYZ([200+25, 0, 0], 120, 1);
				wait_bg2(30);
				MoveCameraAngle([-75, 0], 120, 1);
				wait_bg2(90);
				MoveCameraXYZ([0, 0, -400], 240, 1);
				wait_bg2(240-90);
				MoveCameraAngle([75, 0], 120, 1);
				wait_bg2(90);
				MoveCameraXYZ([200-25, 0, 0], 120, 0);
				wait_bg2(120);
			}
			else
			{
				World06Object01b( opos, [0, 180, 0], 3, 4, 1 );
				World06Object01b( [opos[0]+200,opos[1],opos[2]+600], [0, 90, 0], 3, 4, 1 );	// 反対側
				AddPosition([400, 0, 400]);
				World06Object01b( opos, [0, 0, 0], 1, 4, 1 );
		//		AddPosition([200, 0, -200]);
				MoveCameraXYZ([400-50, 0, 0], 270, 0);
				wait_bg2(270);
				// 次のオブジェクトを準備
				World06Object01b( opos, [0, 180, 0], 2, 4, -1 );
				AddPosition([0, 75*4, 0]);

				// 曲がりモーション
				MoveCameraXYZ([200+25, 0, 0], 120, 1);
				wait_bg2(30);
				MoveCameraAngle([75, 0], 120, 1);
				wait_bg2(90);
				MoveCameraXYZ([0, 0, 400], 240, 1);
				wait_bg2(240-90);
				MoveCameraAngle([-75, 0], 120, 1);
				wait_bg2(90);
				MoveCameraXYZ([200-25, 0, 0], 120, 0);
				wait_bg2(120);
			}
		}
		function PHASE_04b()
		{
			if (route == 0)
			{
				AddPosition([0, 0, -200]);
				World06Object01b( opos, [0, 0, 0], 5, 4, 1 );
				AddPosition([400, 0, 0]);

				MoveCameraXYZ([200, -30, 0], 120, 1);
				wait_bg2(60);
				MoveCameraAngle([-80, 0], 120, 1);
				wait_bg2(120);
				MoveCameraXYZ([0, 0, -200+10], 120, 1);
				wait_bg2(60);
				MoveCameraAngle([80, 0], 180, 1);
				wait_bg2(120);
			}
			else
			{
				AddPosition([0, 0, 200]);
				World06Object01b( opos, [0, 0, 0], 5, 4, 1 );
				AddPosition([400, 0, 0]);

				MoveCameraXYZ([200, -30, 0], 120, 1);
				wait_bg2(60);
				MoveCameraAngle([80, 0], 120, 1);
				wait_bg2(120);
				MoveCameraXYZ([0, 0, 200+10], 120, 1);
				wait_bg2(60);
				MoveCameraAngle([-80, 0], 180, 1);
				wait_bg2(120);
			}

			loop(5)
			{
				// 直進
				World06Object01b( opos, [0, 0, 0], 5, 4, 1 );
				AddPosition([400, 0, 0]);
				MoveCameraXYZ([400, 0, 0], 150, 0);
				wait_bg2(150);
			}
			World06Object01b( opos, [0, 0, 0], 6, 4, 1 );
			AddPosition([400, 0, 0]);
			MoveCameraXYZ([400, 0, 0], 150, 0);
			wait_bg2(150);

			World06Object01b( opos, [0, 0, 0], 0, 4, 1 );
		//	AddPosition([400, 0, 0]);
			MoveCameraXYZ([400, 0, 0], 180, 0);
			wait_bg2(180);

			// 合流部分
			World06Object01b( opos, [0, 180, 0], 2, 4, -1 );
			AddPosition([0, 75*4, 0]);

			MoveCameraXYZ([400, 0, 0], 240, 0);
			wait_bg2(240);

			MoveCameraXYZ([200-50, 30, -10], 120, 0);
			wait_bg2(120);
		}

	}
	function p4move(){
		global_nwait=1;
			let route = GetAreaCommonData(CAREA_STAGE, "STG6R_ROUTE1", 0);
			// 分岐路
			AddPosition([400, 0, 0]);
			MoveCameraXYZ([400, 0, 0], 210, 0);
			wait_bg2(210);
			loop(1)
			{
				// 直進
				AddPosition([400, 0, 0]);
				MoveCameraXYZ([400, 0, 0], 210, 0);
				wait_bg2(210);
			}

			let route2 = GetAreaCommonData(CAREA_STAGE, "STG6R_ROUTE2", 0);
			if (route2 == 0) { P4a(); }
			else { P4b(); }
			
			function P4a()
			{
				loop(4)
				{
					// 直進
					AddPosition([400, 0, 0]);
					MoveCameraXYZ([400, 0, 0], 210, 0);
					wait_bg2(210);
				}

				MoveCameraXYZ([400, 0, 0], 210, 0);
				wait_bg2(210);
				
				// 合流部分
				if (route == 0)
				{
					AddPosition([400, 0, -400]);
			//		AddPosition([200, 0, -200]);
					MoveCameraXYZ([400-50, 0, 0], 270, 0);
					wait_bg2(270);
					// 次のオブジェクトを準備
					AddPosition([0, 75*4, 0]);

					// 曲がりモーション
					MoveCameraXYZ([200+25, 0, 0], 120, 1);
					wait_bg2(30);
					MoveCameraAngle([-75, 0], 120, 1);
					wait_bg2(90);
					MoveCameraXYZ([0, 0, -400], 240, 1);
					wait_bg2(240-90);
					MoveCameraAngle([75, 0], 120, 1);
					wait_bg2(90);
					MoveCameraXYZ([200-25, 0, 0], 120, 0);
					wait_bg2(120);
				}
				else
				{
					AddPosition([400, 0, 400]);
			//		AddPosition([200, 0, -200]);
					MoveCameraXYZ([400-50, 0, 0], 270, 0);
					wait_bg2(270);
					// 次のオブジェクトを準備
					AddPosition([0, 75*4, 0]);

					// 曲がりモーション
					MoveCameraXYZ([200+25, 0, 0], 120, 1);
					wait_bg2(30);
					MoveCameraAngle([75, 0], 120, 1);
					wait_bg2(90);
					MoveCameraXYZ([0, 0, 400], 240, 1);
					wait_bg2(240-90);
					MoveCameraAngle([-75, 0], 120, 1);
					wait_bg2(90);
					MoveCameraXYZ([200-25, 0, 0], 120, 0);
					wait_bg2(120);
				}
			}
			function P4b()
			{
				if (route == 0)
				{
					AddPosition([0, 0, -200]);
					AddPosition([400, 0, 0]);

					MoveCameraXYZ([200, -30, 0], 120, 1);
					wait_bg2(60);
					MoveCameraAngle([-80, 0], 120, 1);
					wait_bg2(120);
					MoveCameraXYZ([0, 0, -200+10], 120, 1);
					wait_bg2(60);
					MoveCameraAngle([80, 0], 180, 1);
					wait_bg2(120);
				}
				else
				{
					AddPosition([0, 0, 200]);
					AddPosition([400, 0, 0]);

					MoveCameraXYZ([200, -30, 0], 120, 1);
					wait_bg2(60);
					MoveCameraAngle([80, 0], 120, 1);
					wait_bg2(120);
					MoveCameraXYZ([0, 0, 200+10], 120, 1);
					wait_bg2(60);
					MoveCameraAngle([-80, 0], 180, 1);
					wait_bg2(120);
				}

				loop(5)
				{
					// 直進
					AddPosition([400, 0, 0]);
					MoveCameraXYZ([400, 0, 0], 150, 0);
					wait_bg2(150);
				}
				AddPosition([400, 0, 0]);
				MoveCameraXYZ([400, 0, 0], 150, 0);
				wait_bg2(150);

			//	AddPosition([400, 0, 0]);
				MoveCameraXYZ([400, 0, 0], 180, 0);
				wait_bg2(180);

				// 合流部分
				AddPosition([0, 75*4, 0]);

				MoveCameraXYZ([400, 0, 0], 240, 0);
				wait_bg2(240);

				MoveCameraXYZ([200-50, 30, -10], 120, 0);
				wait_bg2(120);
			}
		global_nwait=0;
	}
	// chapter05 - 地上への道
	function PHASE_05()
	{
		// カメラをぐるっと回転
		MoveCameraXYZ([400, 75, 0], 255, 1);
		wait_bg2(120);
		MoveCameraAngle([-90, -12], 150, 1);
		wait_bg2(135);

		MoveCameraXYZ([0, 75, -400], 255, 1);
		wait_bg2(120);
		MoveCameraAngle([-90, 0], 150, 1);
		wait_bg2(135);

		// 次のオブジェクトを準備
		AddPosition([-100, 0, 0]);
		World06Object01b( opos, [0, 0, 0], 0, 4, 1 );
		AddPosition([-400, 0, 0]);
		World06Object01b( opos, [0, 0, 0], 0, 4, 1 );
		AddPosition([-400, 0, 0]);

		MoveCameraXYZ([-400, 75, 0], 255, 1);
		wait_bg2(120);
		MoveCameraAngle([-90, 0], 150, 1);
		wait_bg2(135);

		MoveCameraXYZ([0, 75, 425], 255, 1);
		wait_bg2(120);
		MoveCameraAngle([90, 12], 150, 1);
		wait_bg2(135);

		// 次のオブジェクトを準備
		World06Object01b( opos, [0, 0, 0], 9, 5, 1 );
		AddPosition([-400, 1000, 0]);
		World06Object01b( [opos[0], opos[1]-1000, opos[2]], [0, 0, 0], 0, 4, 1 );

		// 直進後少し待機
		MoveCameraXYZ([-400, 0, 0], 240, 0);
		wait_bg2(240);

		// 直進後少し待機
		MoveCameraXYZ([-400-80, 0, 0], 240, 0);
		wait_bg2(180);
		MoveCameraAngle([0, -5], 120, 1);
		wait_bg2(480);
		MoveCameraXYZ([-240+80, -50, 0], 120, 1);
		MoveCameraAngle([0, -90+5], 120, 1);
		wait_bg2(180);
		MoveCameraXYZ([0, 1000+50-100, 0], 900, 0);
		MoveCameraAngle([360, 0], 900-120, 1);
		wait_bg2(900-60);
		MoveCameraAngle([0, 90], 180, 1);

		// 次のオブジェクトを準備
		World06Object01b( opos, [0, 0, 0], 0, 3, 1 );
		AddPosition([-400, 0, 0]);

		wait_bg2(60);
		MoveCameraXYZ([0, 100, 0], 120, 1);
		wait_bg2(120);

	}
	function p5move(){
		global_nwait=1;
			// カメラをぐるっと回転
			MoveCameraXYZ([400, 75, 0], 255, 1);
			wait_bg2(120);
			MoveCameraAngle([-90, -12], 150, 1);
			wait_bg2(135);

			MoveCameraXYZ([0, 75, -400], 255, 1);
			wait_bg2(120);
			MoveCameraAngle([-90, 0], 150, 1);
			wait_bg2(135);

			// 次のオブジェクトを準備
			AddPosition([-100, 0, 0]);
			AddPosition([-400, 0, 0]);
			AddPosition([-400, 0, 0]);

			MoveCameraXYZ([-400, 75, 0], 255, 1);
			wait_bg2(120);
			MoveCameraAngle([-90, 0], 150, 1);
			wait_bg2(135);

			MoveCameraXYZ([0, 75, 425], 255, 1);
			wait_bg2(120);
			MoveCameraAngle([90, 12], 150, 1);
			wait_bg2(135);

			// 次のオブジェクトを準備
			AddPosition([-400, 1000, 0]);

			// 直進後少し待機
			MoveCameraXYZ([-400, 0, 0], 240, 0);
			wait_bg2(240);

			// 直進後少し待機
			MoveCameraXYZ([-400-80, 0, 0], 240, 0);
			wait_bg2(180);
			MoveCameraAngle([0, -5], 120, 1);
			wait_bg2(480);
			MoveCameraXYZ([-240+80, -50, 0], 120, 1);
			MoveCameraAngle([0, -90+5], 120, 1);
			wait_bg2(180);
			MoveCameraXYZ([0, 1000+50-100, 0], 900, 0);
			MoveCameraAngle([360, 0], 900-120, 1);
			wait_bg2(900-60);
			MoveCameraAngle([0, 90], 180, 1);

			// 次のオブジェクトを準備
			AddPosition([-400, 0, 0]);

			wait_bg2(60);
			MoveCameraXYZ([0, 100, 0], 120, 1);
			wait_bg2(120);
		global_nwait=0;
	}
	// chapter06 - 玄室
	function PHASE_06()
	{
		// 次のオブジェクトを準備
		World06Object01b( opos, [0, 0, 0], 0, 3, 1 );
		AddPosition([-400, 0, 0]);
		World06Object01b( opos, [0, 0, 0], 8, 4, 1 );

		MoveCameraXYZ([-400, 0, 0], 240, 0);
		wait_bg2(240);
		MoveCameraXYZ([-400, 0, 0], 360, 0);
		wait_bg2(360);
		MoveCameraXYZ([-400, 0, 0], 600, 1);
		wait_bg2(600);
		BG_POSITION += 3;	// いらないオブジェクトを削除
	}
	// 次オブジェクト配置位置の更新
	task AddPosition(move)
	{
		opos[0] = opos[0] + move[0];
		opos[1] = opos[1] + move[1];
		opos[2] = opos[2] + move[2];
	}
	
	// カメラモーション
	// type=0：等速 type=1：減速 type=2：加速
	task MoveCameraXYZ(move, frame, type)
	{
		ascent(i in 0 .. 3)
		{
			MoveCameraSingle(i, move[i], frame, type);
		}
	}
	task MoveCameraAngle(move, frame, type)
	{
		ascent(i in 0 .. 2)
		{
			MoveCameraSingle(i+3, move[i], frame, type);
		}
	}
	task MoveCameraSingle(index, move, frame, type)
	{
		// --- 入り部分
		// 前回の補間情報を取得
		let bx = cmove[index][0];	// x
		let by = cmove[index][1];	// y
		let bt = cmove[index][2];	// 時間(f)
		if (bt <= 0) { bt = frame; }
		// 前回と今回のスケールを合わせる
		by = by / bt * frame;
		let p2 = [bx, by];
		
		// --- 出の部分
		let p3 = [1, 1];
		if (type == 0) { p3 = [0.75, 0.75]; }	// 等速
		else if (type == 1) { p3 = [0.75, 1]; }	// 減速
		else if (type == 2) { p3 = [1, 0.75]; }	// 加速
		else if (type == 3) { p3 = [0.25, 1]; }	// いっぱい減速
		else if (type == 4) { p3 = [1, 0.25]; }	// いっぱい加速
		
		MoveCameraSingleCustom(index, move, frame, p2, p3);
	}
	// ベジェカーブを手動指定
	task MoveCameraSingleCustom(index, move, frame, p2, p3)
	{
		frame = GetWaitBG2(frame);	// 補正
		
		let p1 = [0, 0];
		let p4 = [1, 1];
		
		// 次回に格納
		let cm = [p4[0]-p3[0], p4[1]-p3[1], frame];
		cmove[index] = cm;
		
		if(global_nwait){
			cpos[index]=cpos[index]+move;
			return;
		}

		let cf = cpos[index];
		ascent(t in 0 .. frame)
		{
			if (GetStageScene() >= BGChange_StageScene) { break; }
			let tmp = GetBezierCompletion(p1, p2, p3, p4, (t+1)/frame);
			cpos[index] = cf + move*tmp;
			wait(1);
		}
	}
	
	// カメラ処理親分
	task TBase()
	{
		let t = 0;
		
		while(!flagEnd && GetStageScene() < BGChange_StageScene)
		{
			let tmp = 1;
			if (t < 420) { tmp = GetCurve_d((t+1)/420); }

			SetFogParam( -128+sin(t)*64-2048*(1-tmp), 512-784*(1-tmp), 0, 0, 0 );
			SetCameraFocusXYZ( cpos[0], cpos[1], cpos[2] );
			SetCameraAzimuthAngle( cpos[3] - 6 );
			SetCameraElevationAngle( cpos[4] );
			SetCameraRadius( 16 );
			t++;
			
			// パーティクル
			/*
			if (t%1 == 0)
			{
				let ex = randEffect(MinX,MaxX);
				let ey = randEffect(MinY,MaxY);
				let ea = atan2(ey-(CenY-144),ex-CenX);
				let es = ((((CenY-144)-ey)^2+(CenX-ex)^2)^0.5) / randEffect(90,180);
				World06Object01b_p( [ex,ey], es, ea, randEffect(-6,6), randEffect(15,90), 60, randEffect(0.1,0.7) );
			}
			*/
			wait(1);
		}
	}
	
	
	// ウェイト量補正
	function wait_bg2(frame)
	{
		if(global_nwait>0){
			return;
		}
		wait(GetWaitBG2(frame));
	}

	// ウェイト量計算
	function GetWaitBG2(frame)
	{
		return(round(frame/stage_addTimer));
	}
}








task BackGroundLite
{
	let flg = false;
	
	flg = _BackGroundLite(world06_path[0], 0);
	if (!flg) { return; }
	
	yield;
	flg = _BackGroundLite(world06_path[1], 1);
	
}
function _BackGroundLite(file_name, del_type)
{
	let obj = -1;
	if (IsDrawBackground() >= 1)
	{
		obj = ObjPrim_Create(OBJ_SPRITE_2D);
		Obj_SetRenderPriorityI(obj, world_layer);
		ObjRender_SetColor(obj, 255,255,255);
		ObjPrim_SetTexture(obj, file_name);
		ObjSprite2D_SetSourceRect(obj , 0,0,384,448);
		ObjSprite2D_SetDestRect(obj, 0,0,384,448);
		ObjRender_SetPosition(obj, MinX,MinY,0);
	}

	let alpha = 0;
	while(alpha < 255)
	{
		alpha += 5;
		if (IsDrawBackground() >= 1) { ObjRender_SetAlpha(obj,alpha); }
		yield;
	}
	while(!flagEnd)
	{
		if (del_type == 0 && !(GetStageScene() < BGChange_StageScene)) { break; }
		if (del_type == 1 && GetAreaCommonData(CAREA_STAGE, "STG6B_ATK1", false)) { break; }
		yield;
	}
	DeleleMotion(obj, 180);
	if (!flagEnd) { return(true); }
	return(false);
	
	task DeleleMotion(obj, delay)
	{
		if (IsDrawBackground() < 1) { return; }

		let alpha = 255;
		waitEx(delay);
		while(alpha > 0)
		{
			alpha -= 5;
			ObjRender_SetAlpha(obj,alpha);
			yield;
		}
		Obj_Delete(obj);
	}
}
