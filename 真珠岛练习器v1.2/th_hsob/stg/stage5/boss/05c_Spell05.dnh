#東方弾幕風[Single]
#ScriptVersion[3]
#Title["セトスペカ5"]
#Text["E-N:「ゴッドオベリスククラッシャー」　H-L:「エメラルドタブレットクラッシャー」"]
#Background[""]
#System["./../../../system/System.dnh"]

//---------------------------------------------------------------------

// 関数取り込み
#include"./../../../lib/lib_boss.dnh"
#include"./lib_Set.dnh"

@Event {
	alternative(GetEventType())
	case(EV_REQUEST_LIFE)		{ SetScriptResult(5000);	}
	case(EV_REQUEST_TIMER)		{ SetScriptResult(80);		}
	BossEvent();
}

let RightHandPos = [CenX-150, GetClipMinY+45];
let LeftHandPos = [CenX+150, GetClipMinY+45];

@Initialize {
	let SPELL_ID = 65;
	let SPELL_NAME = [12, 12, 13, 13][Difficult];


	//ダメージ透過率
	dIni_Shot = 100;
	// アイテム数
	bossDropItem = 0;

	Boss_Init();	//初期設定
	objEnemy = CreateBoss(BOSS_ID_SET);	//ボスセット
	//手のオブジェクト初期化
	SetHandInitialize();

	//スペカデータ・セット
	SetSpellCardData(GetSpellCardID(SPELL_ID), SPELL_NAME, 
	GetCurrentScriptDirectory()~"05c_Background.dnh",
	GetBossTexture(objEnemy, I_CUTIN), 0.6, CUTMOTION_NORMAL);

	// チャプター開始
	ChapterStartBoss(GetBossID(objEnemy), SPELL_NAME, CHAPTER_SPELL);
	CheckLinkLife_Boss(objEnemy);
	Task_Main();
}

@MainLoop {
	yield;
}

// メインタスク
task Task_Main
{
	let wtInit = 0;
	let objHand = Ini_SetAndSetHand(wtInit, CenX, 160,
					RightHandPos[0], RightHandPos[1],
					LeftHandPos[0], LeftHandPos[1]);

	let FistInterval = [960, 960, 840, 660][Difficult];
	WaitSetHand(wtInit);
	CallSpellCard(true);	//スペカ起動
	
//	SetActionSiran(objEnemy, ACT_SHOT2, 9999);
	let D = 1;
	let D2 = 1;
	waitObj(objEnemy, 60);
	BossCharge(objEnemy);
	SetSetHandMove01(objHand[0], RightHandPos[0], RightHandPos[1],	120,					 FistInterval, FIST_RIGHT);
	SetSetHandMove01(objHand[1], LeftHandPos[0], LeftHandPos[1],	120 + FistInterval/2, FistInterval, FIST_LEFT);
	if(Difficult >= D_HARD){	
		Hard_Lunatic();
	}else{
		Easy_Normal();
	}
	
	task Easy_Normal(){
		let t = 0;
		while(eAlive){
			let ang = GetAngleToPlayer(objEnemy);
			let OB_R = 32;
			let OB_Length = 450;
			CallSound(sndBoon);
			TObelisk(GetCenterX+(192+OB_R)*D, GetClipMaxY()+OB_R, 0.75, 90+90*D, 270, OB_R, OB_Length, 0.8*D, -1);
			D = -D;
			let tMax = 100+max(trunc( 50* ( ObjEnemy_GetInfo(objEnemy, INFO_LIFE)-1000 ) /4000 ), 0);
			while(t < tMax){
				t++;
				wait(1);
			}
			t -= tMax;		}
	}
	
	task Hard_Lunatic(){
		let t = 0;
		while(eAlive){
			let ang = GetAngleToPlayer(objEnemy);
			let OB_R = 30;
			let OB_Length = 384+OB_R;
			CallSound(sndBoon);
			TObelisk(GetCenterX-(192+OB_R)*D, GetClipMinY()-+OB_R, 1.20, 90, 90-90*D, OB_R, OB_Length, -1.25*D, 1);
			D = -D;
			D2 = -D2*D;
			let tMax = 80+max(trunc( 40* ( ObjEnemy_GetInfo(objEnemy, INFO_LIFE)-1000 ) /4000 ), 0);
			while(t < tMax){
				t++;
				wait(1);
			}
			t -= tMax;
		}
	}
}

task SetSetHandMove01(objHand, base_x, base_y, wt, interval, fistType){
	let eColor = EFF_PURPLE;
	let typeNum = [0, 1][base_x > GetCenterX()];
	let angMin = 90 * typeNum;
	let angMax = angMin + 90;
	let HomingRate = [0.03, 0.03, 0.05, 0.05][Difficult];
	CheckLinkLife_Familier(objEnemy, objHand, 0.6);	// ボスと体力連動
	TAct();
	WaitForKilledFamilier(objHand, 8, 0);
	ZakoFinalize(objHand, eColor);
	
	task TAct()
	{
		SetEnemyVisible(objHand, true);
		waitObj_WithHoming_AngleRestriction(objHand, wt, HomingRate, HomingRate, angMin, angMax);
		TMove;

	}
	
	task TMove(){
		let FistFlag = true;
		let hand_r = 50;
		let t2 = 0;
		while(CanShotBullet(objHand)){
			FistFlag = true;
			SetAction(objEnemy, ACT_SHOT3, 300);
			WarningLine(objHand);
			TFistShot(objHand, hand_r, fistType);
			RenderHandScale(objHand, 390);
			waitObj_WithHoming_AngleRestriction(objHand, 300, HomingRate, 0, angMin, angMax);
			let ang = ObjMove_GetAngle(objHand);
			let finPos = GetWallPos(objHand, -40);
			Enemy_SetPatternA2(objHand, 0, 0.0, ang, 2.5, 0, 45.0);
			let t = 90;
			loop(t){
				if(!CheckDispIN(objHand, -40) || !CanShotBullet(objHand)){break;}
				let objS = GetShotIdInCircleA2(ObjMove_GetX(objHand), ObjMove_GetY(objHand), hand_r, TARGET_ENEMY);
				ascent(i in 0 .. length(objS)){
					Obj_SetValue(objS[i], "BreakFlag", true);
				}
				t--;
				wait(1);
			}
			Enemy_SetPatternA2(objHand, 0, 0, NO_CHANGE, 0, 0, 0);
			DisplayShake(30, 4);
			FistFlag = false;
			CallSound(sndFlare);
			CallSound(sndShot4);
			ObjMove_SetPosition(objHand, finPos[0], finPos[1]);
			let pos = GetWallPos(objHand, 0);
			let grap = [ADD_BGW_BALL_M_ORANGE, ADD_BGW_BALL_S_ORANGE];
			ascent(i in 0 .. 200){
				if(!CanShotBullet(objHand)){break;}
				let s = 0.9+0.03*i;
				let rd_r = rand(0, 30);
				let rd_a = rand(0, 360);
				My_CreateShotA2(pos[0]+rd_r*cos(rd_a), pos[1]+rd_r*sin(rd_a),  s*2, ang+180+rand(-5,5), -s/30, s, grap[i%2], 10);
			}
			
			wait(t);
			if(!CanShotBullet(objHand)){break;}
			EnemyRandomMove(objEnemy, 160, 64);
			
			ObjMove_SetPosition(objHand, base_x -240 * cos(ang), base_y -240 * sin(ang));
			SetMovePositionBrakingEx(objHand, base_x, base_y, 90, MOVE_BRAKING02);
			wait(90);			
			if(!CanShotBullet(objHand)){break;}
			waitObj_WithHoming_AngleRestriction(objHand, interval - 480 - t2, HomingRate, HomingRate, angMin, angMax);
			t2 = 0;
			while(IsTimeStopObj(objHand)){
				t2 ++;
				wait(1);
			}
		}
		EraseEnemy(objHand);
		
		function GetWallPos(obj, Dist){
			let objPos = [ObjMove_GetX(obj), ObjMove_GetY(obj)];
			let VertexPos = [GetClipMinX() - Dist, GetClipMinY() - Dist,
							 GetClipMaxX() + Dist, GetClipMaxY() + Dist];
			let a1 = GetGapAngle( objPos, [VertexPos[2], VertexPos[3]] ) % 360;
			let a2 = GetGapAngle( objPos, [VertexPos[0], VertexPos[3]] ) % 360;
			let a3 = GetGapAngle( objPos, [VertexPos[0], VertexPos[1]] ) % 360;
			let a4 = GetGapAngle( objPos, [VertexPos[2], VertexPos[1]] ) % 360;
			let la = ObjMove_GetAngle(obj)%360;
			let ll = 0;
			if(la <= a1){
				ll = (VertexPos[2] - objPos[0])/cos(la);
			}else if(la <=a2){
				ll = (VertexPos[3] - objPos[1])/sin(la);
			}else if(la <=a3){
				ll = (VertexPos[0] - objPos[0])/cos(la);
			}else if(la <=a4){
				ll = (VertexPos[1] - objPos[1])/sin(la);
			}else{
				ll = (VertexPos[2] - objPos[0])/cos(la);
			}
			return [objPos[0] + ll*cos(la), objPos[1] + ll*sin(la)];
		}
		
		task WarningLine(objHand){
			loop(2){
				if(!CanShotBullet(objHand)){return;}
				CallSound(sndShot2);
				Effect_LaserWarning(objHand, hand_r, 500, 50, 0);
				wait(50);
			}
			loop(4){
				if(!CanShotBullet(objHand)){return;}
				CallSound(sndShot2);
				Effect_LaserWarning(objHand, hand_r, 500, 50, 0);
				wait(25);
			}
			ascent(i in 0 .. 6){
				if(!CanShotBullet(objHand)){return;}
				CallSound(sndShot2);
				Effect_LaserWarning(objHand, hand_r, 500, 50, (i+1)/6);
				wait(17);
			}
			
			task Effect_LaserWarning(obj, r, leng, time, particle){
				ascent(i in 1 .. time+1){
					if(!CanShotBullet(objHand)){return;}
					let r2 = r*sin(90*i/time);
					Effect(obj, r2,  90, leng, 20);
					Effect(obj, r2, -90, leng, 20);
					if (particle > 0)
					{
						loop(1)
						{
							let pr = r * (particle^2*0.75 + 0.25);
							Effect2(obj, randEffect(pr,pr*6),  90, randEffect(0,leng), 30);
							Effect2(obj, randEffect(pr,pr*6), -90, randEffect(0,leng), 30);
						}
					}
					yield;
				}
				
				task Effect(obj, r, angPlus, leng, time){
					let x = ObjMove_GetX(obj);
					let y = ObjMove_GetY(obj);
					let objEffect = CreateStraightLaserA1(x, y, ObjMove_GetAngle(obj), leng, 6, 9999, BGW_BEAM_E_PURPLE, 0);
					ObjStLaser_SetSource(objEffect, false);
					ObjShot_SetIntersectionEnable(objEffect, false);
//					ObjRender_SetColor(objEffect, 0, 0, 0);
					ObjShot_SetItemChange(objEffect, false);

					descent(i in 1 .. time+1){
						if(!CanShotBullet(obj)){break;}
						let ang = ObjMove_GetAngle(obj);
						ObjMove_SetPosition(objEffect, x + r * cos(ang + angPlus), y + r * sin(ang + angPlus));
						ObjStLaser_SetAngle(objEffect, ang);
						ObjRender_SetAlpha(objEffect, 31*i/time);
						yield;
					}
					Obj_Delete(objEffect);
				}
				
				task Effect2(obj, r, angPlus, leng, time)
				{
					if (IsDrawEffect() < 2) { return; }
					let x = ObjMove_GetX(obj);
					let y = ObjMove_GetY(obj);
					let objEffect = CreateParticleEffect([ObjMove_GetX(obj),ObjMove_GetY(obj)], 0.25, 2);
					ObjRender_SetBlendType(objEffect, BLEND_ADD_ARGB);
					ObjRender_SetColor(objEffect, 160, 64, 160);
					let rotate_a = randEffect(-180,180);

					ascent(i in 1 .. time+1){
						if(!CanShotBullet(obj)){break;}
						let ang = ObjMove_GetAngle(obj);
						let tmp = GetCurve_a(i/time);
						let tmp_r = r*(1-tmp);
						let tmp_l = leng*(1.5-tmp*0.5);
						let ex = x + tmp_r*cos(ang+angPlus) + tmp_l*cos(ang);
						let ey = y + tmp_r*sin(ang+angPlus) + tmp_l*sin(ang);
						ObjRender_SetPosition(objEffect, ex, ey, 0);
						ObjRender_SetAngleZ(objEffect, rotate_a*tmp);
						ObjRender_SetAlpha(objEffect, 1024*tmp^0.5*(1-tmp));
						yield;
					}
					Obj_Delete(objEffect);
				}
			}
		}

		task TFistShot(objHand, hand_r, fistType){
			let objFist = FistShot2(ObjMove_GetX(objHand), ObjMove_GetY(objHand), [255, 63, 255], hand_r, ObjMove_GetAngle(objHand), fistType, 15);
			ObjShot_SetSpellResist(objFist, true);
			SetEnemyVisible(objHand, false);
			ascent(j in 0 .. 3){
				if(!CanShotBullet(objHand)){break;}
				if(j == 2){
					CallSound(sndPower1);
				}
				CallSound(sndFlare);
				DisplayShake(10, 2);
				let b_spd = 2+1*j;
				let rd_ang = rand(0, 360);
				let rd_r = 2.5*(j+1);
				ascent(i in 0 .. 100){
					if(!CanShotBullet(objHand)){break;}
					ObjMove_SetPosition(objFist, ObjMove_GetX(objHand)+rd_r*cos(rd_ang), ObjMove_GetY(objHand)+rd_r*sin(rd_ang));
					ObjMove_SetAngle(objFist, ObjMove_GetAngle(objHand));
					let rand_r = 60*(1-sin(90*j/4));
					let a = ObjMove_GetAngle(objHand) + 180 + rand(-rand_r, rand_r);
					let bx = ObjMove_GetX(objHand);
					let by = ObjMove_GetY(objHand);
					if(FistFlag){
						ascent(j in 0 .. 3){
							let s = b_spd*(1-0.025*j);
							let objS = My_CreateShotA2(bx + 30*cos(a), by + 30*sin(a),  s*2, a, -s/60, s, BGB_SCALE_RED, 10);
						}
					}
					rd_ang += 78;
					wait(1);
				}
			}
			if(!CanShotBullet(objHand)){break;}
			CallSound(sndFlare);
			let b_spd = 5;
			ascent(i in 0 .. 60){
				if(!CanShotBullet(objHand)){break;}
				ObjMove_SetPosition(objFist, ObjMove_GetX(objHand), ObjMove_GetY(objHand));
				ObjMove_SetAngle(objFist, ObjMove_GetAngle(objHand));
				let rand_r = 60*(1-sin(90*3/4));
				let a = ObjMove_GetAngle(objHand) + 180 + rand(-rand_r, rand_r);
				let bx = ObjMove_GetX(objHand);
				let by = ObjMove_GetY(objHand);
				if(FistFlag){
					ascent(j in 0 .. 3){
						let s = b_spd*(1-0.025*j);
						let objS = My_CreateShotA2(bx + 30*cos(a), by + 30*sin(a),  s*2, a, -s/60, s, BGB_SCALE_RED, 10);
					}
				}
				wait(1);
			}
			Obj_Delete(objFist);
			SetEnemyVisible(objHand, true);
		}
	}
	
	function waitObj_WithHoming_AngleRestriction(obj, wt, homingRateIni, homingRateFin, angMin, angMax){
		let pat = Obj_GetValueD(obj, "PAT_ANG", 0) + 1;
		Obj_SetValue(obj, "PAT_ANG", pat);
		let L = homingRateFin-homingRateIni;
		ascent(t in 1 .. wt+1){
			if(Obj_IsDeleted(obj) || pat != Obj_GetValueD(obj, "PAT_ANG", 0)){return;}
			if(!IsTimeStopObj(obj)){
				SetHomingAngle(obj, homingRateIni+L*t/wt);
				ObjMove_SetAngle(obj, max(min(angMax, ObjMove_GetAngle(obj)), angMin));
			}
			wait(1);
		}
	}
	
	task RenderHandScale(obj, wt){
		ascent(i in 1 .. 16){
			let rate =  i/15;
			Obj_SetValue(obj, "SCALE_X", setHandInitialScale*(1+rate));
			Obj_SetValue(obj, "SCALE_Y", setHandInitialScale*(1-rate));
			wait(1);
		}
		waitObj(obj, wt-15);
		descent(i in 0 .. 15){
			let rate =  i/15;
			Obj_SetValue(obj, "SCALE_X", setHandInitialScale*(1+rate));
			Obj_SetValue(obj, "SCALE_Y", setHandInitialScale*(1-rate));
			wait(1);
		}
	}
}

//太くて硬いアレ
task TObelisk(x, y, spd, ang, OB_AngZ, OB_R, OB_Length, OB_RotateAng ,D){
	let grap = [	[BGW_BALL_S_YELLOW, BGW_BEAM_YELLOW, BGW_SCALE_ORANGE, BGW_SCALE_ORANGE],
					[BGW_BALL_S_GREEN, BGW_BEAM_GREEN, BGW_CHRYSTAL_S_GREEN, BGW_CHRYSTAL_M_GREEN]]
		[Difficult >= D_HARD];

	let objBase = My_CreateShotA1(x, y, spd, ang, grap[0], 0);
	Obj_SetVisible(objBase, false);
	ObjShot_SetIntersectionEnable(objBase, false);
	ObjShot_SetAutoDelete(objBase, false);
	ObjShot_SetSpellResist(objBase, true);
	let OB_AngY = rand(0, 360);
	let r = OB_R;
	let leng_rate = 0.90;
	let width_rate = 0.65;
	let Pos = [	0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,
				0,0];
	let EfcArray = [	-1,-1,-1,-1,
						-1,-1,-1,-1];
	let L_Ang =  [	0, 90, 180, 270];
	let L_Leng = [	0, 0, 0, 0];
	ascent(i in 0 .. 4){
		EfcArray[i] = LaserEffect(i, i+4);
		EfcArray[i+4] = LaserEffect(i+4, 8);
		LaserEffect((i%4)+4, ((i+1)%4)+4);
	}
	let time = 0;
	let XRate = [0.4, 0.4, 0.5, 0.5][Difficult];
	let rd = trunc(rand(0,120-0.001));
	let Laser_Quant = [2, 3, 4, 5][Difficult];
	let Laser_Time = [600, 600, 720, 720][Difficult];
	ascent(i in 0 .. Laser_Quant){
		TLaser(rd+Laser_Time*i/Laser_Quant, Laser_Time, D);
	}
	while(eAlive){
		if(!CheckDispIN(objBase, r*1.2)){
			break;
		}
		//オベリスク建造部分〜ここから〜
		ascent(i in 0 .. 2){
			let bx = r*cos(OB_AngY+90*i)*XRate;
			let by = r*sin(OB_AngY+90*i);
			let pos = Rotate2D_XY(bx, by, OB_AngZ);
			let num = 2*i;
			let L = OB_Length*leng_rate;
			Pos[num+0 ] = pos[0];
			Pos[num+1 ] = pos[1];
			Pos[num+4 ] = -pos[0];
			Pos[num+5 ] = -pos[1];
			Pos[num+8 ] = L*cos(OB_AngZ)+pos[0]*width_rate;
			Pos[num+9 ] = L*sin(OB_AngZ)+pos[1]*width_rate;
			Pos[num+12] = L*cos(OB_AngZ)-pos[0]*width_rate;
			Pos[num+13] = L*sin(OB_AngZ)-pos[1]*width_rate;
		}
		ascent(i in 0 .. 2){
			let pos1 = [Pos[(2*i+0)%8], Pos[(2*i+1)%8]];
			let pos2 = [Pos[(2*i+2)%8], Pos[(2*i+3)%8]];
			L_Ang[i] = GetGapAngle( pos1, pos2 );
			L_Ang[i+2] = L_Ang[i]+180;
			L_Leng[i] = GetDistance( pos1, pos2 );
			L_Leng[i+2] = L_Leng[i];
		}
		Pos[16] = OB_Length*cos(OB_AngZ);
		Pos[17] = OB_Length*sin(OB_AngZ);
		//オベリスク建造部分〜ここまで〜
		OB_AngY += OB_RotateAng;
		time++;
		yield;
	}
	Obj_Delete(objBase);

	task TLaser(t, time, D){
		let vertexArray = [];
		let flag = false;
		ascent(i in 0 .. 4){
			vertexArray = vertexArray ~ [Laser()];
		}
		let time2 = trunc(time*leng_rate);
		let OBLengthRate = t / time;
		let OBRhombusScale = 1;
		loop{
			if(Obj_IsDeleted(objBase) || IsBreaking(vertexArray) ){break;}
			while(t%time < time2){
				if(Obj_IsDeleted(objBase) || IsBreaking(vertexArray) ){break;}
				OBLengthRate = t / time;
				OBRhombusScale = 1+(width_rate-1)*(t / time2);
				SetLaserParameter(vertexArray, OBLengthRate, OBRhombusScale);
				t += D;
				yield;
			}
			t %= time;
			if(Obj_IsDeleted(objBase) || IsBreaking(vertexArray) ){break;}
			while(t%time >= time2){
				if(Obj_IsDeleted(objBase) || IsBreaking(vertexArray) ){break;}
				OBLengthRate = t / time;
				OBRhombusScale = width_rate*(1-(t - time2) / (time - time2) );
				SetLaserParameter(vertexArray, OBLengthRate, OBRhombusScale);
				t += D;
				yield;
			}
			t %= time;
		}
		let Q = length(vertexArray);
		descent(i in 0 .. Q){
			Obj_Delete( vertexArray[i] );
		}
		if(Obj_IsDeleted(objBase)){	return;}

		//菱形破壊部分
		let L = OB_Length * OBLengthRate;
		let BasePos = [ ObjMove_GetX(objBase) + L*cos(OB_AngZ) , ObjMove_GetY(objBase) + L*sin(OB_AngZ) ];
		let quant = [12, 12, 9, 9][Difficult];
		let interval= [4, 4, 1, 1][Difficult];
		let interval2= [4, 4, 1, 2][Difficult];
		let spdDiv= [24, 24, 20, 15][Difficult];
		let spd2Rate= [0.75, 0.9, 1.25, 1.25][Difficult];
		CallSound(sndShot6);
		ascent(i in 0 .. Q){
			ascent(iQ in 0 ..quant){
				let num = iQ+i*quant;
				let L = L_Leng[i]*iQ/quant;
				let bPos = [ Pos[2*i+0] + L * cos(L_Ang[i]) , Pos[2*i+1] + L * sin(L_Ang[i]) ];
				let ba = atan2( bPos[1] , bPos[0] );
				let bl = ( (bPos[1])^2 + (bPos[0])^2 )^0.5;
				let s = bl/spdDiv;
				let rate = spd2Rate*(1-0.4*(num%interval2));
				Shot(BasePos[0] + bPos[0] * OBRhombusScale, BasePos[1] + bPos[1] * OBRhombusScale, s, ba, rate, (num%interval==0));
			}
		}
		
		function SetLaserParameter(objL, OBLengthRate, OBRhombusScale){
			let L = OB_Length * OBLengthRate;
			ascent(i in 0 .. length(objL)){
				let posNum = i;
				ObjMove_SetPosition(objL[i], ObjMove_GetX(objBase)+L*cos(OB_AngZ)+Pos[2*posNum]*OBRhombusScale,
											 ObjMove_GetY(objBase)+L*sin(OB_AngZ)+Pos[2*posNum+1]*OBRhombusScale);
				ObjStLaser_SetAngle(objL[i], L_Ang[posNum]);
				ObjLaser_SetLength(objL[i], L_Leng[posNum]*OBRhombusScale);
			}
		}

		function Laser(){
			let objL = My_CreateStraightLaserA1Ex(ObjMove_GetX(objBase), ObjMove_GetY(objBase), ang, 0, 10, 999999, grap[1], 0, [true,false]);
			if(Difficult >= D_HARD){	ObjRender_SetColor(objL, 0, 255, 0);	}
			else{						ObjRender_SetColor(objL, 255, 255, 63);	}
			Obj_SetValue(objL, "BreakFlag", false);
			ObjShot_SetAutoDelete(objL, false);
			return objL;
		}

		function IsBreaking(obj){
			ascent(i in  0 .. length(obj)){
				if(Obj_GetValueD(obj[i], "BreakFlag", false)){return true;}
			}
			return false;
		}
		
		task Shot(x, y, spd, ang, spd2Rate, flag){
			let objS = My_CreateShotA2(x, y, -2*spd, ang, (spd*9/5)/30, -spd/5, grap[2], 10);
			let arc = [0.6, 0.6, 0.75, 0.75][Difficult];
			let way = [3, 3, 3, 3][Difficult];
			wait(240);
			if(Obj_IsDeleted(objS) || !eAlive){return;}
			if(flag){
				let iWMinus = (way-1)/2;
				ascent(iW in 0 .. way){
					let s2 = spd*(1-0.03*absolute(iW-iWMinus));
					ShotB(ObjMove_GetX(objS), ObjMove_GetY(objS), -spd/5, s2*spd2Rate, -ang+arc*(iW-iWMinus), grap[2]);
				}
			}
			Obj_Delete(objS);

			task ShotB(x, y, spd, spd2, ang, grap){
				let objS = My_CreateShotA2(x, y, spd, ang, (spd2-spd)/30, spd2, grap, 10);
				if(Difficult >= D_HARD){return;}
				wait(360);
				if (!Obj_IsDeleted(objS))
				{
					SetShotDisabled(objS);
					ObjRender_SetBlendType(objS, BLEND_ADD_ARGB);
					descent(t in 0 .. 30)
					{
						let tmp = (t+1)/30;
						ObjRender_SetScaleXYZ(objS, tmp, tmp, tmp);
						yield;
					}
					Obj_Delete(objS);
				}
			}
		}
	}
	
	function LaserEffect(posNum, posNum2){	
		let objEffect = CreateStraightLaserA1(ObjMove_GetX(objBase), ObjMove_GetY(objBase), ang, 0, 2, 9999, grap[1], 0);
		ObjStLaser_SetSource(objEffect, false);
		ObjShot_SetAutoDelete(objEffect, false);
		ObjShot_SetIntersectionEnable(objEffect, false);
//					ObjRender_SetColor(objEffect, 0, 0, 0);
		ObjShot_SetItemChange(objEffect, false);
		Move(objEffect);
		return objEffect;
		
		task Move(objEffect){
			let border = (2^0.5)/2;
			while(!Obj_IsDeleted(objBase)){
				let x1 = Pos[2*posNum];
				let y1 = Pos[2*posNum+1];
				let x2 = Pos[2*posNum2];
				let y2 = Pos[2*posNum2+1];
				let ang = atan2(y2-y1, x2-x1);
				let leng = GetDistance( [x2,y2], [x1,y1] );
				ObjMove_SetPosition(objEffect, ObjMove_GetX(objBase) + x1, ObjMove_GetY(objBase) + y1);
				ObjStLaser_SetAngle(objEffect, ang);
				ObjLaser_SetLength(objEffect, leng);
				let a1 = [(OB_AngY+90*posNum)%360, 180][posNum >= 8];
				let a2 = [(OB_AngY+90*posNum2)%360, 180][posNum2 >= 8];
				Obj_SetVisible(objEffect, cos(a1) < border && cos(a2) < border);
				yield;
			}
			Obj_Delete(objEffect);
		}
	}
}