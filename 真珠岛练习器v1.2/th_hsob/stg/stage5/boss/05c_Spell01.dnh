#東方弾幕風[Single]
#ScriptVersion[3]
#Title["セトスペカ1"]
#Text["E-N:分離「四肢奮迅」　H:分離「口八丁手足八丁」　L:援軍「困った時のバステトの手」"]
#Background[""]
#System["./../../../system/System.dnh"]

//---------------------------------------------------------------------

// 関数取り込み
#include"./../../../lib/lib_boss.dnh"
#include"./lib_Set.dnh"

@Event {
	alternative(GetEventType())
	case(EV_REQUEST_LIFE)		{ SetScriptResult(300);	}
	case(EV_REQUEST_TIMER)		{ SetScriptResult(60);		}
	BossEvent();
}

let RightHandPos = [CenX-120, 180];
let LeftHandPos = [CenX+120, 180];

@Initialize {
	let SPELL_ID = 61;
	let SPELL_NAME = [0, 0, 1, 2][Difficult];


	//ダメージ透過率
	dIni_Shot = 10;
	// アイテム数
	bossDropItem = 150;

	Boss_Init();	//初期設定
	objEnemy = CreateBoss(BOSS_ID_SET);	//ボスセット
	//手のオブジェクト初期化
	SetHandInitialize();

	//スペカデータ・セット
	SetSpellCardData(GetSpellCardID(SPELL_ID), SPELL_NAME, 
	GetCurrentScriptDirectory()~"05c_Background.dnh",
	GetBossTexture(objEnemy, I_CUTIN), 0.6, CUTMOTION_NORMAL);

	// チャプター開始
	ChapterStartBoss(GetBossID(objEnemy), SPELL_NAME, CHAPTER_SPELL);
	CheckLinkLife_Boss(objEnemy);
	Task_Main();
}

@MainLoop {
	yield;
}


// メインタスク
task Task_Main
{
	let wtInit = 0;
	CallSound(sndBoon);
	let objHand = Ini_SetAndSetHand(wtInit, CenX, 160,
					RightHandPos[0], RightHandPos[1],
					LeftHandPos[0], LeftHandPos[1]);
	SetHand_Avatar01(SET_RIGHT_HAND_AVATAR, CenX-160, GetClipMinY()+32, 0, 65, 0.5, 90-25, 1);
	SetHand_Avatar01(SET_LEFT_HAND_AVATAR, CenX+160, GetClipMinY()+32, 180, 115, 0.5, 90+25, -1);
	let objBastetHand = [];
	if(Difficult == D_HARD){
		let pos = [
			[CenX-192, GetCenterY()-45],
			[CenX+192, GetCenterY()-45],
			[CenX-192, GetClipMaxY()],
			[CenX+192, GetClipMaxY()]
		];
		ascent(i in 0 .. 4){
			let HandNum = [SET_LEFT_HAND_AVATAR, SET_RIGHT_HAND_AVATAR][i%2== 0];
			let ang = atan2(GetCenterY+120-pos[i][1], GetCenterX-pos[i][0]);
			SetHand_Avatar02(HandNum, pos[i][0], pos[i][1], 180*(i%2), ang, 0.5, ang, [-1, 1][i%2]);
		}
	}else if(Difficult == D_LUNA){
		let pos = [
			[CenX-160, GetCenterY()-90],
			[CenX+160, GetCenterY()-90],
		];
		ascent(i in 0 .. 2){
			let HandNum = [SET_LEFT_HAND_AVATAR, SET_RIGHT_HAND_AVATAR][i%2== 0];
			let ang = atan2(GetCenterY+120-pos[i][1], GetCenterX-pos[i][0]);
			let objE = BastetHand(HandNum, pos[i][0], pos[i][1], 180*(i%2), ang, 0.5);
			objBastetHand = objBastetHand ~ [objE];
		}
	}
	WaitSetHand(wtInit);
	CallSpellCard(true);	//スペカ起動
	
	SetSetHandMove01(objHand[0], FIST_RIGHT, RightHandPos[0], RightHandPos[1], 300);
	SetSetHandMove01(objHand[1], FIST_LEFT, LeftHandPos[0], LeftHandPos[1], 60);
	let D = -1;
	if(length(objBastetHand) > 0){
		wait(180);

		while(eAlive){
	//		CallSound(sndFlare);
			loop(2){
				SetMovePositionBrakingEx(objBastetHand[0], GetCenterX+192*D, GetCenterY-60+60*D, 90, MOVE_BRAKING02);
				SetMovePositionBrakingEx(objBastetHand[1], GetCenterX+192*D, GetCenterX-60-60*D, 90, MOVE_BRAKING02);
				Ini_HandAngle(objBastetHand[0], ObjMove_GetAngle(objBastetHand[0]), 90+90*D, 90);
				Ini_HandAngle(objBastetHand[1], ObjMove_GetAngle(objBastetHand[1]), 90+90*D, 90);
				wait(90);
				CallSound(sndPower2);
				wait(90);
				if(D < 0){
					STGFrameMoveMinX(objBastetHand[0], objBastetHand[1], 32+192, 180, 60, 10);
				}else{
					STGFrameMoveMaxX(objBastetHand[0], objBastetHand[1], 416-192, 180, 60, 10);
				}
				SetMovePositionBrakingEx(objBastetHand[0], GetCenterX+0*D, GetCenterY-60+60*D, 180, MOVE_BRAKING01);
				SetMovePositionBrakingEx(objBastetHand[1], GetCenterX+0*D, GetCenterX-60-60*D, 180, MOVE_BRAKING01);
				wait(300);
				D = -D;
			}
			SetMovePositionBrakingEx(objBastetHand[0], GetCenterX-192, GetCenterY-60, 90, MOVE_BRAKING02);
			SetMovePositionBrakingEx(objBastetHand[1], GetCenterX+192, GetCenterX-60, 90, MOVE_BRAKING02);
			Ini_HandAngle(objBastetHand[0], ObjMove_GetAngle(objBastetHand[0]), 0, 90);
			Ini_HandAngle(objBastetHand[1], ObjMove_GetAngle(objBastetHand[1]), 180, 90);
			wait(90);
			CallSound(sndPower2);
			wait(90);
			STGFrameMoveBothX(objBastetHand[0], objBastetHand[1], 32+96, 416-96, 180, 60, 10);
			SetMovePositionBrakingEx(objBastetHand[0], GetCenterX-96, GetCenterY-60, 180, MOVE_BRAKING01);
			SetMovePositionBrakingEx(objBastetHand[1], GetCenterX+96, GetCenterX-60, 180, MOVE_BRAKING01);
			wait(300);
			D = -D;
		}
	}
}

task SetSetHandMove01(objHand, fistNum, base_x, base_y, wt){
	let eColor = EFF_PURPLE;
	CheckLinkLife_Familier(objEnemy, objHand, 0.6);	// ボスと体力連動
	TAct();
	WaitForKilledFamilier(objHand, 8, 0);
	ZakoFinalize(objHand, eColor);
	
	task TAct()
	{
		SetEnemyVisible(objHand, true);
		waitObj_WithHoming(objHand, wt, 0.02);
		TMove;

	}
	
	task TMove(){
		let ChargeCancel = false;
		while(CanShotBullet(objHand)){
			ChargeCancel = IsTimeStopObj(objHand);
			if(!ChargeCancel){
				SetAction(objEnemy, ACT_SHOT1, 90);
				CallSound(sndPower1);
				WarningLine(objHand);
			}
			waitObj_WithHoming(objHand, 60, 0.02);
			waitObj_WithHomingDecresc(objHand, 60, 0.02);
			
			let ang = ObjMove_GetAngle(objHand);
			if(!ChargeCancel){
				TFistShot(objHand, fistNum, ang);
				RenderHandScale(objHand, 150);
				Enemy_SetPatternA2(objHand, 0, 0, ang, 8.0/120, 0, 8.0);
				wait(180);
				Enemy_SetPatternA2(objHand, 0, 0, NO_CHANGE, 0, 0, 0);
				ObjMove_SetPosition(objHand, base_x -360 * cos(ang), base_y -360 * sin(ang));
				SetMovePositionBrakingEx(objHand, base_x, base_y, 90, MOVE_BRAKING02);
				wait(90);
			}else{
				loop(270){
					if(!IsTimeStopObj(objHand)){
						SetHomingAngle(objHand, 0.02);
					}
					wait(1);
				}
			}
			
			waitObj_WithHoming(objHand, 90, 0.02);
		}
		EraseEnemy(objHand);

		task SoundWarning(wtArray){
			ascent(i in 0 .. length(wtArray)){
				if(!CanShotBullet(objHand) || IsTimeStopObj(objHand)){return;}
				CallSound(sndShot2);
				wait(wtArray[i]);
			}
		}
		
		task WarningLine(objHand){
			SoundWarning([36, 24, 16, 12, 8, 6, 3, 3, 3, 3, 2, 2, 2]);			//合計120フレーム警告音
			loop(4){
				if(!CanShotBullet(objHand) || IsTimeStopObj(objHand)){return;}
				Effect_LaserWarning2(objHand, 15, 500, 30);
				loop(30){
					if(!CanShotBullet(objHand) || IsTimeStopObj(objHand)){
						ChargeCancel = true;
						return;
					}
					wait(1);
				}
			}
			if(!CanShotBullet(objHand) || IsTimeStopObj(objHand)){return;}
			Effect_LaserWarning(ObjMove_GetX(objHand), ObjMove_GetY(objHand), ObjMove_GetAngle(objHand), 50, 500, 45);
			
			task Effect_LaserWarning(x, y, angle, r, leng, time){
				ascent(i in 1 .. time+1){
					if(!CanShotBullet(objHand)){return;}
					let r2 = r*sin(90*i/time);
					Effect(x+r2*cos(angle+90), y+r2*sin(angle+90), angle, leng, 30);
					Effect(x+r2*cos(angle-90), y+r2*sin(angle-90), angle, leng, 30);
					wait(1);
				}
				
				task Effect(x, y, angle, leng, time){
					let objEffect = CreateStraightLaserA1(x, y, angle, leng, 6, 9999, BGW_BEAM_E_PURPLE, 0);
					ObjStLaser_SetSource(objEffect, false);
					ObjShot_SetIntersectionEnable(objEffect, false);
//					ObjRender_SetColor(objEffect, 0, 0, 0);
					ObjShot_SetItemChange(objEffect, false);

					descent(i in 1 .. time+1){
						if(!CanShotBullet(objHand)){break;}
						ObjRender_SetAlpha(objEffect, 63*i/time);
						wait(1);
					}
					Obj_Delete(objEffect);
				}
			}
			
			task Effect_LaserWarning2(obj, r, leng, time){
				ascent(i in 1 .. time+1){
					if(!CanShotBullet(objHand)){return;}
					let r2 = r*sin(90*i/time);
					Effect(obj, r2,  90, leng, 20);
					Effect(obj, r2, -90, leng, 20);
					wait(1);
				}
				
				task Effect(obj, r, angPlus, leng, time){
					let objEffect = CreateStraightLaserA1(ObjMove_GetX(obj), ObjMove_GetY(obj), ObjMove_GetAngle(obj), leng, 6, 9999, BGW_BEAM_E_PURPLE, 0);
					ObjStLaser_SetSource(objEffect, false);
					ObjShot_SetIntersectionEnable(objEffect, false);
//					ObjRender_SetColor(objEffect, 0, 0, 0);
					ObjShot_SetItemChange(objEffect, false);

					descent(i in 1 .. time+1){
						if(!CanShotBullet(obj)){break;}
						let ang = ObjMove_GetAngle(obj);
						ObjMove_SetPosition(objEffect, ObjMove_GetX(obj) + r * cos(ang + angPlus), ObjMove_GetY(obj) + r * sin(ang + angPlus));
						ObjStLaser_SetAngle(objEffect, ang);
						ObjRender_SetAlpha(objEffect, 31*i/time);
						wait(1);
					}
					Obj_Delete(objEffect);
				}
			}
		}

		task TFistShot(objHand, fistNum, ang){
			SetEnemyVisible(objHand, false);
			CallSound(sndFlare);
			DisplayShake(30, 4);
			let b_spd = 2;

			let objFist = FistShot2(ObjMove_GetX(objHand), ObjMove_GetY(objHand), [255, 63, 255], 50, ang, fistNum, 15);
			ObjShot_SetSpellResist(objFist, true);
			ascent(i in 0 .. 180){
				if(!CanShotBullet(objHand)){break;}
				ObjMove_SetPosition(objFist, ObjMove_GetX(objHand), ObjMove_GetY(objHand));
				let rand_r = 60*(1-sin(90*i/180));
				let a = ang + 180 + rand(-rand_r, rand_r);
				if(i%1 == 0){
					let bx = ObjMove_GetX(objHand);
					let by = ObjMove_GetY(objHand);
					if(CheckDispINEx(bx, by, 30)){
						CallSound(sndShot6);
						ascent(j in 0 .. 3){
							let s = (b_spd+ObjMove_GetSpeed(objHand)/2)*(1-0.025*j);
							let objS = My_CreateShotA2(bx + 30*cos(a), by + 30*sin(a),  s*2, a, -s/60, s, BGB_SCALE_RED, 10);
						}
					}
				}
				wait(1);
			}
			SetEnemyVisible(objHand, true);
			Obj_Delete(objFist);
		}
	}

	task RenderHandScale(obj, wt){
		ascent(i in 1 .. 16){
			let rate =  i/15;
			Obj_SetValue(obj, "SCALE_X", setHandInitialScale*(1+rate));
			Obj_SetValue(obj, "SCALE_Y", setHandInitialScale*(1-rate));
			waitObj(obj, 1);
		}
		waitObj(obj, wt-15);
		descent(i in 0 .. 15){
			let rate =  i/15;
			Obj_SetValue(obj, "SCALE_X", setHandInitialScale*(1+rate));
			Obj_SetValue(obj, "SCALE_Y", setHandInitialScale*(1-rate));
			wait(1);
		}
	}
}

// 手
task SetHand_Avatar01(type, x, y, ini_ang, fin_ang, scale, b_ang, D){
	waitObj(objEnemy, 90);
	let eSize = ENEMY_M;
	let eColor = EFF_PURPLE;
	
	let b_spd = [2.4, 2.8, 2.4, 2.0][Difficult];
	let b_way = [5, 4, 3, 3][Difficult];
	let b_way2 = [1, 2, 2, 2][Difficult];
	let b_arc = [31.6, 26.3, 26.3, 26.3][Difficult];
	let b_wt = [24, 20, 20, 20][Difficult];
	let rhombusW = [9.0, 6.0, 6.0, 6.0][Difficult];
	let rhombusH = [15.0, 10.0, 10.0, 10.0][Difficult];
	let rhombusQ = [2, 3, 3, 4][Difficult];
	let W = (b_way-1)/2;
	if(type == SET_LEFT_HAND_AVATAR){
		b_ang += 180/b_way2;
	}
	CallSound(sndBoon);
	let objHand = MakeEnemyFamilier(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 500000, ENEMY_M);
	SetEffectResist(objHand, 0.375);					//状態異常耐性
	CheckLinkLife_Familier(objEnemy, objHand, 0.4);	// ボスと体力連動
	DrawHandFamilier(objHand, type , EFF_PURPLE);
//	SetEnemyVisible(objFamilier, true);
	Ini_HandMove(objHand, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), x, y, 120);
	Ini_HandAngle(objHand, ini_ang, fin_ang, 120);
	Ini_HandScale(objHand, scale, 120);
	TAct();
	WaitForKilledFamilier(objHand, 8, 0);
	ZakoFinalize(objHand, eColor);
	
	task TAct()
	{
		TAngleMove;
		AngleManage();
		wait(300);
		while(CanShotBullet(objHand)){
			if(!IsTimeStopObj(objHand)){
				CallSound(sndShot1);
				CallSound(sndShot2);
				ascent(iW2 in 0 .. b_way2){
					ascent(iW in 0 .. b_way){
						let a = b_ang + b_arc*(iW-W) + 360*iW2/b_way2;
						RhombusShot(objHand, rhombusQ, rhombusH, rhombusW, ObjMove_GetX(objHand) + 40*cos(a), ObjMove_GetY(objHand) + 40*sin(a), b_spd, a, BGW_CHRYSTAL_S_ORANGE, 10);
					}
				}
			}
			wait(b_wt);
		}
	}

	task AngleManage(){
		while(CanShotBullet(objHand)){
			b_ang += b_arc*0.6*D/b_wt;
			wait(1);
		}
	}
	task TAngleMove(){
//		let objImgID = Obj_GetValueD(objFamilier, "IMAGE_ID_ALL", []);
		while(CanShotBullet(objHand)){
			SetHomingAngle(objHand, 0.01);
			waitObj(objHand, 1);
		}
		EraseEnemy(objHand);
	}
}

// 手
task SetHand_Avatar02(type, x, y, ini_ang, fin_ang, scale, b_ang, D){
	waitObj(objEnemy, 90);
	let eSize = ENEMY_M;
	let eColor = EFF_PURPLE;
	let b_spd = 0.9;
	let b_way = 2;
	let b_way2 = 1;
	let b_angAdd = 1.27;
	let b_itv = 16;
	let b_itv2 = 4;
	let b_wt = 2;
	let b_arc = b_angAdd*b_itv*2.5;
	let W = (b_way-1)/2;
	if(type == SET_LEFT_HAND_AVATAR){
		b_ang += 180/b_way2;
	}
	CallSound(sndBoon);
	let objHand = MakeEnemyFamilier(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 500000, ENEMY_M);
	SetEffectResist(objHand, 0.375);					//状態異常耐性
	CheckLinkLife_Familier(objEnemy, objHand, 0.4);	// ボスと体力連動
	DrawHandFamilier(objHand, type , EFF_PURPLE);
//	SetEnemyVisible(objFamilier, true);
	Ini_HandMove(objHand, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), x, y, 120);
	Ini_HandAngle(objHand, ini_ang, fin_ang, 120);
	Ini_HandScale(objHand, scale, 120);
	TAct();
	WaitForKilledFamilier(objHand, 8, 0);
	ZakoFinalize(objHand, eColor);
	
	task TAct()
	{
		TAngleMove;
		AngleManage();
		wait(300);
		let c = 0;
		while(CanShotBullet(objHand)){
			if(!IsTimeStopObj(objHand) && (c % b_itv) < b_itv2){
				CallSound(sndShot3);
				ascent(iW2 in 0 .. b_way2){
					ascent(iW in 0 .. b_way){
						let a = b_ang + b_arc*(iW-W) + 360*iW2/b_way2;
						My_CreateShotA2(ObjMove_GetX(objHand) + 40*cos(a), ObjMove_GetY(objHand) + 40*sin(a), 0, a, b_spd/100, b_spd, BGB_BILL_YELLOW, 10);
					}
				}
			}
			c++;
			wait(b_wt);
		}
	}

	task AngleManage(){
		while(CanShotBullet(objHand)){
			b_ang += b_angAdd*D/b_wt;
			wait(1);
		}
	}
	task TAngleMove(){
//		let objImgID = Obj_GetValueD(objFamilier, "IMAGE_ID_ALL", []);
		while(CanShotBullet(objHand)){
			SetHomingAngle(objHand, 0.01);
			waitObj(objHand, 1);
		}
		EraseEnemy(objHand);
	}
}

function BastetHand(type, x, y, ini_ang, fin_ang, scale){
	let eSize = ENEMY_M;
	let eColor = EFF_PURPLE;
	let objHand = MakeEnemyFamilier(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 500000, ENEMY_M);
	Move(objHand);
	return objHand;

	task Move(objHand){
		waitObj(objEnemy, 90);
		CallSound(sndBoon);
		SetEffectResist(objHand, 0.375);					//状態異常耐性
		CheckLinkLife_Familier(objEnemy, objHand, 0.4);	// ボスと体力連動
		DrawHandFamilier(objHand, SET_BASTET_HAND , EFF_PURPLE);
	//	SetEnemyVisible(objFamilier, true);
		Ini_HandMove(objHand, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), x, y, 120);
		Ini_HandAngle(objHand, ini_ang, fin_ang, 120);
		Ini_HandScale(objHand, scale, 120);
		TAct();
		WaitForKilledFamilier(objHand, 8, 0);
		ZakoFinalize(objHand, eColor);
		
		task TAct()
		{
			wait(300);
			let c = 0;
			while(CanShotBullet(objHand)){
				c++;
				wait(360);
			}
		}
	}
}

task STGFrameMoveMinX(objHand, objHand2, x, time1, time2, time3){
	let objSTGFrame = GetStgFrameObject();
	let base_vc = 0;
	let vcNum = [2,3,5,12,13,16,18,19,22];
	let rectY = [0,0,480,0,16,16,464,480,480];
	let X = 32;
	ascent(i in 1 .. time1+1){
		if(!CanShotBullet(objHand) || IsTimeStopObj(objHand)){	break;}
		if(!CanShotBullet(objHand2) || IsTimeStopObj(objHand2)){	break;}
		X = 32+(x-32)*sin(90*i/time1);
		SetYukeMode(X, 16, 416, 464);
		ascent(iV in 0 .. length(vcNum)){
			ObjPrim_SetVertexPosition(objSTGFrame, vcNum[iV], X, rectY[iV], 0);
		}
		wait(1);
	}
	loop(time2){
		if(!CanShotBullet(objHand) || IsTimeStopObj(objHand)){	break;}
		if(!CanShotBullet(objHand2) || IsTimeStopObj(objHand2)){	break;}
		wait(1);
	}
	let XAdd = (x-32)/time3;
	let dist = X - 32;
	loop(time3){
		X -= XAdd;
		if(X <= 32){break;}
		SetYukeMode(X, 16, 416, 464);
		ascent(iV in 0 .. length(vcNum)){
			ObjPrim_SetVertexPosition(objSTGFrame, vcNum[iV], X, rectY[iV], 0);
		}
		wait(1);
	}
	ascent(iV in 0 .. length(vcNum)){
		ObjPrim_SetVertexPosition(objSTGFrame, vcNum[iV], 32, rectY[iV], 0);
	}
	if(dist >= 24){
		let quant = trunc((dist+24)/48);
		TShotWallBreak(quant, GetClipMinX(), GetClipMinY()-16, 0);
	}


	SetStgFrameDefault();
}

task STGFrameMoveMaxX(objHand, objHand2, x, time1, time2, time3){
	let objSTGFrame = GetStgFrameObject();
	let vcNum = [6,7,10,14,15,17,20,21,23];
	let rectY = [0,480,480,0,0,16,464,464,480];
	let X = 416;
	ascent(i in 1 .. time1+1){
		if(!CanShotBullet(objHand) || IsTimeStopObj(objHand)){	break;}
		if(!CanShotBullet(objHand2) || IsTimeStopObj(objHand2)){	break;}
		X = 416+(x-416)*sin(90*i/time1);
		SetYukeMode(32, 16, X, 464);
		ascent(iV in 0 .. length(vcNum)){
			ObjPrim_SetVertexPosition(objSTGFrame, vcNum[iV], X, rectY[iV], 0);
		}
		wait(1);
	}
	loop(time2){
		if(!CanShotBullet(objHand) || IsTimeStopObj(objHand)){	break;}
		if(!CanShotBullet(objHand2) || IsTimeStopObj(objHand2)){	break;}
		wait(1);
	}
	let XAdd = (x-416)/time3;
	let dist = 416 - X;
	loop(time3){
		X -= XAdd;
		if(X >= 416){break;}
		SetYukeMode(32, 16, X, 464);
		ascent(iV in 0 .. length(vcNum)){
			ObjPrim_SetVertexPosition(objSTGFrame, vcNum[iV], X, rectY[iV], 0);
		}
		wait(1);
	}
	ascent(iV in 0 .. length(vcNum)){
		ObjPrim_SetVertexPosition(objSTGFrame, vcNum[iV], 416, rectY[iV], 0);
	}
	if(dist >= 24){
		let quant = trunc((dist+24)/48);
		TShotWallBreak(quant, GetClipMaxX(), GetClipMinY()-16, 180);
	}
	SetStgFrameDefault();
}

task STGFrameMoveBothX(objHand, objHand2, MinX, MaxX, time1, time2, time3){
	let objSTGFrame = GetStgFrameObject();
	let base_vc = 0;
	let X1 = 32;
	let X2 = 416;
	MinXMove(objHand);
	MaxXMove(objHand2);
	loop(time1+time2+time3){
		SetYukeMode(X1, 16, X2, 464);
		wait(1);
	}
	SetStgFrameDefault();
	
	task MinXMove(objHand){
		let vcNum = [2,3,5,12,13,16,18,19,22];
		let rectY = [0,0,480,0,16,16,464,480,480];
		ascent(i in 1 .. time1+1){
			if(!CanShotBullet(objHand) || IsTimeStopObj(objHand)){	break;}
			X1 = 32+(MinX-32)*sin(90*i/time1);
			ascent(iV in 0 .. length(vcNum)){
				ObjPrim_SetVertexPosition(objSTGFrame, vcNum[iV], X1, rectY[iV], 0);
			}
			wait(1);
		}
		loop(time2){
			if(!CanShotBullet(objHand) || IsTimeStopObj(objHand)){	break;}
			wait(1);
		}
		let X1Add = (MinX-32)/time3;
		let dist = X1 - 32;
		loop(time3){
			X1 -= X1Add;
			if(X1 <= 32){break;}
			ascent(iV in 0 .. length(vcNum)){
				ObjPrim_SetVertexPosition(objSTGFrame, vcNum[iV], X1, rectY[iV], 0);
			}
			wait(1);
		}
		X1 = 32;
		ascent(iV in 0 .. length(vcNum)){
			ObjPrim_SetVertexPosition(objSTGFrame, vcNum[iV], X1, rectY[iV], 0);
		}
		if(dist >= 24){
			let quant = trunc((dist+24)/48);
			TShotWallBreak(quant, GetClipMinX(), GetClipMinY()-16, 0);
		}
	}

	task MaxXMove(objHand){
		let vcNum = [6,7,10,14,15,17,20,21,23];
		let rectY = [0,480,480,0,0,16,464,464,480];
		ascent(i in 1 .. time1+1){
			if(!CanShotBullet(objHand) || IsTimeStopObj(objHand)){	break;}
			X2 = 416+(MaxX-416)*sin(90*i/time1);
			ascent(iV in 0 .. length(vcNum)){
				ObjPrim_SetVertexPosition(objSTGFrame, vcNum[iV], X2, rectY[iV], 0);
			}
			wait(1);
		}
		loop(time2){
			if(!CanShotBullet(objHand) || IsTimeStopObj(objHand)){	break;}
			wait(1);
		}
//		descent(i in 0 .. time3){
		let X2Add = (MaxX-416)/time3;
		let dist = 416 - X2;
		loop(time3){
			X2 -= X2Add;
			if(X2 >= 416){break;}
			ascent(iV in 0 .. length(vcNum)){
				ObjPrim_SetVertexPosition(objSTGFrame, vcNum[iV], X2, rectY[iV], 0);
			}
			wait(1);
		}
		X2 = 416;
		ascent(iV in 0 .. length(vcNum)){
			ObjPrim_SetVertexPosition(objSTGFrame, vcNum[iV], X2, rectY[iV], 0);
		}
		if(dist >= 24){
			let quant = trunc((dist+24)/48);
			TShotWallBreak(quant, GetClipMaxX(), GetClipMinY()-16, 180);
		}
	}
}

task TShotWallBreak(quant, x, y, ang){
	if(!eAlive){return;}
	CallSound(sndFlare);
	DisplayShake(30, 4);
	let itv = 12;
	let itv2 = 8;
	let count = trunc(rand(0, itv*10-0.001))%itv;
	ascent(iQ in 0 .. quant){
		ShotWallBreak(x, y+4*iQ, 8, 0.6 + 0.25*iQ, ang, count + itv/2*iQ, itv, itv2-iQ);
	}
}

task ShotWallBreak(x, y, dist, spd, ang, count, itv, itv2){
	while(y <= GetClipMaxY()+16){
		if(count%itv < itv2){
			My_CreateShotA2(x, y, spd*2, ang, -spd/30, spd, BGB_BILL_YELLOW, 10);
		}
		count++;
		y += dist;
	}
}


