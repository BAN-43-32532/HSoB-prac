#東方弾幕風[Single]
#ScriptVersion[3]
#Title["セト通常3"]
#Text["セト通常3"]
#Background[""]
#System["./../../../system/System.dnh"]

//---------------------------------------------------------------------

// 関数取り込み
#include"./../../../lib/lib_boss.dnh"
#include"./lib_Set.dnh"

@Event {
	alternative(GetEventType())
	case(EV_REQUEST_LIFE)		{ SetScriptResult(2800);	}
	case(EV_REQUEST_TIMER)		{ SetScriptResult(55);		}
	BossEvent();
}

let RightHandPos = [CenX-120, 120];
let LeftHandPos = [CenX+120, 120];

@Initialize {
	// アイテム数
	bossDropItem = 50;

	Boss_Init();	//初期設定
	objEnemy = CreateBoss(BOSS_ID_SET);	//ボスセット
	//手のオブジェクト初期化
	SetHandInitialize();

	// チャプター開始
	ChapterStartBoss(GetBossID(objEnemy), 3, CHAPTER_BOSS);
	CheckLinkLife_Boss(objEnemy);
	Task_Main();
}

@MainLoop {
	yield;
}

// メインタスク
task Task_Main
{
	let wtInit = 60;
	let objHand = Ini_SetAndSetHand(wtInit, CenX, 180,
					RightHandPos[0], RightHandPos[1],
					LeftHandPos[0], LeftHandPos[1]);
	WaitSetHand(wtInit);
	let blt_ang = rand(0, 360);
	SetSetHandMove01(objHand[0], 60, 90+blt_ang, -1);
	SetSetHandMove01(objHand[1], 60, 90-blt_ang, 1);
	TShot2();
	SetAction(objEnemy, ACT_SHOT2, 99999);
	while(eAlive)
	{
		EnemyRandomMove(objEnemy, 160, 32);
		waitObj(objEnemy, 180);
		EnemyRandomMove(objEnemy, 160, 32);
		waitObj(objEnemy, 180);
	}

	task TShot2(){
		let way = [4, 6, 7, 7][Difficult];
		let wt = [180, 150, 90, 120][Difficult];
		let spd = [2.4, 3.0, 3.3, 3.6][Difficult];
		let quant = [8, 10, 8, 8][Difficult];
		let r = 20;
		let c = 0;
		let t = 0;
		while(eAlive){
			while(c >= wt){
				c -= wt;
				let rate = 1-c;
				let ang = GetAngleToPlayer(objEnemy);
				ascent(i in 0 .. way){
					let a = ang+360*i/way;
					RhombusShot2(objEnemy, quant, spd*3, spd*1.8, ObjMove_GetX(objEnemy)+r*cos(a), ObjMove_GetY(objEnemy)+r*sin(a),
					 spd, a, BGW_CHRYSTAL_M_ORANGE, 10, sndShot5);
					if(Difficult >= D_LUNA){
						RhombusShot2(objEnemy, quant-1, spd*3, spd*1.8, ObjMove_GetX(objEnemy)+r*cos(a), ObjMove_GetY(objEnemy)+r*sin(a),
						 spd/2, a+180/way, BGW_CHRYSTAL_M_ORANGE, 10, sndShot5);
					}
				}
			}
			c++;
			t++;
			waitObj(objEnemy, 1);
		}
	}
}

task SetSetHandMove01(objHand, wt, blt_ang, Dirc){
	let BX;
	let BY;
	let eColor = EFF_PURPLE;
	CheckLinkLife_Familier(objEnemy, objHand, 0.6);	// ボスと体力連動
	TAct();
	WaitForKilledFamilier(objHand, 8, 0);
	ZakoFinalize(objHand, eColor);
	
	task TAct()
	{
		SetEnemyVisible(objHand, true);
		waitObj_WithHoming(objHand, wt, 0.03);
		TMove;

	}
	
	task TMove(){
		BposMoveBreaking();
		let blt_way = [4, 5, 6, 7][Difficult];
		ascent(i in 0 .. blt_way){
			TShot(blt_ang+360*(i+0.25+0.25*Dirc)/blt_way, Dirc);
		}
		while(CanShotBullet(objHand)){
			if(!IsTimeStopObj(objHand)){
				SetHomingAngle(objHand, 0.03);
			}
			wait(1);
		}
		EraseEnemy(objHand);
	}

	task RenderHandScale(obj, wt){
		ascent(i in 1 .. 16){
			let rate =  i/15;
			Obj_SetValue(obj, "SCALE_X", setHandInitialScale*(1+rate));
			Obj_SetValue(obj, "SCALE_Y", setHandInitialScale*(1-rate));
			waitObj(obj, 1);
		}
		waitObj(obj, wt-15);
		descent(i in 0 .. 15){
			let rate =  i/15;
			Obj_SetValue(obj, "SCALE_X", setHandInitialScale*(1+rate));
			Obj_SetValue(obj, "SCALE_Y", setHandInitialScale*(1-rate));
			wait(1);
		}
	}

	task TShot(ang, Dirc){
		let r = 60;
		let t = 0;
		let c = 0;
		let c2 = 0;
		let itv = [90, 90, 72, 72][Difficult];
		let angAdd = -[0.42, 0.35, 0.30, 0.25][Difficult]*Dirc;
		let blt_ang = 90*Dirc;
		let bltAngAdd = [1.2, 1.5, 2.0, 2.7][Difficult]*Dirc;
		let spd = [3.2, 4.0, 5.4, 7.2][Difficult];
		let bltItv = [25, 20, 15, 10][Difficult];
		let wtMx = [20.0, 15.0, 13.5, 12.0][Difficult];
		let wtMn = [1.50, 1.25, 1.00, 0.5][Difficult];
		let r2 = [18, 18, 18, 18][Difficult];
		let wtR = (wtMx - wtMn)/2;
		let wtC = (wtMx + wtMn)/2;
		let grap = [BGW_BALL_SS_ORANGE, BGB_BALL_S_ORANGE];
		while(CanShotBullet(objHand)){
			let wt = wtC+wtR*cos(360*t/itv);
			while(c >= wt){
				c -= wt;
				if(!IsTimeStopObj(objHand)){
					CallSound(sndShot3);
					let rate = 1-c;
					ang += angAdd*rate;
					let rP = RandPos(r2);
					let a = ang+blt_ang;
					let objS = My_CreateShotA2(BX + r*cos(ang) + rP[0], BY + r*sin(ang) + rP[1],
						 spd, a, -spd/(bltItv*2), spd/2, grap[c2%2], 10);
					ascent(i in 0 .. 4){
						ObjMove_AddPatternA2(objS, i*bltItv/4, NO_CHANGE, NO_CHANGE, -spd/(bltItv*2), bltAngAdd*(1-0.25*i), spd/2);
					}
					c2++;
					ang -= angAdd*rate;
				}
			}
			c++;
			t++;
			ang += angAdd;
			wait(1);
		}
		function RandPos(r){
			r = rand(0,r);
			let ang = rand(0, 360);
			return [r*cos(ang), r*sin(ang)];
		}
	}

	task BposMoveBreaking(){
		BX = ObjMove_GetX(objHand);
		BY = ObjMove_GetY(objHand);
		while(CanShotBullet(objHand)){
			BX += (ObjMove_GetX(objHand)-BX)*0.02;
			BY += (ObjMove_GetY(objHand)-BY)*0.02;
			waitObj(objHand, 1);
		}
	}
}
