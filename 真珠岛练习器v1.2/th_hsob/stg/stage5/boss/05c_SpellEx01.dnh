#東方弾幕風[Single]
#ScriptVersion[3]
#Title["セトラスワ"]
#Text["「神の眼よ！敵を燃やし尽くせ！」"]
#Background[""]
#System["./../../../system/System.dnh"]

//---------------------------------------------------------------------

// 関数取り込み
#include"./../../../lib/lib_boss.dnh"
#include"./lib_Set.dnh"

@Event {
	alternative(GetEventType())
	case(EV_REQUEST_LIFE)		{ SetScriptResult(3500);	}
	case(EV_REQUEST_TIMER)		{ SetScriptResult(90);		}
	case(EV_REQUEST_IS_LAST_SPELL)	{ SetScriptResult(true);	}
	BossEvent();
}

let RightHandPos = [CenX-120, 135];
let LeftHandPos = [CenX+120, 135];
let EyeHeightRate = 0.0;

@Initialize {
	SetAreaCommonData(CAREA_STAGE, "SET_RIGHT_HAND_POSITION", [-65535, -65535]);
	SetAreaCommonData(CAREA_STAGE, "SET_RIGHT_HAND_ANGLE", 0);
	SetAreaCommonData(CAREA_STAGE, "SET_RIGHT_HAND_SCALE", [setHandInitialScale, setHandInitialScale]);
	SetAreaCommonData(CAREA_STAGE, "SET_RIGHT_HAND_ANIME_COUNT", 0);
	SetAreaCommonData(CAREA_STAGE, "SET_LEFT_HAND_POSITION", [-65535, -65535]);
	SetAreaCommonData(CAREA_STAGE, "SET_LEFT_HAND_ANGLE", 180);
	SetAreaCommonData(CAREA_STAGE, "SET_LEFT_HAND_SCALE", [setHandInitialScale, setHandInitialScale]);
	SetAreaCommonData(CAREA_STAGE, "SET_LEFT_HAND_ANIME_COUNT", 0);
	let SPELL_ID = 1006;
	let SPELL_NAME = 14;

	// アイテム数
	bossDropItem = 0;
	
	//初期設定
	Boss_Init();

	objEnemy = CreateBoss(BOSS_ID_SET);	//ボスセット
	//手のオブジェクト初期化
	SetHandInitialize();

	//スペカデータ・セット
	SetSpellCardData(GetSpellCardID(SPELL_ID), SPELL_NAME, 
			GetCurrentScriptDirectory()~"05c_Background.dnh",
			GetBossTexture(objEnemy, I_CUTIN), 0.75, CUTMOTION_NONE);

	// チャプター開始
	ChapterStartBoss(GetBossID(objEnemy), SPELL_NAME, CHAPTER_SPELL);
	// 発狂ゲージ区切り
	BossEffect_LifeCirclePartition(objEnemy, 72, 0.55);
	CheckLinkLife_Boss(objEnemy);

	Task_Main();
}

@MainLoop {
	yield;
}


// ラスワ用ウェイト
function waitObjEx1(n)
{
	loop(n)
	{
		while(IsTimeStopObj(objEnemy)) { yield; }
		yield;
	}
}

// メインタスク
task Task_Main
{
	let isLong = (GetPlayMode() == GAME_MAIN || GetPlayMode() == GAME_PRACTICE);
	let wtInit = 0;
	let interval = [720, 660, 600, 600][Difficult];
	SetEnemyVisible(objEnemy, false);
	BossEffect_DisableMagicCircle(objEnemy);
	Obj_SetVisible(GetBossImageID(objEnemy), false);	//画像非表示
	ObjMove_SetPosition(objEnemy, CenX, 200);
	if (isLong)
	{
		TMove(interval, 90-60);
		SetAction(objEnemy, ACT_SHOT3, 720);
		LWMotion(objEnemy, [255, 255, 96], -10);
	}
	else
	{
		TMove(interval, 0);
		wait(60);
		SetAction(objEnemy, ACT_SHOT3, 720);
		LWMotion(objEnemy, [255, 255, 96], -10);
	}
	wait(30);
	SetEnemyVisible(objEnemy, true);
	while(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) >= 1925){
		wait(120);
	}
	if(!eAlive){return;}
	let objHand = Ini_SetAndSetHand(wtInit, CenX, 200,
					RightHandPos[0], RightHandPos[1],
					LeftHandPos[0], LeftHandPos[1]);
	SetEnemyVisible(objEnemy, true);
	CallSound(sndCallSpellCard);
	SpellCard_Effect(48, objEnemy, 15, Boss_GetSpellCardImage(objEnemy), "", 1, CUTMOTION_NONE);
	SetAreaCommonData(CAREA_SPELL, "DRAW_CUTIN_FRAME_ID", 1);
	
	let cy = GetAreaCommonData(CAREA_SPELL, "CUTIN_Y", 0);
	ascent(i in 0 .. 30)
	{
		let tmp = (i+1)/30;
		SetAreaCommonData(CAREA_SPELL, "CUTIN_Y", cy+tmp*24);
		yield;
	}
	wait(60);
	let time = [0,interval*0.5];
	let dirc = [1, 0][GetPlayerX() > GetCenterX()];
	SetSetHandMove01(objHand[0], FIST_RIGHT, RightHandPos[0], RightHandPos[1], 60+time[dirc], interval);
	SetSetHandMove01(objHand[1], FIST_LEFT, LeftHandPos[0], LeftHandPos[1], 60+time[(dirc+1)%2], interval);

}

task TMove(interval, delay){
	wait(delay);
	Eye(interval);
	wait(90);
	ascent(t in 1 .. 51){
		EyeHeightRate = 0.2*t/60;
		wait(1);
	}
	ascent(t in 1 .. 11){
		EyeHeightRate = 0.2+0.8*sin(90*t/10);
		wait(1);
	}

}

task Eye(interval){
	let l_wid = 14;
	let timer = 60*999;
	let graphic = ADD_BGW_BEAM_E_RED;
	let graphic2 = ADD_BGW_BALL_S_RED;
	let delay = 90;
	let size = 180;
	let base_x = GetCenterX();
	let base_y = GetCenterY()-140;

	let pos1 = [
		[-0.87500, -0.18750, 0.12500, 0.00000],
		[-0.75000, -0.18750, 0.25769, -14.03624],
		[-0.50000, -0.25000, 0.32626, -16.69924],
		[-0.18750, -0.34375, 0.15934, -11.30993],
		[-0.03125, -0.37500, 0.15625, 0.00000],
		[0.12500, -0.37500, 0.25769, 14.03624],
		[0.37500, -0.31250, 0.39528, 18.43495],
		[0.75000, -0.18750, 0.12500, 0.00000],
	];

	let pos2 = [
		[0.50000, 0.12500, 0.65625, 90.00000],
		[0.50000, 0.78125, 0.27951, -63.43495],
		[0.62500, 0.53125, 0.24407, -50.19443],
		[0.78125, 0.34375, 0.12885, 165.96376],
		[0.65625, 0.37500, 0.09882, -161.56505],
		[0.56250, 0.34375, 0.11267, -123.69007],
	];

	let pos3 = [
		[0.40625, 0.15625, 0.24407, 140.19443],
		[0.21875, 0.31250, 0.30936, 135.00000],
		[0.00000, 0.53125, 0.28811, 139.39871],
		[-0.21875, 0.71875, 0.23799, 156.80141],
		[-0.43750, 0.81250, 0.21875, 180.00000],
		[-0.65625, 0.81250, 0.13975, -153.43495],
		[-0.78125, 0.75000, 0.11267, -123.69007],
		[-0.84375, 0.65625, 0.09375, -90.00000],
		[-0.84375, 0.56250, 0.11267, -56.30993],
		[-0.78125, 0.46875, 0.09882, -18.43495],
		[-0.68750, 0.43750, 0.12885, 14.03624],
		[-0.56250, 0.46875, 0.06988, 63.43495],
		[-0.53125, 0.53125, 0.06988, 63.43495],
		[-0.50000, 0.59375, 0.06988, 116.56505],
		[-0.53125, 0.65625, 0.06988, 153.43495],
		[-0.59375, 0.68750, 0.06988, -153.43495],
		[-0.65625, 0.65625, 0.09375, -90.00000],
		[-0.65625, 0.56250, 0.06988, -26.56505],
		[-0.59375, 0.53125, 0.06988, 26.56505],
	];

	let pos4 = [
		[-0.90625, 0.00000, 0.22097, -8.13010],
		[-0.68750, -0.03125, 0.19764, -18.43495],
		[-0.50000, -0.09375, 0.19764, -18.43495],
		[-0.31250, -0.15625, 0.19009, -9.46232],
		[-0.12500, -0.18750, 0.25000, 0.00000],
		[0.12500, -0.18750, 0.19009, 9.46232],
		[0.31250, -0.15625, 0.39528, 18.43495],
		[0.68750, -0.03125, 0.22097, 8.13010],
		[0.90625, 0.00000, 0.22097, 171.86990],
		[0.68750, 0.03125, 0.39528, 161.56505],
		[0.31250, 0.15625, 0.19009, 170.53768],
		[0.12500, 0.18750, 0.25000, 180.00000],
		[-0.12500, 0.18750, 0.19009, -170.53768],
		[-0.31250, 0.15625, 0.39528, -161.56505],
		[-0.68750, 0.03125, 0.22097, -171.86990],
	];
	
	CallSound(sndBoon);
	ascent(i in 0 .. length(pos1)){
		DrawLaser(base_x, base_y, l_wid, timer, graphic, delay, pos1[i], size, 1);
	}
	ascent(i in 0 .. length(pos2)){
		DrawLaser(base_x, base_y, l_wid, timer, graphic, delay, pos2[i], size, 1);
	}
	ascent(i in 0 .. length(pos3)){
		DrawLaser(base_x, base_y, l_wid, timer, graphic, delay, pos3[i], size, 1);
	}
	ascent(i in 0 .. length(pos4)){
		DrawLaser2(base_x, base_y, l_wid*1.5, timer, graphic, delay, pos4[i], pos4[(i+1)%length(pos4)], size, 1);
	}

//	let eyeR = 0.15625;
	let eyeR = 0.15000;
	let eye_x = 0;
	let eye_y = 0;
	let way = [4, 8, 16, 32];
	ascent(j in 0 .. 4){
		let eyeWay = way[j];
		let r = eyeR*(0.1+0.3*j);
		ascent(i in 0 .. eyeWay){
			let a = 360*i/eyeWay;
			ShotA(base_x, base_y, graphic2, [r*cos(a), r*sin(a)], size);
		}
	}
	wait(delay+90);
	let maxR = 0;
	maxRManage();
	let eye_ang = AngleCenterAdjustment(atan2(GetPlayerY()-base_y, GetPlayerX()-base_x), 90);
	let old_ang = eye_ang;
	while(eAlive){
		TMasterSpark();
		descent(t in 1 .. 181){
			WaitWithEyeAngleMove(0.03 * t / 180);
		}
		loop(300){	WaitWithEyeAngleMove(0.00);	}
		loop(interval-600){	WaitWithEyeAngleMove(0.03);	}
		loop(2){
			loop(20){	WaitWithEyeAngleMove(0.03);	}
			descent(t in 1 .. 11){
				EyeHeightRate = 1.0*sin(90*t/10);
				WaitWithEyeAngleMove(0.03);
			}
			ascent(t in 1 .. 11){
				EyeHeightRate = 1.0*sin(90*t/10);
				WaitWithEyeAngleMove(0.03);
			}
			loop(20){	WaitWithEyeAngleMove(0.03);	}
		}
	}

	function WaitWithEyeAngleMove(rate){
		eye_ang = AngleCenterAdjustment(atan2(GetPlayerY()-base_y, GetPlayerX()-base_x), old_ang);
		eye_ang = old_ang + (AngleCenterAdjustment(eye_ang - old_ang, 180))*rate;
		old_ang = eye_ang;
		eye_x = maxR*cos(eye_ang);
		eye_y = maxR*sin(eye_ang);
		wait(1);
	}

	task TMasterSpark(){
		let way = [7, 11, 15, 19][Difficult];
		let way2 = (way-1)/2;
		let arc = 0.75*(way-1);
		CallSound(sndBoon);
		ascent(i in 0 .. way){
			let D = 1;
			let i2 = i - way2;
			if(i2 < 0){D = -1;}
			Laser(-135*i2/way2, arc*i2/way2, 0.75*size*eyeR*absolute(i2)/way2, 90*D, 150+8*absolute(i2));
		}
		let wt = [90, 60, 90];
		ascent(i in 0 .. length(wt)){
			if(!eAlive){return;}
			CallSound(sndPower1);
			wait(wt[i]);
		}
		if(!eAlive){return;}
		CallSound(sndFlare);
		CallSound(sndMasterSpark);
		let mspSpd = 20;
		let cut = [48, 60, 72, 96][Difficult]+1;
		let cut2 = (cut-1)/2;
		let cut3 = (cut-1)/3;
		let msp_time = 240;
		let msp_quant = [240, 360, 480, 600][Difficult];
		let msp_wt = msp_time/msp_quant;
		let msp_spdIni = [0.85, 0.9, 0.95, 1.0][Difficult];
		let msp_spdDec = msp_spdIni/2;
		let c = 0;
		ascent(t in 0 .. msp_time){
			if(!eAlive){return;}
			if(t%2 == 0){	CallSound(sndLaser2);	}
			c++;
			while(c >= msp_wt){
				let mspLength = mspSpd*min(260-t, 40);
				let old_a = trunc(rand(0, cut-0.0001));
				let a = (old_a + cut3/2 + trunc(rand(0, cut-cut3-0.0001)))%cut;
				old_a = a;
				let ang = arc*((a-cut2)/cut2);
				let r = 0.75*size*eyeR*(ang/arc);
				Laser2(base_x + eye_x + r*cos(eye_ang+90), base_y + eye_y + r*sin(eye_ang+90),
				 mspSpd, eye_ang + ang, mspLength, 60, ADD_BGW_BALL_M_RED, 1.00-0.50*t/240, eye_ang+180-120*(ang/arc));
				c -= msp_wt;
			}
			wait(1);
		}

		task Laser2(x, y, spd, ang, leng, wid, grap, bSpd, bAng){
			let objL = My_CreateLooseLaserA1(x, y, spd, ang, leng, wid, grap, 0);
			let pos = GetWallPos(x, y, ang, 8);
			let wt = trunc(pos[2]/spd);
			wait(wt);
			if(Obj_IsDeleted(objL)){return;}
			let itv = 20;
			let quant = trunc(leng/(spd*itv));
			let grap2 = [BGW_FIRE_RED, BGW_BALL_S_RED];
			ascent(i in 0 .. quant){
				if(Obj_IsDeleted(objL)){return;}
				let s = bSpd*(2.0-1.0*i/(quant-1));
				Shot(pos[0], pos[1], s, bAng, grap2, 10);
				wait(itv);
			}
		}

		task Shot(x, y, spd, ang, grap, delay){
			let objS = My_CreateShotA2(x, y, 4*spd, ang, -3*spd/30, spd, grap[1], delay);
			ObjShot_SetIntersectionEnable(objS, false);
			let objS2 = My_CreateShotA2(x-6*cos(ang), y-6*sin(ang), 4*spd, ang, -3*spd/30, spd, grap[0], delay);
			wait(30);
			descent(i in 1 .. 31){
				ObjRender_SetAlpha(objS2, 255*i/30);
				wait(1);
			}
			Obj_Delete(objS2);
		}
		
		function GetWallPos(x, y, ang, Dist){
			if(!CheckDispINEx(x, y, Dist)){
				return [x, y, 0];
			}
			let objPos = [x, y];
			let VertexPos = [GetClipMinX() - Dist, GetClipMinY() - Dist,
							 GetClipMaxX() + Dist, GetClipMaxY() + Dist];
			let a1 = GetGapAngle( objPos, [VertexPos[2], VertexPos[3]] ) % 360;
			let a2 = GetGapAngle( objPos, [VertexPos[0], VertexPos[3]] ) % 360;
			let a3 = GetGapAngle( objPos, [VertexPos[0], VertexPos[1]] ) % 360;
			let a4 = GetGapAngle( objPos, [VertexPos[2], VertexPos[1]] ) % 360;
			let la = ang%360;
			let ll = 0;
			if(la <= a1){
				ll = (VertexPos[2] - objPos[0])/cos(la);
			}else if(la <=a2){
				ll = (VertexPos[3] - objPos[1])/sin(la);
			}else if(la <=a3){
				ll = (VertexPos[0] - objPos[0])/cos(la);
			}else if(la <=a4){
				ll = (VertexPos[1] - objPos[1])/sin(la);
			}else{
				ll = (VertexPos[2] - objPos[0])/cos(la);
			}
			return [objPos[0] + ll*cos(la), objPos[1] + ll*sin(la), ll];
		}
	}

	task Laser(ini_ang, fin_ang, eyeR2, eyeAng2, time){
		let objL = My_CreateStraightLaserA1Ex(base_x + eye_x, base_y + eye_y, eye_ang+ini_ang, 600, 12, 999999, graphic, 240, [true,false]);
		ascent(t in 1 .. time + 1){
			let rate = sin(90 * t / time);
			let a = eye_ang + ini_ang + (fin_ang - ini_ang) * rate;
			ObjStLaser_SetAngle(objL, a);
			ObjMove_SetPosition(objL, base_x + eye_x + eyeR2*cos(eyeAng2 + a), base_y + eye_y + eyeR2*sin(eyeAng2 + a));
			wait(1);
		}
		loop(240 - time){
			let a = eye_ang + fin_ang;
			ObjStLaser_SetAngle(objL, a);
			ObjMove_SetPosition(objL, base_x + eye_x + eyeR2*cos(eyeAng2 + a), base_y + eye_y + eyeR2*sin(eyeAng2 + a));
			wait(1);
		}
		Obj_Delete(objL);
	}
	
	function AngleCenterAdjustment(ang, CenterAng){
		return ((ang + CenterAng)%360) - CenterAng;
	}

	task maxRManage(){
		maxR = 0;
		ascent(i in 1 .. 31){
			maxR = 0.07500*sin(90*i/30);
			wait(1);
		}
	}

	task ShotA(base_x, base_y, graphic, pos, size){
		let obj = My_CreateShotA1(base_x+ size * pos[0], base_y + size * pos[1], 0, 0, graphic, 0);
		while(!Obj_IsDeleted(obj)){
			let xx = pos[0] + eye_x;
			let yy = pos[1] + eye_y;
			ObjMove_SetPosition(obj, base_x + size * xx , base_y + size * yy );
			let flag = (yy < 0.18500 * EyeHeightRate && yy > -0.18500 * EyeHeightRate);
			Obj_SetVisible(obj, flag);
			ObjShot_SetIntersectionEnable(obj, flag);
			wait(1);
		}
	}

	function DrawLaser(base_x, base_y, l_wid, timer, graphic, delay, pos, size, dirc)
	{
		let laser_a = (90-90 * dirc) + pos[3] * dirc;
		let len = size * pos[2] + l_wid/2;
		let sx = base_x + (size * pos[0]) * dirc - l_wid*cos(laser_a)/4;
		let sy = base_y +  size * pos[1]         - l_wid*sin(laser_a)/4;
		let obj = My_CreateSimpleLaserA1(sx, sy, laser_a, len, l_wid, timer, graphic, delay);
		ObjShot_SetIntersectionEnable(obj, false);
		ObjRender_SetAlpha(obj, 159);
		Move(obj);
		return(obj);
		
		task Move(obj){
			ascent(t in 1 .. delay+1){
				let rate = sin(90*t/delay);
				let pos2 = [pos[2]*cos(pos[3]), pos[2]*sin(pos[3])];
				let dx = size * (pos2[0])*dirc*rate;
				let dy = size * (pos2[1]);
				let da = atan2(dy, dx);
				let dl = (dy^2 + dx^2)^0.5 + l_wid/2;
				let sx = base_x + (size * pos[0]) * dirc * rate - l_wid*cos(da)/4;
				let sy = base_y + (size * pos[1])               - l_wid*sin(da)/4;
				ObjStLaser_SetAngle(obj, da);
				ObjLaser_SetLength(obj, dl);
				ObjMove_SetPosition(obj, sx, sy);
				wait(1);
			}
			let laser_a = (90-90 * dirc) + pos[3] * dirc;
			let len = size * pos[2] + l_wid/2;
			let sx = base_x + (size * pos[0]) * dirc - l_wid*cos(laser_a)/4;
			let sy = base_y +  size * pos[1]         - l_wid*sin(laser_a)/4;
			ObjStLaser_SetAngle(obj, laser_a);
			ObjLaser_SetLength(obj, len);
			ObjMove_SetPosition(obj, sx, sy);
		}
	}

	function DrawLaser2(base_x, base_y, l_wid, timer, graphic, delay, pos1, pos2, size, dirc){
		let laser_a = (90-90 * dirc) + pos1[3] * dirc;
		let len = size * pos1[2] + l_wid/2;
		let sx = base_x + (size * pos1[0]) * dirc - l_wid*cos(laser_a)/4;
		let sy = base_y + (size * pos1[1])        - l_wid*sin(laser_a)/4;
		let obj = My_CreateSimpleLaserA1(sx, sy, laser_a, len, l_wid, timer, graphic, delay);
		Move(obj);
		return(obj);

		task Move(obj){
			ascent(t in 1 .. delay+1){
				let rate = sin(90*t/delay);
				let dx = size * (pos2[0] - pos1[0]) * dirc * rate;
				let dy = size * (pos2[1] - pos1[1]) * EyeHeightRate;
				let da = atan2(dy, dx);
				let dl = (dy^2 + dx^2)^0.5 + l_wid/2;
				let sx = base_x + (size * pos1[0]) * dirc * rate     - l_wid*cos(da)/4;
				let sy = base_y + (size * pos1[1]) * EyeHeightRate   - l_wid*sin(da)/4;
				ObjStLaser_SetAngle(obj, da);
				ObjLaser_SetLength(obj, dl);
				ObjMove_SetPosition(obj, sx, sy);
				wait(1);
			}
			while(!Obj_IsDeleted(obj)){
				let dx = size * (pos2[0] - pos1[0]) * dirc;
				let dy = size * (pos2[1] - pos1[1]) * EyeHeightRate;
				let da = atan2(dy, dx);
				let dl = (dy^2 + dx^2)^0.5 + l_wid/2;
				let sx = base_x + (size * pos1[0]) * dirc          - l_wid*cos(da)/4;
				let sy = base_y + (size * pos1[1]) * EyeHeightRate - l_wid*sin(da)/4;
				ObjStLaser_SetAngle(obj, da);
				ObjLaser_SetLength(obj, dl);
				ObjMove_SetPosition(obj, sx, sy);
				wait(1);
			}
		}
	}
}

task SetSetHandMove01(objHand, fistNum, base_x, base_y, wt, interval){
	let eColor = EFF_PURPLE;
	CheckLinkLife_Familier(objEnemy, objHand, 0.6);	// ボスと体力連動
	TAct();
	WaitForKilledFamilier(objHand, 8, 0);
	ZakoFinalize(objHand, eColor);
	
	task TAct()
	{
		SetEnemyVisible(objHand, true);
		waitObj_WithHoming(objHand, wt, 0.02);
		TMove;

	}
	
	task TMove(){
		let ChargeCancel = false;
		while(CanShotBullet(objHand)){
			ChargeCancel = IsTimeStopObj(objHand);
			if(!ChargeCancel){
				SetAction(objEnemy, ACT_SHOT1, 90);
				CallSound(sndPower1);
				WarningLine(objHand);
			}
			waitObj_WithHoming(objHand, 60, 0.02);
			waitObj_WithHomingDecresc(objHand, 60, 0.02);
			
			let ang = ObjMove_GetAngle(objHand);
			if(!ChargeCancel){
				TFistShot(objHand, fistNum, ang);
				RenderHandScale(objHand, 150);
				Enemy_SetPatternA2(objHand, 0, 0, ang, 8.0/120, 0, 8.0);
				wait(180);
				Enemy_SetPatternA2(objHand, 0, 0, NO_CHANGE, 0, 0, 0);
				ObjMove_SetPosition(objHand, base_x -360 * cos(ang), base_y -360 * sin(ang));
				SetMovePositionBrakingEx(objHand, base_x, base_y, 90, MOVE_BRAKING02);
				wait(90);
			}else{
				loop(270){
					if(!IsTimeStopObj(objHand)){
						SetHomingAngle(objHand, 0.02);
					}
					wait(1);
				}
			}
			
			waitObj_WithHoming(objHand, interval-60-60-270, 0.02);
		}
		EraseEnemy(objHand);

		task SoundWarning(wtArray){
			ascent(i in 0 .. length(wtArray)){
				if(!CanShotBullet(objHand) || IsTimeStopObj(objHand)){return;}
				CallSound(sndShot2);
				wait(wtArray[i]);
			}
		}
		
		task WarningLine(objHand){
			SoundWarning([36, 24, 16, 12, 8, 6, 3, 3, 3, 3, 2, 2, 2]);			//合計120フレーム警告音
			loop(4){
				if(!CanShotBullet(objHand) || IsTimeStopObj(objHand)){return;}
				Effect_LaserWarning2(objHand, 15, 500, 30);
				loop(30){
					if(!CanShotBullet(objHand) || IsTimeStopObj(objHand)){
						ChargeCancel = true;
						return;
					}
					wait(1);
				}
			}
			if(!CanShotBullet(objHand) || IsTimeStopObj(objHand)){return;}
			Effect_LaserWarning(ObjMove_GetX(objHand), ObjMove_GetY(objHand), ObjMove_GetAngle(objHand), 50, 500, 45);
			
			task Effect_LaserWarning(x, y, angle, r, leng, time){
				ascent(i in 1 .. time+1){
					if(!CanShotBullet(objHand)){return;}
					let r2 = r*sin(90*i/time);
					Effect(x+r2*cos(angle+90), y+r2*sin(angle+90), angle, leng, 30);
					Effect(x+r2*cos(angle-90), y+r2*sin(angle-90), angle, leng, 30);
					wait(1);
				}
				
				task Effect(x, y, angle, leng, time){
					let objEffect = CreateStraightLaserA1(x, y, angle, leng, 6, 9999, BGW_BEAM_E_PURPLE, 0);
					ObjStLaser_SetSource(objEffect, false);
					ObjShot_SetIntersectionEnable(objEffect, false);
//					ObjRender_SetColor(objEffect, 0, 0, 0);
					ObjShot_SetItemChange(objEffect, false);

					descent(i in 1 .. time+1){
						if(!CanShotBullet(objHand)){break;}
						ObjRender_SetAlpha(objEffect, 63*i/time);
						wait(1);
					}
					Obj_Delete(objEffect);
				}
			}
			
			task Effect_LaserWarning2(obj, r, leng, time){
				ascent(i in 1 .. time+1){
					if(!CanShotBullet(objHand)){return;}
					let r2 = r*sin(90*i/time);
					Effect(obj, r2,  90, leng, 20);
					Effect(obj, r2, -90, leng, 20);
					wait(1);
				}
				
				task Effect(obj, r, angPlus, leng, time){
					let objEffect = CreateStraightLaserA1(ObjMove_GetX(obj), ObjMove_GetY(obj), ObjMove_GetAngle(obj), leng, 6, 9999, BGW_BEAM_E_PURPLE, 0);
					ObjStLaser_SetSource(objEffect, false);
					ObjShot_SetIntersectionEnable(objEffect, false);
//					ObjRender_SetColor(objEffect, 0, 0, 0);
					ObjShot_SetItemChange(objEffect, false);

					descent(i in 1 .. time+1){
						if(!CanShotBullet(obj)){break;}
						let ang = ObjMove_GetAngle(obj);
						ObjMove_SetPosition(objEffect, ObjMove_GetX(obj) + r * cos(ang + angPlus), ObjMove_GetY(obj) + r * sin(ang + angPlus));
						ObjStLaser_SetAngle(objEffect, ang);
						ObjRender_SetAlpha(objEffect, 31*i/time);
						wait(1);
					}
					Obj_Delete(objEffect);
				}
			}
		}

		task TFistShot(objHand, fistNum, ang){
			SetEnemyVisible(objHand, false);
			CallSound(sndFlare);
			DisplayShake(30, 4);
			let b_spd = 2;

			let objFist = FistShot2(ObjMove_GetX(objHand), ObjMove_GetY(objHand), [255, 63, 255], 50, ang, fistNum, 15);
			ObjShot_SetSpellResist(objFist, true);
			ascent(i in 0 .. 180){
				if(!CanShotBullet(objHand)){break;}
				ObjMove_SetPosition(objFist, ObjMove_GetX(objHand), ObjMove_GetY(objHand));
				let rand_r = 60*(1-sin(90*i/180));
				let a = ang + 180 + rand(-rand_r, rand_r);
				if(i%1 == 0){
					let bx = ObjMove_GetX(objHand);
					let by = ObjMove_GetY(objHand);
					if(CheckDispINEx(bx, by, 30)){
						CallSound(sndShot6);
						ascent(j in 0 .. 3){
							let s = (b_spd+ObjMove_GetSpeed(objHand)/2)*(1-0.025*j);
							let objS = My_CreateShotA2(bx + 30*cos(a), by + 30*sin(a),  s*2, a, -s/60, s, BGB_SCALE_RED, 10);
						}
					}
				}
				wait(1);
			}
			SetEnemyVisible(objHand, true);
			Obj_Delete(objFist);
		}
	}

	task RenderHandScale(obj, wt){
		ascent(i in 1 .. 16){
			let rate =  i/15;
			Obj_SetValue(obj, "SCALE_X", setHandInitialScale*(1+rate));
			Obj_SetValue(obj, "SCALE_Y", setHandInitialScale*(1-rate));
			waitObj(obj, 1);
		}
		waitObj(obj, wt-15);
		descent(i in 0 .. 15){
			let rate =  i/15;
			Obj_SetValue(obj, "SCALE_X", setHandInitialScale*(1+rate));
			Obj_SetValue(obj, "SCALE_Y", setHandInitialScale*(1-rate));
			wait(1);
		}
	}
}
