#東方弾幕風[Stage]
#ScriptVersion[3]
#Title["Stage5道中"]
#Text["Stage5道中"]
#System["./../../system/System.dnh"]

#include "./../../lib/lib_Common.dnh"
#include "./../../lib/lib_Stage.dnh"
#include "./../../lib/lib_Zako.dnh"
#include "./Road05_Zako.dnh"
#include "./Road05_eset.dnh"
#include "./Road05_Drawing.dnh"
#include "./../../lib/lib_ChapterSkip.dnh"
// テスト用
// 0だと通し、1以降は各チャプター＆早回し確認
let FLG_TEST_CHP = 0;
let dest=GetStartChapter(5);
@Initialize
{
	STAGE_ID = 5;		//ステージID記録
	NEXT_STAGE_ID = 6;	//次のステージIDを記録
	StageInit();
	TStage();
}

@Event()
{
	StageEvent();
}

@Loading
{
}

@MainLoop
{
	yield;
}

task TStage
{
	// 保険
	yield;
	
	let dir = GetCurrentScriptDirectory();
	let pathBG	= dir ~ "BackgroundWorld05.dnh";	//背景
	let pathMBoss	= dir ~ "boss/05a_plural.dnh";	//中ボス
	let pathMBoss2	= dir ~ "boss/05b_plural.dnh";	//中ボス
	let pathBoss	= dir ~ "boss/05c_plural.dnh";	//ボス
	/*
	1-3
	4-b1
	5-7
	8-9-b2
	10-11
	12-20-bf
	*/
	// BGM
	// 道中曲 : 1拍25.3fくらい
	//　中ボスロード
	if(dest<=4){
		StartScriptInThread(pathMBoss);
	}
	if(dest<=9 && dest>4){
		StartScriptInThread(pathMBoss2);
	}
	StartScriptInThread(pathBoss);
	//  背景配置
	SetStageBackGround(pathBG);

	// 道中で使うコモンデータ
	SetAreaCommonData(CAREA_STAGE, "STG5R_CHP3", 0);
	SetAreaCommonData(CAREA_STAGE, "STG5R_CHP4", -1);
	SetAreaCommonData(CAREA_STAGE, "STG5R_CHP5", 0);
	
	wait(90);
	if(dest<=11){
		PlayMusicWithName( 10, 30, 30 );
	}
	else{
		PlayMusicWithName( 11, 30, 30 );
	}
	
	wait(30);
	if (GetPlayMode() == GAME_NONE && (FLG_TEST_CHP <= 1 || FLG_TEST_CHP == 6)) { Package_PlayMusic(0, 0, 0); }
	wait(20);
	if(dest==4 || dest==9){
		//WaitRoad(200);
	}


// ----------- 道中ここから ----------- //
	if(dest<=1){
		CHAPTER_1();
	}
	if(dest<=2){
		CHAPTER_2();
	}
	if(dest<=3){
		CHAPTER_3();
	}
	else{
		NextStageScene();
	}
	

	// ボス前いろいろ

	if(dest<=4){
		SetItemCollect(120);
		KillAllEnemy();
		DeleteShotAll_Effect(CenX, CenY);
		CHAPTER_MBOSS(pathMBoss2, 3, true);	// みすちー
	}
	if(dest<=5){
		CHAPTER_4();				// 早回し
	}
	if(dest<=6){
		CHAPTER_5();
	}
	else{
		NextStageScene();
	}
	if(dest<=7){
		CHAPTER_6();
	}
	if(dest<=9){
		CHAPTER_MBOSS("", 6, false);		// ねべちー
	}
	if(dest<=10){
		CHAPTER_7();				// 早回し
	}
	if(dest<=11){
		CHAPTER_8();
	}
	
	if(dest<=11){
		wait(240);
	}
	
	
	// ボス前いろいろ
	SetItemCollect(120);
	KillAllEnemy();
	DeleteShotAll_Effect(CenX, CenY);
	
	// おいでませｾﾄｻﾝ
	CallBoss2();

	// 待機とロード
	WaitForBossKilled();
	
	wait(90);
	
	StageEND();
// ----------- 道中ここまで ----------- //



// ----------- Chapter1 ----------- //
	function CHAPTER_1()
	{
		if (FLG_TEST_CHP > 1) { return; }
		
		_CHAPTER_1();
		loop(8*4-1) { WaitRoad(phase(1)); }
		
		// ----------- 実処理ここから ----------- //
		task _CHAPTER_1()
		{
			DisplayStage(STAGE_ID, 0);	// タイトル表示
			WaitRoad(phaseEx(8));

			ChapterStart(STAGE_ID, 0, CHAPTER_ROAD);
			F02(MinX, CenX-64, 8);
			F02(MaxX, CenX+64, 8);
			WaitRoad(phaseEx(8-1));

			F01(MaxX, CenX-32, 3, true, 0);
			WaitRoad(phaseEx(2));
			F01(MinX, CenX+32, 3, true, 0);
			WaitRoad(phaseEx(2.5));
			F01(CenX, CenX, 1, true, 2);
			WaitRoad(phaseEx(0.5));
			F01(MaxX+128, CenX+64, 3, true, 0);
			F01(MinX-128, CenX-64, 3, true, 0);
			WaitRoad(phaseEx(3));
			F01(CenX-128, CenX+96, 3, true, 2);
			WaitRoad(phaseEx(2));
			F01(MaxX-64, CenX-128, 4, true, 0);
		}
		// ----------- 実処理ここまで ----------- //
	}
// ----------- Chapter2 ----------- //
	function CHAPTER_2()
	{
		if (FLG_TEST_CHP > 2) { return; }
		
		_CHAPTER_2();
		loop(8*2) { WaitRoad(phase(1)); }
		CHAPTER_3_Pre();	// 次チャプター用に敵配置
		loop(8*2-6) { WaitRoad(phase(1)); }
		
		// ----------- 実処理ここから ----------- //
		task _CHAPTER_2()
		{
			ChapterStart(STAGE_ID, 1, CHAPTER_ROAD);

			F01b(MinX, CenX+64, 90-75, 5, 2);
			WaitRoad(phaseEx(1));
			F01b(MaxX, CenX-64, 90+75, 5, 2);
			WaitRoad(phaseEx(5));
			F01b(CenX, CenX, 90, 5, 1);
			WaitRoad(phaseEx(3));
			F01(MaxX+128, CenX+128, 3, true, 0);
			F01(MinX-128, CenX-128, 3, true, 0);
			WaitRoad(phaseEx(3));
			F01b(MaxX, CenX-64, 90+75, 5, 2);
			WaitRoad(phaseEx(1));
			F01b(MinX, CenX+64, 90-75, 5, 2);
			WaitRoad(phaseEx(3));
			F01(MaxX, CenX-96, 3, true, 0);
			WaitRoad(phaseEx(2));
			F01(MinX, CenX+96, 3, true, 0);
			WaitRoad(phaseEx(2));
			F01b(MinX, CenX+64, 90-90, 5, 1);
			F01b(MaxX, CenX-64, 90+90, 5, 1);
			WaitRoad(phaseEx(4));
			F01(CenX, CenX, 4, true, 0);
		}
		// ----------- 実処理ここまで ----------- //
	}
// ----------- Chapter3 ----------- //
	function CHAPTER_3()
	{
		if (FLG_TEST_CHP > 3) { return; }
		if(dest==3){
			ChapterStart(STAGE_ID, 2, CHAPTER_ROAD);
			CHAPTER_3_Pre();	// 次チャプター用に敵配置
			loop(8*2-6) { WaitRoad(phase(1)); }
			
		}
		_CHAPTER_3();
		loop(8*3+6) { WaitRoad(phase(1)); }
		NextStageScene();
		loop(8*1) { WaitRoad(phase(1)); }
		
		// ----------- 実処理ここから ----------- //
		task _CHAPTER_3()
		{
			// 予め配置した敵を前に出す
			SetAreaCommonData(CAREA_STAGE, "STG5R_CHP3", 1);
			
			WaitRoad(phaseEx(5));
			if(dest!=3){
				ChapterStart(STAGE_ID, 2, CHAPTER_ROAD);
			}
			
			
		}
		// ----------- 実処理ここまで ----------- //
	}
	// Chapter2で実行する事前敵配置用
	task CHAPTER_3_Pre()
	{
		let wait_phase = 0;
		
		descent(i in 1 .. 5)
		{
			F04(CenX+32+i*4, MinY+48+i*14, 42, 14, 4, 1, 0, wait_phase);
			F04(CenX-32-i*4, MinY+48+i*14, -42, 14, 4, -1, 0, wait_phase);
			wait_phase += 2;
			WaitRoad(phaseEx(1));
		}
		descent(i in 0 .. 1)
		{
			F04(CenX+32+i*4, MinY+48+i*14, 42, 14, 3, 1, 1, wait_phase);
			F04(CenX-32-i*4, MinY+48+i*14, -42, 14, 3, -1, 1, wait_phase);
			wait_phase += 2;
			WaitRoad(phaseEx(1));
		}
		F04(CenX, MinY+24, 0, 0, 1, 0, 2, wait_phase);
	}
// ----------- Chapter4（早回し） ----------- //
	function CHAPTER_4()
	{
		if (FLG_TEST_CHP > 4) { return; }
		if(dest!=5){
			WaitRoad_Time(SinglePhase*(8*4)/58.6, "STG5R_WAIT_1");	// 何もない所は実時間に合わせて待機
		}
		if(dest==5){
			ChapterStart(STAGE_ID, 3, CHAPTER_ROAD);
		}
		_CHAPTER_4a();
		loop(8*4-2) { WaitRoad(phase(1)); }
//		loop(8*4*2-2) { WaitRoad(phase(1)); }
		_CHAPTER_4b();
		loop(8*4*1+2) { WaitRoad(phase(1)); }
		// 中ボス撃破待ち
		if(dest!=5){
			if (FLG_TEST_CHP <= 0) { WaitForMiddleBossKilled(); }
		}
		
		
		// ----------- 実処理ここから ----------- //
		task _CHAPTER_4a()
		{
			// 早回し部分
//			ChapterStart(STAGE_ID, 3, CHAPTER_ROAD);
//			loop(8*4) { WaitRoad(phaseEx(1)); }
			
			F01(MaxX, CenX-32, 3, true, 0);
			WaitRoad(phaseEx(2));
			F01(MinX, CenX+32, 3, true, 0);
			WaitRoad(phaseEx(2));
			F01b(MinX, CenX+64, 90-75, 5, 2);
			WaitRoad(phaseEx(1));
			F01b(MaxX, CenX-64, 90+75, 5, 2);
			WaitRoad(phaseEx(5));
			F01(CenX, CenX, 4, true, 0);
			WaitRoad(phaseEx(2));
			F01(MaxX+128, CenX+128, 3, true, 0);
			F01(MinX-128, CenX-128, 3, true, 0);
			WaitRoad(phaseEx(2));
			F01b(CenX, CenX, 90, 5, 1);
			WaitRoad(phaseEx(4));
			F01(MinX, CenX-64, 3, true, 0);
			WaitRoad(phaseEx(2));
			F01(MaxX, CenX+64, 3, true, 0);
			WaitRoad(phaseEx(2));
			F01(MinX, CenX-64, 3, true, 0);
			WaitRoad(phaseEx(2));
			F01b(MinX, CenX+64, 90-90, 5, 2);
			F01b(MaxX, CenX-64, 90+90, 5, 2);
			WaitRoad(phaseEx(2));
			F01b(CenX, CenX, 90, 5, 1);
			WaitRoad(phaseEx(4));
		}
		task _CHAPTER_4b()
		{
			// 固定部分
			I01([
					[ 1/14, MinY+64, 0.5],
					[ 2/14, MinY+64, 0.5],
					[ 6/14, MinY+64, 0.5],
					[ 7/14, MinY+64, 0.5],
					[10/14, MinY+64, 1],
					[11/14, MinY+64, 0.5],
					[12/14, MinY+64, 0.5],
				], 1, 90);
			WaitRoad(phaseEx(4));
			I01([
					[13/14, MinY+64, 0.5],
					[12/14, MinY+64, 0.5],
					[13/14, MinY+64, 0.5],
					[17/14, MinY+64, 0.5],
					[13/14, MinY+64, 0.5],
					[12/14, MinY+64, 0.5],
					[ 7/14, MinY+64, 0.5],
					[ 6/14, MinY+64, 0.5],
				], 1, 90);
			WaitRoad(phaseEx(4));
			I01([
					[ 2/14, MinY+64, 1],
					[ 4/14, MinY+64, 0.5],
					[ 6/14, MinY+64, 0.5],
					[10/14, MinY+64, 0.5],
					[ 7/14, MinY+64, 0.5],
					[ 6/14, MinY+64, 0.5],
					[ 2/14, MinY+64, 0.5],
				], 1, 90);
			WaitRoad(phaseEx(4));
			I01([
					[ 1/15, MinY+64, 0.75],
					[ 2/15, MinY+64, 1/8],
					[ 1/15, MinY+64, 1/8],
					[-3/15, MinY+64, 1],
				], 1, 90);
			WaitRoad(phaseEx(4));

			I01([
					[ 1/14, MinY+64, 0.5],
					[ 2/14, MinY+64, 0.5],
					[ 6/14, MinY+64, 0.5],
					[ 7/14, MinY+64, 0.5],
					[10/14, MinY+64, 1],
					[11/14, MinY+64, 0.5],
					[12/14, MinY+64, 0.5],
				], 1, 90);
			WaitRoad(phaseEx(4));
			I01([
					[13/14, MinY+64, 0.5],
					[12/14, MinY+64, 0.5],
					[13/14, MinY+64, 0.5],
					[17/14, MinY+64, 0.5],
					[13/14, MinY+64, 0.5],
					[12/14, MinY+64, 0.5],
					[ 7/14, MinY+64, 0.5],
					[ 6/14, MinY+64, 0.5],
				], 1, 90);
			WaitRoad(phaseEx(4));
			I01([
					[ 2/14, MinY+64, 1],
					[ 4/14, MinY+64, 0.5],
					[ 6/14, MinY+64, 0.5],
					[ 4/14, MinY+64, 0.5],
					[ 6/14, MinY+64, 0.5],
					[ 2/14, MinY+64, 0.5],
					[ 1/14, MinY+64, 0.5],
				], 1, 90);
			WaitRoad(phaseEx(4));
			I01([
					[ 1/15, MinY+64, 0.75],
					[ 2/15, MinY+64, 1/8],
					[ 1/15, MinY+64, 1/8],
					[-3/15, MinY+64, 1],
				], 1, 90);
		}
		// ----------- 実処理ここまで ----------- //
	}
// ----------- Chapter5 ----------- //
	function CHAPTER_5()
	{
		if (FLG_TEST_CHP > 5) { return; }
		
		// 背景チェンジ！
		NextStageScene();
		_CHAPTER_5();
		loop(8*4*2) { WaitRoad(phase(1)); }
		
		// ----------- 実処理ここから ----------- //
		task _CHAPTER_5()
		{
			ChapterStart(STAGE_ID, 4, CHAPTER_ROAD);
			
			descent(i in 1 .. 4)
			{
				if (i%2 == 0)
				{
					F04b(CenX-84-42*2, MinY+32+i*16-14*2, 42, 14, 3, 0, -1, 0, 0);
					F04b(CenX-42, MinY+32+i*16, 42, 0, 3, 3, 0, 0, 0);
					F04b(CenX+84, MinY+32+i*16, 42, -14, 3, 6, 1, 0, 0);
				}
				else
				{
					F04b(CenX+84+42*2, MinY+32+i*16-14*2, -42, 14, 3, 0, 1, 0, 0);
					F04b(CenX-42+42*2, MinY+32+i*16, -42, 0, 3, 3, 0, 0, 0);
					F04b(CenX-84, MinY+32+i*16, -42, -14, 3, 6, -1, 0, 0);
				}
				WaitRoad(phaseEx(2));
			}
			F04b(CenX, MinY+32, 0, 0, 1, 0, 0, 2, 0);
			WaitRoad(phaseEx(2+8));
			
			ascent(i in 0 .. 3)
			{
				F05(MinX-64, CenY-i*64, CenX-160+i*32, CenY-i*72, 3, 36, phaseEx(3-i*0.5), phaseEx(2+2), 1);
				WaitRoad(phaseEx(0.5));
			}
			WaitRoad(phaseEx(0.5));
			ascent(i in 0 .. 3)
			{
				F05(MaxX+64, CenY-i*64, CenX+160-i*32, CenY-i*72, 3, 36, phaseEx(3-i*0.5), phaseEx(2), 1);
				WaitRoad(phaseEx(0.5));
			}
			WaitRoad(phaseEx(0.5));
			WaitRoad(phaseEx(1));
			F05(CenX, MinY-96, CenX, MinY+108, 3, 48, phaseEx(0), phaseEx(1), 2);
			WaitRoad(phaseEx(3));
			F01_Fever();
			task F01_Fever()
			{
				ascent(i in 0 .. 12)
				{
					let ox = 64 + rand(-1,1)*32;
					let os = 0.75 - i/12*0.5;
					F01c(CenX+ox+256, CenX+ox, os, 90, 2, 0);
					F01c(CenX-ox-256, CenX-ox, os, 90, 2, 0);
					WaitRoad(phaseEx(0.5));
				}
			}
			WaitRoad(phaseEx(5));
			F05b(CenX, CenY-512, CenX, CenY, 9, phaseEx(8*4), 4, 46);
			F05b(CenX, CenY-512, CenX, CenY, 5, phaseEx(8*4), 5, 54);
			// 暗転まで待機
			while(!GetAreaCommonData(CAREA_STAGE, "STG5R_CHP5", 0)) { yield; }
			// 無敵
			ResetPlayerInvincibility(180);
			waitEx(60);
			// 自動回収
			SetItemCollect(120);
			waitEx(60);
			// 弾を消しちゃおう（アイテム化しない）
			DeleteShotAll(TYPE_ALL, TYPE_FADE);
		}
		// ----------- 実処理ここまで ----------- //
	}
// ----------- Chapter6 ----------- //
	function CHAPTER_6()
	{
		if (FLG_TEST_CHP > 6) { return; }
		
		_CHAPTER_6();
		loop(8*4-2) { WaitRoad(phase(1)); }
		
		// ----------- 実処理ここから ----------- //
		task _CHAPTER_6()
		{
			ChapterStart(STAGE_ID, 5, CHAPTER_ROAD);

			F06(CenX, CenX+96, 3, 2);
			WaitRoad(phaseEx(2));
			F06(CenX, CenX-96, 3, 2);
			WaitRoad(phaseEx(5));
			F06(MinX+128, CenX+64, 3, 2);
			WaitRoad(phaseEx(2));
			F06(MaxX-128, CenX-64, 3, 2);
			WaitRoad(phaseEx(2));
			F06(MinX+64, CenX-32, 3, 2);
			WaitRoad(phaseEx(2));
			F06(MaxX-64, CenX+32, 3, 2);
			WaitRoad(phaseEx(3));
			
			ascent(i in 0 .. 32)
			{
				F07_single(105, -i*137.5/2, -1, 0);
				WaitRoad(phaseEx(2/32));
			}
			WaitRoad(phaseEx(3));
			ascent(i in 0 .. 32)
			{
				F07_single(60, i*137.5/2, 1, 0);
				WaitRoad(phaseEx(2/32));
			}
			WaitRoad(phaseEx(2));
			ascent(i in 0 .. 32)
			{
				F07_single(150, i*137.5, -1, 0);
				WaitRoad(phaseEx(2/32));
			}
		}
		// ----------- 実処理ここまで ----------- //
	}
// ----------- Chapter7（早回し） ----------- //
	function CHAPTER_7()
	{
		if (FLG_TEST_CHP > 7) { return; }
		if(dest!=10){
			WaitRoad_Time(SinglePhase*(8*4+2)/58.6, "STG5R_WAIT_2");	// 何もない所は実時間に合わせて待機
		}
		if(dest==10){
			ChapterStart(STAGE_ID, 6, CHAPTER_ROAD);
		}
		_CHAPTER_7a();
		loop(8*4*2-8) { WaitRoad(phase(1)); }
		// 中ボス撃破待ち（チャプター7スキップしてもよい）
		if(dest<=9){
			if (FLG_TEST_CHP <= 0) { WaitForMiddleBossKilled(); }
		}
		
		
		// ----------- 実処理ここから ----------- //
		task _CHAPTER_7a()
		{
			// 早回し部分
//			ChapterStart(STAGE_ID, 6, CHAPTER_ROAD);

			SetDrawingWall([
					["i", "0", "-0.8", "0"],
					["n", "0", "0", "0"],
					["d", "0", "0.6", "1.2"],
					["o", "0", "0", "1"],
					["z", "0", "-0.6", "0"],
					["i", "0", "0.4", "1"],
					["n", "0", "0", "1.2"],
				], -1);
			WaitRoad(phaseEx(4));
			F08(1);
			WaitRoad(phaseEx(4));
			SetDrawingWall([
					["k", "0", "0", "0.9"],
					["a", "0", "0", "0.5"],
					["i", "0", "0", "0.6"],
					["s", "0", "0", "0.5"],
					["e", "0", "0", "0.9"],
					["n", "0", "-0.3", "0"],
					["d", "0", "0.4", "1"],
					["o", "0", "0", "1.1"],
				], 1);
			WaitRoad(phaseEx(4));
			F08(-1);
			WaitRoad(phaseEx(4));
			SetDrawingWall([
					["s", "0.1", "0", "0.8"],
					["i", "0", "0.75", "0"],
					["z", "0", "0", "0"],
					["i", "0", "-0.75", "1"],
					["m", "0", "0", "0.6"],
					["i", "0", "-0.35", "0.6"],
				], -1);
			WaitRoad(phaseEx(4));
			F08(1);
			WaitRoad(phaseEx(4));
			SetDrawingWall([
					["b", "0", "0", "0.9"],
					["o", "0", "0", "0.9"],
					["s", "0", "0", "0.3"],
					["s", "0", "0", "0.45"],
					["i", "0", "0.5", "0.55"],
					["s", "0", "0", "0.65"],
					["t", "0", "-0.5", "0"],
					["h", "0", "0.5", "0.9"],
					["o", "0", "0", "1"],
					["t", "0", "-0.5", "0"],
					["h", "0", "0.5", "0.9"],
				], 1);
			WaitRoad(phaseEx(4));
			F08(-1);
			WaitRoad(phaseEx(4));
			SetDrawingWall([
					["m", "0", "0", "1"],
					["i", "0", "0.5", "0"],
					["r", "0", "-0.5", "1"],
					["u", "0", "0", "1"],
					["k", "0", "0.5", "1"],
					["a", "0", "0", "1"],
					["n", "0", "-0.5", "0"],
					["i", "0", "0.5", "1"],
				], -1);
			WaitRoad(phaseEx(4));
			F08(1);
			WaitRoad(phaseEx(4));
			SetDrawingWall([
					["s", "0", "0", "0.5"],
					["e", "0", "0", "0.5"],
					["t", "-0.15", "-0.5", "0"],
					["i", "-0.15", "0.5", "0.7"],
					["s", "0", "0", "0.6"],
					["g", "0", "-0.35", "0.7"],
					["o", "0", "0", "1"],
					["d", "-0.1", "0.5", "1"],
				], 1);
		}
		// ----------- 実処理ここまで ----------- //
	}
// ----------- Chapter8 ----------- //
	function CHAPTER_8()
	{
		if (FLG_TEST_CHP > 8) { return; }
		
		_CHAPTER_8();
		loop(8*4+2) { WaitRoad(phase(1)); }
		
		// ----------- 実処理ここから ----------- //
		task _CHAPTER_8()
		{
			ChapterStart(STAGE_ID, 7, CHAPTER_ROAD);
			SetEnemyMBoss(CenX, MinY+96, 1, 270, 0, 0);
		}
		// ----------- 実処理ここまで ----------- //
	}

// ----------- 中ボス氏 ----------- //
	task CHAPTER_MBOSS(pathBoss, nextChapter, killEnemy)
	{
		if (FLG_TEST_CHP > 0) { return; }
		
		// みんなしねばいい
		if (killEnemy)
		{
			KillAllEnemy();
			DeleteShotAll_Effect(CenX, CenY);
			SetItemCollect(60);
		}
		
		// ボスがでたぞー
		CallBoss();
		flgStopSetZako = true;
		// 中ボスが消えてからボスをロード
		if (length(pathBoss) > 0) { StartScriptInThreadWaitBoss(pathBoss); }
		
		// ボス撃破待ち
		CheckBossKilled();
		WaitForMiddleBossKilled();
		
		flgStopSetZako = false;

		if (nextChapter >= 0) { ChapterStart(STAGE_ID, nextChapter, CHAPTER_ROAD); }
	}
}


//　ゲーム中用
task Package_PlayMusic( int_play_num, int_fade_out, int_delay )
{
	let musicDir = GetCurrentScriptDirectory() ~ "../../music/";
	let ID		= ObjSound_Create();
	let play	= false;
	let vol1	= 0;
	let volA	= 0;
	let path	= musicDir ~ "hsob_5road.ogg";
	let sample	= [0,0];
	
	ObjSound_Load(ID, path );
	ObjSound_SetSoundDivision(ID, SOUND_BGM );
	ObjSound_SetLoopEnable(ID, true );
	ObjSound_SetRestartEnable(ID, true );
	ObjSound_SetLoopSampleCount(ID, 520833,8804862 );
	
	//プレイ中のBGMに登録
	let objMusic = ID;
	
	loop( int_delay ){ yield; }
	
	ObjSound_Play(ID);
	
	let flgStop = GetAreaCommonData(CAREA_TITLE, "Music_Stop", false);
	while(!Obj_IsDeleted(ID) && !Obj_GetValueD(ID, "MusicEnd", false) ){
		
		// 毎フレームチェックする
		ObjSound_SetVolumeRate(ID, GetMusicVolume() );
		let stop	= GetAreaCommonData(CAREA_TITLE, "Music_Stop", false);
		if( flgStop != stop )
		{
			if (stop) { ObjSound_Stop(ID); }
			else { ObjSound_Play(ID); }
			flgStop = stop;
		}
		yield;
	}
	if (int_fade_out > 0 && !flgStop)
	{
		while( volA < 90 ){
			let volume	= GetMusicVolume();
			
			vol1 = 1 * sin( volA );
			
			ObjSound_SetVolumeRate(ID, volume - vol1*volume );
			
			volA += 90/int_fade_out;
			
			yield;
		}
	}
	Obj_Delete(ID);
}
