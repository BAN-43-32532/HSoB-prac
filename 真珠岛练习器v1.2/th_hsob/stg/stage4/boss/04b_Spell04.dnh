#東方弾幕風[Single]
#ScriptVersion[3]
#Title["上人スペカ4"]
#Text["E-N:禁詞「バルス」　H-L:禍符「幻想郷春のバルス祭り」　"]
#Background[""]
#System["./../../../system/System.dnh"]

//---------------------------------------------------------------------

// 関数取り込み
#include"./../../../lib/lib_boss.dnh"
#include"./lib_Siran.dnh"

@Event {
	alternative(GetEventType())
	case(EV_REQUEST_LIFE)		{ SetScriptResult(3200);	}
	case(EV_REQUEST_TIMER)		{ SetScriptResult(60);		}
	BossEvent();
}

@Initialize {
	let SPELL_ID = 35;
	let SPELL_NAME = [11, 11, 12, 12][Difficult];


	// アイテム数
	bossDropItem = 0;

	Boss_Init();	//初期設定
	objEnemy = CreateBoss(BOSS_ID_SIRAN);	//ボスセット
	SetSiranRosary();	// 数珠配置

	//スペカデータ・セット
	SetSpellCardData(GetSpellCardID(SPELL_ID), SPELL_NAME, 
	GetCurrentScriptDirectory()~"04a_Background.dnh",
	GetBossTexture(objEnemy, I_CUTIN), 0.6, CUTMOTION_NORMAL);

	// チャプター開始
	ChapterStartBoss(GetBossID(objEnemy), SPELL_NAME, CHAPTER_SPELL);
	CheckLinkLife_Boss(objEnemy);

	Task_Main();
}

@MainLoop {
	yield;
}

// メインタスク
task Task_Main
{
	let nuclear_r = [120, 150, 90, 150][Difficult];
	let laser_way = [16, 20, 14, 16][Difficult];
	standBy(objEnemy, CenX, 200, 210);
	SetActionSiran(objEnemy, ACT_MOVE, 120);
	waitObj(objEnemy, 150);	// ちょっとだけ処理待ち
	CallSpellCard(true);	//スペカ起動
	SetActionSiran(objEnemy, ACT_SHOT1, 60);
	
	BossCharge(objEnemy);
	SetFamilier01(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), GetCenterX, 60, nuclear_r, laser_way);
	let D = 1;
	waitObj(objEnemy, 60);
}

// twitterの鳥
task SetFamilier01(x, y, tx, ty, nuclear_r, laser_way){
	let eSize = ENEMY_M;
	let eColor = EFF_BLUE;
		
	let objFamilier = MakeEnemyFamilier(x, y, 500000, eSize);
	SetEffectResist(objFamilier, 1-(1/1.75));			// 状態異常耐性(通常の1.75倍に設定)
	SetTimeResist(objFamilier, 0.5);						// 停止耐性(通常の半分の停止時間に設定)
	CheckLinkLife_Familier(objEnemy, objFamilier, 0.4);	// ボスと体力連動
//	SetEnemyVisible(objFamilier, true);
	DrawBirdOption2(objFamilier, eColor, atan2(ty-y, tx-x), 1, 0.10, true);
	TAct();
	WaitForKilledFamilier(objFamilier, 8, 0);
	ZakoFinalize(objFamilier, eColor);
	
	task TAct()
	{
		TMove;
	}
	
	task TMove(){
		SetMovePositionBrakingEx(objFamilier, tx, ty, 90, MOVE_BRAKING02);
		waitObj(objFamilier, 90);
//		let nuclear_r = 150;
		let D = 1;
		let blt_quant = 150;
		let blt_wt = [5.0, 2.5, 5.0, 5.0][Difficult];
		let blt_spd = [1.2, 1.6, 1.2, 1.2][Difficult];
		let blt_spdMax = [0.6, 0.8, 0.6, 0.6][Difficult];
		let wt2 = [120, 90, 90, 90][Difficult];
		loop{
			let ChargeCancel = IsTimeStopObj(objFamilier);
			let count = 120;
			let wt = 21;
			loop{
				if(!CanShotBullet(objFamilier)){break;}
				if(IsTimeStopObj(objFamilier)){
					ChargeCancel = true;
					break;
				}
				CallSound(sndShot2);
				ExplodeWarning(objFamilier, nuclear_r);
				loop(wt){
					if(!CanShotBullet(objFamilier)){break;}
					if(count <= 0){break;}
					count--;
					wait(1);
				}
				wt = max(wt-3, 6);
				if(count <= 0){break;}
			}
			if(count > 0){wait(count);}
			if(!CanShotBullet(objFamilier)){break;}
			if(!ChargeCancel){
				CallSound(sndFlare);
				Explode(nuclear_r);
				EffectExplodeCloudSetS04(ObjMove_GetX(objFamilier), ObjMove_GetY(objFamilier), 60, [0,31,63], 120, 2, 60);
				if(Difficult >= D_HARD){
					let a = rand(0 , 360);
					let way = 6;
					ascent(i in 0 .. way){
						TShot_Bomb(ObjMove_GetX(objFamilier), ObjMove_GetY(objFamilier), nuclear_r*2/6, 25, 25+75, a+360*i/way);
						TShot_Bomb(ObjMove_GetX(objFamilier), ObjMove_GetY(objFamilier), nuclear_r*4/6, 25, 25+80, a+360*(i+0.5)/way);
						TShot_Bomb(ObjMove_GetX(objFamilier), ObjMove_GetY(objFamilier), nuclear_r*6/6, 25, 25+85, a+360*i/way);
					}
				}
			}
			wait(150);
			if(!CanShotBullet(objFamilier)){break;}
			let ang = GetAngleToPlayer(objFamilier);
			let r = ((GetPlayerY()-ObjMove_GetY(objFamilier))^2+(GetPlayerX()-ObjMove_GetX(objFamilier))^2)^0.5;
			r = min(r, 180);
			if(Difficult <= D_NORM){
				TShot_Normal(blt_quant, blt_wt, 1, blt_spd, blt_spdMax, ang, 9.4);
				TShot_Normal(blt_quant, blt_wt, 1, blt_spd, blt_spdMax, ang, -9.4);
			}
			SetMovePositionBrakingEx(objFamilier,ObjMove_GetX(objFamilier)+r*cos(ang), ObjMove_GetY(objFamilier)+r*sin(ang), 150, MOVE_BRAKING02);
			wait(wt2);
			while(IsTimeStopObj(objFamilier)){
				wait(1);
			}
		}
		EraseEnemy(objFamilier);
	}

	task TShot_Normal(quant, wt, way, spd, spdMax, ang, ang_spd){
		let c = 0;
		let array = [1,2,1];
		ascent(iQ in 0 .. quant){
			if(!CanShotBullet(objFamilier) || IsTimeStopObj(objFamilier)){break;}
			c++;
			while(c > wt){
				CallSound(sndShot1);
				c -= wt;
				let rate = (1-c);
				let r = 20+0.1*rate;
				ang += ang_spd*rate;
				let sBase = spd + (spdMax - spd)*iQ/quant;
				descent(j in 0 .. length(array)){
					let jW = (array[j]-1)/2;
					ascent(j2 in 0 .. array[j]){
						ascent(iW in 0 .. way){
							let s = sBase*(1-0.02*j);
							let a = ang + 360*iW/way;
							let objS = My_CreateShotA1(ObjMove_GetX(objFamilier)+r*cos(a), ObjMove_GetY(objFamilier)+r*sin(a), 0.1, a+0.8*(j2-jW), BGW_CHRYSTAL_M_BLUE, 10);
							ObjMove_AddPatternA2(objS, 90, NO_CHANGE, NO_CHANGE, s/90, 0, 0.1+s);
						}
					}
				}
				ang -= ang_spd*rate;
			}
			ang += ang_spd;
			wait(1);
		}
	}

	task Explode(r){
		let objN = NuclearShot(ObjMove_GetX(objFamilier), ObjMove_GetY(objFamilier), [191,191,255], r, 30);
//		waitObj(objFamilier, 30);
		let ang = rand(0, 360);
		ascent(i in 0 .. laser_way){
			let a = ang+360*i/laser_way;
			let lx = r*0.9*cos(a);
			let ly = r*0.9*sin(a);
			Laser(ObjMove_GetX(objN), ObjMove_GetY(objN), lx, ly, 6, a+90, (i%2)/2);
			Laser(ObjMove_GetX(objN), ObjMove_GetY(objN), lx, ly, 6, a-90, (i%2)/2);
		}
		wait(120);
		Obj_Delete(objN);

		task Laser(bx, by, lx, ly, spd, ang, blt_rate){
			let objL = My_CreateStraightLaserA1Ex(bx, by, ang, 0, 12, 999999, BGW_BEAM_WHITE, 90, [true,false]);
			CallSound(sndLaser1);
			ascent(i in 0 .. 30){
				if(!eAlive || Obj_IsDeleted(objL)){break;}
				let rate = sin(90*i/30);
				ObjMove_SetPosition(objL, bx+lx*rate, by+ly*rate);
				ObjLaser_SetLength(objL, min(ObjLaser_GetLength(objL)+spd, 600));
				wait(1);
			}
			ObjMove_SetPosition(objL, bx+lx, by+ly);
//			let l_leng = LaserLength(objL)+10;
			loop(60){
				if(!eAlive || Obj_IsDeleted(objL)){break;}
				ObjLaser_SetLength(objL, min(ObjLaser_GetLength(objL)+spd, 600));
				wait(1);
			}
			if(eAlive && !Obj_IsDeleted(objL))
			{
				CallSound(sndLaser2);
				if(Difficult >= D_HARD){
					ascent(i in 0 .. 4){
						TShot_Bomb(bx+lx, by+ly, 120*(i+blt_rate), 25+25*i, 25+5*i, ang);
					}
				}
			}
			wait(30);
			Obj_Delete(objL);
		}
		
		function LaserLength(objL){
			let a1 = atan2(GetClipMaxY()-ObjMove_GetY(objL), GetClipMaxX()-ObjMove_GetX(objL))%360;
			let a2 = atan2(GetClipMaxY()-ObjMove_GetY(objL), GetClipMinX()-ObjMove_GetX(objL))%360;
			let a3 = atan2(GetClipMinY()-ObjMove_GetY(objL), GetClipMinX()-ObjMove_GetX(objL))%360;
			let a4 = atan2(GetClipMinY()-ObjMove_GetY(objL), GetClipMaxX()-ObjMove_GetX(objL))%360;
			let la = ObjStLaser_GetAngle(objL)%360;
			let ll = 0;
			let ea = rand(0, 360);
			if(la <= a1){
				ll = (GetClipMaxX()-ObjMove_GetX(objL))/cos(la);
			}else if(la <=a2){
				ll = (GetClipMaxY()-ObjMove_GetY(objL))/sin(la);
			}else if(la <=a3){
				ll = (GetClipMinX()-ObjMove_GetX(objL))/cos(la);
			}else if(la <=a4){
				ll = (GetClipMinY()-ObjMove_GetY(objL))/sin(la);
			}else{
				ll = (GetClipMaxX()-ObjMove_GetX(objL))/cos(la);
			}
			return ll;
		}
	}

	task ExplodeWarning(obj, r){
		let objEfc = RingEffect_INI(0.41);
		Scale();
		Alpha();
		
		task Scale(){
			ascent(i in 1 .. 41){
				if(Obj_IsDeleted(obj)){break;}
				ObjRender_SetPosition(objEfc, ObjMove_GetX(obj), ObjMove_GetY(obj), 1);
				RingEffect_SetScareToRadius(objEfc, r*sin(90*i/40));
				waitObj(objFamilier, 1);
			}
		}
		task Alpha(){
			waitObj(objFamilier, 30);
			descent(i in 1 .. 20){
				if(Obj_IsDeleted(obj)){break;}
				ObjRender_SetPosition(objEfc, ObjMove_GetX(obj), ObjMove_GetY(obj), 1);
				ObjRender_SetAlpha(objEfc, 255*sin(90*i/20));
				waitObj(objFamilier, 1);
			}
			Obj_Delete(objEfc);
		}
	}
}

task TShot_Bomb(x, y, leng, acceWt, wt, ang){
	let nuclear_r = 30;
	let acce = 2*leng/(acceWt^2);
	let spd = acce*acceWt;
	let objS = My_CreateShotA2(x, y, spd, ang, -acce, -0.1, BGW_CHRYSTAL_M_BLUE, 10);
//			waitObj(objS, 510+wt/5);
	wait(150+wt);
	let count = 0;
	let wt2 = 24;
	let ang2 = rand(0, 360);
	x = ObjMove_GetX(objS);
	y = ObjMove_GetY(objS);
	let s2 = ObjMove_GetSpeed(objS);
	let a2 = ObjMove_GetAngle(objS);
	loop{
		if(Obj_IsDeleted(objS)){return;}
		CallSound(sndShot2);
		_EffectZako_Explode(x, y, 0, 30, nuclear_r/10, 255,255,255);

		loop(wt2){
			if(Obj_IsDeleted(objS)){return;}
			if(count>=90){break;}
			count++;
			let rate = count / 90;
			let r2 = 3 * rate;
			x += s2*cos(a2);
			y += s2*sin(a2);
			ang2 += 138;
			ObjMove_SetPosition(objS, x + r2*cos(ang2), y + r2*sin(ang2));
			let c = 255*(1-0.5*rate);
			ObjRender_SetColor(objS, 255, c, c);
			wait(1);
		}
		wt2 = max(wt2-4, 8);
		if(count>=90){break;}
	}
	if(Obj_IsDeleted(objS)){return;}
	CallSound(sndFlare);
	let objN = NuclearShot(ObjMove_GetX(objS), ObjMove_GetY(objS), [63,63,63], nuclear_r, 15);
	Obj_Delete(objS);
	wait(45);
	Obj_Delete(objN);
	
}

task EffectExplodeCloudSetS04(x, y, scale, color, timer, wt, count)
{
	let max_c = max(color[0], max(color[1], color[2]));
	ascent(i in 0 .. count)
	{
		if (!eAlive) { break; }
		let tmp = i/count;
		if (count <= 1) { tmp = 1; }
		EffectExplodeCloud(x, y, scale, [color[0]-max_c*tmp,color[1]-max_c*tmp,color[2]-max_c*tmp], timer);
		waitEx(wt);
	}
}
