// -------------- 敵単体の処理 -------------- //

#include "./lib_FrogFairy.dnh"

// オープニング用人魂
task SetEnemyH01(iniX, iniY, iniSpeed, iniAngle, iniValue, iniWait)
{
	if (flgStopSetZako) { return; }
	
	let e_type = iniValue%2;
	let eSize = ENEMY_S;
	let eColor = EFF_BLUE;
	
	let objEnemy = MakeEnemy(iniX, iniY, 10, eSize);
	DrawHitodama( objEnemy, eColor );
	TAct();
	WaitForKilled(objEnemy);
	if (CheckKillType(objEnemy) == 2)
	{
		// 撃ち返し
		TUchikaeshi();
	}
	ZakoFinalize(objEnemy, eColor);
	
	task TAct()
	{
		SetHitodamaVisibleSilent(objEnemy, 15);
		TCheckDispINOut(objEnemy, 32);
		
		TShot();
		
		let bx = iniX;
		let by = iniY;
		let vx = iniSpeed*cos(iniAngle);
		let vy = iniSpeed*sin(iniAngle);
		let va = randStage(0, 360);
		let vr = 0;

		let t = 0;
		while(CanShotBullet(objEnemy))
		{
			let pos = Rotate2D_XY(sin(va*2)*vr/2, sin(va)*vr, iniAngle);
			let ex = bx + pos[0];
			let ey = by + pos[1];
			ObjMove_SetPosition(objEnemy, ex, ey);
			bx += vx; by += vy;
			va += 1;
			vr = min(96, vr+4);
			t++;
			waitObj(objEnemy, 1);
		}
	}
	
	
	task TShot()
	{
		let timer = [360, 300, 270, 270][Difficult];
		timer -= trunc(iniWait/2);
		
		waitObj(objEnemy, timer);
		if (CanShotBullet(objEnemy))
		{
			TUchikaeshi();
		}
	}

	task TUchikaeshi()
	{
		let speed = [1, 1.5, 1.75, 2][Difficult];
		let way = [0, 2, 3, 4][Difficult];
		let w1 = (way-1)/2;

		if (way <= 0 || !CheckUchikaeshi(objEnemy, 88)) { return; }
		
		let ba = GetAngleToPlayer(objEnemy);
		CreateShotCrystalA2(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy),
			0, ba, speed/240, speed, BGW_RICE_S_SKY, 15, way, 1.5, 0.05);
		CallSound(sndShot5);
	}
}

// ビット陰陽玉
task SetEnemyI01(iniX, iniY, iniSpeed, iniAngle, iniValue, iniWait)
{
	if (flgStopSetZako) { return; }
	
	let e_type = iniValue%2;
	let eSize = ENEMY_M;
	let eColor = EFF_BLUE;
	
	let objEnemy = MakeEnemy(iniX, iniY, 50, eSize);
	DrawOnmyou( objEnemy, eColor );
	TAct();
	WaitForKilled(objEnemy);
	ZakoFinalize(objEnemy, eColor);
	
	task TAct()
	{
		ZakoEnterEffect_Onmyou(objEnemy, 120);
		Enemy_WaitForDispOUT(objEnemy, 32, 180);
		
		let x = iniX;
		let y = iniY;
		let vx = iniSpeed*cos(iniAngle);
		let vy = iniSpeed*sin(iniAngle);
		let muki = iniValue;
		
		let t = 0;
		ascent(t in 0 .. 120)
		{
			let tmp = GetCurve((t+1)/120);
			ObjMove_SetPosition(objEnemy, x+sin(30+tmp*150)*96*muki, y);
			x += vx*tmp; y += vy*tmp;
			waitObj(objEnemy, 1);
		}
		if (Obj_IsDeleted(objEnemy)) { return; }
		Enemy_SetPatternA1(objEnemy, 0, iniSpeed, iniAngle);
		TShot();
	}
	
	// ショット
	task TShot()
	{
		// 炎ショット
		let wt = [30, 30, 15, 10][Difficult];
		let shot_delay = 30;
		let timer = [90, 360, 360, 360][Difficult] + shot_delay;
		
		let speed = [1.5, 2, 2.75, 4][Difficult];
		let way = [2, 2, 2, 2][Difficult];
		let way_angle = 360/way;
		let graphic = ADD_BGW_FIRE_BLUE;
		let base_angle = 90;
		
		// しゃぼんだま
		let b_wt = [30, 30, 20, 15][Difficult];
		let b_timer = [60, 75, 75, 75][Difficult];
		let b_delay = trunc(b_wt*iniWait);
		
		let t = 0;
		while(CanShotBullet(objEnemy) && t < timer && ObjMove_GetY(objEnemy) < MaxY-32)
		{
			if (t >= shot_delay)
			{
				if (t%wt == 0)
				{
					ascent(i in 0 .. way)
					{
						let va = base_angle + i*360/way;
						let vx = iniSpeed*cos(iniAngle);
						let vy = iniSpeed*sin(iniAngle);
						let add_vx = speed*cos(va);
						let add_vy = speed*sin(va);
						My_CreateShotB2(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy),
							vx, vy, add_vx/120, add_vy/120, vx+add_vx*3, vy+add_vy*3, graphic, 15);
					}
				}
				if ((t-b_delay)%b_wt == 0 && t < b_timer)
				{
					let bst = trunc(t/b_wt);
					let sa = 90 + iniValue*105*([1,-1][bst%2]);
					ShotBubble01(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 1, sa, 0);
				}
			}
			waitObj(objEnemy, 1);
			t++;
		}
	}
}

// 壊れるシャボン玉
task ShotBubble01(iniX, iniY, iniSpeed, iniAngle, iniValue)
{
	if (flgStopSetZako) { return; }
	
	let scale = 0.75;
	
	let objEnemy = MakeEnemy(iniX, iniY, 10, ENEMY_S);
	// 判定サイズ
	SetEnemyIntersection(objEnemy, scale*16, scale*16);
	DrawBubbleEnemy( objEnemy, scale );
	TAct();
	WaitForKilled(objEnemy);
	if (CheckKillType(objEnemy) == 2)
	{
		// 撃ち返し
		TUchikaeshi();
	}
	ZakoFinalizeEx(objEnemy, EFF_BLUE, false);
	
	task TAct()
	{
		Enemy_SetPatternA2(objEnemy, 0, 0, iniAngle, iniSpeed/120, 0, iniSpeed);
		Enemy_WaitForDispOUT(objEnemy, 32, 0);
		let t = 0;
		while(!Obj_IsDeleted(objEnemy))
		{
			if (iniValue == 0 && t < 120)
			{
				let tmp = GetCurve((t+1)/120);
				ObjMove_SetY(objEnemy, ObjMove_GetY(objEnemy)-(1-tmp)*2);
			}
			ObjMove_SetY(objEnemy, ObjMove_GetY(objEnemy)+sin(t*2));
			t++;
			waitObj(objEnemy, 1);
		}
	}
	
	task TUchikaeshi()
	{
		let speed = [1, 1.5, 2, 2.5][Difficult];
		let way = [0, 12, 12, 12][Difficult];
		let true_way = [0, 4, 2, 1][Difficult];
		let w1 = (way-1)/2;

		if (way <= 0 || !CheckUchikaeshi(objEnemy, 128)) { return; }
		
		let g2 = [BGW_BALL_BS_SKY,BGW_BALL_BS_BLUE,BGW_BALL_BS_PURPLE][rand_int(0,2)];
		let g = [g2, g2, BGW_BALL_BS_WHITE];
		let add_a = [2, -2, 0];
		let g_base = rand_int(0,length(g)-1);
		
		let ba = GetAngleToPlayer(objEnemy);
		ascent(i in 0 .. 3)
		{
			CreateShotBubbleCircle(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy),
				speed, ba+add_a[i], g[i], 30, way, true_way);
		}
		CallSound(sndShot5);
	}

	function CreateShotBubbleCircle(x, y, speed, angle, graphic, delay, way, true_way_span)
	{
		ascent(i in 0 .. way)
		{
			let sa = angle + i*360/way;
			let sx = x;
			let sy = y;
			CreateShotBubble(x, y, speed, sa, graphic, delay, i%true_way_span!=0);
		}
	}
	
	task CreateShotBubble(x, y, speed, angle, graphic, delay, del_flag)
	{
		let obj = My_CreateShotA2(x, y, 1, angle, -1/60, 0, graphic, delay);
		ObjMove_AddPatternA2(obj, 60, NO_CHANGE, NO_CHANGE, speed/240, 0, speed);
		wait(60);
		if (!Obj_IsDeleted(obj) && del_flag)
		{
			ObjShot_FadeDelete(obj);
		}
	}
}

// カエル妖精（大）
task SetEnemyF01(iniX, iniY, iniSpeed, iniAngle, iniValue, iniWait)
{
	if (flgStopSetZako) { return; }
	
	let e_type = iniValue%2;
	let eSize = ENEMY_L;
	let eColor = EFF_RED;
	let emnImage = imgZakoFairyFrog;
	
	let objEnemy = MakeEnemy(-32, -32, 400, eSize);
	DrawFrogFairy( objEnemy, imgZakoFairyFrog, FAIRY_LARGE );
	TAct();
	WaitForKilled(objEnemy);
	ZakoFinalize(objEnemy, eColor);
	
	task TAct()
	{
		EnterFrogFairy(objEnemy, [iniX,iniY], 1, 240);
		waitObj(objEnemy, 240);
		if (Obj_IsDeleted(objEnemy)) { return; }
		FirstShot_S03(objEnemy, eSize);
		waitObj(objEnemy, iniWait);
		if (Obj_IsDeleted(objEnemy)) { return; }
		TShot();
		waitObj(objEnemy, 404);
		if (Obj_IsDeleted(objEnemy)) { return; }
		Enemy_SetPatternA2(objEnemy, 0, 0, 90, 2/480, 0, 2);
		TCheckDispINOut(objEnemy, 32);
	}
	
	
	// ショット
	task TShot()
	{
		let wt = 202;
		let count = [2, 3, 3, 3][Difficult];
		
		let speed = [0.75, 0.75, 0.75, 0.75][Difficult];
		let way = [17, 17, 17, 17][Difficult];
		let way2 = [3, 5, 7, 7][Difficult];
		let way3 = [1, 1, 1, 2][Difficult];
		let graphics = [ADD_BGW_BALL_M_BLUE, ADD_BGW_BALL_BS_BLUE, ADD_BGW_BALL_S_BLUE, ADD_BGW_BALL_SS_BLUE];
		
		let st = 0;
		while(CanShotBullet(objEnemy) && st < count)
		{
			let ba = GetAngleToPlayer(objEnemy);
			ascent(k in 0 .. way3)
			{
				ascent(i in 0 .. way)
				{
					let sa = ba + (i+k/2)*360/way;
					let ss = speed * (1-k*0.25);
					let sg = graphics[k%4];
					ascent(j in 0 .. way2)
					{
						let oa = (j-(way2-1)/2)*3;
						BubbleShot03(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy),
							ss, sa, sg, 30, oa, k*90);
					}
				}
			}
			CallSound(sndShot2);
			waitObj(objEnemy, wt);
			st++;
		}
	}
	

}

// カエル妖精（中）
task SetEnemyF02(iniX, iniY, iniSpeed, iniAngle, iniValue, iniWait)
{
	if (flgStopSetZako) { return; }
	
	let e_type = iniValue%2;
	let eSize = ENEMY_M;
	let eColor = EFF_RED;
	let emnImage = imgZakoFairyFrog;
	
	let objEnemy = MakeEnemy(-32, -32, [90, 140][e_type], eSize);
	DrawFrogFairy( objEnemy, imgZakoFairyFrog, FAIRY_MIDDLE );
	TAct();
	WaitForKilled(objEnemy);
	ZakoFinalize(objEnemy, eColor);
	
	task TAct()
	{
		EnterFrogFairy(objEnemy, [iniX,iniY], 1, 240);
		waitObj(objEnemy, 240);
		if (Obj_IsDeleted(objEnemy)) { return; }
		FirstShot_S03(objEnemy, eSize);
		waitObj(objEnemy, iniWait);
		if (Obj_IsDeleted(objEnemy)) { return; }
		TShot();
		Enemy_SetPatternA2(objEnemy, 0, 0, GetAngleToPlayer(objEnemy), 2/480, 0, 2);
		MoveHormingEnemy(objEnemy, 1, 240);
		TCheckDispINOut(objEnemy, 32);
	}
	
	// ショット
	task TShot()
	{
		let wt = 202;
		let count = [0, 2, 2, 2][Difficult];
		
		let speed = [1.5, 2, 2, 2][Difficult];
		let way = [10, 14, 16, 18][Difficult];
		let r = [18, 24, 30, 42][Difficult];
		let graphic = ADD_BGW_BALL_BS_BLUE;
		
		let st = 0;
		while(CanShotBullet(objEnemy) && st < count)
		{
			let sa = GetAngleToPlayer(objEnemy);
			BubbleShot02(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy),
				speed, rand(0,360), ADD_BGW_BALL_BS_BLUE, 30, sa, r, rand_dir()*1, way);
			CallSound(sndShot2);
			waitObj(objEnemy, wt);
			st++;
		}
	}
}
// カエル妖精（小）
task SetEnemyF03(iniX, iniY, iniSpeed, iniAngle, iniValue, iniWait)
{
	if (flgStopSetZako) { return; }
	
	let e_type = iniValue%2;
	let eSize = ENEMY_S;
	let eColor = EFF_RED;
	let emnImage = imgZakoFairyFrog;
	
	let objEnemy = MakeEnemy(-32, -32, 30, eSize);
	SetEnemyDropItem(objEnemy, [MY_ITEM_TIME_1], [MY_ITEM_TIME_1, 4]);
	DrawFrogFairy( objEnemy, imgZakoFairyFrog, FAIRY_SMALL );
	TAct();
	WaitForKilled(objEnemy);
	ZakoFinalize(objEnemy, eColor);
	
	task TAct()
	{
		EnterFrogFairy(objEnemy, [iniX,iniY], 1, 240);
		waitObj(objEnemy, 240);
		if (Obj_IsDeleted(objEnemy)) { return; }
		FirstShot_S03(objEnemy, eSize);
		waitObj(objEnemy, iniWait);
		if (Obj_IsDeleted(objEnemy)) { return; }
		TShot();
		Enemy_SetPatternA2(objEnemy, 0, 0, GetAngleToPlayer(objEnemy), 2/480, 0, 2);
		MoveHormingEnemy(objEnemy, 1, 240);
		TCheckDispINOut(objEnemy, 32);
	}
	
	// ショット
	task TShot()
	{
	}
}

// カエル妖精（大）
task SetEnemyF04(iniX, iniY, iniSpeed, iniAngle, iniValue, iniWait)
{
	if (flgStopSetZako) { return; }
	
	let e_type = iniValue%2;
	let eSize = ENEMY_L;
	let eColor = EFF_RED;
	let emnImage = imgZakoFairyFrog;
	
	let objEnemy = MakeEnemy(-32, -32, 300, eSize);
	DrawFrogFairy( objEnemy, imgZakoFairyFrog, FAIRY_LARGE );
	TAct();
	WaitForKilled(objEnemy);
	ZakoFinalize(objEnemy, eColor);
	
	task TAct()
	{
		EnterFrogFairy(objEnemy, [iniX,iniY], 1, 240);
		waitObj(objEnemy, 240);
		if (Obj_IsDeleted(objEnemy)) { return; }
		FirstShot_S03(objEnemy, eSize);
		waitObj(objEnemy, iniWait);
		if (Obj_IsDeleted(objEnemy)) { return; }
		TShot();
		waitObj(objEnemy, 101);
		if (Obj_IsDeleted(objEnemy)) { return; }
		Enemy_SetPatternA2(objEnemy, 0, 0, 90, 2/480, 0, 2);
		TCheckDispINOut(objEnemy, 32);
	}
	
	
	// ショット
	task TShot()
	{
		let wt = 101;
		let count = [1, 2, 2, 2][Difficult];
		
		let speed = [0.75, 0.75, 0.75, 0.75][Difficult];
		let way = [17, 17, 17, 17][Difficult];
		let way2 = [3, 3, 5, 7][Difficult];
		let way3 = [1, 1, 1, 1][Difficult];
		let graphics = [ADD_BGW_BALL_M_BLUE, ADD_BGW_BALL_BS_BLUE, ADD_BGW_BALL_S_BLUE, ADD_BGW_BALL_SS_BLUE];
		
		let st = 0;
		while(CanShotBullet(objEnemy) && st < count)
		{
			let ba = GetAngleToPlayer(objEnemy);
			ascent(k in 0 .. way3)
			{
				ascent(i in 0 .. way)
				{
					let sa = ba + (i+k/2)*360/way;
					let ss = speed * (1-k*0.25);
					let sg = graphics[k%4];
					ascent(j in 0 .. way2)
					{
						let oa = (j-(way2-1)/2)*3;
						BubbleShot03(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy),
							ss, sa, sg, 30, oa, k*90);
					}
				}
			}
			CallSound(sndShot2);
			waitObj(objEnemy, wt);
			st++;
		}
	}
}

// 泡纏い人魂
task SetEnemyH02(iniX, iniY, iniSpeed, iniAngle, iniValue, iniWait)
{
	if (flgStopSetZako) { return; }
	
	let e_type = iniValue%2;
	let eSize = ENEMY_S;
	let eColor = EFF_BLUE;
	let flgUchikaeshi = false;
	
	let objEnemy = MakeEnemy(iniX, iniY, 60, eSize);
	DrawHitodama( objEnemy, eColor );
	TAct();
	WaitForKilled(objEnemy);
	if (CheckKillType(objEnemy) == 2)
	{
		// 撃ち返し
		flgUchikaeshi = true;
	}
	ZakoFinalize(objEnemy, eColor);
	
	task TAct()
	{
		SetHitodamaVisibleSilent(objEnemy, 15);
		TCheckDispINOut(objEnemy, 32);
		TShot();
		
		let bx = iniX;
		let by = iniY;
		let vx = iniSpeed*cos(iniAngle);
		let vy = iniSpeed*sin(iniAngle);
		let va = randStage(0, 360);
		let vr = 0;

		let t = 0;
		while(CanShotBullet(objEnemy))
		{
			let pos = Rotate2D_XY(sin(va*2)*vr/2, sin(va)*vr, iniAngle);
			let ex = bx + pos[0];
			let ey = by + pos[1];
			ObjMove_SetPosition(objEnemy, ex, ey);
			bx += vx; by += vy;
			va += 1;
			vr = min(48, vr+1);
			t++;
			waitObj(objEnemy, 1);
		}
	}
	
	// ショット
	task TShot()
	{
		waitObj(objEnemy, 15);
		if (Obj_IsDeleted(objEnemy)) { return; }
		
		let speed = [1.5, 1.5, 2, 2][Difficult];
		let speed2 = [2, 2, 3, 4][Difficult];
		let way = [8, 8, 12, 12][Difficult];
		let r = [24, 24, 30, 36][Difficult];
		let graphic = ADD_BGW_BALL_S_BLUE;
		
		let b_count = [5, 5, 7, 7][Difficult];
		let b_count_dec = [1, 1, 3, 1][Difficult];
		let b_way = [1, 3, 3, 7][Difficult];
		let b_way_angle = [0, 60, 50, 35][Difficult];
		if (!iniValue)
		{
			if (Difficult <= D_HARD) { way = round(way*0.75); }
			r = round(r*0.75);
		}
		
		BubbleShot02H(objEnemy, speed, speed2, rand(0,360), graphic, 30, r, rand_dir()*1, way, b_count, b_count_dec, b_way, b_way_angle);
	}

	task BubbleShot02H(parent, speed, speed2, angle, graphic, delay, to_r, add_a, way, b_count, b_count_dec, b_way, b_way_angle)
	{
		ascent(i in 0 .. way)
		{
			let sa = angle + i*360/way;
			BubbleShot02_single(parent, speed, speed2, sa, graphic, delay);
		}
		
		task BubbleShot02_single(parent, speed, speed2, angle, graphic, delay)
		{
			let obj = My_CreateShotA1(ObjMove_GetX(parent), ObjMove_GetY(parent), 0, angle, graphic, delay);
			
			let x = ObjMove_GetX(parent);
			let y = ObjMove_GetY(parent);
			let vr = to_r;
			
			let ba = sin(angle)*180;
			let t = 0;
			while(!Obj_IsDeleted(obj))
			{
				if (flgUchikaeshi)
				{
					let bx = ObjMove_GetX(obj);
					let by = ObjMove_GetY(obj);
					ObjShot_FadeDelete(obj);
					
					CallSound(sndShot5);
					ascent(i in 0 .. b_count)
					{
						let ss = speed + (speed2-speed)*i/(b_count-1);
						let tmp_way = max(1, b_way-trunc(i/b_count_dec)*2);
						CreateShotWayA2Ex(bx, by, 0, angle, ss/120, ss, BGW_CHRYSTAL_S_BLUE, 15, tmp_way, b_way_angle, 0, DELAY_ADD);
						wait(3);
					}
					break;
				}
				else if (Obj_IsDeleted(parent))
				{
					DeleteBulletEffect(obj);
					break;
				}
				x = ObjMove_GetX(parent);
				y = ObjMove_GetY(parent);
				vr = to_r * (1+sin(ba+t*3)/6)*(1+t/600);
				if (t < 60) { vr *= GetCurve((t+1)/60); }

				ObjMove_SetPosition(obj, x+vr*cos(angle), y+vr*sin(angle));
				angle += add_a;
				t++;
				wait(1);
			}
		}
	}
}


task BubbleShot01(x, y, vx, vy, max_vy, delay)
{
	let obj = [My_CreateShotB2(x, y, vx, vy, 0, 0.02, vx, max_vy, ADD_BGW_LIGHT_S_BLUE, delay),
		My_CreateShotB2Ex(x, y, vx, vy, 0, 0.02, vx, max_vy, ADD_BGW_WATER_BLUE, delay, DELAY_ADD)];
	
	ascent(t in 0 .. delay)
	{
		let add_y = -GetCurve(1-t/delay)*3;
		ascent(i in 0 .. 2) { ObjMove_SetY(obj[i], ObjMove_GetY(obj[i])+add_y); }
		wait(1);
	}
	Obj_SetRenderPriorityI(obj[1], GetShotRenderPriorityI+1);
}
task BubbleShot02(x, y, speed, angle, graphic, delay, to_angle, to_r, add_a, way)
{
	let vx = speed*cos(to_angle);
	let vy = speed*sin(to_angle);
	ascent(i in 0 .. way)
	{
		let sa = angle + i*360/way;
		BubbleShot02_single(x, y, speed, sa, graphic, delay);
	}
	
	task BubbleShot02_single(x, y, speed, angle, graphic, delay)
	{
		let obj = My_CreateShotA1(x, y, 0, angle, graphic, delay);
		
		let svx = cos(angle);
		let svy = sin(angle);
		let vr = to_r;
		
		let ba = sin(angle)*180;
		let t = 0;
		while(!Obj_IsDeleted(obj))
		{
			vr = to_r * (1+sin(ba+t*3)/6)*(1+t/600);
			if (t < 60)
			{
				vr *= GetCurve((t+1)/60);
			}
			else
			{
				let tmp = min(1, (t-60)/240);
				x += tmp*vx; y += tmp*vy;
			}
			ObjMove_SetPosition(obj, x+vr*cos(angle), y+vr*sin(angle));
			angle += add_a;
			t++;
			wait(1);
		}
	}
	/*
	task BubbleShot02_single(x, y, speed, angle, graphic, delay)
	{
		let obj = My_CreateShotA1(x, y, 0, angle, graphic, delay);
		MoveToSlowdown(obj, x+cos(angle)*r, y+sin(angle)*r, 60);
		wait(60);
		if (Obj_IsDeleted(obj)) { return; }
		MoveTo(obj, x+cos(to_angle)*r2, y+sin(to_angle)*r2, 180);
		wait(180);
		if (Obj_IsDeleted(obj)) { return; }
		ObjMove_AddPatternA2(obj, 0, 0, angle, speed/120, 0, speed);
	}
	*/
}
task BubbleShot02B(x, y, speed, angle, graphic, delay, to_angle, to_r, add_a, way)
{
	let vx = speed*cos(to_angle);
	let vy = speed*sin(to_angle);
	ascent(i in 0 .. way)
	{
		let sa = angle + i*360/way;
		BubbleShot02_single(x, y, speed, sa, graphic, delay);
	}
	
	task BubbleShot02_single(x, y, speed, angle, graphic, delay)
	{
		let obj = My_CreateShotA1(x, y, 0, angle, graphic, delay);
		
		let svx = cos(angle);
		let svy = sin(angle);
		let vr = to_r;
		
		let ba = sin(angle)*180;
		let t = 0;
		while(!Obj_IsDeleted(obj))
		{
			vr = to_r * (1+sin(ba+t*3)/6)*(1+t/600);
			let tmp = min(1, t/180);
			x += tmp*vx; y += tmp*vy;
			ObjMove_SetPosition(obj, x+vr*cos(angle), y+vr*sin(angle));
			angle += add_a;
			t++;
			wait(1);
		}
	}
}

task BubbleShot03(x, y, speed, angle, graphic, delay, offset_angle, offset_span)
{
	let obj = My_CreateShotA1(x, y, 0, angle, graphic, delay);
	
	let r = 0;
	let t = 0;
	while(!Obj_IsDeleted(obj))
	{
		let tmp_a = t*1.5 + offset_span;
		let sa = angle + sin(tmp_a)*offset_angle;
		let ss = speed * (1+sin(tmp_a*2-90));
		ObjMove_SetPosition(obj, x+r*cos(sa), y+r*sin(sa));
		r += ss;
		t++;
		wait(1);
	}
}

task BubbleShot04(x, y, speed, angle, graphic, delay, to_speed, to_count, to_way, to_wt, graphic2)
{
	let obj = My_CreateShotA2(x, y, 0, angle, speed/240, speed, graphic, delay);
	
	let st = 0;
	let t = 0;
	while(!Obj_IsDeleted(obj) && st < to_count)
	{
		if (t > 0 && t%to_wt == 0)
		{
			CreateShotCircleA2(ObjMove_GetX(obj), ObjMove_GetY(obj),
				0, GetAngleToPlayer(obj)+st*180/to_way, to_speed/240, to_speed, graphic2, 30, to_way, 0);
			CallSound(sndShot2);
			st++;
		}
		t++;
		wait(1);
	}
}

// 登場時ショット
task FirstShot_S03(objEnemy, eSize)
{
	let speed = [[1.0], [1.25], [1.25], [1.25, 1.50]][Difficult];
	let way = [6, 9, 12, 10][Difficult];
	let way_angle = 120;
	let offset_y = 0;
	
	if (eSize == ENEMY_L)
	{
	}
	
	CallSound(sndShot6);
	ascent(i in 0 .. way)
	{
		ascent(j in 0 .. length(speed)){
			if (!CanShotBullet(objEnemy)) { break; }
			let sa = -90 + ((i+0.5)/way)*way_angle/2;
			let vx = speed[j]*cos(sa);
			let vy = speed[j]*sin(sa)/2 - 2;
			BubbleShot01(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy)+offset_y,
				-vx, vy, speed[0], 30);
			BubbleShot01(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy)+offset_y,
				vx, vy, speed[0], 30);
		}
	}
}
