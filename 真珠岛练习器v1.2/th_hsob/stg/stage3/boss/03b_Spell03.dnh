#東方弾幕風[Single]
#ScriptVersion[3]
#Title["ひかり子スペカ3"]
#Text["ひかり子スペカ3"]
#Background[""]
#System["./../../../system/System.dnh"]

//---------------------------------------------------------------------

// 関数取り込み
#include"./../../../lib/lib_boss.dnh"
#include"./lib_Hikariko.dnh"

let BASE_ROTATE = 0;
let ROTATE_S = 0;
let ROTATE_C = 0;
let ROTATE_X = CenX;
let ROTATE_Y = CenY;

@Event {
	alternative(GetEventType())
	case(EV_REQUEST_LIFE)		{ SetScriptResult(250);	}
	case(EV_REQUEST_TIMER)		{ SetScriptResult(45);		}
	BossEvent();
}

@Initialize {
	let SPELL_ID = 24;
	let SPELL_NAME = [7, 7, 8, 9][Difficult];

	//ダメージ透過率
	dIni_Shot = 10;
	// アイテム数
	bossDropItem = 0;

	//初期設定
	Boss_Init();

	objEnemy = CreateBoss(BOSS_ID_HIKARIKO);	//ボスセット

	//スペカデータ・セット
	SetSpellCardData(GetSpellCardID(SPELL_ID), SPELL_NAME, 
			GetCurrentScriptDirectory()~"03a_Background.dnh",
			GetBossTexture(objEnemy, I_CUTIN), 0.65, CUTMOTION_NORMAL);

	// チャプター開始
	ChapterStartBoss(GetBossID(objEnemy), SPELL_NAME, CHAPTER_SPELL);

	// 使い魔と体力連動
	CheckLinkLife_Boss(objEnemy);

	Task_Main();
}

@MainLoop {
	yield;
}

// メインタスク
task Task_Main
{
	standBy(objEnemy, CenX, MinY+160, 120);
	TCheckRotate();
	TLine();
	waitObj(objEnemy, 60);

	CallSpellCard(true);	//スペカ起動
	
	waitObj(objEnemy, 60);
	while(eAlive)
	{
		let max_wt = [120, 120, 120, 90][Difficult];
		let min_wt = [45, 30, 30, 30][Difficult];
		
		let bwt = [90, 90, 90, 60][Difficult];
		let count = [7, 8, 8, 8][Difficult];
		
		let wt = max_wt;
		BossCharge(objEnemy);
		SetAction(objEnemy, ACT_SHOT1, 60);
		waitObj(objEnemy, 60);
		if (!eAlive) { return; }
		SetAction(objEnemy, ACT_SHOT2, 1200);
		loop(count)
		{
			if (!eAlive) { return; }
			let pos = Rotate2D_XY(GetPlayerX-ROTATE_X, GetPlayerY-ROTATE_Y, -BASE_ROTATE);	// 回転元の座標を参照
			let ex = pos[0] + ROTATE_X;
			let ey = -210 + CenY;
			let ea = 90;
			
			let py = pos[1] + ROTATE_Y;
			if (ey > py-120) { ey = 210 + CenY; ea = -90; }
			SetFamilier01(ex, ey, 8, ea, 0, 0);
			CallSound(sndBoon);
			
			waitObj(objEnemy, wt);
			wt = min_wt + (wt-min_wt)*0.66;
		}
		waitObj(objEnemy, bwt);
	}

}

task TLine()
{
	let min_r = [145, 145, 145, 145][Difficult];
	let graphics = [BGW_BEAM_SKY,BGW_BEAM_WHITE];
	if (Difficult == D_HARD) { graphics = [BGW_BEAM_YELLOW,BGW_BEAM_WHITE]; }
	if (Difficult == D_LUNA) { graphics = [BGW_BEAM_PURPLE,BGW_BEAM_RED,BGW_BEAM_BLUE]; }
	
	let st = 0;
	let t = 0;
	while(eAlive)
	{
		if (t%8 == 0)
		{
			let ox = (1-GetCurve(min(1, t/240))) * 180 + min_r;
			RotateLaser(CenX-ox, CenY-600, 2, 180, 90, graphics[st%length(graphics)], 15, 60);
			RotateLaser(CenX+ox, CenY-600, 2, 0, 90, graphics[st%length(graphics)], 15, 60);
			st++;
		}
		t++;
		wait(1);
	}
}

// 回転チェック
task TCheckRotate()
{
	let t = 0;
	while(eAlive)
	{
		ROTATE_S = sin(BASE_ROTATE);
		ROTATE_C = cos(BASE_ROTATE);
		
		if (Difficult == D_LUNA)
		{
			let tmp = min(1, max(0,t-60)/600);
			BASE_ROTATE += tmp*0.5;

			let r2 = min(1, max(0,t-300)/1800) * 64;
			let ra = 180-BASE_ROTATE;
			ROTATE_X = CenX + r2 * cos(ra);
			ROTATE_Y = CenY + r2 * sin(ra) + 32;
		}
		else if (Difficult == D_HARD)
		{
			let r = min(1, max(0,t-120)/600) * 30;
			BASE_ROTATE = r * sin(t*0.5);

			let r2 = min(1, max(0,t-120)/1800) * 200;
			ROTATE_X = CenX;
			ROTATE_Y = CenY + r2 * sin(t*0.75);
		}
		else if (Difficult == D_NORM)
		{
			let r = min(1, max(0,t-180)/600) * 30;
			BASE_ROTATE = r * sin(t*0.5);

			let r2 = min(1, max(0,t-300)/1800) * 200;
			ROTATE_X = CenX;
			ROTATE_Y = CenY + r2 * sin(t*0.75);
		}
		else
		{
			// Easy
			let r = min(1, max(0,t-180)/900) * 20;
			BASE_ROTATE = r * sin(t*0.5);

			let r2 = min(1, max(0,t-600)/1800) * 100;
			ROTATE_X = CenX;
			ROTATE_Y = CenY + r2 * sin(t*0.75);
		}
		t++;
		wait(1);
	}
}

// 回転角度を反映する弾
// とりあえず回転中心座標は画面中心固定
task RotateShot(x, y, speed, angle, graphic, delay, timer)
{
	let obj = My_CreateShotA1(x, y, 0, angle, graphic, delay);
	ObjShot_SetAutoDelete(obj, false);
	ObjShot_SetDeleteFrame(obj, timer);
	
	let BX = x - ROTATE_X;
	let BY = y - ROTATE_Y;
	let VX = speed*cos(angle);
	let VY = speed*sin(angle);

	let t = 0;
	while(!Obj_IsDeleted(obj))
	{
		let x = ROTATE_X + BX*ROTATE_C - BY*ROTATE_S;
		let y = ROTATE_Y + BX*ROTATE_S + BY*ROTATE_C;
		ObjMove_SetPosition(obj, x, y);
		ObjMove_SetAngle(obj, angle+BASE_ROTATE);
		BX += VX; BY += VY;
		yield;	// ここはyieldでいい
	}
}
// 回転角度を反映するレーザー
task RotateLaser(x, y, speed, angle, l_angle, graphic, delay, timer)
{
	let obj = My_CreateSimpleLaserA1(x, y, l_angle, 1200, 12, timer, graphic, delay);
	ObjShot_SetAutoDelete(obj, false);
	ObjShot_SetDeleteFrame(obj, timer);
	
	let BX = x - ROTATE_X;
	let BY = y - ROTATE_Y;
	let VX = speed*cos(angle);
	let VY = speed*sin(angle);

	let t = 0;
	while(!Obj_IsDeleted(obj))
	{
		let x = ROTATE_X + BX*ROTATE_C - BY*ROTATE_S;
		let y = ROTATE_Y + BX*ROTATE_S + BY*ROTATE_C;
		ObjMove_SetPosition(obj, x, y);
		ObjStLaser_SetAngle(obj, l_angle+BASE_ROTATE);
		if (t < delay)
		{
			let tmp = (1-t/delay);
			BX += -VX*tmp; BY += -VY*tmp;
		}
		else
		{
			let tmp = min(1, (t-delay)/timer*3);
			BX += VX*tmp; BY += VY*tmp;
		}
		t++;
		yield;	// ここはyieldでいい
	}
}

// 人魂
task SetFamilier01(iniX, iniY, iniSpeed, iniAngle, iniMuki, iniValue)
{
	let timer = 180;
	
	let eSize = ENEMY_M;
	let eColor = EFF_BLUE;
	let baseAngle = iniAngle;
	
	let objFamilier = MakeEnemyFamilier(0, 0, 300, eSize);
	CheckLinkLife_Familier(objEnemy, objFamilier, 0.8);	// ボスと体力連動
	DrawBirdOption(objFamilier, EFF_BLUE, iniAngle, 1);
	TAct();
	WaitForKilledFamilier(objFamilier, 24, 4);
	ZakoFinalize(objFamilier, eColor);
	
	task TAct()
	{
		TMove;
		TShot;
	}
	
	task TMove()
	{
		let objLEffect = LaserEffect02(0, 0, 0, 600, 16, EFF_BLUE, 60);
		
		let BX = iniX - ROTATE_X;
		let BY = iniY - ROTATE_Y;
		let VX = iniSpeed*cos(iniAngle);
		let VY = iniSpeed*sin(iniAngle);

		let before_rx = ROTATE_X;
		let before_ry = ROTATE_Y;
		ascent(t in 0 .. timer)
		{
			if (!CanShotBullet(objFamilier)) { break; }
			let x = ROTATE_X + BX*ROTATE_C - BY*ROTATE_S;
			let y = ROTATE_Y + BX*ROTATE_S + BY*ROTATE_C;
			ObjMove_SetPosition(objFamilier, x, y);
			ObjMove_SetPosition(objLEffect, x, y);
			ObjStLaser_SetAngle(objLEffect, iniAngle+BASE_ROTATE);
			
			let tmp_s = 0.1;
			if (t > 90) { tmp_s = 1; }
			else if (t > 30) { tmp_s = 0.1 + (t-30)/60*0.9; }
			if (t < 60) { BX -= (ROTATE_X-before_rx);  BY -= (ROTATE_Y-before_ry); }
			else if (t < 90) { let tmp = (90-t)/30; BX -= (ROTATE_X-before_rx)*tmp;  BY -= (ROTATE_Y-before_ry)*tmp; }
			BX += VX*tmp_s; BY += VY*tmp_s;

			before_rx = ROTATE_X;
			before_ry = ROTATE_Y;
			waitObj(objFamilier, 1);
		}
		EraseEnemy(objFamilier);
		Obj_Delete(objLEffect);
	}
	
	task TShot()
	{
		waitObj(objFamilier, 60);
		
		let speed = [1, 1.5, 1.5, 2][Difficult];
		let graphic = [BGW_SCALE_WHITE, BGW_SCALE_WHITE, BGW_SCALE_WHITE, BGW_SCALE_PURPLE][Difficult];
		let wt = [12, 10, 9, 9][Difficult];
		
		let st = 0;
		let t = 0;
		let sa = 0;
		while(CanShotBullet(objFamilier) && t < 120)
		{
			if (t%wt < 3)
			{
				if (t%wt == 0)
				{
					sa = Obj_GetValueD(objFamilier, "E_ANGLE", 0) + rand(-5,5);
				}
				if (CheckDispIN(objFamilier, -16))
				{
					CreateShotWayA2(ObjMove_GetX(objFamilier), ObjMove_GetY(objFamilier),
						0, sa, speed/120, speed, graphic, 15, 2, 150, 0);
					CallSound(sndShot2);
				}
				st++;
			}
			if (Difficult == D_HARD && t%3 == 0)
			{
				if (CheckDispIN(objFamilier, -16))
				{
					if (t%15 == 0)
					{
						My_CreateShotA2(ObjMove_GetX(objFamilier), ObjMove_GetY(objFamilier),
							0, sa+180, 3/120, 3, BGW_NOTE_YELLOW, 15);
						CallSound(sndShot1);
					}
					else
					{
						My_CreateShotA2(ObjMove_GetX(objFamilier), ObjMove_GetY(objFamilier),
							0, sa+180, 3/120, 3, BGW_NOTE_RED, 15);
						CallSound(sndShot3);
					}
				}
			}
			t += 1;
			waitObj(objFamilier, 1);
		}
	}
}
