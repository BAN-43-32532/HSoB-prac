#東方弾幕風[Single]
#ScriptVersion[3]
#Title["ひかり子スペカ2"]
#Text["ひかり子スペカ2"]
#Background[""]
#System["./../../../system/System.dnh"]

//---------------------------------------------------------------------

// 関数取り込み
#include"./../../../lib/lib_boss.dnh"
#include"./lib_Hikariko.dnh"

@Event {
	alternative(GetEventType())
	case(EV_REQUEST_LIFE)		{ SetScriptResult(280);	}
	case(EV_REQUEST_TIMER)		{ SetScriptResult(45);		}
	BossEvent();
}

@Initialize {
	let SPELL_ID = 23;
	let SPELL_NAME = [4, 4, 5, 6][Difficult];

	//ダメージ透過率
	dIni_Shot = 10;
	// アイテム数
	bossDropItem = 150;

	//初期設定
	Boss_Init();

	objEnemy = CreateBoss(BOSS_ID_HIKARIKO);	//ボスセット

	//スペカデータ・セット
	SetSpellCardData(GetSpellCardID(SPELL_ID), SPELL_NAME, 
			GetCurrentScriptDirectory()~"03a_Background.dnh",
			GetBossTexture(objEnemy, I_CUTIN), 0.65, CUTMOTION_NORMAL);

	// チャプター開始
	ChapterStartBoss(GetBossID(objEnemy), SPELL_NAME, CHAPTER_SPELL);

	// 使い魔と体力連動
	CheckLinkLife_Boss(objEnemy);

	Task_Main();
}

@MainLoop {
	yield;
}

// メインタスク
task Task_Main
{
	standBy(objEnemy, CenX, MinY+160, 120);
	TKiss;
	waitObj(objEnemy, 120);

	CallSpellCard(true);	//スペカ起動
	
	if (Difficult >= D_LUNA) { TWWW; }

	let wt = [360, 360, 360, 360][Difficult];
	let way = [6, 8, 8, 8][Difficult];

	let muki = rand_dir();
	let t = 0;

	waitObj(objEnemy, 120);
	while(eAlive)
	{
		let a2 = 0 + 30*muki;
		let a = rand(0, 360);
		ascent(i in 0 .. way)
		{
			SetFamilier01(CenX, CenY-120, 0, a+i*360/way, muki, a2);
		}
		t++;
		muki = -muki;
		waitObj(objEnemy, wt);
	}
	
	task TWWW()
	{
		waitObj(objEnemy, 120);
		while(eAlive)
		{
			let sy = GetPlayerY;
			WShot(MaxX+32, sy);
			wait(65);
		}
	}
	
	task TKiss()
	{
		while(eAlive)
		{
			SetAction(objEnemy, ACT_SHOT1, 60);
			BossCharge(objEnemy);
			waitObj(objEnemy, 60);
			if (!eAlive) { return; }
			SetAction(objEnemy, ACT_SHOT2, 120);
			waitObj(objEnemy, 60);
			if (!eAlive) { return; }
			HeartShot(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), GetPlayerX, GetPlayerY, ADD_BGW_LIGHT_S_PURPLE, 30);
			CallSound(sndShot6);
			waitObj(objEnemy, wt-120);
		}
	}
}

// 人魂
task SetFamilier01(iniX, iniY, iniSpeed, iniAngle, iniMuki, iniValue)
{
	let timer = 360;
	
	let eSize = ENEMY_M;
	let eColor = EFF_BLUE;
	let baseAngle = iniAngle;
	
	let objFamilier = MakeEnemyFamilier(iniX, iniY, 300, eSize);
	CheckLinkLife_Familier(objEnemy, objFamilier, 0.8);	// ボスと体力連動
	DrawBirdOption(objFamilier, EFF_BLUE, iniAngle, 1);
	TAct();
	WaitForKilledFamilier(objFamilier, 24, 4);
	ZakoFinalize(objFamilier, eColor);
	
	task TAct()
	{
		TMove;
		TShot;
	}
	
	task TMove()
	{
		ascent(t in 0 .. timer)
		{
			if (!CanShotBullet(objFamilier)) { return; }
			let tmp = sin(t/timer*90);
			let tmp2 = sin(t/timer*180);
			baseAngle += (1-tmp*0.75)*1*iniMuki;
			let vr = tmp2*240;
			let vx = vr * cos(baseAngle);
			let vy = vr/2 * sin(baseAngle);
			let pos = Rotate2D_XY(vx, vy, iniValue);
			
			ObjMove_SetPosition(objFamilier, iniX+pos[0], iniY+pos[1]);
			waitObj(objFamilier, 1);
		}
		EraseEnemy(objFamilier);
	}
	
	task TShot()
	{
		let speed = [0.66, 0.75, 0.75, 1.25][Difficult];
		let graphic = [ADD_BGW_FIRE_BLUE, ADD_BGW_FIRE_BLUE, ADD_BGW_FIRE_WHITE, ADD_BGW_FIRE_YELLOW][Difficult];
		let wt = [10, 6, 7, 6][Difficult];
		
		let st = 0;
		let t = 0;
		while(CanShotBullet(objFamilier) && t < timer)
		{
			let sa = iniValue + baseAngle - 90*iniMuki;
			My_CreateShotA2(ObjMove_GetX(objFamilier), ObjMove_GetY(objFamilier),
				0, sa, speed/30, speed, graphic, 15);
			if (Difficult == D_HARD && st%2 == 0)
			{
				My_CreateShotA2(ObjMove_GetX(objFamilier), ObjMove_GetY(objFamilier),
					0, sa, speed/15, speed*2, graphic, 15);
			}
			CallSound(sndShot2);
			t += wt;
			st++;
			waitObj(objFamilier, wt);
		}
	}
}

task WShot(x, y)
{
	let way = 5;
	let sz = 8;
	
	let speed = 2.25;
	let graphic = ADD_BGW_BALL_S_RED;
	loop(3)
	{
		if (!eAlive) { return; }
		WShot_sub;
		wait((way*2-1)*2);
	}
	
	task WShot_sub()
	{
		ascent(i in 0 .. way)
		{
			if (!eAlive) { return; }
			let sx = x;
			let sy = y+(i-(way-1)/2)*sz;
			My_CreateShotA1(sx, sy, speed, 180, graphic, 0);
			CallSound(sndShot3);
			wait(1);
		}
		descent(i in 0 .. way-1)
		{
			if (!eAlive) { return; }
			let sx = x;
			let sy = y+(i-(way-1)/2)*sz;
			My_CreateShotA1(sx, sy, speed, 180, graphic, 0);
			CallSound(sndShot3);
			wait(1);
		}
		ascent(i in 1 .. way)
		{
			if (!eAlive) { return; }
			let sx = x;
			let sy = y+(i-(way-1)/2)*sz;
			My_CreateShotA1(sx, sy, speed, 180, graphic, 0);
			CallSound(sndShot3);
			wait(1);
		}
		descent(i in 0 .. way-1)
		{
			if (!eAlive) { return; }
			let sx = x;
			let sy = y+(i-(way-1)/2)*sz;
			My_CreateShotA1(sx, sy, speed, 180, graphic, 0);
			CallSound(sndShot3);
			wait(1);
		}
	}
}


task HeartShot(x, y, to_x, to_y, graphic, way)
{
	let size = 5;
	let angle = atan2(to_y-y, to_x-x) - 90;
	
	let objBase = CreateShotA1(x, y, 0, 0, graphic, 0);
	SetShotDisabled(objBase);
	Obj_SetVisible(objBase, false);

	ascent(i in 0 .. way)
	{
		let oa = i*180/(way-1);
		let vx = (16*sin(oa)^3);
		let vy = (13*cos(oa)-5*cos(oa*2)-2*cos(oa*3)-cos(oa*4));
		let pos1 = Rotate2D_XY(vx, vy, angle);
		let pos2 = Rotate2D_XY(-vx, vy, angle);
		DeleteShotShot(objBase, pos1[0], pos1[1], size, graphic, 15, i%2==0);
		if (i > 0 || i < way-1) { DeleteShotShot(objBase, pos2[0], pos2[1], size, graphic, 15, i%2==0); }
	}

	wait(30);
	if (Obj_IsDeleted(objBase)) { return; }
	MoveTo(objBase, to_x, to_y, 90);
	wait(90);
	if (Obj_IsDeleted(objBase)) { return; }
	CallSound(sndShot5);
	wait(240);
	Obj_Delete(objBase);
}

task DeleteShotShot(objBase, vx, vy, size, graphic, delay, flgDelete)
{
	let obj = CreateShotA1(ObjMove_GetX(objBase), ObjMove_GetY(objBase), 0, 0, graphic, 0);
	ObjShot_SetIntersectionEnable(obj, false);
	ObjRender_SetColor(obj, 192, 64, 192);
	Obj_SetRenderPriorityI(obj, GetShotRenderPriorityI+1);
	ascent(t in 0 .. 120)
	{
		if (Obj_IsDeleted(obj) || Obj_IsDeleted(objBase)) { return; }
		let tmp = (sin((t+1)/120*180)) * size;
		ObjMove_SetPosition(obj, ObjMove_GetX(objBase)+vx*tmp, ObjMove_GetY(objBase)+vy*tmp);
		wait(1);
	}
	ObjRender_SetColor(obj, 255, 255, 255);
	ObjShot_SetIntersectionEnable(obj, true);
	ascent(t in 0 .. 45)
	{
		if (Obj_IsDeleted(obj) || Obj_IsDeleted(objBase)) { return; }
		let tmp = -(sin((t+1)/45*90)) * size;
		ObjMove_SetPosition(obj, ObjMove_GetX(objBase)+vx*tmp, ObjMove_GetY(objBase)+vy*tmp);

		if (flgDelete)
		{
			let tmp_obj = GetShotIdInCircleA2(ObjMove_GetX(obj), ObjMove_GetY(obj), 12, TARGET_ENEMY);
			ascent(i in 0 .. length(tmp_obj))
			{
				if (ObjShot_GetImageID(tmp_obj[i]) != graphic && !ObjShot_IsSpellResist(tmp_obj[i]))
				{
					ObjMove_SetSpeed(tmp_obj[i], 3);
					ObjMove_SetMaxSpeed(tmp_obj[i], 0);
					ObjMove_SetAcceleration(tmp_obj[i], -3/15);
					ObjMove_SetAngle(tmp_obj[i], atan2(vy,vx)+180+rand(-30,30));
					ObjShot_SetSpellResist(tmp_obj[i], true);
					ObjShot_FadeDelete(tmp_obj[i]);
					CallSound(sndBulletBreak);
				}
			}
		}
		wait(1);
	}
	ObjShot_FadeDelete(obj);
	descent(t in 0 .. 45)
	{
		if (Obj_IsDeleted(obj) || Obj_IsDeleted(objBase)) { return; }
		let tmp = -(sin((t+1)/45*90)) * size;
		ObjMove_SetPosition(obj, ObjMove_GetX(objBase)+vx*tmp, ObjMove_GetY(objBase)+vy*tmp);
		wait(1);
	}
}
