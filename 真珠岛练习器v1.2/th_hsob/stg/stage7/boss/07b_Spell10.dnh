#東方弾幕風[Single]
#ScriptVersion[3]
#Title["スペカ10"]
#Text["スペカ10"]
#Background[""]
#System["./../../../system/System.dnh"]

//---------------------------------------------------------------------

// 関数取り込み
#include"./../../../lib/lib_boss.dnh"
#include"./lib_Mumei.dnh"

let objEnemy2 = -1;

@Event {
	alternative(GetEventType())
	case(EV_REQUEST_LIFE)		{ SetScriptResult(5000);	}
	case(EV_REQUEST_TIMER)		{ SetScriptResult(99);		}
	BossEvent();
}

@Initialize {
	let SPELL_ID = 100;
	let SPELL_NAME = 9;
	
	// アイテム数
	bossDropItem = 0;
	//ダメージ透過率
	dIni_Shot = 100;	// ボムバリアの仕様上、本体複数ある場合は100じゃないと不都合あり
	//防御率再計算
	SetMumeiDefence2();

	//初期設定
	Boss_Init();

	InitMumei();
	// 終了後えへくと自壊
	MumeiEffect_SetDeleteMotion(true);

	objEnemy = CreateBoss(BOSS_ID_MUMEI);	//ボスセット

	//スペカデータ・セット
	SetSpellCardData(GetSpellCardID(SPELL_ID), SPELL_NAME, 
			GetCurrentScriptDirectory()~"07b_Background.dnh",
			GetBossTexture(objEnemy, I_CUTIN), 0.65, CUTMOTION_NORMAL);

	// チャプター開始
	ChapterStartBoss(GetBossID(objEnemy), SPELL_NAME, CHAPTER_SPELL);

	// 使い魔と体力連動
	CheckLinkLife_Boss(objEnemy);

	// 敵ｻﾝ描画用
	objEnemy2 = CreateS10Enemy2();
	
	// バーリアーｗｗｗｗｗ
	TBombBarrierEx(objEnemy);
	TBombBarrierEx(objEnemy2);

	Task_Main();
}

@MainLoop {
	yield;
}

// メインタスク
task Task_Main
{
	let isPrac = (GetPlayMode() == GAME_SPELL || GetPlayMode() == GAME_NONE);

	// ドット絵向き
	TSetFoward(objEnemy);
	TSetFoward(objEnemy2);
	// 位置変数
	Obj_SetValue(objEnemy, "POS_S10", 4);
	Obj_SetValue(objEnemy2, "POS_S10", 0);
	
	if (isPrac)
	{
		standBy(objEnemy, CenX-2, 160, 180);
		MumeiEffect_SetDeleteMotion(true);	// 背負いもの削除モーション付き
		SetMumeiEffect(objEnemy, true);
	}
	else
	{
		standBy(objEnemy, CenX-2, 160, 180);
		LW_TimeStop(60);
		MumeiEffect_SetDeleteMotion(true);	// 背負いもの削除モーション付き
		SetMumeiEffect(objEnemy, true);
	}
	waitObj(objEnemy, 60);
	CallSpellCard(true);	//スペカ起動
	
	// 開幕モーション
	EnterEffectS10();
	EffectChargeSetA(objEnemy, EFF_BLUE, 90);
	EffectChargeSetA(objEnemy2, EFF_RED, 90);
	SetAction(objEnemy, ACT_SHOT1, 90);
	SetAction(objEnemy2, ACT_SHOT1, 90);
	CallSound(sndPower2);
	waitObj(objEnemy, 120);
	
	let count = 0;
	while(eAlive)
	{
		let wt = GetWt();
		alternative(count%6)
		case(0, 2, 3, 5)
		{
			CallSound(sndPower3);
			Shot01(1, ceil(wt*0.5));
		}
		case(1)
		{
			CallSound(sndPower1);
			Shot02(2, wt);
		}
		case(4)
		{
			CallSound(sndPower1);
			Shot03(2, wt);
		}
		count++;
		yield;
	}
	
	function GetWt()
	{
		let wt_base = [90, 135, 90][DifficultEx()];
		let wt_add = [60, 45, 60][DifficultEx()];
		let rate = min(max(0, GetBossTimerRate()*1.2-0.2), GetBossLifeRate(objEnemy));
		return(ceil(rate*wt_add)+wt_base);
	}

}

function Shot01(add_pos, timer)
{
	_Shot(objEnemy, objEnemy2, 0);
	waitObj(objEnemy, timer);
	if (!eAlive) { return; }
	_Shot(objEnemy2, objEnemy, 1);
	waitObj(objEnemy2, timer);
	
	task _Shot(objBoss1, objBoss2, shot_type)
	{
		let act = [ACT_SHOT1, ACT_SHOT4][GetBossID(objBoss1) == BOSS_ID_MUMEI];

		let bpos = GetPos_S10(GetPosID_S10(objBoss1));
		let mpos = GetPos_S10(GetPosID_S10(objBoss1)+add_pos);
		let epos = GetPos_S10(GetPosID_S10(objBoss2));
		AddPosID_S10(objBoss1, add_pos);
		
		let speed = [2.25, 2, 2.25][DifficultEx()];
		let graphic = [BGW_KNIFE_BLUE, BGW_KNIFE_RED][shot_type];
//		let timer = 60;
		let way = [5, 3, 5][DifficultEx()];
		let wt = [10, 15, 10][DifficultEx()];
		
		let px = epos[0];
		let py = epos[1];
		let pr = ((px-(bpos[0]+mpos[0])/2)^2 + (py-(bpos[1]+mpos[1])/2)^2)^0.5;
		let vs = pr / speed;
		let delay = timer;
		
		if (!eAlive) { return; }
		MoveToSlowdown(objBoss1, mpos[0], mpos[1], timer);
		SetAction(objBoss1, act, timer);
		CallSound(sndShot7);
		ascent(i in 0 .. timer)
		{
			if (!eAlive) { break; }
			if (i%wt == 0)
			{
				let tmp = i/(timer-1);
				let sx = bpos[0]*(1-tmp) + mpos[0]*tmp;
				let sy = bpos[1]*(1-tmp) + mpos[1]*tmp;
				let vx = px - sx;
				let vy = py - sy;
				let muki = 1;
				loop(2)
				{
					ascent(i in 0 .. way)
					{
						let pos = Rotate2D_XY(vx, vy, (i-(way-1)/2)*15);
						let obj = My_CreateShotB1(sx+pos[0]/32*muki, sy+pos[1]/32*muki, pos[0]/vs/1000*muki, pos[1]/vs/1000*muki, graphic, 15);
						ObjMove_AddPatternB2(obj, delay, NO_CHANGE, NO_CHANGE, pos[0]/vs/60*muki, pos[1]/vs/60*muki, pos[0]/vs*muki, pos[1]/vs*muki);
					}
					muki = -muki;
				}
			}
			delay--;
			waitObj(objBoss1, 1);
		}
		if (!eAlive) { return; }
		ScaleShotS10(objBoss1, objBoss2, 0);
	}
}
function Shot02(add_pos, timer)
{
	_Shot(objEnemy, objEnemy2, 0);
	waitObj(objEnemy, timer*0.66);
	if (!eAlive) { return; }
	_Shot(objEnemy2, objEnemy, 1);
	waitObj(objEnemy2, timer);
	
	task _Shot(objBoss1, objBoss2, shot_type)
	{
		let bpos = GetPos_S10(GetPosID_S10(objBoss1));
		let mpos = GetPos_S10(GetPosID_S10(objBoss1)+add_pos);
		let epos = GetPos_S10(GetPosID_S10(objBoss2));
		AddPosID_S10(objBoss1, add_pos);
		
//		let timer = 60;
		let count = 4;
		let wt = trunc(timer/(count-0.5));
		let delay = 180;
		
		if (!eAlive) { return; }
		MoveToSlowdown(objBoss1, mpos[0], mpos[1], timer);
		SetAction(objBoss1, ACT_MOVE, timer);
		CallSound(sndShot7);
		ascent(i in 0 .. count)
		{
			let tmp = i/(count-0.5);
			let sx = bpos[0]*(1-tmp) + mpos[0]*tmp;
			let sy = bpos[1]*(1-tmp) + mpos[1]*tmp;
			let sa = atan2(mpos[1]-bpos[1], mpos[0]-bpos[0])+90;
			DishShot(sx, sy, sa, delay);
			delay -= wt;
			waitObj(objBoss1, wt);
		}
		if (!eAlive) { return; }
		ScaleShotS10(objBoss1, objBoss2, 0);
	}

	// お皿単品
	task DishShot(x, y, tubo_angle, tubo_timer)
	{
		let eSize = 12;
		let eLife = 60;
		let objS = PorcelainEnemy(x, y, PORCELAIN_POT, eSize, 90, eLife, 0.8);
		let objImgAll = Obj_GetValueD(objS, "IMAGE_ID_ALL", []);
		let objE = Obj_GetValueD(objS, "E_OBJ", -1);
		TMain();
		
		task TMain()
		{
			TMove();
		}
		task TMove()
		{
			let horming_timer = tubo_timer-60;
			
			ascent(i in 0 .. 60)
			{
				if (Obj_IsDeleted(objS)) { return; }
				let tmp = GetCurve_d((i+1)/60);
				ObjMove_SetPosition(objS, x, y);
				ObjMove_SetAngle(objS, tubo_angle);
				waitObj(objS, 1);
			}
			if (Obj_IsDeleted(objS) || !CheckDispIN(objS, 48)) { Obj_Delete(objS); return; }
			
			let t = 0;
			TShot1(horming_timer);
			while(!Obj_IsDeleted(objS) && t < horming_timer)
			{
				if (Obj_IsDeleted(objS)) { return; }
				let ex = ObjMove_GetX(objS);
				let ey = ObjMove_GetY(objS);
				ObjMove_SetAngle(objS, tubo_angle);
				t++;
				waitObj(objS, 1);
			}
			if (!Obj_IsDeleted(objS))
			{
				// 自壊
				CallSound(sndFreeze);
				EraseEnemy(objE);
			}
			// 反転
			/*
			CallSound(sndBoon);
			ascent(i in 0 .. 45)
			{
				if (Obj_IsDeleted(objS)) { return; }
				let tmp = GetCurve_ad((i+1)/45);
				ObjMove_SetAngle(objS, tubo_angle+180*tmp);
				waitObj(objS, 1);
			}
			if (Obj_IsDeleted(objS)) { return; }
			ObjMove_AddPatternA2(objS, 0, -0.1, NO_CHANGE, -6/90, 0, -6);
			
			let flg = CheckDispIN(objS, -16);
			while(!Obj_IsDeleted(objS))
			{
				let new_flg = CheckDispIN(objS, -16);
				if (!new_flg && flg)
				{
					// 自壊
				//	TUchikaeshi(ObjMove_GetX(objS), ObjMove_GetY(objS), ObjMove_GetAngle(objS));
					CallSound(sndFreeze);
					EraseEnemy(objE);
					break;
				}
				t++;
				flg = new_flg;
				waitObj(objS, 1);
			}
			*/
		}
		task TShot1(timer)
		{
			let speed = 1.5;
			let graphic = ADD_BGW_BALL_M_YELLOW;
			let wt = 15;
			
			let t = 0;
			let st = 0;
			while(!Obj_IsDeleted(objS) && t < timer)
			{
				let ss = speed;
				let fs = ss + t*0.05;
				let sa = ObjMove_GetAngle(objS);
				let sx = ObjMove_GetX(objS) + 32*cos(sa);
				let sy = ObjMove_GetY(objS) + 32*sin(sa);
				My_CreateShotA2(sx, sy, ss+fs, sa+rand(-2,2), -fs/30, ss, graphic, 3);
				CallSound(sndShot1);
				t += trunc(wt);
				wt = 5 + (wt-5)*0.8;
				st++;
				wait(trunc(wt));
			}
		}
	}
}
function Shot03(add_pos, timer)
{
	_Shot(objEnemy, objEnemy2, 0);
	waitObj(objEnemy, timer*0.66);
	if (!eAlive) { return; }
	_Shot(objEnemy2, objEnemy, 1);
	waitObj(objEnemy2, timer);
	
	task _Shot(objBoss1, objBoss2, shot_type)
	{
		let bpos = GetPos_S10(GetPosID_S10(objBoss1));
		let mpos = GetPos_S10(GetPosID_S10(objBoss1)+add_pos);
		let epos = GetPos_S10(GetPosID_S10(objBoss2));
		AddPosID_S10(objBoss1, add_pos);
		
//		let timer = 60;
		let count = [7, 5, 7][DifficultEx()];
		let way_angle = [24, 33, 24][DifficultEx()];
		let delay = 180;
		
		if (!eAlive) { return; }
		MoveToSlowdown(objBoss1, mpos[0], mpos[1], timer);
		SetAction(objBoss1, ACT_MOVE, timer);
		CallSound(sndShot7);
		CallSound(sndBoon);
		
		let ba = atan2(ObjMove_GetY(objBoss2)-bpos[1], ObjMove_GetX(objBoss2)-bpos[0]);
		ascent(i in 0 .. count)
		{
			let tmp = i/count;
			let sx = bpos[0];
			let sy = bpos[1];
			let sa = ba + (i-(count-1)/2)*way_angle;
			DishShot(sx, sy, sa);
		}
		waitObj(objBoss1, timer);
		
		if (!eAlive) { return; }
		ScaleShotS10(objBoss1, objBoss2, 0);
	}

	// お皿単品
	task DishShot(x, y, tubo_angle)
	{
		let eSize = 24;
		let eLife = 90;
		let objS = PorcelainEnemy(x, y, PORCELAIN_DISH, eSize, 45, eLife, 0.8);
		let objImgAll = Obj_GetValueD(objS, "IMAGE_ID_ALL", []);
		let objE = Obj_GetValueD(objS, "E_OBJ", -1);
		TMain();
		
		task TMain()
		{
			TMove();
		}
		task TMove()
		{
			ObjMove_AddPatternA2(objS, 0, 3, tubo_angle, -3/30, 0, 0);
			ObjMove_AddPatternA2(objS, 45, NO_CHANGE, NO_CHANGE, 3/240, 0, 3);
		}
	}
}

task ScaleShotS10(objBoss1, objBoss2, shot_type)
{
	if (!eAlive) { return; }
	let act = [ACT_SHOT2, ACT_SHOT2][GetBossID(objBoss1) == BOSS_ID_MUMEI];
	CallSound(sndShot2);
	SetAction(objBoss1, act, 60);
	
	let eType = (objBoss1 == objEnemy);
	let speed = [2, 1.5, 2][DifficultEx()];
	let angle = atan2(ObjMove_GetY(objBoss2)-ObjMove_GetY(objBoss1), ObjMove_GetX(objBoss2)-ObjMove_GetX(objBoss1));
	let way = [12, 8, 12][DifficultEx()];
	let way_angle = 180;
	let count = [6, 4, 6][DifficultEx()];
	let graphic = [BGW_SCALE_RED, BGW_SCALE_BLUE][eType];
	ascent(i in 0 .. count)
	{
		let sx = ObjMove_GetX(objBoss1);
		let sy = ObjMove_GetY(objBoss1);
		ascent(j in 0 .. way)
		{
			let sa = angle + (j-(way-1)/2)/way*way_angle;
			let fs = speed * (1+0.125*i);
			let ss = 1.5 - 0.1*i;
			let objS = My_CreateShotA2(sx, sy, fs, sa, -fs/45, fs/12, graphic, 15);
			ObjMove_AddPatternA2(objS, 45, NO_CHANGE, NO_CHANGE, ss/120, 0, ss);
		}
	}
}


// 開幕モーション
function EnterEffectS10()
{
	ascent(i in 0 .. 5)
	{
		ascent(j in 0 .. i+1)
		{
			let ex = MaxX-32 - 54*i + 54*j;
			let ey = MinY+32 + 54*j;
			TargetEffectDelay(ex, ey, 60, 60, 0.85, 30+i*5);
		}
	}
	SetAction(objEnemy, ACT_SHOT2, 120);
	waitObj(objEnemy, 120);
	MoveToSlowdown(objEnemy2, CenX+64, 120, 45);
	SetAction(objEnemy2, ACT_SHOT2, 75);
	waitObj(objEnemy, 30);
	MoveToSlowdown(objEnemy, CenX-32, 180, 15);
	SetAction(objEnemy, ACT_SHOT1, 45);
	CallSound(sndMetal);
	CallSound(sndCrash);
	
	// ショット
	let s_count = [5, 3, 5][DifficultEx()];
	let s_speed = [1, 0.9, 1][DifficultEx()];
	let way = [24, 15, 24][DifficultEx()];
	ascent(j in 0 .. s_count)
	{
		ascent(i in 0 .. 2)
		{
			let sx = CenX+16;
			let sy = 160;
			let ss = (1+j*0.15) * s_speed;
			let sa = 135 + i*180;
			let graphic = [BGW_SCALE_BLUE, BGW_SCALE_RED][i];
			CreateShotWayA2(sx, sy, ss*3, sa, -ss/30, ss, graphic, 15, way, 180/way, 0);
		}
	}
	// 斬撃
	ascent(t in 0 .. 15)
	{
		if (!eAlive) { return; }
		ascent(i in 0 .. 2)
		{
			let tmp = t/14;
			let sx = CenX+16;
			let sy = 160;
			let ss = 32-tmp*16;
			let sa = 45 + i*180;
			let graphic = [BGW_FIRE_BLUE, BGW_FIRE_RED][i];
			let col = [[64,64,255], [255,64,64]][i];
			let lw = 16+tmp*64;

			let objL = CreateLooseLaserA1(sx, sy, ss, sa, 600, lw, graphic, 0);
			ObjLaser_SetIntersectionWidth(objL, lw*0.4);
			ObjLaser_SetInvalidLength(objL, 120, 180);
			ObjRender_SetColor(objL, col[0], col[1], col[2]);
		}
		yield;
	}
	waitObj(objEnemy, 30);

	MoveToSlowdown(objEnemy, CenX-132, CenY, 60);
	MoveToSlowdown(objEnemy2, CenX+132, CenY, 60);
	SetAction(objEnemy, ACT_MOVE, 60);
	SetAction(objEnemy2, ACT_MOVE, 60);
	waitObj(objEnemy, 30);
}
// 描画用
function CreateS10Enemy2()
{
	let objBoss = MakeEnemy(MaxX+128, MinY-128, 9999999, ENEMY_S);
	Boss_SetIDtoObj(objBoss, BOSS_ID_MUMEI2);
	Boss_AnimeTimer(objBoss);
	BossAnime_Initialize(objBoss);
	SetEffectResist(objBoss, bossResistEffect);	// 状態異常耐性
	SetTimeResist(objBoss, bossResistTime);	// 停止耐性
//	SetMumeiEffect(objBoss, false);
	FamilierEffect_LinkLifeCircle(objBoss, objEnemy, 72);
	CheckLinkLife_Familier(objEnemy, objBoss, 1);
	_CreateS10Enemy2(objBoss);
	return(objBoss);
	
	task _CreateS10Enemy2(objBoss)
	{
		_CheckAlive(objBoss);
		wait(60);
		SetMumeiEffect(objBoss, false);	// フラグ反映を遅らせるためにこっちへ

		let hs = Obj_GetValueD(objEnemy, "HIT_TO_SHOT", bossHitToShot);
		let hp = Obj_GetValueD(objEnemy, "HIT_TO_PL", bossHitToPlayer);
		WaitForKilledFamilier(objBoss, hs, hp);
	}
	
	task _CheckAlive(objBoss)
	{
		while(eAlive)
		{
			yield;
		}
		if (!Obj_IsDeleted(objBoss))
		{
			BossFinalExplode(objBoss, bossBigExplode);
			Obj_Delete(objBoss);
		}
	}
}

// 常に真ん中を向く
task TSetFoward(objBoss)
{
	let objImg = GetBossImageID(objBoss);
	let muki = [-1, 1][GetBossID(objBoss) == BOSS_ID_MUMEI];
	
	while(!Obj_IsDeleted(objBoss))
	{
		if (ObjMove_GetX(objBoss) < CenX)
		{
			ObjRender_SetScaleX(objImg, muki);
		}
		else
		{
			ObjRender_SetScaleX(objImg, -muki);
		}
		yield;
	}
}

// 配置用
function GetPosID_S10(objBoss)
{
	return(Obj_GetValueD(objBoss, "POS_S10", 0));
}
function AddPosID_S10(objBoss, val)
{
	Obj_SetValue(objBoss, "POS_S10", (GetPosID_S10(objBoss)+val)%8);
}
function GetPos_S10(id)
{
	id %= 8;
	let pos = [
		[CenX+132, CenY],
		[CenX+132, CenY+172],
		[CenX+1, CenY+172],
		[CenX-132, CenY+172],
		[CenX-132, CenY],
		[CenX-132, CenY-172],
		[CenX-1, CenY-172],
		[CenX+132, CenY-172]
	];
	return(pos[id]);
}

// ラスワ開幕モーション
task LW_TimeStop(timer)
{
	// タイマー停止
	ObjEnemyBossScene_SetSpellTimer(objScene, -1);
	wait(timer);
	// タイマー開始
	ObjEnemyBossScene_SetSpellTimer(objScene, ObjEnemyBossScene_GetInfo(objScene, INFO_ORGTIMERF));
}
