#東方弾幕風[Single]
#ScriptVersion[3]
#Title["スペカ1"]
#Text["スペカ1"]
#Background[""]
#System["./../../../system/System.dnh"]

//---------------------------------------------------------------------

// 関数取り込み
#include"./../../../lib/lib_boss.dnh"
#include"./lib_Mumei.dnh"

@Event {
	alternative(GetEventType())
	case(EV_REQUEST_LIFE)		{ SetScriptResult(525);	}
	case(EV_REQUEST_TIMER)		{ SetScriptResult(90);		}
	BossEvent();
}

@Initialize {
	let SPELL_ID = 91;
	let SPELL_NAME = 0;
	
	// アイテム数
	if (IsRainbow())	{ bossDropItem = 400; }
	else			{ bossDropItem = 150; }

	//ダメージ透過率
	dIni_Shot = 10;
	//防御率再計算
	SetMumeiDefence();

	//初期設定
	Boss_Init();

	objEnemy = CreateBoss(BOSS_ID_MUMEI);	//ボスセット

	InitMumei();

	//スペカデータ・セット
	SetSpellCardData(GetSpellCardID(SPELL_ID), SPELL_NAME, 
			GetCurrentScriptDirectory()~"07b_Background.dnh",
			GetBossTexture(objEnemy, I_CUTIN), 0.65, CUTMOTION_NORMAL);

	// チャプター開始
	ChapterStartBoss(GetBossID(objEnemy), SPELL_NAME, CHAPTER_SPELL);

	// 使い魔と体力連動
	CheckLinkLife_Boss(objEnemy);
	
	// バーリアーｗｗｗｗｗ
	TBombBarrierEx(objEnemy);

	Task_Main();
}

@MainLoop {
	yield;
}

// メインタスク
task Task_Main
{
	if (MumeiEffect_GetContinue())
	{
		standBy(objEnemy, CenX, CenY-80, 120);
		SetMumeiEffect(objEnemy, false);
		waitObj(objEnemy, 60);
	}
	else
	{
		standBy(objEnemy, CenX, CenY-80, 120+90);
		waitObj(objEnemy, 60);
		SetMumeiEffect(objEnemy, false);
		SetAction(objEnemy, ACT_SHOT2, 120);
		waitObj(objEnemy, 90);
	}
	CallSpellCard(true);	//スペカ起動
	waitObj(objEnemy, 60);
	
	let t = 0;
	let muki = 1;
	

	while(eAlive)
	{
		local
		{
			BossCharge(objEnemy);
			ascent(i in 0 .. 3)
			{
				let ex = CenX+(i-1)*280;
				let ey = MinY - 64;
				let ea = 90+(i-1)*45;
				let es = 1 + 2*absolute(i-1);
				SetDragonFirst(ex, ey, es, ea, -(i-1)*0.25);
			}
			SetAction(objEnemy, ACT_SHOT1, 180);
			CallSound(sndBoon);
		}
		waitObj(objEnemy, 180);
		if (!eAlive) { return; }
		SetAction(objEnemy, ACT_SHOT3, 240);
		waitObj(objEnemy, 45);
		if (!eAlive) { return; }
		DisplayShake(45, 24);
		waitObj(objEnemy, 45);
		if (!eAlive) { return; }
		DisplayShake(240, 3);
		waitObj(objEnemy, 420-180-90);
		if (!eAlive) { return; }
		BossCharge(objEnemy);
		SetAction(objEnemy, ACT_SHOT2, 120);
		waitObj(objEnemy, 60);
		ascent(j in 0 .. 4)
		{
			if (!eAlive) { return; }
			SetAction(objEnemy, ACT_SHOT1, 120);

			let wt =  [90, 75, 60, 45][j];
			let wt2 = [30, 45, 60, 0][j];
			ascent(i in 0 .. 3)
			{
				if (!eAlive) { return; }
				let ea = 90 - 120*muki + i*90*muki;
				SetDragonPlayer(320, ea, -muki);
				CallSound(sndBoon);
				wait(wt);
				//waitObj(objEnemy, wt);
			}
			muki = -muki;
			waitObj(objEnemy, wt2);
		}

		if (!eAlive) { return; }
		BossCharge(objEnemy);
		SetAction(objEnemy, ACT_SHOT1, 240);
		waitObj(objEnemy, 120);

		muki = -muki;
	}
}

task SetDragonFirst(x, y, speed, angle, add_angle)
{
	let objS = CreateDragonShot(x, y, 12, 8, 15);
	ObjMove_AddPatternA2(objS, 0, speed, angle, -speed/120, 0, 0.001);
	ObjMove_AddPatternA2(objS, 300, NO_CHANGE, NO_CHANGE, 6/120, add_angle, 6);
	ObjShot_SetDeleteFrame(objS, 300+240);
	wait(120);
	if (Obj_IsDeleted(objS)) { return; }
	CallSound(sndPower1);
	MoveHorming02(objS, 1, 60, 90);
	EffectChargeSetA(objS, EFF_SKY, 90);
	TLaser(105);
	wait(105);
	if (Obj_IsDeleted(objS)) { return; }
	CallSound(sndMasterSpark);
	TShot(240);
	
	task TLaser(timer)
	{
		let lc = EFF_WHITE;
		let alpha = 255;
		
		let objL = ObjPrim_Create(OBJ_SPRITE_2D);
		Obj_SetRenderPriorityI(objL, GetShotRenderPriorityI()-2);
		ObjPrim_SetTexture(objL, imgEffectBullet);
		ObjRender_SetBlendType(objL, BLEND_ADD_ARGB);
		ObjSprite2D_SetSourceRect(objL, 1+32*lc, 66, 31+32*lc, 94);
		ObjSprite2D_SetDestRect(objL, -6, 0, 6, 640);
		
		let lr = 0;
		let t = 0;
		while(!Obj_IsDeleted(objL) && !Obj_IsDeleted(objS) && alpha > 0)
		{
			let ex = ObjMove_GetX(objS);
			let ey = ObjMove_GetY(objS);
			let tubo_angle = ObjMove_GetAngle(objS);
			// 予告レーザー
			ObjRender_SetPosition(objL, ex+lr*cos(tubo_angle), ey+lr*sin(tubo_angle), 0);
			ObjRender_SetAngleZ(objL, tubo_angle-90);
			ObjRender_SetAlpha(objL, min(alpha, t*10));
			ObjRender_SetScaleX(objL, (sin(t*90)+1.5)/2.5);
			if (t > timer)
			{
				alpha -= 5;
			}
			t++;
			yield;
		}
		Obj_Delete(objL);
	}

	task TShot(timer)
	{
		let wt = 1;
		let lr = 64;
		
		let t = 0;
		while(!Obj_IsDeleted(objS) && t < timer)
		{
			if (t%wt == 0)
			{
				let tmp = t/timer;
				let tubo_angle = ObjMove_GetAngle(objS);
				let sx = ObjMove_GetX(objS)+lr*cos(tubo_angle);
				let sy = ObjMove_GetY(objS)+lr*sin(tubo_angle);
				let ss = 4 + tmp*32;
				let sa = tubo_angle+rand(-15,15)*(0.2+0.8*tmp);
				let sa2 = tubo_angle+rand(-15,15)*(2-1*tmp);
				let objL = My_CreateLooseLaserA1(sx, sy, ss, sa, 256, 64, BGW_BALL_M_SKY, 2);
				let objL2 = CreateLooseLaserA1(sx, sy, ss, sa2, 256, 256, BGW_BALL_M_SKY, 0);
				ObjRender_SetColor(objL2, 0, 4, 16);
				ObjShot_SetIntersectionEnable(objL2, false);
			}
			t++;
			yield;
		}
	}
}

task SetDragonPlayer(r, angle, muki)
{
	let timer = 360;
//	let r = 284;
	let x = GetPlayerX + r*cos(angle);
	let y = GetPlayerY + r*sin(angle);
	
	let graphic = ADD_BGW_FIRE_BLUE;
	let wt = 2;
	let shot_enable = [true, false, true][DifficultEx()];
	
	let add_a = -150;
	let a_speed = 2;
	let a_flg = 0;
	let objS = CreateDragonShot(x+r*cos(angle+180+add_a*muki), y+r*sin(angle+180+add_a*muki), 12, 8, 15);
	
	// 警告えへくと
	ascent(i in 0 .. 32)
	{
		let ea = angle+180 + (-150 + 300*i/32)*muki;
		let ex = x+r*cos(ea);
		let ey = y+r*sin(ea);
		if (CheckDispINEx(ex, ey, 0))
		{
			TargetEffectDelay(ex, ey, 30, 45, 1, i*3);
		}
	}

	let st = 0;
	while(!Obj_IsDeleted(objS) && add_a < 180)
	{
		let va = angle+180 + add_a*muki;
		ObjMove_SetPosition(objS, x+r*cos(va), y+r*sin(va));
		if (a_flg <= 0)
		{
			a_speed = max(0.5, a_speed-1/60);
			if (CheckDispIN(objS, 64))
			{
				a_flg++;
			}
		}
		else if (a_flg <= 1)
		{
			a_speed = max(0.01, a_speed-1/5);
			if (a_speed <= 0.01)
			{
				a_flg++;
			}
		}
		else
		{
			if (shot_enable && st > 30 && st%wt == 0)
			{
				let vr = rand(16,32);
				let sx = ObjMove_GetX(objS) + 64*cos(va+90*muki);
				let sy = ObjMove_GetY(objS) + 64*sin(va+90*muki);
				if (CheckDispINEx(sx, sy, 64))
				{
					let sa = va + rand(-15,15);
					let ss = 3;
					My_CreateShotA2(sx, sy, 0, sa, ss/120, ss, graphic, 15);
				//	My_CreateShotA2(sx, sy, 0, sa+180, ss/120, ss, graphic, 15);
				}
			}
			a_speed = min(3, a_speed+1/120);
			st++;
		}
		add_a += a_speed;
		yield;
	}
	waitObj(objS, 120);
	Obj_Delete(objS);

}

function CreateDragonShot(x, y, count, delay, shot_delay)
{
	let obj = CreateShotA1(x, y, 0, 0, BGW_BALL_M_WHITE, 0);
	SetShotDisabled(obj);
	ObjShot_SetAutoDelete(obj, false);
	Obj_SetVisible(obj, false);

	DragonShotSingle2(obj, [0,0.5], [-15,30], 48, PORCELAIN_KNIFE_R, 0, shot_delay);
	DragonShotSingle2(obj, [0,-0.5], [15,-30], 48, PORCELAIN_KNIFE, 0, shot_delay);
	DragonShotSingle(obj, x, y, 14, PORCELAIN_POT, count, delay, shot_delay, true);
	return(obj);
}

task DragonShotSingle(objParent, x, y, s_size, graphic, count, delay, shot_delay, is_first)
{
	let tmp_s_size = s_size;
	if (graphic == PORCELAIN_POT) { tmp_s_size *= 1.66; }
	let objS = PorcelainEnemy(x, y, graphic, tmp_s_size, shot_delay, 99999, 0.8);
	ObjShot_SetAutoDelete(objS, false);
	if (count > 0) { NextShot(ObjMove_GetX(objParent), ObjMove_GetY(objParent), delay); }
	
	let beforeX = ObjMove_GetX(objParent);
	let beforeY = ObjMove_GetY(objParent);
	while(!Obj_IsDeleted(objS) && !Obj_IsDeleted(objParent))
	{
		let r = ((ObjMove_GetX(objS)-beforeX)^2 + (ObjMove_GetY(objS)-beforeY)^2)^0.5;
		let a = atan2(beforeY-ObjMove_GetY(objS), beforeX-ObjMove_GetX(objS));
		if (!is_first) { r = max(0, r-tmp_s_size)/4; }
		if (r > 0)
		{
			ObjMove_SetDestAtFrame(objS, ObjMove_GetX(objS)+r*cos(a), ObjMove_GetY(objS)+r*sin(a), 1);
		}
		beforeX = ObjMove_GetX(objParent);
		beforeY = ObjMove_GetY(objParent);
		waitObj(objS, 1);
	}
	Obj_Delete(objS);
	
	task NextShot(x, y, delay)
	{
		waitObj(objS, delay);
		if (Obj_IsDeleted(objParent) || !eAlive) { return; }
		DragonShotSingle(objS, x, y, s_size-0.75, PORCELAIN_FRAGMENT, count-1, delay, shot_delay, false);
	}
}
task DragonShotSingle2(objParent, offset_pos, offset_a, s_size, graphic, delay, shot_delay)
{
	let ex = [ObjMove_GetX(objParent)];
	let ey = [ObjMove_GetY(objParent)];
	CheckPosition(objParent, delay);
	waitObj(objParent, delay);
	if (!eAlive) { return; }
	
	let objS = PorcelainEnemy(ex[0], ey[0], graphic, s_size, shot_delay, 999999, 0.8);
	ObjShot_SetAutoDelete(objS, false);
	
	let t = 0;
	let beforeX = ex[0];
	let beforeY = ey[0];
	while(!Obj_IsDeleted(objS) && length(ex) > 0)
	{
		let tmp = GetCurve_d(min(1, t/240));
		let oa = offset_a[0] + offset_a[1]*tmp;
		let ea = atan2(ey[0]-beforeY,ex[0]-beforeX)+oa;
		let opos = Rotate2D_XY(offset_pos[0]+1, offset_pos[1], ea);
		ObjMove_SetAngle(objS, ea);
		ObjMove_SetPosition(objS, ex[0]+opos[0]*s_size, ey[0]+opos[1]*s_size);
		beforeX = ex[0];
		beforeY = ey[0];
		t++;
		waitObj(objS, 1);
	}
	
	task CheckPosition(objParent, delay)
	{
		while(length(ex) > 0)
		{
			if (!Obj_IsDeleted(objParent))
			{
				ex = ex ~ [ObjMove_GetX(objParent)];
				ey = ey ~ [ObjMove_GetY(objParent)];
			}
			if (length(ex) > delay || Obj_IsDeleted(objParent))
			{
				ex = erase(ex, 0);
				ey = erase(ey, 0);
			}
			waitObj(objParent, 1);
		}
		Obj_Delete(objS);
	}
}
