#東方弾幕風[Single]
#ScriptVersion[3]
#Title["通常5"]
#Text["通常5"]
#Background[""]
#System["./../../../system/System.dnh"]

//---------------------------------------------------------------------

// 関数取り込み
#include"./../../../lib/lib_boss.dnh"
#include"./lib_Mumei.dnh"

@Event {
	alternative(GetEventType())
	case(EV_REQUEST_LIFE)		{ SetScriptResult(3400);	}
	case(EV_REQUEST_TIMER)		{ SetScriptResult(60);		}
	BossEvent();
}

@Initialize {

	// アイテム数
	if (IsRainbow())	{ bossDropItem = 150; }
	else			{ bossDropItem = 50; }

	//防御率再計算
	SetMumeiDefence();

	Boss_Init();	//初期設定
	objEnemy = CreateBoss(BOSS_ID_MUMEI);	//ボスセット

	// 初期化前に背負いもの強制リセット
	MumeiEffect_SetContinue(0);

	InitMumei();

	// チャプター開始
	ChapterStartBoss(GetBossID(objEnemy), 5, CHAPTER_BOSS);

	// 使い魔と体力連動
	CheckLinkLife_Boss(objEnemy);

	Task_Main();
}

@MainLoop {
	yield;
}



// メインタスク
task Task_Main
{
	standBy(objEnemy, CenX, 160, 300);
	
	// --- モードチェンジえへくと群
	CallSound(sndExDown);
	local
	{
		let timer = 33;
		let size = 8;
		ascent (i in 0 .. 30)
		{
			let bx = ObjMove_GetX(objEnemy);
			let by = ObjMove_GetY(objEnemy);
			_BossFinalExplodeB(bx, by,
				randEffect(0,360), timer, randEffect(0,size^2)^0.5, randEffect(64,160), randEffect(64,160), randEffect(64,160));
			waitObj(objEnemy, 1);
		}
	}
	waitObj(objEnemy, 60);
	SetMumeiEffect(objEnemy, true);
	SetAction(objEnemy, ACT_SHOT4, 120);
	waitObj(objEnemy, 60);
	SetAction(objEnemy, ACT_SHOT2, 120);
	CallSound(sndPower3);
	EffectConcentrationPointEx(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), objEnemy,
		[192,64,64], 15, 1, 300, 75);
	waitObj(objEnemy, 60);
	SetAction(objEnemy, ACT_SHOT3, 120);
	CallSound(sndFlare);
	EffectExplodeCloudSet(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 18, [80,32,0], 60, 15);
	DisplayShake(30, 18);
	waitObj(objEnemy, 120);
	// --- モードチェンジえへくと群

	Shot1();
	
	task Shot1()
	{
		let way = 5;
		let wt = [180, 180, 180][DifficultEx()];
		let wt_min = [60, 120, 60][DifficultEx()];
		let D = -1;
		
		let count = 0;
		while(eAlive)
		{
			SetAction(objEnemy, ACT_SHOT2, 120);
			CallSound(sndBoon);
			let st = 0;
			ascent(i in 0 .. way)
			{
				let tmp = i-(way-1)/2;
				let ex = ObjMove_GetX(objEnemy) + tmp*84*D;
				let ey = ObjMove_GetY(objEnemy) + absolute(tmp)*48 - 128;
				if (i != 2) { DishShot(ex, ey, -tmp*45*D, 0); st++; }
//				if (i != 2) { DishShot(ex, ey, -tmp*45*D, st*15); st++; }
			}
			waitObj(objEnemy, 120);
			if (!eAlive) { return; }
			EnemyRandomMove(objEnemy, 160, 64);
			waitObj(objEnemy, 60);
			if (!eAlive) { return; }
			EnemyRandomMove(objEnemy, 160, 64);
			waitObj(objEnemy, wt);
			wt = max(wt_min, wt-60);
			D = -D;
			count++;
		}
	}
}

// お皿単品
task DishShot(x, y, tubo_offset, tubo_delay)
{
	let eSize = 22;
	let eLife = 150;
	let eLifeB = 120;
	let objS = PorcelainEnemy(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), PORCELAIN_POT, eSize, 120, eLife, 0.8);
	let objImgAll = Obj_GetValueD(objS, "IMAGE_ID_ALL", []);
	let objE = Obj_GetValueD(objS, "E_OBJ", -1);
	TMain();
	
	task TMain()
	{
		TMove();

		/*
		while(!Obj_IsDeleted(objS))
		{
			if (!Obj_IsDeleted(objE))
			{
				if (ObjEnemy_GetInfo(objE, INFO_LIFE) <= eLife-eLifeB)
				{
					TUchikaeshi(ObjMove_GetX(objS), ObjMove_GetY(objS), ObjMove_GetAngle(objS));
					CallSound(sndFreeze);
					EraseEnemy(objE);
					break;
				}
			}
			waitObj(objS, 1);
		}
		*/
	}
	task TMove()
	{
	//	let tubo_offset = 0;
		let tubo_angle = atan2(GetPlayerY-y, GetPlayerX-x) + tubo_offset;
		let horming_power = 1/30;
		let horming_timer = 180;
		
		ascent(i in 0 .. 90)
		{
			if (Obj_IsDeleted(objS)) { return; }
			let tmp = GetCurve_d((i+1)/90);
			ObjMove_SetPosition(objS, ObjMove_GetX(objEnemy)*(1-tmp)+x*tmp, ObjMove_GetY(objEnemy)*(1-tmp)+y*tmp);
			tubo_angle = GetTuboHormingAngle(ObjMove_GetX(objS), ObjMove_GetY(objS), tubo_angle, horming_power/2);
			ObjMove_SetAngle(objS, tubo_angle);
			waitObj(objS, 1);
		}
		if (Obj_IsDeleted(objS) || !CheckDispIN(objS, 48)) { Obj_Delete(objS); return; }
		TShot1(horming_timer);
	
		let t = 0;
		while(!Obj_IsDeleted(objS) && t < horming_timer)
		{
			if (Obj_IsDeleted(objS)) { return; }
			let ex = ObjMove_GetX(objS);
			let ey = ObjMove_GetY(objS);
			let hp = horming_power * min(1, (1-t/horming_timer)*4);
			tubo_angle = GetTuboHormingAngle(ex, ey, tubo_angle, hp);
			ObjMove_SetAngle(objS, tubo_angle);
			t++;
			waitObj(objS, 1);
		}
		
		if (Obj_IsDeleted(objS)) { return; }
		// 反転
		CallSound(sndBoon);
		let add_angle = (270-tubo_angle)%360;
		if (add_angle > 180) { add_angle -= 360; }
		ascent(i in 0 .. 45)
		{
			if (Obj_IsDeleted(objS)) { return; }
			let tmp = GetCurve_ad((i+1)/45);
			ObjMove_SetAngle(objS, tubo_angle+add_angle*tmp);
			waitObj(objS, 1);
		}
		
		if (Obj_IsDeleted(objS)) { return; }
		CallSound(sndBoon);
		waitObj(objS, tubo_delay);
		if (Obj_IsDeleted(objS)) { return; }
		ObjMove_AddPatternA2(objS, 0, NO_CHANGE, NO_CHANGE, -6/120, 0, -6);
		TShot2(180);
		
		let flg = CheckDispIN(objS, -16);
		while(!Obj_IsDeleted(objS))
		{
			let new_flg = CheckDispIN(objS, -16);
			if (!new_flg && flg)
			{
				// 自壊
				TUchikaeshi(ObjMove_GetX(objS), ObjMove_GetY(objS), ObjMove_GetAngle(objS));
				CallSound(sndFreeze);
				EraseEnemy(objE);
				break;
			}
			flg = new_flg;
			waitObj(objS, 1);
		}
	}
	task TShot1(timer)
	{
		let timer_start = timer * [0, 0.25, 0][DifficultEx()];
		let speed = [1.5, 1.5, 1.5][DifficultEx()];
		let fs_base = [12, 6, 12][DifficultEx()];
		let graphic = ADD_BGW_BALL_M_YELLOW;
		let wt = [15, 20, 15][DifficultEx()];
		
		let t = 0;
		let st = 0;
		while(!Obj_IsDeleted(objS) && t < timer)
		{
			if (t >= timer_start)
			{
				let ss = speed;
				let fs = fs_base * (t/timer);
				let sa = ObjMove_GetAngle(objS);
				let sx = ObjMove_GetX(objS) + 32*cos(sa);
				let sy = ObjMove_GetY(objS) + 32*sin(sa);
				My_CreateShotA2(sx, sy, ss+fs, sa+rand(-2,2), -fs/30, ss, graphic, 3);
				CallSound(sndShot1);
			}
			t += trunc(wt);
			wt = 5 + (wt-5)*0.8;
			st++;
			wait(trunc(wt));
		}
	}
	task TShot2(timer)
	{
		let speed = 1.5;
		let graphic = ADD_BGW_BALL_M_RED;
		let wt = 3;
		
		let t = 0;
		let st = 0;
		while(!Obj_IsDeleted(objS) && t < timer)
		{
			let ss = speed;
			let fs = 12 * (t/timer);
			let sa = ObjMove_GetAngle(objS);
			let sx = ObjMove_GetX(objS) + 32*cos(sa);
			let sy = ObjMove_GetY(objS) + 32*sin(sa);
			let ra = t/timer * 30;
			My_CreateShotA2(sx, sy, ss+fs, sa+rand(-ra,ra), -fs/30, ss, graphic, 3);
			CallSound(sndShot1);
			t += trunc(wt);
			st++;
			wait(wt);
		}
	}
	task TUchikaeshi(x, y, angle)
	{
		if (eAlive)
		{
			let speed = [3, 2, 3][DifficultEx()];
			let sway = [7, 4, 7][DifficultEx()];
			// ショットも発射
			ascent(i in 0 .. 4)
			{
				let pos1 = [speed*cos(angle+i*90), speed*sin(angle+i*90)];
				let pos2 = [speed*cos(angle+(i+1)*90), speed*sin(angle+(i+1)*90)];
				ascent(j in 0 .. sway)
				{
					let tmp = j/(sway-1);
					let vx = pos1[0]*(1-tmp) + pos2[0]*tmp;
					let vy = pos1[1]*(1-tmp) + pos2[1]*tmp;
					let objS = My_CreateShotB2(x, y, vx, vy, -vx/30, -vy/30, vx/8, vy/8, BGW_CHRYSTAL_M_WHITE, 15);
					ObjMove_AddPatternB2(objS, 45, NO_CHANGE, NO_CHANGE, vx/360, vy/360, vx, vy);
				//	Obj_SetRenderPriorityI(objS, GetShotRenderPriorityI-1);
				}
			}
		}
	}

	function GetTuboHormingAngle(x, y, angle, horming_power)
	{
		let to_angle = atan2(GetPlayerY-y, GetPlayerX-x);
		let tmp = (angle-to_angle)%360;
		if (tmp > 180) { tmp -= 360; }
		tmp *= horming_power;
		return(angle-tmp);
	}
}
