#東方弾幕風[Single]
#ScriptVersion[3]
#Title["通常7"]
#Text["通常7"]
#Background[""]
#System["./../../../system/System.dnh"]

//---------------------------------------------------------------------

// 関数取り込み
#include"./../../../lib/lib_boss.dnh"
#include"./lib_Mumei.dnh"

@Event {
	alternative(GetEventType())
	case(EV_REQUEST_LIFE)		{ SetScriptResult(3400);	}
	case(EV_REQUEST_TIMER)		{ SetScriptResult(60);		}
	BossEvent();
}

@Initialize {

	// アイテム数
	if (IsRainbow())	{ bossDropItem = 150; }
	else			{ bossDropItem = 50; }

	//防御率再計算
	SetMumeiDefence();

	Boss_Init();	//初期設定
	objEnemy = CreateBoss(BOSS_ID_MUMEI);	//ボスセット

	InitMumei();

	// チャプター開始
	ChapterStartBoss(GetBossID(objEnemy), 7, CHAPTER_BOSS);

	// 使い魔と体力連動
	CheckLinkLife_Boss(objEnemy);

	Task_Main();
}

@MainLoop {
	yield;
}



// メインタスク
task Task_Main
{
	let D = [1, -1][CenX < ObjMove_GetX(objEnemy)];
	
	SetMumeiEffect(objEnemy, true);
	SetMumeiEffect_v2(objEnemy, true, 60);
	standBy(objEnemy, CenX, 160, 120);
	waitObj(objEnemy, 60);
	SetAction(objEnemy, ACT_SHOT1, 120);
//	standBy(objEnemy, CenX-128*D, 128, 60);
	waitObj(objEnemy, 60);
	BossChargeFire(objEnemy);
	waitObj(objEnemy, 60);
	Shot1();
	
	task Shot1()
	{
		
		let count = 0;
		
		local
		{
			if (!eAlive) { return; }
			let ba = GetAngleToPlayer(objEnemy);
			let way = 4;
			let wt = 4;
			SetAction(objEnemy, ACT_SHOT3, 90);
			ascent(i in 0 .. way)
			{
				if (!eAlive) { return; }
				let tmp = i-(way-1)/2;
				let tmpD = D;
				loop(2)
				{
					let ea = ba + (-120+i/(way-1)*105)*tmpD;
					let ex = ObjMove_GetX(objEnemy) + 96*cos(ea);
					let ey = ObjMove_GetY(objEnemy) + 96*sin(ea);
					let delay = 75;
					tmpD = -tmpD;
					DishShot(ex, ey, ea, delay, true);
				}
				waitObj(objEnemy, 10);
			}
			waitObj(objEnemy, 120);
			if (!eAlive) { return; }
			MoveToSlowdown(objEnemy, CenX+128*D, 160, 60);
			SetAction(objEnemy, ACT_MOVE, 60);
			waitObj(objEnemy, 60);
			D = -D;
		}
		
		while(eAlive)
		{
			local
			{
				CallSound(sndPower3);
				waitObj(objEnemy, 60);
				loop(2)
				{
					if (!eAlive) { return; }
					MoveToSlowdown(objEnemy, CenX+128*D, 160, 90);
					SetAction(objEnemy, ACT_MOVE, 90);
					CallSound(sndBoon);
					let ba = 90 + 30*D;
					let way = 10;
					ascent(i in 0 .. way)
					{
						if (!eAlive) { return; }
						let tmp = i-(way-1)/2;
						let ea = ba + (-i*180/way)*D;
						let ex = ObjMove_GetX(objEnemy) + 96*cos(ea);
						let ey = ObjMove_GetY(objEnemy) + 96*sin(ea);
						let delay = 75;
						DishShot(ex, ey, ea, delay, false);
						waitObj(objEnemy, 5);
					}
					if (!eAlive) { return; }
					MoveToSlowdown(objEnemy, CenX+144*D, 128, 45);
					SetAction(objEnemy, ACT_MOVE, 45);
					waitObj(objEnemy, 60);
					D = -D;
				}
			}
			if (!eAlive) { return; }
			local
			{
				MoveToSlowdown(objEnemy, CenX, 96, 90);
				SetAction(objEnemy, ACT_MOVE, 90);
				waitObj(objEnemy, 30);
				if (!eAlive) { return; }
				CallSound(sndPower3);
				waitObj(objEnemy, 60);
				local
				{
					if (!eAlive) { return; }
					CallSound(sndBoon);
					SetAction(objEnemy, ACT_SHOT3, 90);
					let ba = GetAngleToPlayer(objEnemy);
					let way = 4;
					let wt = 4;
					ascent(i in 0 .. way)
					{
						if (!eAlive) { return; }
						let tmp = i-(way-1)/2;
						let tmpD = D;
						loop(2)
						{
							let ea = ba + (-120+i/(way-1)*105)*tmpD;
							let ex = ObjMove_GetX(objEnemy) + 96*cos(ea);
							let ey = ObjMove_GetY(objEnemy) + 96*sin(ea);
							let delay = 75;
							tmpD = -tmpD;
							DishShot(ex, ey, ea, delay, true);
						}
						waitObj(objEnemy, 10);
					}
					waitObj(objEnemy, 60);
					if (!eAlive) { return; }
					MoveToSlowdown(objEnemy, CenX+128*D, 160, 60);
					SetAction(objEnemy, ACT_MOVE, 60);
					waitObj(objEnemy, 60);
					D = -D;
				}
			}
			count++;
		}
	}
}

// お皿単品
task DishShot(x, y, tubo_angle, laser_delay, horming_type)
{
	let eSize = 12;
	let eLife = 60;
	let objS = PorcelainEnemy(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), PORCELAIN_POT, eSize, 90, eLife, 0.8);
	let objImgAll = Obj_GetValueD(objS, "IMAGE_ID_ALL", []);
	let objE = Obj_GetValueD(objS, "E_OBJ", -1);
	TMain();
	
	task TMain()
	{
		TMove();
	}
	task TMove()
	{
		let horming_timer = laser_delay;
		let horming_power = 1/5;
		let horming_wait = 240;
		
		ascent(i in 0 .. 60)
		{
			if (Obj_IsDeleted(objS)) { return; }
			let tmp = GetCurve_d((i+1)/60);
			ObjMove_SetPosition(objS, ObjMove_GetX(objEnemy)*(1-tmp)+x*tmp, ObjMove_GetY(objEnemy)*(1-tmp)+y*tmp);
			if (horming_type)
			{
				tubo_angle = GetTuboHormingAngle(ObjMove_GetX(objS), ObjMove_GetY(objS), tubo_angle, horming_power);
			}
			ObjMove_SetAngle(objS, tubo_angle);
			waitObj(objS, 1);
		}
		if (Obj_IsDeleted(objS) || !CheckDispIN(objS, 48)) { Obj_Delete(objS); return; }
		// レーザー氏
		TLaser(horming_timer-75, 75);
		
		let t = 0;
		while(!Obj_IsDeleted(objS) && t < horming_timer)
		{
			let ex = ObjMove_GetX(objS);
			let ey = ObjMove_GetY(objS);
			ObjMove_SetAngle(objS, tubo_angle);
			t++;
			waitObj(objS, 1);
		}
		if (Obj_IsDeleted(objS)) { return; }
		
		local
		{
			// 自壊
			TUchikaeshi(ObjMove_GetX(objS), ObjMove_GetY(objS), ObjMove_GetAngle(objS));
			CallSound(sndFreeze);
			EraseEnemy(objE);
		}
	}
	// レーザー
	task TLaser(delay, timer)
	{
		wait(delay);
		if (!eAlive || Obj_IsDeleted(objS)) { return; }
		CallSound(sndBulletBreak);
		
		let lr = 40;
		let lc = EFF_WHITE;
		let objL = ObjPrim_Create(OBJ_SPRITE_2D);
		Obj_SetRenderPriorityI(objL, GetShotRenderPriorityI()-1);
		ObjPrim_SetTexture(objL, imgEffectBullet);
		ObjRender_SetBlendType(objL, BLEND_ADD_ARGB);
		ObjSprite2D_SetSourceRect(objL, 1+32*lc, 66, 31+32*lc, 94);
		ObjSprite2D_SetDestRect(objL, -6, 0, 6, 800);
		
		let t = 0;
		while(!Obj_IsDeleted(objL) && !Obj_IsDeleted(objS) && t < timer)
		{
			let ex = ObjMove_GetX(objS);
			let ey = ObjMove_GetY(objS);
			let ea = ObjMove_GetAngle(objS);
			ObjRender_SetPosition(objL, ex+lr*cos(ea), ey+lr*sin(ea), 0);
			ObjRender_SetAngleZ(objL, ea-90);
			ObjRender_SetAlpha(objL, min(255, t*10)*0.66);
			ObjRender_SetScaleX(objL, (sin(t*90)+1.5)/2.5);
			// えへくと
			if (t%3 == 0)
			{
				_EffectConcentrationP_offset(objS, lr, 0.75, 30, EFF_WHITE);
			}
			t++;
			yield;
		}
		if (eAlive && t >= timer && !Obj_IsDeleted(objS))
		{
			// レーザー発射！
			let ea = ObjMove_GetAngle(objS);
			let ex = ObjMove_GetX(objS)+lr*cos(ea);
			let ey = ObjMove_GetY(objS)+lr*sin(ea);
			EXPLODE_LASER(ex, ey, ea);
			CallSound(sndShot7);
		}
		if (!Obj_IsDeleted(objL)) { DelLaser(); }
		
		task DelLaser()
		{
			descent(i in 0 .. 15)
			{
				ObjRender_SetAlpha(objL, 255*i/15);
				yield;
			}
			Obj_Delete(objL);
		}
	}
	task EXPLODE_LASER(x, y, angle)
	{
		ascent(t in 0 .. 10)
		{
			if (!eAlive) { return; }
			
			let tmp = t/9;
			let sx = x;
			let sy = y;
			let ss = 24;
			let sa = angle;
			let graphic = BGW_BALL_M_RED;
			let lw = 32 - 24*tmp;
			
			let objL = My_CreateLooseLaserA1(sx, sy, ss, sa, 240, lw, graphic, 0);
			ObjLaser_SetIntersectionWidth(objL, lw*0.4);
			ObjLaser_SetInvalidLength(objL, 120, 180);
			
			let objEffect = CreateLooseLaserA1(sx, sy, ss, sa, 240, lw*4, graphic, 0);
			ObjShot_SetIntersectionEnable(objEffect, false);
			ObjRender_SetColor(objEffect, 32, 0, 0);
			ObjShot_SetItemChange(objEffect, false);
			
			yield;
		}
	}
	task TUchikaeshi(x, y, angle)
	{
		if (eAlive)
		{
			let speed = [4, 3, 4][DifficultEx()];
			let sway = [7, 3, 7][DifficultEx()];
			// ショットも発射
			ascent(i in 0 .. 4)
			{
				let pos1 = [speed*cos(angle+i*90), speed*sin(angle+i*90)];
				let pos2 = [speed*cos(angle+(i+1)*90), speed*sin(angle+(i+1)*90)];
				ascent(j in 0 .. sway)
				{
					let tmp = j/(sway-1);
					let vx = pos1[0]*(1-tmp) + pos2[0]*tmp;
					let vy = pos1[1]*(1-tmp) + pos2[1]*tmp;
					let objS = My_CreateShotB2(x, y, vx, vy, -vx/30, -vy/30, vx/8, vy/8, BGW_CHRYSTAL_M_WHITE, 15);
					ObjMove_AddPatternB2(objS, 45, NO_CHANGE, NO_CHANGE, vx/360, vy/360, vx, vy);
				//	Obj_SetRenderPriorityI(objS, GetShotRenderPriorityI-1);
				}
			}
		}
	}

	function GetTuboHormingAngle(x, y, angle, horming_power)
	{
		let to_angle = atan2(GetPlayerY-y, GetPlayerX-x);
		let tmp = (angle-to_angle)%360;
		if (tmp > 180) { tmp -= 360; }
		tmp *= horming_power;
		return(angle-tmp);
	}
}
