#include "./../../../lib/lib_Common.dnh"
#include "./../../../lib/lib_Effect.dnh"
#include "./../../../lib/loadlib/file_LoadStgImg.dnh"

//----------------------------------------------------
//背景
//----------------------------------------------------

let imgBgTexture = [];
let flagEnd = false;

@Event
{
	alternative(GetEventType())
	case(EV_END_BOSS_STEP)
	{
		//背景削除
		flagEnd = true;
		CloseMine(180);
	}
}

@Initialize
{
	init();	//初期設定
	imgBgTexture = LoadingImageFile_SpellBg(BOSS_ID_HOROU);
	TMain;
}

@Loading
{
}

@MainLoop
{
	yield;
}

task TMain()
{
	if (IsDrawBackground() >= 2) { BackGround6b(); }
	else if (IsDrawBackground() >= 1) { BackGroundLite(); }
}

task BackGroundLite
{
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	let alpha = 0;
	Obj_SetRenderPriorityI(obj,prioritySpellBG);
	ObjRender_SetColor(obj,255,255,255);
	ObjPrim_SetTexture(obj,imgBgTexture[0]);
	ObjSprite2D_SetSourceRect(obj,0,0,384,448);
	ObjSprite2D_SetDestRect(obj,0,0,384,448);
	ObjRender_SetPosition(obj,MinX,MinY,0);

	// 白黒にする（シェーダOFFでも強制）
	ObjShader_SetShaderF(obj, hlslMonotone);
	ObjShader_SetTechnique(obj, "TecMonotone");
	ObjShader_SetFloat(obj, "power_", 1);

	while(alpha<255) {
		alpha+=5;
		ObjRender_SetAlpha(obj,alpha);
		yield;
	}
	while(!flagEnd)
	{
		yield;
	}
	Obj_Delete(obj);
}

task BackGround6b(){
	let obj		= [
		ObjPrim_Create(OBJ_SPRITE_2D),
		ObjPrim_Create(OBJ_SPRITE_2D),
		ObjPrim_Create(OBJ_SPRITE_2D),
	];
	let i		= 0;
	let move1	= 0;
	let moveA	= 0;
	let alpha	= [ 255, 255, 64 ];
	let t		= 0;
	
	ascent( i in 0..length(obj) ){
		ObjRender_SetPosition( obj[i], 384/2 + 32, 448/2 + 16, 0 );
		Obj_SetRenderPriorityI( obj[i], prioritySpellBG );
		ObjPrim_SetTexture( obj[i], imgBgTexture[i] );
		ObjSprite2D_SetSourceRect( obj[i], 0, 0, 512, 448 );
		ObjSprite2D_SetDestCenter( obj[i] );
	
		// 白黒にする（シェーダOFFでも強制）
		ObjShader_SetShaderF(obj[i], hlslMonotone);
		ObjShader_SetTechnique(obj[i], "TecMonotone");
		ObjShader_SetFloat(obj[i], "power_", 1);
	}
	ObjRender_SetBlendType( obj[0], BLEND_ALPHA );
	ObjRender_SetBlendType( obj[1], BLEND_MULTIPLY );
	ObjRender_SetBlendType( obj[2], BLEND_ADD_ARGB );
	
	ObjRender_SetColor( obj[0], 192, 192, 192 );
	
	ObjRender_SetScaleXYZ( obj[1], 1.2, 1.2, 0 );
	ObjSprite2D_SetSourceRect( obj[1], 0, 0, 512, 512 );
	ObjSprite2D_SetDestCenter( obj[1] );
	ObjSprite2D_SetSourceRect( obj[2], 0, 0, 512, 512 );
	ObjSprite2D_SetDestCenter( obj[2] );
	
	CreateBGPolygon( imgBgTexture[3], [384/2 + 32, 448/2 + 16 - 64], 24, [512,512], prioritySpellBG, [0,0.1], BLEND_SUBTRACT, [255,255,255,80] );
	CreateBGPolygon( imgBgTexture[3], [384/2 + 32, 448/2 + 16 - 64], 24, [768,768], prioritySpellBG, [0,0.2], BLEND_SUBTRACT, [255,255,255,80] );
	
	while( !flagEnd ){
		move1 = 1 * sin( moveA );
		ascent( i in 0..length(obj) ){
			ObjRender_SetAlpha( obj[i], move1*alpha[i] );
		}
		ObjSprite2D_SetSourceRect( obj[1], 0, 0 + t/4, 512, 512 + t/4 );
		ObjSprite2D_SetSourceRect( obj[2], 0, 0 + t, 512, 512 + t );
		
		if( move1 < 1 ){ moveA += 2; }
		t++;
		yield;
	}
	ascent( i in 0..length(obj) ){
		Obj_Delete( obj[i] );
	}
}

//　頂点数を奇数するときもくなるよ
task CreateBGPolygon( v_img, v_pos, v_vertex, v_dist, v_lay, v_angleZArray, v_blend, v_rgba ){
	let obj			= ObjPrim_Create(OBJ_SPRITE_2D);
	let move1		= 0;
	let moveA		= 0;
	let ang			= 0;
	let pc			= 0;
	let i			= 0;
	
	//　スクロール
	let scr			= 0;
	let scrCr		= 0;
	
	//　Ｎ角形 + 中心点 + 円になる時の余分な点
	let ten			=  v_vertex + 1 + 1 ;
	//　回転の早さ
	let ang_plus	= v_angleZArray[1];
	
	ObjRender_SetPosition(obj, v_pos[0], v_pos[1], 0 );
	ObjPrim_SetTexture(obj, v_img);
	Obj_SetRenderPriorityI(obj, v_lay);
	ObjRender_SetBlendType(obj, v_blend);
	ObjRender_SetAngleXYZ(obj, 0, 0, v_angleZArray[0]);
	ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLEFAN);
	ObjPrim_SetVertexCount(obj, ten);
	
	while( !flagEnd ){
		move1 = 1 * sin( moveA );
		
		//　中心となる点　ここから順番に頂点が結ばれていく
		ObjPrim_SetVertexPosition(obj, 0, 0, 0, 0);
		ObjPrim_SetVertexUVT(obj, 0, 0-scr, 0);
		ObjPrim_SetVertexColor(obj, 0, v_rgba[0], v_rgba[1], v_rgba[2]);
		ObjPrim_SetVertexAlpha(obj, 0, move1*v_rgba[3]);
		
		//　0番目を除いた、残りの頂点設定
		loop( v_vertex+1 ){
			let rdist = 768 + 512 * sin( pc*2 + scrCr/4 );
			ObjPrim_SetVertexPosition(obj, 1+i, v_dist[0] * cos(pc+ang), v_dist[1] * sin(pc+ang), 0);
			ObjPrim_SetVertexUVT(obj, 1+i, 0+rdist*cos(pc)-scr, 0+rdist*sin(pc));
			ObjPrim_SetVertexColor(obj, 1+i, v_rgba[0], v_rgba[1], v_rgba[2]);
			ObjPrim_SetVertexAlpha(obj, 1+i, move1*v_rgba[3]);
			
			pc		+= 360/v_vertex;
			i++;
		}
		pc			= 0;
		i			= 0;
		
		ang += ang_plus;
		if( move1 < 1 ){ moveA += 2; }
		if( scrCr%2 == 0 ){ scr += 2; }
		scrCr++;
		
		yield;
	}
	Obj_Delete(obj);
}
