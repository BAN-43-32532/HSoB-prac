// -------------- 敵配置 -------------- //

#include "./../stage2/lib_MiniChii.dnh"

let S2_ZAKO_SPD_Y = 0.75;

task S2_H01(pos, count, muki)
{
	let ba = randStage(0, 360);
	ascent(i in 0 .. count)
	{
		let ex = pos[0];
		let ey = pos[1];
		let ea = ba + i*360/count;
		S2_SetEnemyH01(ex, ey, muki, ea, 0, 0);
	}
}

task S2_I01(pos, angle, add_angle, count, wt_phase, value)
{
	let wt_add = 0;
	ascent(i in 0 .. count)
	{
		let ex = pos[0];
		let ey = pos[1] + wt_add*S2_ZAKO_SPD_Y;
		let ea = angle;
		let er = 450;
		S2_SetEnemyI01(ex, ey, add_angle, ea, er, value + wt_add);
		wt_add += phaseEx(wt_phase);
		WaitRoad(phaseEx(wt_phase));
	}
}


task S2_Chii02_Side(pos, add_pos, shot_angle, count, wt_phase)
{
	ascent(i in 0 .. count)
	{
		let ex = pos[0] + add_pos[0]*i;
		let ey = pos[1] + add_pos[1]*i;

		let tmp = (ey-MinY)/GetClipHeight;
		let ea = atan2(CenY-ey, CenX-ex);
		let es = 2;
		S2_SetEnemyChii02(ex, ey, es, ea, 1, shot_angle);
		WaitRoad(phaseEx(wt_phase));
	}
}

task S2_Chii03_Side(pos, add_pos, count, wt_phase)
{
	ascent(i in 0 .. count)
	{
		let ex = pos[0] + add_pos[0]*i;
		let ey = pos[1] + add_pos[1]*i;

		let tmp = (ey-MinY)/GetClipHeight;
		let ea = atan2(CenY-ey, CenX-ex);
		let es = 2;
		S2_SetEnemyChii03(ex, ey, es, ea, 1, 0);
		WaitRoad(phaseEx(wt_phase));
	}
}

// ------------------------------------------------------------------ //
//                            敵単体の処理                            //
// ------------------------------------------------------------------ //

// オープニング用人魂
task S2_SetEnemyH01(iniX, iniY, iniSpeed, iniAngle, iniValue, iniWait)
{
	if (flgStopSetZako) { return; }
	
	let baseAngle = iniAngle;
	let muki = iniSpeed;
	
	let e_type = iniValue%2;
	let eSize = ENEMY_S;
	let eColor = EFF_BLUE;
	
	let objEnemy = MakeEnemy(iniX, iniY, 20, eSize);
	SetEnemyDropItem_Extra(objEnemy, 8);
	DrawHitodama( objEnemy, eColor );
	TAct();
	WaitForKilled(objEnemy);
	ZakoFinalize(objEnemy, eColor);
	
	task TAct()
	{
		SetHitodamaVisibleSilent(objEnemy, 30);
		TCheckDispINOut(objEnemy, 16);
		TShot();
		
		let bx = iniX;
		let by = iniY;
		baseAngle = iniAngle;
		let br = 0;
		
		let t = 0;
		while(CanShotBullet(objEnemy))
		{
			let tmp = (t+120)/120;
			let ex = bx + cos(baseAngle)*br;
			let ey = by + sin(baseAngle)*br;
			ObjMove_SetPosition(objEnemy, ex, ey);
			by += S2_ZAKO_SPD_Y;
			br += 0.5*tmp;
			baseAngle += 1/tmp*muki;
			t++;
			waitObj(objEnemy, 1);
		}
	}
	
	// ショット
	task TShot()
	{
		waitObj(objEnemy, 30);
		if (!CanShotBullet(objEnemy)) { return; }
		CallSound(sndShot2);
		waitObj(objEnemy, 30);

		let timer =	[18, 18, 18][DifficultEx()];
		let wt =	[4, 4, 4][DifficultEx()];
		
		let speed =	[2, 2, 2][DifficultEx()];
		let way =	[3, 1, 3][DifficultEx()];
		let way_angle = [45, 45, 45][DifficultEx()];
		let graphic = BGB_SCALE_BLUE;
		
		let t = 0;
		while(CanShotBullet(objEnemy) && t < timer)
		{
			let sa = baseAngle-90*muki;
			CreateShotWayA2(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy),
				0, sa, speed/120, speed, graphic, 15, way, way_angle, 0);
			waitObj(objEnemy, wt);
			t += wt;
		}
	}
}

// ビット陰陽玉
task S2_SetEnemyI01(iniX, iniY, iniSpeed, iniAngle, iniValue, iniWait)
{
	if (flgStopSetZako) { return; }
	
	let e_type = iniValue%2;
	let eSize = ENEMY_M;
	let eColor = EFF_YELLOW;
	
	let objEnemy = MakeEnemy(iniX, iniY, 50, eSize);
	SetEnemyDropItem_Extra(objEnemy, 10);
	DrawOnmyou( objEnemy, eColor );
	TAct();
	WaitForKilled(objEnemy);
	if (CheckKillType(objEnemy) == 2)
	{
		// 撃ち返し
		TCounterShot();
	}
	ZakoFinalize(objEnemy, eColor);
	
	task TAct()
	{
		SetHitodamaVisibleSilent(objEnemy, 30);
		TCheckDispINOut(objEnemy, 16);
		TShot();
		
		let bx = iniX;
		let by = iniY;
		let ba = iniAngle;
		let br = iniValue;
		
		let t = 0;
		while(CanShotBullet(objEnemy))
		{
			let ex = bx + cos(ba)*br;
			let ey = by + sin(ba)*br;
			ObjMove_SetPosition(objEnemy, ex, ey);
			by += S2_ZAKO_SPD_Y;
			ba += iniSpeed;
			t++;
			waitObj(objEnemy, 1);
		}
		// ショット
		task TShot()
		{
			let interval =	[15, 60, 15][DifficultEx()];
			let way =	[1, 1, 1][DifficultEx()];
			let spd =	[4, 2, 4][DifficultEx()];
			let arc =	90;
			let ct =	[5, 3, 5][DifficultEx()];
			waitObj(objEnemy, interval - (iniWait%interval));
			while(CanShotBullet(objEnemy))
			{
//				ShotA(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 3, 3.00, 0, 3.0);
//				ShotA(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 3, 2.00, 180, 3.0);
				if(((ObjMove_GetX(objEnemy)-GetPlayerX())^2 + (ObjMove_GetY(objEnemy)-GetPlayerY())^2) > 60^2)
				{
					ShotB(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), way, spd*1.00, ba, arc, ct);
				}
				waitObj(objEnemy, interval);
			}

			task ShotB(x, y, way, spd, ang, arc, ct){
				let w1 = (way-1)/2;
				ascent(iW in 0 .. way){
					let a = ang + arc*(iW-w1);
					ascent(iQ in 0 .. ct){
						let s = spd*(1-0.05*iQ);
						My_CreateShotA2Ex(x, y, 0, a, s/60, s, BGW_SCALE_YELLOW, 15, DELAY_ADD);
					}
				}
			}

			task ShotA(x, y, way, spd, ang, arc){
				let Array = [];
				ascent(i in 1 .. way+1){
					Array = Array ~ [i];
				}
				descent(i in 1 .. way){
					Array = Array ~ [i];
				}
				ascent(iQ in 0 .. length(Array)){
					let w1 = (Array[iQ]-1)/2;
					ascent(iW in 0 .. Array[iQ]){
						let vx = 120 - arc*0.75*iQ;
						let vy = arc * (iW-w1);
						let l = ((vx^2 + vy^2)^0.5);
						let a = ba + atan2(vy, vx)+ang;
						let s = spd*l/120;
						My_CreateShotA2Ex(x, y, 0, a, s/60, s, BGB_SCALE_RED, 15, DELAY_ADD);
					}
				}
			}
		}
	}

	task TCounterShot()
	{
	//	if(((ObjMove_GetX(objEnemy)-GetPlayerX())^2 + (ObjMove_GetY(objEnemy)-GetPlayerY())^2) <= 96^2){return;}
		let speed = 2;
		let way = 1;
		let graphic = BGW_BALL_M_YELLOW;
		let w1 = (way-1)/2;
		let ba = GetAngleToPlayer(objEnemy);
		ascent(iW in 0 .. way)
		{
			let objS = My_CreateShotA2Ex(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), -speed/2, ba+60*(iW-w1), speed/60/2, speed, graphic, 30, DELAY_ADD);
			ObjMove_AddPatternA2(objS, 60, NO_CHANGE, ba-45*(iW-w1), speed/60, 0, speed);
		}
		CallSound(sndShot2);
	}
}

// ばらまきちぃちぃ
task S2_SetEnemyChii02(iniX, iniY, iniSpeed, iniAngle, iniValue, iniWait)
{
	if (flgStopSetZako) { return; }
	
	let e_type = iniValue%2;
	let eSize = ENEMY_M;
	let eColor = EFF_BLUE;
	
	let objEnemy = MakeEnemy(iniX, iniY, 30, eSize);
	SetEnemyDropItem_Extra(objEnemy, 15);
	BossAnime_Initialize(objEnemy);
	EnterMiniChii(objEnemy, 0.5);
	TAct();
	WaitForKilled(objEnemy);
	ZakoFinalize(objEnemy, eColor);
	
	task TAct()
	{
		Enemy_SetPatternA2(objEnemy, 0, iniSpeed, iniAngle, -iniSpeed/60, 0, 0);
		TShot();
		waitObj(objEnemy, phaseExEnemy(6));
		if (!CanShotBullet(objEnemy)) { return; }
		if (iniValue)
		{
			Enemy_SetPatternA4(objEnemy, 0, 0, 0, 2/60, 0, 2, objPlayer);
			SetAction(objEnemy, [ACT_MOVE_L, ACT_MOVE_R][ObjMove_GetX(objEnemy) < GetPlayerX], 9999);
			TCheckDispINOut(objEnemy, 32);
		}
		else
		{
			Enemy_SetPatternA2(objEnemy, 0, 0, iniAngle, 2/60, 0, 2);
			SetAction(objEnemy, [ACT_MOVE_L, ACT_MOVE_R][cos(iniAngle)>0], 9999);
			TCheckDispINOut(objEnemy, 32);
		}
	}
	
	// ショット
	task TShot()
	{
		waitObj(objEnemy, phaseExEnemy(4));

		let wt = [1, 1, 1][DifficultEx()];
		let timer = [10, 4, 10][DifficultEx()];
		let speed = [2, 1.5, 2][DifficultEx()];
		let angle = iniWait;
		
		SetAction(objEnemy, ACT_SHOT1, 60);
		
		let t = 0;
		while(CanShotBullet(objEnemy) && t < timer)
		{
			let ss = rand(1,3);
			let sa = GetAngleToPlayer(objEnemy)+180 + rand(-90,90);
			TumaShot(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy),
				ss, sa, BGW_STICK_YELLOW, 15, speed*rand(0.5,1), angle+rand(-15,15), BGW_STICK_YELLOW, 60);
			CallSound(sndShot3);
			waitObj(objEnemy, wt);
			t += wt;
		}
	}
}

// 自機狙いちぃちぃ
task S2_SetEnemyChii03(iniX, iniY, iniSpeed, iniAngle, iniValue, iniWait)
{
	if (flgStopSetZako) { return; }
	
	let e_type = iniValue%2;
	let eSize = ENEMY_M;
	let eColor = EFF_BLUE;
	
	let objEnemy = MakeEnemy(iniX, iniY, 30, eSize);
	SetEnemyDropItem_Extra(objEnemy, 15);
	BossAnime_Initialize(objEnemy);
	EnterMiniChii(objEnemy, 0.5);
	TAct();
	WaitForKilled(objEnemy);
	ZakoFinalize(objEnemy, eColor);
	
	task TAct()
	{
		Enemy_SetPatternA2(objEnemy, 0, iniSpeed, iniAngle, -iniSpeed/60, 0, 0);
		TShot();
		waitObj(objEnemy, phaseExEnemy(6));
		if (!CanShotBullet(objEnemy)) { return; }
		if (iniValue)
		{
			Enemy_SetPatternA4(objEnemy, 0, 0, 0, 2/60, 0, 2, objPlayer);
			SetAction(objEnemy, [ACT_MOVE_L, ACT_MOVE_R][ObjMove_GetX(objEnemy) < GetPlayerX], 9999);
			TCheckDispINOut(objEnemy, 32);
		}
		else
		{
			Enemy_SetPatternA2(objEnemy, 0, 0, iniAngle, 2/60, 0, 2);
			SetAction(objEnemy, [ACT_MOVE_L, ACT_MOVE_R][cos(iniAngle)>0], 9999);
			TCheckDispINOut(objEnemy, 32);
		}
	}
	
	// ショット
	task TShot()
	{
		waitObj(objEnemy, phaseExEnemy(4));

		let wt = [1, 1, 1][DifficultEx()];
		let timer = [10, 10, 10][DifficultEx()];
		let speed = [4.5, 3, 4.5][DifficultEx()];
		let way = [3, 1, 3][DifficultEx()];
		let count = [2, 2, 2][DifficultEx()];
		let rnd = [0, 0, 0][DifficultEx()];
		let w1 = ((way-1)/2);
		let arc = 30;
		SetAction(objEnemy, ACT_SHOT1, 60);
		
		let t = 0;
		while(CanShotBullet(objEnemy) && t < timer)
		{
			let ss = rand(1,3);
			let sa = GetAngleToPlayer(objEnemy) + rand(-90,90);
			ascent(i in 0 .. way){
				ascent(j in 0 .. count) {
					let to_ss = speed * (1 + j/4);
					TumaShot_ToPlayer(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy),
						ss, sa, BGW_STICK_RED, 15, to_ss, arc*(i-w1)+rand(-rnd, rnd), BGW_STICK_RED, 60);
				}
			}	
			CallSound(sndShot3);
			waitObj(objEnemy, wt);
			t += wt;
		}
	}
	
	function AngleAdjustment(angle, accuracy){
		if(accuracy == 0){return angle;}
		return trunc(angle/accuracy+0.5)*accuracy;
	}
}

// 大きめちぃちぃ
task S2_SetEnemyChii04(iniX, iniY, iniSpeed, iniAngle, iniValue, iniWait)
{
	if (flgStopSetZako) { return; }
	
	let e_type = iniValue%2;
	let eSize = ENEMY_L;
	let eColor = EFF_BLUE;
	
	let objEnemy = MakeEnemy(iniX, iniY, 200, eSize);
	SetEnemyDropItem_Extra(objEnemy, 30);
	BossAnime_Initialize(objEnemy);
	EnterMiniChii(objEnemy, 0.8);
	TAct();
	WaitForKilled(objEnemy);
	ZakoFinalize(objEnemy, eColor);
	
	task TAct()
	{
		Enemy_SetPatternA1(objEnemy, 0, iniSpeed, iniAngle);
		SetAction(objEnemy, [ACT_MOVE_L, ACT_MOVE_R][cos(iniAngle)>0], 9999);
		TCheckDispINOut(objEnemy, 32);

		TShot();
	}
	
	// ショット
	task TShot()
	{
		waitObj(objEnemy, phaseExEnemy(2));

		let wt = [6, 9, 6][DifficultEx()];
		let timer = [phaseExEnemy(12), phaseExEnemy(8), phaseExEnemy(12)][DifficultEx()];
		let speed = [2, 1.5, 2][DifficultEx()];
		let way = [3, 2, 3][DifficultEx()];
		let way2 = [3, 2, 3][DifficultEx()];
		let add_angle = [10, 15, 10][DifficultEx()];
		let w2 = ((way2-1)/2);
		let muki = [1, -1][cos(iniAngle)>0];
		
		let ba = GetAngleToPlayer(objEnemy);
		
		let st = 0;
		let t = 0;
		while(CanShotBullet(objEnemy) && t < timer)
		{
			ascent(iW in 0 .. way)
			{
				ascent(iW2 in 0 .. way2)
				{
					let ss = 3;
					let sa = ba + iW*360/way + add_angle*st*muki + 1.2*(iW2-w2);
					TumaShot(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy),
						ss, sa, BGW_STICK_YELLOW, 15, speed, sa-90*muki, BGW_STICK_YELLOW, 60);
				}
			}
			CallSound(sndShot3);
			waitObj(objEnemy, wt);
			t += wt;
			st++;
		}
	}
}


task TumaShot(x, y, speed, angle, graphic, delay, to_speed, to_angle, to_graphic, timer)
{
	let obj = My_CreateShotA2(x, y, speed, angle, -speed/timer, 0, graphic, delay);
	wait(timer);
	if (!Obj_IsDeleted(obj))
	{
		let move_angle = (to_angle-angle)%360;
		if (move_angle > 180) { move_angle -= 360; }
		
		let to_obj = My_CreateShotA1(ObjMove_GetX(obj), ObjMove_GetY(obj), 0, angle, to_graphic, 0);
		ObjMove_AddPatternA2(to_obj, 60, NO_CHANGE, NO_CHANGE, to_speed/120, 0, to_speed);
		ObjShot_FadeDelete(obj);
		
		CallSound(sndShot2);

		ascent(t in 0 .. 30)
		{
			if (Obj_IsDeleted(to_obj)) { break; }
			let tmp = GetCurve_ad((t+1)/30);
			ObjRender_SetAlpha(to_obj, tmp*512);
			ObjMove_SetAngle(to_obj, angle+move_angle*tmp);
			ObjMove_SetAngle(obj, angle+move_angle*tmp);
			wait(1);
		}
	}
}
task TumaShot_ToPlayer(x, y, speed, angle, graphic, delay, to_speed, to_offset_angle, to_graphic, timer)
{
	let obj = My_CreateShotA2(x, y, speed, angle, -speed/timer, 0, graphic, delay);
	wait(timer);
	if (!Obj_IsDeleted(obj))
	{
		let to_angle = GetAngleToPlayer(obj) + to_offset_angle;
		let move_angle = (to_angle-angle)%360;
		if (move_angle > 180) { move_angle -= 360; }
		
		let to_obj = My_CreateShotA1(ObjMove_GetX(obj), ObjMove_GetY(obj), 0, angle, to_graphic, 0);
		ObjMove_AddPatternA2(to_obj, 60, NO_CHANGE, NO_CHANGE, to_speed/120, 0, to_speed);
		ObjShot_FadeDelete(obj);
		
		CallSound(sndShot2);

		ascent(t in 0 .. 45)
		{
			if (Obj_IsDeleted(to_obj)) { break; }
			let tmp = GetCurve_ad((t+1)/45);
			ObjRender_SetAlpha(to_obj, tmp*512);
			ObjMove_SetAngle(to_obj, angle+move_angle*tmp);
			ObjMove_SetAngle(obj, angle+move_angle*tmp);
			wait(1);
		}
	}
}
