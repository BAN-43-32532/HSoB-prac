#東方弾幕風[Single]
#ScriptVersion[3]
#Title["ちぃスペカ3"]
#Text["ちぃスペカ3"]
#Background[""]
#System["./../../../system/System.dnh"]

//---------------------------------------------------------------------

// 関数取り込み
#include"./../../../lib/lib_boss.dnh"
#include"./lib_Chii.dnh"

let WARIBASHI_T = 0;
let WARIBASHI_WT = 0;
let WARIBASHI_ANGLE = 0;
let WHEEL_LENGTH = 840;

@Event {
	alternative(GetEventType())
	case(EV_REQUEST_LIFE)		{ SetScriptResult(300);	}
	case(EV_REQUEST_TIMER)		{ SetScriptResult(60);		}
	BossEvent();
}

@Initialize {
	let SPELL_ID = 13;
	let SPELL_NAME = [6, 6, 7, 7][Difficult];
	// アイテム数
	bossDropItem = 0;

	//ダメージ透過率
	dIni_Shot = 10;

	//初期設定
	Boss_Init();

	objEnemy = CreateBoss(BOSS_ID_CHII);	//ボスセット

	//スペカデータ・セット
	SetSpellCardData(GetSpellCardID(SPELL_ID), SPELL_NAME, 
			GetCurrentScriptDirectory()~"02a_Background.dnh",
			GetBossTexture(objEnemy, I_CUTIN), 0.75, CUTMOTION_NORMAL);

	// チャプター開始
	ChapterStartBoss(GetBossID(objEnemy), SPELL_NAME, CHAPTER_SPELL);

	// 使い魔と体力連動
	CheckLinkLife_Boss(objEnemy);

	Task_Main();
}

@MainLoop {
	yield;
}

// メインタスク
task Task_Main
{
	ObjMove_SetPosition(objEnemy, CenX, MinY-128);
	SetEnemyVisible(objEnemy, false);
	SetWheel();
	waitObj(objEnemy, 30);
	SetWaribashi();
	waitObj(objEnemy, 60);
	CallSpellCard(true);	//スペカ起動
	waitObj(objEnemy, 360);
	SetEnemyVisible(objEnemy, true);
	MoveTo(objEnemy, CenX, MinY+180, 480);
	waitObj(objEnemy, 480+60);
	if(Difficult >= D_HARD){
		AngleManager();
	}
	while(eAlive)
	{
		SetAction(objEnemy, ACT_SHOT2, 120);
		if(Difficult < D_HARD){
			Shot01();
		}
		waitObj(objEnemy, 360);
	}
}

task AngleManager(){
	ascent(i in 0 .. 120){
		WARIBASHI_ANGLE -= 0.15*i/120;
		yield;
	}
	while(eAlive){
		WARIBASHI_ANGLE -= 0.15;
		yield;
	}
}

task Shot01()
{
	let speed = 1.5;
	let count = [15, 20, 0, 0][Difficult];
	
	let base_angle = -90;

	SetAction(objEnemy, ACT_SHOT1, 60);
	ascent(t in 0 .. count)
	{
		if (!eAlive) { return; }
		let sa = 90 + rand(-15,15);
		TumaShot(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), rand(1, 6^2)^0.5, base_angle+rand(-90,90), BGW_STICK_YELLOW, 30,
			speed, sa, BGW_STICK_YELLOW, 60);
		CallSound(sndShot3);
		waitObj(objEnemy, 2);
	}
}

task SetWaribashi()
{
	let wt = 60;
	let count = 0;
	let time = 0;

	WARIBASHI_WT = wt;
	while(eAlive)
	{
		if (count%4 == 0) { SetEnemyChii01(180, time); }
		if (count >= 4 && count%4 == 1) { SetEnemyChii01(0, time); }
		WARIBASHI_WT = ceil(wt * (0.67 + 0.33*GetBossLifeRate(objEnemy)));
		time += WARIBASHI_WT;
		wait(WARIBASHI_WT);
		count++;
	}
}

task SetWheel()
{
	let graphic =	[ADD_BGW_LIGHT_L_WHITE, ADD_BGW_LIGHT_L_WHITE, ADD_BGW_LIGHT_L_GREEN, ADD_BGW_LIGHT_L_GREEN][Difficult];
	
	while(eAlive)
	{
		ascent(i in 0 .. 2){
			ascent(j in 0 .. 4){
				WheelShot(650-30*j, 180*i, 36-5*j, 0.50+0.05*j, 255-40*j);
			}
		}
		wait(8);
	}

	task WheelShot(r, angle, arc, a2Rate, alpha){
		let objS = My_CreateShotA1(0, 0, 0, 0, graphic, 0);
		ObjShot_SetAutoDelete(objS, false);
		ObjRender_SetAlpha(objS, alpha);
		let angle2 = 180-arc/2;
		let angle_limit = 180+arc/2;
		while(!Obj_IsDeleted(objS) && angle2 < angle_limit){
			let a = WARIBASHI_ANGLE+angle;
			let CX = CenX + WHEEL_LENGTH*cos(a);
			let CY = CenY + WHEEL_LENGTH*sin(a);
			angle2 += a2Rate;
			let ba = a+angle2;
			let bx = CX+r*cos(a+angle2);
			let by = CY+r*sin(a+angle2);
			ObjMove_SetPosition(objS, bx, by);
			ObjMove_SetAngle(objS, ba+90.5);
			wait(1);
		}
		Obj_Delete(objS);
	}
}

// わりばしちぃちぃ
task SetEnemyChii01(angle, time)
{
//	let mukiX = [1, -1][iniX < CenX];
//	let mukiY = [1, -1][iniY < CenY];

//	let e_type = iniValue%2;
	let eSize = ENEMY_S;
	let eColor = EFF_BLUE;
	let move_count = 8;
	let arc = 7.0;
	let angle2 = 180-arc*(move_count-1)/2;
	
	let objFamilier = MakeEnemy(-128, -128, 1000, eSize);
	CheckLinkLife_Familier(objEnemy, objFamilier, 0.5);	// ボスと体力連動
	Boss_SetIDtoObj(objFamilier, BOSS_ID_CHII);
	Boss_SetAnimeTimer(objFamilier);
	BossAnime_Initialize(objFamilier);
	Obj_SetValue(objFamilier, "ANIME_SC", 0.75);
//	FamilierEffect_LifeCircle(objFamilier, 48);
//	SetEnemyVisible(objFamilier, false);
	TAct(time);
	WaitForKilledFamilier(objFamilier, 24, 8);
	ZakoFinalize(objFamilier, eColor);
	
	task TAct(time)
	{
		TMove();
		TLaser();
		TPenaShot();
		TShot2(time);
	}
	
	task TShot2(time)
	{
		if(Difficult < D_HARD){return;}
		let Interval = 360;
		let way = [0, 0, 1, 5][Difficult];
		let w1 = (way-1)/2;
		//本体が降りてくるまで弾を吐かない
		if(time < 960){
			waitObj(objFamilier, 15+960-time);
		}else{
			waitObj(objFamilier, 15+Interval-((time-960)%Interval));
		}
		
		while(!Obj_IsDeleted(objFamilier))
		{
			let angle = GetAngleToPlayer(objFamilier);
			let D = 1;
			CallSound(sndShot1);
			ascent(iW in 0 .. way){
				let a = angle+45*(iW-w1);
				ascent(iQ in 0 .. 3){
					let s = 1.15+0.025*iQ;
					loop(2){
						let x = ObjMove_GetX(objFamilier)+2*cos(a+90*D);
						let y = ObjMove_GetY(objFamilier)+2*sin(a+90*D);
						My_CreateShotA2(x, y, 0, a, s/60, s, BGW_NEEDLE_YELLOW, 15);
						let tmp_obj = CreateShotA2(x, y, 0, a, s/60, s, ADD_BGW_NEEDLE_YELLOW, 0);
						ObjRender_SetScaleXYZ(tmp_obj, 1.5, 1.5, 1.5);
						D = -D;
					}
				}
			}
			waitObj(objFamilier, Interval);
		}
	}
	task TMove()
	{
		ascent(i in 0 .. move_count)
		{
			if (Obj_IsDeleted(objFamilier)) { return; }

//			if (i == 0) { ObjMove_SetPosition(objFamilier, ex, ey); }
//			else { MoveTo(objFamilier, ex, ey, move_timer); }
			let move_timer = WARIBASHI_WT;
			SetAction(objFamilier, [ACT_MOVE_L,ACT_MOVE_R][sin(WARIBASHI_ANGLE+angle+angle2) < 0], move_timer);
			if (i > 0) { CallSound(sndShot2); }
			ArcMove(move_timer);
			let t = 0;
			while(t < move_timer){
				let pos = Pos();
				ObjMove_SetPosition(objFamilier, pos[0], pos[1]);
				if (!IsTimeStopObj(objFamilier)) { t++; }
				yield;
			}
			move_timer = WARIBASHI_WT;
			t = 0;
			while(t < move_timer){
				let pos = Pos();
				ObjMove_SetPosition(objFamilier, pos[0], pos[1]);
				if (!IsTimeStopObj(objFamilier)) { t++; }
				yield;
			}
		}
		EraseEnemy(objFamilier);

		function Pos(){
			let a = WARIBASHI_ANGLE+angle;
			let CX = CenX + WHEEL_LENGTH*cos(a);
			let CY = CenY + WHEEL_LENGTH*sin(a);
			let ex = CX+680*cos(a+angle2);
			let ey = CY+680*sin(a+angle2);
			return [ex, ey];
		}

		task ArcMove(move_timer){
			let ini_a = angle2;
			ascent(i in 1 .. move_timer+1){
				angle2 = ini_a+arc*(1-cos(180*i/move_timer))/2;
				waitObj(objFamilier, 1);
			}
		}
	}
	
	task TLaser()
	{
		let l_len = [120, 160, 160, 160][Difficult];
		let graphic =	BGW_BEAM_YELLOW;
		
		let objLaser = [My_CreateStraightLaserA1Ex(ObjMove_GetX(objFamilier), ObjMove_GetY(objFamilier), -90, l_len, 12, 999999, graphic, 0, [true,false]),
			My_CreateStraightLaserA1Ex(ObjMove_GetX(objFamilier), ObjMove_GetY(objFamilier), -90, l_len, 12, 999999, graphic, 0, [true,false])];
		ascent(i in 0 .. length(objLaser)){
			ObjShot_SetAutoDelete(objLaser[i], false);
		}
		while(!Obj_IsDeleted(objLaser[0]))
		{
			if (Obj_IsDeleted(objFamilier)) { break; }
			let ex = ObjMove_GetX(objFamilier);
			let ey = ObjMove_GetY(objFamilier);
//			let ea = base_angle - (ey-CenY)/GetClipHeight*30*mukiX;
			let ea = WARIBASHI_ANGLE+angle+angle2;
			ObjMove_SetPosition(objLaser[0], ex+16*cos(ea+15), ey+16*sin(ea+15));
			ObjStLaser_SetAngle(objLaser[0], ea-0.75);
			ObjMove_SetPosition(objLaser[1], ex+16*cos(ea-15), ey+16*sin(ea-15));
			ObjStLaser_SetAngle(objLaser[1], ea+0.75);
			wait(1);
		}
		descent(i in 0 .. length(objLaser)) { Obj_Delete(objLaser[i]); }
	}
	
	task TPenaShot()
	{
		while(CanShotBullet(objFamilier))
		{
			if (CheckInPlayer(ObjMove_GetX(objFamilier), ObjMove_GetY(objFamilier), 60))
			{
				CreateShotWayA2(ObjMove_GetX(objFamilier), ObjMove_GetY(objFamilier),
					0, GetAngleToPlayer(objFamilier)+rand(-15,15), 3/120, 3, BGW_STICK_WHITE, 5, 5, 30, 0);
				CallSound(sndShot2);
			}
			waitObj(objFamilier, 5);
		}
	}
}
