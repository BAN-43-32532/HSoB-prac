
let STAFFROLL_BG = [
	GetCurrentScriptDirectory() ~ "./../img/sr/srBG01a.png",
	GetCurrentScriptDirectory() ~ "./../img/sr/srBG01b.png",
	GetCurrentScriptDirectory() ~ "./../img/sr/srBG01c.png",
];
let STAFFROLL_IMAGE = [
	GetCurrentScriptDirectory() ~ "./../img/sr/sr01a.png",
	GetCurrentScriptDirectory() ~ "./../img/sr/sr01b.png",
	GetCurrentScriptDirectory() ~ "./../img/sr/sr01c.png",
	GetCurrentScriptDirectory() ~ "./../img/sr/sr01d.png",
	GetCurrentScriptDirectory() ~ "./../img/sr/sr01e.png",
	GetCurrentScriptDirectory() ~ "./../img/sr/sr01f.png",
];
let EFFECTIMG = GetCurrentScriptDirectory() ~ "./../img/sr/srBG01d.png";

let IS_STAFFROLL = true;
let SR_RT;
let SR_SLAYER = [ 0, 100 ];

//　スタッフロール開始
//　mus1:36 -> 3600 + 2160 = 5760F
function StartStaffRoll(){
	//　初期化
	StaffRollInitialize();
	
	//　この辺で音楽鳴らす
	
	//　背景
	StaffBGDisplay();
	
	//　開始
	let ADD_Y = 0;
	PlzW8(120);
	StaffTextDisplay([320,240 + ADD_Y], 1, 0, 120, 255, BLEND_ALPHA);
	PlzW8(240);
	StaffTextDisplay([320,240 + ADD_Y], 1, 1, 120, 255, BLEND_ALPHA);
	PlzW8(240);
	StaffTextDisplay([320,240-30 + ADD_Y], 1, 2, 120, 255, BLEND_ALPHA);
	StaffTextDisplay([320,240+30 + ADD_Y], 1, 3, 120, 255, BLEND_ALPHA);
	PlzW8(240);
	StaffTextDisplay([320,240-30 + ADD_Y], 1, 4, 120, 255, BLEND_ALPHA);
	StaffTextDisplay([320,240+30 + ADD_Y], 1, 5, 120, 255, BLEND_ALPHA);
	PlzW8(240);
	StaffTextDisplay([320,240 + ADD_Y], 1, 6, 120, 255, BLEND_ALPHA);
	//　スタッフメンバ全員分ループ
	ascent( let i in 2..length(STAFFROLL_IMAGE) - 1 ){
		ascent( let j in 0..4 ){
			PlzW8(240);
			StaffTextDisplay([320,240-30 + ADD_Y], i, 0 + j*2, 120, 255, BLEND_ALPHA);
			StaffTextDisplay([320,240+30 + ADD_Y], i, 1 + j*2, 120, 255, BLEND_ALPHA);
		}
	}
	//　あなたです
	PlzW8(240);
	StaffTextDisplay([320,240-30 + ADD_Y], 5, 0, 120, 255, BLEND_ALPHA);
	StaffTextDisplay([320,240+30 + ADD_Y], 5, 1, 120, 255, BLEND_ALPHA);
	//　ty4playing
	PlzW8(240);
	StaffTextDisplay([320,240 + ADD_Y], 5, 2, 120, 255, BLEND_ALPHA);
	//　次は〜
	PlzW8(240);
	StaffTextDisplay([320,240-30 + ADD_Y], 5, 3, 120, 255, BLEND_ALPHA);
	StaffTextDisplay([320,240+30 + ADD_Y], 5, 4, 120, 255, BLEND_ALPHA);
	//　おわり
	PlzW8(420);
	IS_STAFFROLL = false;
}

task StaffRollInitialize(){
	SR_RT = CreateRenderTexture( "StaffRoll", SR_SLAYER[0], SR_SLAYER[1], true );
	while( IS_STAFFROLL ){
		RenderToTextureA1( SR_RT, SR_SLAYER[0], SR_SLAYER[1], true );
		yield;
	}
}

//　wait
function PlzW8(arg_w8){ loop(arg_w8){ yield; } }

//　虹色返却マン
function GetRainbowRGBArrayMan(arg_index){
	let rgb = [];
	alternative(arg_index)
	case(0){ rgb = [255,0,0]; }
	case(1){ rgb = [255,255,0]; }
	case(2){ rgb = [0,0,255]; }
	case(3){ rgb = [255,255,0]; }
	case(4){ rgb = [0,255,0]; }
	case(5){ rgb = [255,255,0]; }
	case(6){ rgb = [255,128,0]; }
	case(7){ rgb = [255,255,255]; }
	return rgb;
}

//　テキスト表示
task StaffTextDisplay(arg_pos, arg_tex, arg_type, arg_wait, arg_alpha, arg_blend){
	let rgba  = [];
	let texSz = [512,512];
	let rectX = 0;
	let rectY = 64 * arg_type;
	let rectW = 512;
	let rectH = 64;
	let pos   = [];
	let scale = [];
	let frame = 0;
	let move1 = 0;
	let moveA = 0;
	
	//　カラー変更
	let col = GetRainbowRGBArrayMan(arg_type%9);
	rgba = [ col[0], col[1], col[2], arg_alpha ];
	
	let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	Obj_SetRenderPriorityI(obj, SR_SLAYER[1]);
	ObjPrim_SetTexture(obj, STAFFROLL_IMAGE[arg_tex%6]);
	SetVeterex2D(obj, rectX, rectY, rectW, rectH, 1);
	ObjRender_SetPosition(obj, arg_pos[0], arg_pos[1], 0);
	ObjRender_SetBlendType(obj, arg_blend);
	
	//　シェーダ設定
	let shd	= CreateShaderObject( obj, 11 );
	//　レンダリングテクスチャサイズ
	ObjShader_SetVector( shd, "m_rtSize", 1024, 512, 0, 0 );
	//　テクスチャ自体の実サイズ
	ObjShader_SetVector( shd, "m_texSize", 512, 512, 0, 0 );
	//　矩形選択領域サイズ
	ObjShader_SetVector( shd, "m_rectSize", rectW, rectH, 0, 0 );
	//　テクスチャの矩形選択領域が端からどれだけ先にあるか
	ObjShader_SetVector( shd, "m_addRect", rectX, rectY, 0, 0 );
	//　マスク
	ObjShader_SetTexture( shd, "g_Mask", fxMask[4] );
	
	//　表示
	while( move1 < 1 ){
		move1 = 1 * sin( moveA );
		
		pos = [ ObjRender_GetX(obj), ObjRender_GetY(obj) ];
		scale = [ move1, move1 ];
		
		ObjRender_SetScaleXYZ(obj, scale[0], scale[1], 0);
		
		ObjShader_SetFloat( shd, "m_frame", frame );
		ObjShader_SetVector( shd, "m_pos", pos[0], pos[1], 0, 0 );
		ObjShader_SetVector( shd, "m_scale", scale[0], scale[1], 0, 0 );
		ObjShader_SetVector( shd, "m_color", rgba[0]*(1/255), rgba[1]*(1/255), rgba[2]*(1/255), rgba[3]*(1/255) );
		ObjShader_SetTexture( shd, "g_Texture", SR_RT );
		ObjShader_SetFloat( shd, "m_threshold", 1 - move1*1.1 );
		
		frame++;
		moveA += 0.5;
		yield;
	}
	
	//　待機
	loop( arg_wait ){
		pos = [ ObjRender_GetX(obj), ObjRender_GetY(obj) ];
		
		ObjRender_SetPosition(obj, pos[0], pos[1], 0);
		
		ObjShader_SetFloat( shd, "m_frame", frame );
		ObjShader_SetVector( shd, "m_pos", pos[0], pos[1], 0, 0 );
		ObjShader_SetVector( shd, "m_color", rgba[0]*(1/255), rgba[1]*(1/255), rgba[2]*(1/255), rgba[3]*(1/255) );
		ObjShader_SetTexture( shd, "g_Texture", SR_RT );
		
		frame++;
		yield;
	}
	
	//　呪術めいた
	StaffTextDisplayB(pos, arg_type, 255, BLEND_ADD_ARGB);
	
	//　削除
	while( move1 > 0 ){
		move1 = 1 * sin( moveA );
		
		pos = [ ObjRender_GetX(obj), ObjRender_GetY(obj) ];
		//scale = [ 3 - move1*2, 3 - move1*2 ];
		
		ObjRender_SetPosition(obj, pos[0], pos[1], 0);
		ObjRender_SetScaleXYZ(obj, scale[0], scale[1], 0);
		
		ObjShader_SetFloat( shd, "m_frame", frame );
		ObjShader_SetVector( shd, "m_pos", pos[0], pos[1], 0, 0 );
		ObjShader_SetVector( shd, "m_scale", scale[0], scale[1], 0, 0 );
		ObjShader_SetVector( shd, "m_color", rgba[0]*(1/255), rgba[1]*(1/255), rgba[2]*(1/255), rgba[3]*(1/255) );
		ObjShader_SetTexture( shd, "g_Texture", SR_RT );
		ObjShader_SetFloat( shd, "m_threshold", 1 - move1*1.1 );
		
		frame++;
		moveA += 2;
		yield;
	}
	Obj_Delete(shd);
	Obj_Delete(obj);
}

//　テキスト表示B
task StaffTextDisplayB(arg_pos, arg_type, arg_alpha, arg_blend){
	let rgba  = [];
	let texSz = [512,512];
	let rectX = 0;
	let rectY = 64 * arg_type;
	let rectW = 512;
	let rectH = 64;
	let pos   = [];
	let scale = [];
	let frame = 0;
	let move1 = 0;
	let moveA = 0;
	
	//　カラー変更
	let col = GetRainbowRGBArrayMan(arg_type%9);
	rgba = [ col[0], col[1], col[2], arg_alpha ];
	
	let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	Obj_SetRenderPriorityI(obj, SR_SLAYER[1]);
	ObjPrim_SetTexture(obj, STAFFROLL_IMAGE[0]);
	SetVeterex2D(obj, rectX, rectY, rectW, rectH, 1);
	ObjRender_SetPosition(obj, arg_pos[0], arg_pos[1], 0);
	ObjRender_SetBlendType(obj, arg_blend);
	
	//　シェーダ設定
	let shd	= CreateShaderObject( obj, 11 );
	//　レンダリングテクスチャサイズ
	ObjShader_SetVector( shd, "m_rtSize", 1024, 512, 0, 0 );
	//　テクスチャ自体の実サイズ
	ObjShader_SetVector( shd, "m_texSize", 512, 512, 0, 0 );
	//　矩形選択領域サイズ
	ObjShader_SetVector( shd, "m_rectSize", rectW, rectH, 0, 0 );
	//　テクスチャの矩形選択領域が端からどれだけ先にあるか
	ObjShader_SetVector( shd, "m_addRect", rectX, rectY, 0, 0 );
	//　マスク
	ObjShader_SetTexture( shd, "g_Mask", fxMask[4] );
	
	//　表示
	while( move1 < 1 ){
		move1 = 1 * sin( moveA );
		
		pos = [ ObjRender_GetX(obj), ObjRender_GetY(obj) ];
		scale = [ 1, 1 ];
		
		ObjRender_SetScaleXYZ(obj, scale[0], scale[1], 0);
		
		ObjShader_SetFloat( shd, "m_frame", frame );
		ObjShader_SetVector( shd, "m_pos", pos[0], pos[1], 0, 0 );
		ObjShader_SetVector( shd, "m_scale", scale[0], scale[1], 0, 0 );
		ObjShader_SetVector( shd, "m_color", rgba[0]*(1/255), rgba[1]*(1/255), rgba[2]*(1/255), move1*(rgba[3]*(1/255)) );
		ObjShader_SetTexture( shd, "g_Texture", SR_RT );
		ObjShader_SetFloat( shd, "m_threshold", 1 - move1*1.1 );
		
		frame++;
		moveA += 2;
		yield;
	}
	//　削除
	while( move1 > 0 ){
		move1 = 1 * sin( moveA );
		
		pos = [ ObjRender_GetX(obj), ObjRender_GetY(obj) ];
		scale = [ 1, 16 - move1*15 ];
		
		ObjRender_SetPosition(obj, pos[0], pos[1], 0);
		ObjRender_SetScaleXYZ(obj, scale[0], scale[1], 0);
		
		ObjShader_SetFloat( shd, "m_frame", frame );
		ObjShader_SetVector( shd, "m_pos", pos[0], pos[1], 0, 0 );
		ObjShader_SetVector( shd, "m_scale", scale[0], scale[1], 0, 0 );
		ObjShader_SetVector( shd, "m_color", rgba[0]*(1/255), rgba[1]*(1/255), rgba[2]*(1/255), rgba[3]*(1/255) );
		ObjShader_SetTexture( shd, "g_Texture", SR_RT );
		ObjShader_SetFloat( shd, "m_threshold", 1 - move1*1.1 );
		
		frame++;
		moveA += 1;
		yield;
	}
	Obj_Delete(shd);
	Obj_Delete(obj);
}

task CreateBeltEffect(arg_pos, arg_angle, arg_angleWidth, arg_speed, arg_color, arg_alpha, arg_width, arg_wait){
	let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	let pos = [];
	let width = arg_width;
	let angle = arg_angle;
	let vxang = arg_angle - 90;
	let frame = 0;
	let move1 = 0;
	let moveA = 0;
	
	ObjRender_SetPosition(obj, 0, 0, 0);
	ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLESTRIP);
	ObjPrim_SetVertexCount(obj, 128);
	ObjPrim_SetTexture(obj, EFFECTIMG);
	Obj_SetRenderPriorityI(obj, SR_SLAYER[1] - 1);
	ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
	ObjRender_SetColor(obj, arg_color[0], arg_color[1], arg_color[2] );
	
	ascent( let i in 0..ObjPrim_GetVertexCount(obj)/2 ){
		ObjPrim_SetVertexPosition(obj, 0 + i*2, arg_pos[0] + width * cos(vxang), arg_pos[1] + width * sin(vxang), 0);
		ObjPrim_SetVertexPosition(obj, 1 + i*2, arg_pos[0] + width * cos(vxang+180), arg_pos[1] + width * sin(vxang+180), 0);
	}
	
	ascent( i in 0..ObjPrim_GetVertexCount(obj)/2 ){
		ObjPrim_SetVertexUVT(obj, 0 + i*2, 256, i*128);
		ObjPrim_SetVertexUVT(obj, 1 + i*2, 0, i*128);
	}
	
	/*
		vertex
		3-2
		1-0
	*/
	
	while( frame < arg_wait ){
		angle = arg_angle + arg_angleWidth * sin(frame);
		vxang = arg_angle - 90;
		
		//　移動基点
		ascent( i in 0..2 ){
			let vpos = ObjPrim_GetVertexPosition(obj, i);
			pos = [
				vpos[0] + arg_speed * cos(angle),
				vpos[1] + arg_speed * sin(angle),
			];
			ObjPrim_SetVertexPosition(obj, i, pos[0], pos[1], 0);
			ObjPrim_SetVertexAlpha(obj, i, 0);
		}
		
		//　追従
		ascent( i in 2..ObjPrim_GetVertexCount(obj) ){
			let oldP = ObjPrim_GetVertexPosition(obj, i - 2);
			let vpos = ObjPrim_GetVertexPosition(obj, i);
			let dist = GetDistance(vpos, oldP) / 4;
			pos = [
				vpos[0] + dist * cos( GetGapAngle(vpos, oldP) ),
				vpos[1] + dist * sin( GetGapAngle(vpos, oldP) ),
			];
			ObjPrim_SetVertexPosition(obj, i, pos[0], pos[1], 0);
			ObjPrim_SetVertexAlpha(obj, i, (arg_alpha/2) + (arg_alpha/2) * sin(i*8 - frame*2));
		}
		
		frame++;
		yield;
	}
	//　削除
	while( move1 < 1 ){
		move1 = 1 * sin( moveA );
		angle = arg_angle + 32 * sin(frame);
		vxang = arg_angle - 90;
		
		//　移動基点
		ascent( i in 0..2 ){
			let vpos = ObjPrim_GetVertexPosition(obj, i);
			pos = [
				vpos[0] + arg_speed * cos(angle),
				vpos[1] + arg_speed * sin(angle),
			];
			ObjPrim_SetVertexPosition(obj, i, pos[0], pos[1], 0);
			ObjPrim_SetVertexAlpha(obj, i, 0);
		}
		
		//　追従
		ascent( i in 2..ObjPrim_GetVertexCount(obj) ){
			let oldP = ObjPrim_GetVertexPosition(obj, i - 2);
			let vpos = ObjPrim_GetVertexPosition(obj, i);
			let dist = GetDistance(vpos, oldP) / 4;
			pos = [
				vpos[0] + dist * cos( GetGapAngle(vpos, oldP) ),
				vpos[1] + dist * sin( GetGapAngle(vpos, oldP) ),
			];
			ObjPrim_SetVertexPosition(obj, i, pos[0], pos[1], 0);
			ObjPrim_SetVertexAlpha(obj, i, (1-move1) * ((arg_alpha/2) + (arg_alpha/2) * sin(i*8 - frame*2)));
		}
		
		frame++;
		moveA += 2;
		yield;
	}
	Obj_Delete(obj);
	
	//　2点間の距離を取得
	function GetDistance( pos1, pos2 ){
		return ( (pos2[1]-pos1[1])^2 + (pos2[0]-pos1[0])^2 ) ^ 0.5;
	}
	
	//　pos1 から見た pos2 への角度を取得
	function GetGapAngle( pos1, pos2 ){
		return atan2( pos2[1]-pos1[1], pos2[0]-pos1[0] );
	}
}

//　背景表示
task StaffBGDisplay(){
	let rgb = [192,192,192];
	let obj = [
		ObjPrim_Create(OBJ_PRIMITIVE_2D),
		ObjPrim_Create(OBJ_PRIMITIVE_2D),
		ObjPrim_Create(OBJ_PRIMITIVE_2D),
	];
	let rectX = [640, 1024, 640];
	let rectY = [480, 1024, 120];
	let alpha = [255, 255, 128];
	let move1 = 0;
	let moveA = 0;
	let frame = 0;
	
	let acc_key = GetAreaCommonData(CAREA_CONFIG, "AccKey", 0);
	if (acc_key == 2) { acc_key = KEY_INVALID; }
	else if (acc_key == 1) { acc_key = KEY_RCONTROL; }
	else { acc_key = KEY_LCONTROL; }

	ascent( let i in 0..length(obj) ){
		Obj_SetRenderPriorityI(obj[i], SR_SLAYER[1]-8);
		ObjPrim_SetTexture(obj[i], STAFFROLL_BG[i]);
		SetVeterex2D(obj[i], 0, 0, rectX[i], rectY[i], 1);
		ObjRender_SetPosition(obj[i], 320, 240, 0);
	}
	ObjRender_SetColor(obj[0], rgb[0], rgb[1], rgb[2]);
	ObjRender_SetBlendType(obj[1], BLEND_MULTIPLY );
	
	//ゆがみオブジェクトにシェーダを設定（フェードアウト用）
	ObjShader_SetShaderF(obj[1], hlslMulti);
	ObjShader_SetTechnique(obj[1], "TecMultiAlpha");
	
	while( IS_STAFFROLL ){
		move1 = 1 * sin( moveA );
		ascent( i in 0..length(obj) ){
			ObjRender_SetAlpha(obj[i], move1*alpha[i]);
		}
		ObjRender_SetAngleZ(obj[1], frame/32);
		if (GetKeyState(acc_key) != KEY_HOLD && IsDrawEffect() > 1)
		{
			if( frame%30 == 0 ){
				let ag = randEffect(0,360);
				let pos = [ 320+512*cos(ag), 240+512*sin(ag) ];
				CreateBeltEffect(pos, ag+180, randEffect(-64,64), randEffect(2,8), [255,128,0], 192, randEffect(1,2), 180 );
			}
		}
		frame++;
		if( move1 < 1 ){ moveA += 2; }
		yield;
	}
	while( move1 > 0 ){
		move1 = 1 * sin( moveA );
		ascent( i in 0..length(obj) ){
			ObjRender_SetAlpha(obj[i], move1*alpha[i]);
		}
		ObjRender_SetAngleZ(obj[1], frame/32);
		frame++;
		moveA -= 0.5;
		yield;
	}
	ascent( i in 0..length(obj) ){
		Obj_Delete(obj[i]);
	}
}
