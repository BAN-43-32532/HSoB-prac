
//iniファイルの内容はコモンデータに保存する
//#include "./../../../../launcher.ini"

//　シェーダ用エフェクトファイル一括定義
let fxPath = [
	GetCurrentScriptDirectory() ~ "./hlsl/HLSL_Monochrome.fx",
	GetCurrentScriptDirectory() ~ "./hlsl/HLSL_DoubleMask.fx",
	GetCurrentScriptDirectory() ~ "./hlsl/HLSL_Monochrome.fx",
	GetCurrentScriptDirectory() ~ "./hlsl/HLSL_ZBombFog.fx",
	GetCurrentScriptDirectory() ~ "./hlsl/HLSL_SoftBlur.fx",
	GetCurrentScriptDirectory() ~ "./hlsl/HLSL_HeatHaze.fx",
	GetCurrentScriptDirectory() ~ "./hlsl/HLSL_EnemyAnimation.fx",
	GetCurrentScriptDirectory() ~ "./hlsl/HLSL_SoftBlur2.fx",
	GetCurrentScriptDirectory() ~ "./hlsl/HLSL_DistortionField.fx",
	GetCurrentScriptDirectory() ~ "./hlsl/HLSL_Dissolve.fx",
	GetCurrentScriptDirectory() ~ "./hlsl/HLSL_AnotherDimension.fx",
	GetCurrentScriptDirectory() ~ "./hlsl/HLSL_DissolveNotRT.fx",
	GetCurrentScriptDirectory() ~ "./hlsl/HLSL_Paint.fx",
	GetCurrentScriptDirectory() ~ "./hlsl/HLSL_TranslateExStage.fx",
	GetCurrentScriptDirectory() ~ "./hlsl/HLSL_GlitterSword.fx",
	GetCurrentScriptDirectory() ~ "./hlsl/HLSL_Aura.fx",
];
//　テクニック
let fxTc = [
	"tcMonochrome",
	"tcDoubleMask",
	"tcMonochrome",
	"tcZBombFog",
	"tcSoftBlur",
	"tcHeatHaze",
	"tcEnemyAnimation",
	"tcSoftBlur2",
	"tcDistortionField",
	"tcDissolve",
	"tcAnotherDimension",
	"tcDissolveNotRT",
	"tcPaint",
	"tcTransEx",
	"tcSword",
	"tcAura",
];
//　マスク用テクスチャ
let fxMask = [
	GetCurrentScriptDirectory() ~ "./../img/effect/monochrome.png",
	GetCurrentScriptDirectory() ~ "./../img/effect/mask04a.png",
	GetCurrentScriptDirectory() ~ "./../img/effect/mask04b.png",
	GetCurrentScriptDirectory() ~ "./../img/effect/aura01d.png",
	GetCurrentScriptDirectory() ~ "./../img/effect/mask04c.png",
];

//　RT作成
function CreateRenderTexture( v_name, v_layerStart, v_layerEnd, v_clear ){
	CreateRenderTarget( v_name );
	RenderToTextureA1( v_name, v_layerStart, v_layerEnd, v_clear );
	return v_name;
}

//　反映用の2Dテクスチャ作成
function CreateShaderTexture( v_texture, v_blend, v_layer ){
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture( obj, v_texture );
	ObjRender_SetBlendType( obj, v_blend );
	ObjPrim_SetPrimitiveType( obj, PRIMITIVE_TRIANGLESTRIP );
	ObjPrim_SetVertexCount( obj, 4 );
	ObjSprite2D_SetSourceRect( obj, 0, 0, 640, 480 );
	ObjSprite2D_SetDestRect( obj, 0, 0, 640, 480 );
	Obj_SetRenderPriorityI( obj, v_layer );
	ObjRender_SetPosition( obj, 0, 0, 0 );
//	ObjRender_SetPosition( obj, -32, -16, 0 );
	return obj;
}

//　ObjShader作成
function CreateShaderObject( v_obj, v_fxNumber ){
	let obj = ObjShader_Create();
	//　演出上モノクロ化だけは許可
	if( !CfgIsUseShader() && v_fxNumber != 0 ){ return obj; }
	ObjShader_SetShaderF( obj, fxPath[ v_fxNumber ] );
	ObjShader_SetTechnique( obj, fxTc[ v_fxNumber ] );
	ObjShader_SetShaderO( v_obj, obj );
	return obj;
}