#include "./lib_Common.dnh"
#include "./loadlib/file_LoadStgImg.dnh"
#include "./fx_function.dnh"

//----------------------------------------------------
//　背景用関数
//----------------------------------------------------

let world_layer		= 21;	//　ｽﾃｰｼﾞ背景
let effect_layer	= 22;	//　ｴﾌｪｸﾄ



let effect_path		= [
	imgEffectStageParticle,
	imgEffectStageCloud,
];




//　ﾃｸｽﾁｬ生成
function CreateTexture01( path ){
	let obj		= ObjPrim_Create(OBJ_SPRITE_3D);
	
	ObjPrim_SetTexture( obj, path );
	ObjRender_SetBlendType( obj, BLEND_ALPHA );
	Obj_SetRenderPriorityI( obj, world_layer );
	ObjSprite3D_SetSourceDestRect( obj, 0, 0, 2048, 2048 );
	
	return obj;
}
function CreateTexture02( path, width, height ){
	let obj		= ObjPrim_Create(OBJ_SPRITE_3D);
	
	ObjPrim_SetTexture( obj, path );
	ObjRender_SetBlendType( obj, BLEND_ALPHA );
	Obj_SetRenderPriorityI( obj, world_layer );
	ObjSprite3D_SetSourceDestRect( obj, 0, 0, width, height );
	
	return obj;
}
function CreateTextureScreen( ){
	let obj		= ObjPrim_Create(OBJ_SPRITE_2D);
	
	ObjRender_SetBlendType( obj, BLEND_ALPHA );
	Obj_SetRenderPriorityI( obj, world_layer+1 );
	ObjSprite2D_SetDestRect( obj, 0, 0, GetClipWidth, GetClipHeight );
	
	return obj;
}

//　ﾒｯｼｭ
task CreateMesh01( pos, path, move, long ){
	let obj		= ObjMesh_Create();
	let frame	= 0;
	let ten		= 10;
	
	ObjMesh_Load( obj, path );
	Obj_SetRenderPriorityI( obj, world_layer-1 );
	
	while( frame < long || long < 0 ){
		ObjRender_SetPosition( obj, pos[0], pos[1], pos[2] );
		
		pos[0] = pos[0] + move[0];
		pos[1] = pos[1] + move[1];
		pos[2] = pos[2] + move[2];
		
		frame++;
		
		yield;
	}
	Obj_Delete( obj );
}

//　瞬く光
task CreateFlashLight( pos, movep, sca, alpha, long, rgb_array ){
	let ID			= ObjPrim_Create(OBJ_SPRITE_3D);
	let objScene 	= GetEnemyBossSceneObjectID();
	let OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
	let move		= [0,0,0];
	let frame		= 0;
	let move1		= 0;
	let moveA		= 0;
	let spin		= randEffect(0,360);
	let flash		= randEffect(2,64);
	
	//　点滅の速度
	let rc			= truncate( randEffect(2,4) );
	
	let _rect		= [ 3, 0 ];
	
	ObjRender_SetPosition( ID, pos[0], pos[1], pos[2] );
	ObjPrim_SetTexture( ID, effect_path[0] );
	ObjRender_SetBlendType( ID, BLEND_ADD_ARGB );
	Obj_SetRenderPriorityI( ID, world_layer+1 );
	ObjRender_SetScaleXYZ( ID, sca, sca, 0 );
	ObjRender_SetColor( ID, rgb_array[0], rgb_array[1], rgb_array[2] );
	ObjSprite3D_SetSourceDestRect( ID, 0 + _rect[0]*64, 0 + _rect[1]*64, 64 + _rect[0]*64, 64 + _rect[1]*64 );
	ObjSprite3D_SetBillboard( ID, true );
	
	while( move1 < 1 && !OnSpell ){
		objScene 	= GetEnemyBossSceneObjectID();
		OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
		
		move1 = 1 * sin( moveA );
		
		ObjRender_SetPosition( ID, pos[0]+move[0], pos[1]+move[1], pos[2]+move[2] );
		ObjRender_SetAngleXYZ( ID, 0, 0, spin + move[2] );
		
		ObjRender_SetAlpha( ID, (move1*(alpha/2)) - (move1*(alpha/4))*sin(frame*flash) );
		ObjRender_SetScaleXYZ( ID, sca*2 + sca*sin(frame*2), sca*2 + sca*sin(frame*2), 0 );
		
		frame++;
		moveA += 1;
		move[0] = move[0] + movep[0];
		move[1] = move[1] + movep[1];
		move[2] = move[2] + movep[2];
		
		yield;
	}
	move1 = 0;
	moveA = 0;
	while( frame < long && !OnSpell ){
		objScene 	= GetEnemyBossSceneObjectID();
		OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
		
		ObjRender_SetPosition( ID, pos[0]+move[0], pos[1]+move[1], pos[2]+move[2] );
		ObjRender_SetAngleXYZ( ID, 0, 0, spin + move[2] );
		
		ObjRender_SetAlpha( ID, alpha/2 - alpha/4*sin(frame*flash) );
		ObjRender_SetScaleXYZ( ID, sca*2 + sca*sin(frame*2), sca*2 + sca*sin(frame*2), 0 );
		
		frame++;
		move[0] = move[0] + movep[0];
		move[1] = move[1] + movep[1];
		move[2] = move[2] + movep[2];
		
		yield;
	}
	while( move1 < 1 && !OnSpell ){
		objScene 	= GetEnemyBossSceneObjectID();
		OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
		
		move1 = 1 * sin( moveA );
		
		ObjRender_SetPosition( ID, pos[0]+move[0], pos[1]+move[1], pos[2]+move[2] );
		ObjRender_SetAngleXYZ( ID, 0, 0, spin + move[2] );
		
		let fade = alpha - move1*alpha;
		
		ObjRender_SetAlpha( ID, fade/2 - fade/4*sin(frame*flash) );
		ObjRender_SetScaleXYZ( ID, sca*2 + sca*sin(frame*2), sca*2 + sca*sin(frame*2), 0 );
		
		frame++;
		moveA += 1;
		move[0] = move[0] + movep[0];
		move[1] = move[1] + movep[1];
		move[2] = move[2] + movep[2];
		
		yield;
	}
	Obj_Delete( ID );
}

//　葉っぱっぱ
task CreateFallLeaf( pos, movep, sca, alpha, long, rgb_array, spinFlag ){
	let ID			= ObjPrim_Create(OBJ_SPRITE_3D);
	let objScene 	= GetEnemyBossSceneObjectID();
	let OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
	let move		= [0,0,0];
	let frame		= 0;
	let move1		= 0;
	let moveA		= 0;
	let spin		= [ randEffect(0,360), randEffect(0,360), randEffect(0,360) ];
	
	let _rect		= [ 3, 3 ];
	
	ObjRender_SetPosition( ID, pos[0], pos[1], pos[2] );
	ObjPrim_SetTexture( ID, effect_path[0] );
	ObjRender_SetBlendType( ID, BLEND_ALPHA );
	Obj_SetRenderPriorityI( ID, world_layer );
	ObjRender_SetScaleXYZ( ID, sca, sca, 0 );
	ObjRender_SetColor( ID, rgb_array[0], rgb_array[1], rgb_array[2] );
	ObjSprite3D_SetSourceDestRect( ID, 0 + _rect[0]*64, 0 + _rect[1]*64, 64 + _rect[0]*64, 64 + _rect[1]*64 );
	ObjRender_SetAngleXYZ( ID, spin[0], spin[1], spin[2] );
	ObjSprite3D_SetBillboard( ID, true );
	ObjRender_SetFogEnable( ID, false );
	
	while( move1 < 1 && !OnSpell ){
		objScene 	= GetEnemyBossSceneObjectID();
		OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
		
		move1 = 1 * sin( moveA );
		
		ObjRender_SetPosition( ID, pos[0]+move[0], pos[1]+move[1], pos[2]+move[2] );
		if( spinFlag ){
			ObjRender_SetAngleXYZ( ID, spin[0] + move[0], spin[1] + move[1], spin[2] + move[2] );
		}
		
		ObjRender_SetAlpha( ID, move1*alpha );
		ObjRender_SetScaleXYZ( ID, sca*(2-move1), sca*(2-move1), 0 );
		
		frame++;
		moveA += 1;
		move[0] = move[0] + movep[0];
		move[1] = move[1] + movep[1];
		move[2] = move[2] + movep[2];
		
		yield;
	}
	while( move1 > 0 && !OnSpell ){
		objScene 	= GetEnemyBossSceneObjectID();
		OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
		
		move1 = 1 * sin( moveA );
		
		ObjRender_SetPosition( ID, pos[0]+move[0], pos[1]+move[1], pos[2]+move[2] );
		if( spinFlag ){
			ObjRender_SetAngleXYZ( ID, spin[0] + move[0], spin[1] + move[1], spin[2] + move[2] );
		}
		
		let fade = move1*alpha;
		
		ObjRender_SetAlpha( ID, fade );
		ObjRender_SetScaleXYZ( ID, sca*move1, sca*move1, 0 );
		
		frame++;
		moveA += 1;
		move[0] = move[0] + movep[0];
		move[1] = move[1] + movep[1];
		move[2] = move[2] + movep[2];
		
		yield;
	}
	Obj_Delete( ID );
}

//　流れる雲
task CreateCloud( pos, movep, sca, long, rgb_array, alpha ){
	let ID			= ObjPrim_Create(OBJ_SPRITE_3D);
	let objScene 	= GetEnemyBossSceneObjectID();
	let OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
	let move		= [0,0,0];
	let frame		= 0;
	let move1		= 0;
	let moveA		= 0;
	
	ObjRender_SetPosition(ID, pos[0], pos[1], pos[2] );
	ObjPrim_SetTexture(ID, effect_path[1] );
	ObjRender_SetBlendType(ID, BLEND_ALPHA );
	Obj_SetRenderPriorityI(ID, world_layer );
	ObjRender_SetScaleXYZ(ID, sca, sca, 0 );
	ObjRender_SetAngleZ(ID, randEffect(0,360) );
	ObjRender_SetColor(ID, rgb_array[0], rgb_array[1], rgb_array[2] );
	ObjSprite3D_SetSourceDestRect(ID, 0, 0, 256, 256 );
	ObjSprite3D_SetBillboard(ID, true );
	
	while( move1 < 1 ){
		objScene 	= GetEnemyBossSceneObjectID();
		OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
		
		move1 = 1 * sin( moveA );
		
		ObjRender_SetPosition(ID, pos[0]+move[0], pos[1]+move[1], pos[2]+move[2] );
		ObjRender_SetAlpha(ID, move1*alpha );
		
		if( !OnSpell ){
			frame++;
			moveA += 1;
			move[0] = move[0] + movep[0];
			move[1] = move[1] + movep[1];
			move[2] = move[2] + movep[2];
		}
		else{ break; }
		
		yield;
	}
	move1 = 0;
	moveA = 0;
	while( frame < long ){
		objScene 	= GetEnemyBossSceneObjectID();
		OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
		
		ObjRender_SetPosition(ID, pos[0]+move[0], pos[1]+move[1], pos[2]+move[2] );
		
		if( !OnSpell ){
			frame++;
			move[0] = move[0] + movep[0];
			move[1] = move[1] + movep[1];
			move[2] = move[2] + movep[2];
		}
		else{ break; }
		
		yield;
	}
	while( move1 < 1 ){
		objScene 	= GetEnemyBossSceneObjectID();
		OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
		
		move1 = 1 * sin( moveA );
		
		ObjRender_SetPosition(ID, pos[0]+move[0], pos[1]+move[1], pos[2]+move[2] );
		ObjRender_SetAlpha(ID, alpha - move1*alpha );
		
		if( !OnSpell ){
			frame++;
			moveA += 1;
			move[0] = move[0] + movep[0];
			move[1] = move[1] + movep[1];
			move[2] = move[2] + movep[2];
		}
		else{ break; }
		
		yield;
	}
	Obj_Delete( ID );
}


//　魂的な
task CreateSoulLight( pos, movep, sca, alpha, long, rgb_array ){
	let ID			= ObjPrim_Create(OBJ_SPRITE_3D);
	let objScene 	= GetEnemyBossSceneObjectID();
	let OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
	let move		= [0,0,0];
	let frame		= 0;
	let move1		= 0;
	let moveA		= 0;
	let flash		= randEffect(2,64);
	
	let _rect		= [ 3, 0 ];
	
	ObjRender_SetPosition( ID, pos[0], pos[1], pos[2] );
	ObjPrim_SetTexture( ID, effect_path[0] );
	ObjRender_SetBlendType( ID, BLEND_ADD_ARGB );
	Obj_SetRenderPriorityI( ID, world_layer+1 );
	ObjRender_SetScaleXYZ( ID, sca, sca, 0 );
	ObjRender_SetColor( ID, rgb_array[0], rgb_array[1], rgb_array[2] );
	ObjSprite3D_SetSourceDestRect( ID, 0 + _rect[0]*64, 0 + _rect[1]*64, 64 + _rect[0]*64, 64 + _rect[1]*64 );
	ObjSprite3D_SetBillboard( ID, true );
	ObjRender_SetAngleXYZ( ID, 0, 0, 180 );
	
	while( move1 < 1 && !OnSpell ){
		objScene 	= GetEnemyBossSceneObjectID();
		OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
		
		move1 = 1 * sin( moveA );
		
		ObjRender_SetPosition( ID, pos[0]+move[0], pos[1]+move[1], pos[2]+move[2] );
		
		ObjRender_SetAlpha( ID, (move1*(alpha/2)) - (move1*(alpha/4))*sin(frame*flash) );
		ObjRender_SetScaleXYZ( ID, sca*2 + sca*sin(frame*2), sca*2 + sca*sin(frame*2), 0 );
		
		frame++;
		moveA += 1;
		move[0] = move[0] + movep[0];
		move[1] = move[1] + movep[1];
		move[2] = move[2] + movep[2];
		
		yield;
	}
	move1 = 0;
	moveA = 0;
	while( frame < long && !OnSpell ){
		objScene 	= GetEnemyBossSceneObjectID();
		OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
		
		ObjRender_SetPosition( ID, pos[0]+move[0], pos[1]+move[1], pos[2]+move[2] );
		
		ObjRender_SetAlpha( ID, alpha/2 - alpha/4*sin(frame*flash) );
		ObjRender_SetScaleXYZ( ID, sca*2 + sca*sin(frame*2), sca*2 + sca*sin(frame*2), 0 );
		
		frame++;
		move[0] = move[0] + movep[0];
		move[1] = move[1] + movep[1];
		move[2] = move[2] + movep[2];
		
		yield;
	}
	while( move1 < 1 && !OnSpell ){
		objScene 	= GetEnemyBossSceneObjectID();
		OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
		
		move1 = 1 * sin( moveA );
		
		ObjRender_SetPosition( ID, pos[0]+move[0], pos[1]+move[1], pos[2]+move[2] );
		
		let fade = alpha - move1*alpha;
		
		ObjRender_SetAlpha( ID, fade/2 - fade/4*sin(frame*flash) );
		ObjRender_SetScaleXYZ( ID, sca*2 + sca*sin(frame*2), sca*2 + sca*sin(frame*2), 0 );
		
		frame++;
		moveA += 1;
		move[0] = move[0] + movep[0];
		move[1] = move[1] + movep[1];
		move[2] = move[2] + movep[2];
		
		yield;
	}
	Obj_Delete( ID );
}

//　ながれぼし
task CreateFallingStar( pos, movep, sca, alpha, long, rgb_array ){
	let ID			= ObjPrim_Create(OBJ_SPRITE_3D);
	let objScene 	= GetEnemyBossSceneObjectID();
	let OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
	let move		= [0,0,0];
	let frame		= 0;
	let move1		= 0;
	let moveA		= 0;
	let flash		= randEffect(2,64);
	let spin		= randEffect(0,360);
	let spin_add		= randEffect(-30,30);
	
	let _rect		= [ 3, 0 ];
	
	ObjRender_SetPosition( ID, pos[0], pos[1], pos[2] );
	ObjPrim_SetTexture( ID, effect_path[0] );
	ObjRender_SetBlendType( ID, BLEND_ADD_ARGB );
	Obj_SetRenderPriorityI( ID, world_layer+1 );
	ObjRender_SetScaleXYZ( ID, 0, 0, 0 );
	ObjRender_SetColor( ID, rgb_array[0], rgb_array[1], rgb_array[2] );
	ObjSprite3D_SetSourceDestRect( ID, 0 + _rect[0]*64, 0 + _rect[1]*64, 64 + _rect[0]*64, 64 + _rect[1]*64 );
	ObjSprite3D_SetBillboard( ID, true );
	ObjRender_SetAngleXYZ( ID, 0, 0, 180 );
	ObjRender_SetFogEnable( ID, false );
	
	while( moveA < 90 && !OnSpell ){
		objScene 	= GetEnemyBossSceneObjectID();
		OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
		
		move1 = 1 * sin( moveA );
		
		ObjRender_SetPosition( ID, pos[0]+move[0], pos[1]+move[1], pos[2]+move[2] );
		
		let tmp_a = ((move1*(alpha)) - (move1*(alpha/4))*sin(frame*flash)) * (1-move1)*2;
		let tmp_s = move1*sca;
		ObjRender_SetAlpha( ID, tmp_a );
		ObjRender_SetScaleXYZ( ID, tmp_s, tmp_s, 0 );
		ObjRender_SetAngleZ( ID, spin );
		
		frame++;
		moveA += 90/long;
		move[0] = move[0] + movep[0];
		move[1] = move[1] + movep[1];
		move[2] = move[2] + movep[2];
		spin += (1-move1)*spin_add;
		
		yield;
	}
	Obj_Delete( ID );
}


//　火の粉
task CreateSparks( pos, movep, sca, long, rgb_array, alpha ){
	let ID			= ObjPrim_Create(OBJ_SPRITE_3D);
	let objScene 	= GetEnemyBossSceneObjectID();
	let OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
	let move		= [0,0,0];
	let frame		= 0;
	let move1		= 0;
	let moveA		= 0;
	let spin		= randEffect(0,360);
	let flash		= randEffect(2,64);
	
	//　点滅の速度
	let rc			= truncate( randEffect(2,4) );
	
	let _rect		= [ 2, 3 ];
	
	ObjRender_SetPosition( ID, pos[0], pos[1], pos[2] );
	ObjPrim_SetTexture( ID, effect_path[0] );
	ObjRender_SetBlendType( ID, BLEND_ADD_ARGB );
	Obj_SetRenderPriorityI( ID, world_layer+2 );
	ObjRender_SetScaleXYZ( ID, sca, sca, 0 );
	ObjRender_SetColor( ID, rgb_array[0], rgb_array[1], rgb_array[2] );
	ObjSprite3D_SetSourceDestRect( ID, 0 + _rect[0]*64, 0 + _rect[1]*64, 64 + _rect[0]*64, 64 + _rect[1]*64 );
	ObjSprite3D_SetBillboard( ID, true );
	
	while( move1 < 1 && !OnSpell ){
		objScene 	= GetEnemyBossSceneObjectID();
		OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
		
		move1 = 1 * sin( moveA );
		
		//　カメラとの距離でa値減衰
		let dist = GetP2PDistance3D( [ObjRender_GetX(ID), ObjRender_GetY(ID), ObjRender_GetZ(ID)], [GetCameraX(), GetCameraY(), GetCameraZ()] );
		let ad = min( alpha, dist / 2);
		
		ObjRender_SetPosition( ID, pos[0]+move[0], pos[1]+move[1], pos[2]+move[2] );
		ObjRender_SetAngleXYZ( ID, 0, 0, spin + move[2] );
		
		ObjRender_SetAlpha( ID, (move1*(ad/2)) - (move1*(ad/4))*sin(frame*flash) );
		ObjRender_SetScaleXYZ( ID, sca*2 + sca*sin(frame*2), sca*2 + sca*sin(frame*2), 0 );
		
		frame++;
		moveA += 1;
		move[0] = move[0] + movep[0];
		move[1] = move[1] + movep[1];
		move[2] = move[2] + movep[2];
		
		yield;
	}
	move1 = 0;
	moveA = 0;
	while( frame < long && !OnSpell ){
		objScene 	= GetEnemyBossSceneObjectID();
		OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
		
		//　カメラとの距離でa値減衰
		let dist = GetP2PDistance3D( [ObjRender_GetX(ID), ObjRender_GetY(ID), ObjRender_GetZ(ID)], [GetCameraX(), GetCameraY(), GetCameraZ()] );
		let ad = min( alpha, dist / 2);
		
		ObjRender_SetPosition( ID, pos[0]+move[0], pos[1]+move[1], pos[2]+move[2] );
		ObjRender_SetAngleXYZ( ID, 0, 0, spin + move[2] );
		
		ObjRender_SetAlpha( ID, ad/2 - ad/4*sin(frame*flash) );
		ObjRender_SetScaleXYZ( ID, sca*2 + sca*sin(frame*2), sca*2 + sca*sin(frame*2), 0 );
		
		frame++;
		move[0] = move[0] + movep[0];
		move[1] = move[1] + movep[1];
		move[2] = move[2] + movep[2];
		
		yield;
	}
	while( move1 < 1 && !OnSpell ){
		objScene 	= GetEnemyBossSceneObjectID();
		OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
		
		move1 = 1 * sin( moveA );
		
		//　カメラとの距離でa値減衰
		let dist = GetP2PDistance3D( [ObjRender_GetX(ID), ObjRender_GetY(ID), ObjRender_GetZ(ID)], [GetCameraX(), GetCameraY(), GetCameraZ()] );
		let ad = min( alpha, dist / 2);
		
		ObjRender_SetPosition( ID, pos[0]+move[0], pos[1]+move[1], pos[2]+move[2] );
		ObjRender_SetAngleXYZ( ID, 0, 0, spin + move[2] );
		
		let fade = ad - move1*ad;
		
		ObjRender_SetAlpha( ID, fade/2 - fade/4*sin(frame*flash) );
		ObjRender_SetScaleXYZ( ID, sca*2 + sca*sin(frame*2), sca*2 + sca*sin(frame*2), 0 );
		
		frame++;
		moveA += 1;
		move[0] = move[0] + movep[0];
		move[1] = move[1] + movep[1];
		move[2] = move[2] + movep[2];
		
		yield;
	}
	
	//　3D空間における2点間の距離計測
	function GetP2PDistance3D( pos1, pos2 ){
		return ( ( pos1[0] - pos2[0] ) ^ 2 + ( pos1[1] - pos2[1] ) ^ 2 + ( pos1[2] - pos2[2] ) ^ 2 ) ^ 0.5;
	}
	
	
	Obj_Delete( ID );
}


// 暗転えへくと
// フェードインの場合は基本消えないので注意
task BlackOut( lay, delay, timer, is_fadeout, rgb_array )
{
	let ID			= ObjPrim_Create(OBJ_SPRITE_2D);
	
	ObjRender_SetPosition( ID, MinX, MinY, 0 );
	ObjRender_SetBlendType( ID, BLEND_ALPHA );
	Obj_SetRenderPriorityI( ID, lay );
	ObjRender_SetColor( ID, rgb_array[0], rgb_array[1], rgb_array[2] );
	ObjSprite2D_SetDestRect( ID, 0, 0, GetClipWidth, GetClipHeight );
	
	if (is_fadeout)
	{
		waitEx(delay);
		descent(t in 0 .. timer)
		{
			let tmp = sin((t+1)/timer*90);
			ObjRender_SetAlpha( ID, tmp*255 );
			yield;
		}
	}
	else
	{
		ObjRender_SetAlpha( ID, 0 );
		waitEx(delay);
		ascent(t in 0 .. timer)
		{
			let tmp = sin((t+1)/timer*90);
			ObjRender_SetAlpha( ID, tmp*255 );
			yield;
		}
		// 保険
		waitEx(36000);
	}
	Obj_Delete( ID );
}

// フェードアウト（色を記録する）
task BlackOutEx( lay, delay, timer, is_fadeout, rgb_array )
{
	let col = rgb_array;
	if (is_fadeout)
	{
		let tmp = GetAreaCommonData(CAREA_SYSTEM, "FadeoutColor", []);
		if (length(tmp) <= 0)
		{
			SetAreaCommonData(CAREA_SYSTEM, "FadeoutColor", [0, 0, 0]);
		} else {
			col = GetAreaCommonData(CAREA_SYSTEM, "FadeoutColor", [0, 0, 0]);
		}
	}
	else
	{
		SetAreaCommonData(CAREA_SYSTEM, "FadeoutColor", rgb_array);
	}
	BlackOut( lay, delay, timer, is_fadeout, col );
}

// 背景フラグ取得
function GetStageScene()
{
	return(GetAreaCommonData(CAREA_STAGE, "StageScene", 0));
}
