// 移動モーションの処理

// -----------------------------------
// 時間停止中の妖精が動き出すモーション
// -----------------------------------
// その１：ひょいっと落ちてくる
task FairyFadeIN_MotionDown(objEnemy, timer)
{
	timer -= 45;	// フェードインタイム（固定）
	
	let by = ObjMove_GetY(objEnemy);
	ascent(t in 0 .. timer)
	{
		if (Obj_IsDeleted(objEnemy)) { break; }
		let tmp = (t+1)/timer;
		ObjMove_SetY(objEnemy, by-(1-tmp)^2*40);
		wait(1);
	}
}
// その２：一定速度移動
task FairyFadeIN_MotionStraight(objEnemy, timer, vx, vy)
{
	timer = max(0, timer-45);	// フェードインタイム（固定）
	
	let all_len = timer+23;
	
	let bx = ObjMove_GetX(objEnemy);
	let by = ObjMove_GetY(objEnemy);
	let tmp = 1;
	ascent(t in 0 .. timer)
	{
		if (Obj_IsDeleted(objEnemy)) { break; }
		ObjMove_SetPosition(objEnemy, bx-vx*tmp, by-vy*tmp);
		tmp -= 1/all_len;
		wait(1);
	}
	descent(t in 0 .. 45)
	{
		if (Obj_IsDeleted(objEnemy)) { break; }
		ObjMove_SetPosition(objEnemy, bx-vx*tmp, by-vy*tmp);
		tmp -= 1/all_len*(t+1)/45;
		wait(1);
	}
	ObjMove_SetPosition(objEnemy, bx, by);
}
task FairyFadeIN_MotionStraight02(objEnemy, timer, vx, vy)
{
	timer = max(0, timer-45);	// フェードインタイム（固定）
	
	let all_len = timer+23;
	
	let bx = ObjMove_GetX(objEnemy);
	let by = ObjMove_GetY(objEnemy);
	let tmp = 1;
	ascent(t in 0 .. timer)
	{
		if (Obj_IsDeleted(objEnemy)) { break; }
		ObjMove_SetPosition(objEnemy, bx-vx*tmp, by-vy*tmp+12);
		tmp -= 1/all_len;
		wait(1);
	}
	descent(t in 0 .. 45)
	{
		if (Obj_IsDeleted(objEnemy)) { break; }
		ObjMove_SetPosition(objEnemy, bx-vx*tmp, by-vy*tmp+12*(1-cos((t+1)/45*180))/2);
		tmp -= 1/all_len*(t+1)/45;
		wait(1);
	}
	ObjMove_SetPosition(objEnemy, bx, by);
}

// 一定時間滑らかにカーブ
task ZakoMove_CurveTimer(objEnemy, timer, add_angle)
{
	ascent(t in 0 .. timer)
	{
		if (Obj_IsDeleted(objEnemy)) { break; }
		let tmp = sin(t/(timer-1)*180)*add_angle;
		Enemy_SetAngle(objEnemy, ObjMove_GetAngle(objEnemy)+tmp);
		waitObj(objEnemy, 1);
	}
}
// 一定時間滑らかにカーブ（速度もチェンジ）
task ZakoMove_CurveTimer02(objEnemy, timer, add_angle)
{
	let speed = Enemy_GetSpeed(objEnemy);
	ascent(t in 0 .. timer)
	{
		if (Obj_IsDeleted(objEnemy)) { break; }
		let tmp = sin(t/(timer-1)*180);
		Enemy_SetAngle(objEnemy, Enemy_GetAngle(objEnemy)+tmp*add_angle);
		Enemy_SetSpeed(objEnemy, (1-tmp*0.5)*speed);
		waitObj(objEnemy, 1);
	}
	Enemy_SetSpeed(objEnemy, speed);
}
