// エフェクトや描画関係の処理


//敵画像のID取得（敵オブジェクト＝画像オブジェクトにはしていない為）
//外部から処理する場合なんかに、複数オブジェクトには未対応
function GetEnemyImageID(obj)
{
	return(Obj_GetValueD(obj, "IMAGE_ID", -1));
}
function GetEnemyImageIDEx(obj)
{
	return(Obj_GetValueD(obj, "IMAGE_ID_ALL", []));
}

// -------------------- 妖精描画 -------------------- //
task DrawFairy( obj, szImage, Type )
{
	let m_Delay = 8;		//各コマ間のディレイ
	let m_Rect_Number = 0;		//コマ番号
	let m_Con = false;
	let m_aNum_Rotation_Stand = [ 0, 1, 2, 1 ];
	let m_aNum_Rotation_Right = [ 4, 5, 6, 5 ];
	
	//変数
	let dRect = DrawFairy_GetRect( Type );
	let dLength = DrawFairy_GetLength( Type );
	
	//エフェクトオブジェクトを作成
	let objImg = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(objImg, priorityZako);
	ObjPrim_SetTexture(objImg, szImage);
	Obj_SetValue(obj, "IMAGE_ID", objImg);	//IDを記録

	let beforeX = ObjMove_GetX(obj);
	let count = 0;
	while(!Obj_IsDeleted(obj))
	{
		let objImg = Obj_GetValueD(obj, "IMAGE_ID", -1);
		if (!IsTimeStopObj(obj))
		{
			let DirectionState = trunc((ObjMove_GetX(obj)-beforeX)*10);
			//立ち
			if( DirectionState == 0 ){
				m_Rect_Number = m_aNum_Rotation_Stand[ trunc( count % ( 4 * m_Delay ) / m_Delay ) ];
				Obj_SetValue(obj, "M_CON", true);
			}
			//左右
			else{
				if( Obj_GetValueD(obj, "M_CON", false) ){
					m_Rect_Number = 3;	//StandからRight・Leftへの繋ぎコマ番号 = 3
					Obj_SetValue(obj, "M_CON", false);
				}
				else { m_Rect_Number = m_aNum_Rotation_Right[ trunc( count % ( 4 * m_Delay ) / m_Delay ) ]; }
			}
			//左なら反転
			if( DirectionState < 0 ){ ObjRender_SetAngleY( objImg, 180 ); }
			else{ ObjRender_SetAngleY( objImg, 0 ); }
			//描画
			ObjSprite2D_SetSourceRect(objImg,
				dRect[0] + dLength*m_Rect_Number, dRect[1],
				dRect[0] + dLength*(m_Rect_Number+1), dRect[1] + dLength);
			ObjSprite2D_SetDestCenter(objImg);
			count++;
		}
		ObjRender_SetPosition(objImg, round(ObjMove_GetX(obj)), round(ObjMove_GetY(obj)), 0);
		beforeX = ObjMove_GetX(obj);
		yield;
	}
	Obj_Delete(objImg);
}
//一辺の長さを取得
function DrawFairy_GetLength( let Type ){
	alternative( Type )
	case( FAIRY_VERYSMALL	, FAIRY_VERYSMALL_FLUFF )	{ return(32); }
	case( FAIRY_SMALL	, FAIRY_SMALL_CAP )		{ return(48); }
	case( FAIRY_MIDDLE	, FAIRY_MIDDLE_RIBBON )		{ return(48); }
	case( FAIRY_LARGE	, FAIRY_LARGE_FLOWER )		{ return(64); }
	others					{ assert( 0, "妖精の指定が間違っています" );}
}

//初期座標（左上）を返す
function DrawFairy_GetRect( let Type ){
	alternative( Type )
	case( FAIRY_VERYSMALL )		{ return([ 0, 0 ]); }
	case( FAIRY_VERYSMALL_FLUFF )	{ return([ 224, 0 ]); }
	case( FAIRY_SMALL )		{ return([ 0, 32 ]); }
	case( FAIRY_SMALL_CAP )		{ return([ 0, 80 ]); }
	case( FAIRY_MIDDLE )		{ return([ 0, 128 ]); }
	case( FAIRY_MIDDLE_RIBBON )	{ return([ 0, 176 ]); }
	case( FAIRY_LARGE )		{ return([ 0, 224 ]); }
	case( FAIRY_LARGE_FLOWER )	{ return([ 0, 288 ]); }
	others			{ assert( 0, "妖精の指定が間違っています" ); }
}

// 時間停止中の妖精が動き出すモーション
task FairyFadeIN_TimeStop(objEnemy, timer)
{
	let objImg = GetEnemyImageID(objEnemy);
	ObjShader_SetShaderF(objImg, hlslMonotone);
	ObjShader_SetTechnique(objImg, "TecMonotone");
	ObjShader_SetFloat(objImg, "power_", 1);
	
	SetTimeStopFlagObj(objEnemy, timer);
	SetEnemyVisible(objEnemy, false);
	Obj_SetRenderPriorityI(objImg, priorityZakoBack);
	ascent(t in 0 .. timer-45)
	{
		if (Obj_IsDeleted(objEnemy)) { break; }
		let tmp = (t+1)/(timer-45);
		let tmp_c = tmp * 96;
		ObjRender_SetAlpha(objImg, min(255,tmp*255*2));
		ObjRender_SetColor(objImg, tmp_c, tmp_c, tmp_c);
		wait(1);
	}
	ascent(t in 0 .. 45)
	{
		if (Obj_IsDeleted(objEnemy)) { break; }
		if (t%5 == 0 && t <= 25)
		{
			// ■えへくと
			let tmp = randEffect(-1,1);
			FadeIN_SquareEffect(ObjMove_GetX(objEnemy)+tmp*12, ObjMove_GetY(objEnemy)+randEffect(-18,18),
				tmp*randEffect(0,4), 0, 8, 60);
		}
		let tmp = (t+1)/45;
		let tmp_c = 96 + (255-96)*tmp;
		ObjRender_SetColor(objImg, tmp_c, tmp_c, tmp_c);
		ObjShader_SetFloat(objImg, "power_", min(2-tmp*2,1));
		wait(1);
	}
	Obj_SetRenderPriorityI(objImg, priorityZako);
	SetEnemyVisible(objEnemy, true);
}
task FadeIN_SquareEffect(x, y, vx, vy, size, timer)
{
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(obj, priorityZako+1);
	ObjPrim_SetTexture(obj, imgWhite);
	ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
	ObjSprite2D_SetSourceRect(obj, -size, -size, size, size);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetColor(obj, 128, randEffect(128,255), 255);
	
	ascent(t in 0 .. timer)
	{
		let tmp = (t+1)/timer;
		ObjRender_SetAlpha(obj, (1-tmp)*sin(tmp*180)*255 - (t%8)*12);
		ObjRender_SetPosition(obj, x, y, 0);
		x += vx*tmp; y += vy*tmp;
		wait(1);
	}
	Obj_Delete(obj);
}

// -------------------- 陰陽玉描画 -------------------- //
task DrawOnmyou( obj, Type )
{
	let rectX = (Type%4) * 32;
	let rectY = trunc(Type/4) * 32;
	
	//エフェクトオブジェクトを作成
	let objImg3 = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	Obj_SetRenderPriorityI(objImg3, priorityZako-1);
	ObjRender_SetBlendType(objImg3, BLEND_ADD_ARGB);
	ObjPrim_SetTexture(objImg3, imgZakoOnmyou);
	SetVeterex2D(objImg3, rectX, rectY+128, 32, 32, 1.75);

	let objImg2 = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	Obj_SetRenderPriorityI(objImg2, priorityZako-1);
	ObjPrim_SetTexture(objImg2, imgZakoOnmyou);
	SetVeterex2D(objImg2, rectX, rectY+64, 32, 32, 1.4);

	let objImg = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	Obj_SetRenderPriorityI(objImg, priorityZako);
	ObjPrim_SetTexture(objImg, imgZakoOnmyou);
	SetVeterex2D(objImg, rectX, rectY, 32, 32, 0.9);

	Obj_SetValue(obj, "COLOR", Type);	//色を記録
	Obj_SetValue(obj, "IMAGE_ID", objImg);	//IDを記録
	Obj_SetValue(obj, "IMAGE_ID_ALL", [objImg, objImg2, objImg3]);

	let count = 0;
	while(!Obj_IsDeleted(obj))
	{
		if (!IsTimeStopObj(obj))
		{
			let ex = round(ObjMove_GetX(obj));
			let ey = round(ObjMove_GetY(obj));
			ObjRender_SetPosition(objImg, ex, ey, 0);
			ObjRender_SetPosition(objImg2, ex, ey, 0);
			ObjRender_SetPosition(objImg3, ex, ey, 0);
			ObjRender_SetAngleZ(objImg2, 6*count);
			ObjRender_SetAngleZ(objImg3, -4*count);
			count++;
		}
		yield;
	}
	Obj_Delete(objImg);
	Obj_Delete(objImg2);
	Obj_Delete(objImg3);
}


//画面後ろから登場（陰陽玉） エフェクト部分
task ZakoEnterEffect_Onmyou(objEnemy, timer)
{
	let iniColor = Obj_GetValueD(objEnemy, "COLOR", EFF_RED);
	let objImg = GetEnemyImageIDEx(objEnemy);	//画像ID

	SetEnemyVisible(objEnemy, false);	//当たり判定消去
	let tmp_c = GetEffectColorL(iniColor);	//カラー取得
	ascent(i in 0 .. 3)
	{
		Obj_SetRenderPriorityI(objImg[i], priorityZakoBack);	//画像を背面に
		ObjRender_SetColor(objImg[i], tmp_c[0]/3+32, tmp_c[1]/3+32, tmp_c[2]/3+32);
	}
	ascent(t in 0 .. timer)
	{
		if (!IsTimeStopObj(objEnemy))
		{
			let tmp = sin((t+1)/timer*90);
			let tmp_s = 0.2 + tmp * 0.8;
			let tmp_a = min(255, tmp*255*3);
			ascent(i in 0 .. 3)
			{
				ObjRender_SetAlpha(objImg[i], tmp_a);
				ObjRender_SetScaleXYZ(objImg[i], tmp_s, tmp_s, 1);
			}
			if (t > timer-10)
			{
				let tmp = (t-timer+10)/10;
				let bc = tmp*(255-32)+32;
				ascent(i in 0 .. 3)
				{
					ObjRender_SetColor(objImg[i], tmp_c[0]/3*(1-tmp)+bc, tmp_c[1]/3*(1-tmp)+bc, tmp_c[2]/3*(1-tmp)+bc);
				}
			}
		}
		yield;
	}
	ascent(i in 0 .. 3)
	{
		Obj_SetRenderPriorityI(objImg[i], priorityZako);
		ObjRender_SetColor(objImg[i], 255, 255, 255);
		ObjRender_SetAlpha(objImg[i], 255);
		ObjRender_SetScaleXYZ(objImg[i], 1, 1, 1);
	}
	SetEnemyVisible(objEnemy, true);	//当たり判定ON
}

//画面後ろからへ退場（陰陽玉） エフェクト部分
task ZakoAwayEffect_Onmyou(objEnemy, timer)
{
	let iniColor = Obj_GetValueD(objEnemy, "COLOR", EFF_RED);
	let objImg = GetEnemyImageIDEx(objEnemy);	//画像ID
	
	SetEnemyVisible(objEnemy, false);	//当たり判定消去
	let tmp_c = GetEffectColorL(iniColor);	//カラー取得
	ascent(i in 0 .. 3)
	{
		Obj_SetRenderPriorityI(objImg[i], priorityZakoBack);	//画像を背面に
		ObjRender_SetColor(objImg[i], tmp_c[0]/4+64, tmp_c[1]/4+64, tmp_c[2]/4+64);
	}
	ascent(t in 0 .. timer)
	{
		let tmp_s = 0.2 + ((timer-t)/timer)^2 * 0.8;
		let tmp_a = min(255, (timer-t)/timer*255*2);
		ascent(i in 0 .. 3)
		{
			ObjRender_SetAlpha(objImg[i], tmp_a);
			ObjRender_SetScaleXYZ(objImg[i], tmp_s, tmp_s, 1);
		}
		waitObj(objEnemy, 1);
	}
	EraseEnemy(objEnemy);	//敵を削除
}


// -------------------- 人魂描画 -------------------- //
task DrawHitodama( objEnemy, Type )
{
	Obj_SetValue(objEnemy, "COLOR", Type);	//色を記録
	yield;
	
	let rectX = Type * 32;
	let rectY = 0;
	
	let objBase = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(objBase, GetShotRenderPriorityI());
	ObjPrim_SetTexture(objBase, imgZakoHitodama);
	ObjSprite2D_SetSourceRect(objBase, rectX, rectY, rectX+32, rectY+32);
	ObjSprite2D_SetDestCenter(objBase);
	
	let vis_flg = false;
	let t = 0;
	let scale = 6;
	let alpha = 0;
	while(CanShotBullet(objEnemy))
	{
		if (!IsTimeStopObj(objEnemy))
		{
			vis_flg = GetEnemyVisible(objEnemy);
			if (IsDrawEffect() > 0 && t%3 == 0)
			{
				DrawHitodama_sub(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy),
					rectX, rectY, randEffect(-12,12), -48, vis_flg);
			}
			Obj_SetVisible(objBase, vis_flg);
			if (vis_flg)
			{
				ObjRender_SetPosition(objBase, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 0);
				ObjRender_SetScaleXYZ(objBase, scale, scale, 0);
				ObjRender_SetAngleZ(objBase, randEffect(0,360));
				ObjRender_SetAlpha(objBase, alpha);
				alpha = min(255, alpha+60); scale = max(2, scale-0.3);
			}
			t++;
		}
		yield;
	}
	Obj_Delete(objBase);
}
task DrawHitodama_sub(objEnemy, x, y, rx, ry, vx, vy, isVisible)
{
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(obj, GetShotRenderPriorityI()+1);
	ObjPrim_SetTexture(obj, imgZakoHitodama);
	
	if (isVisible)
	{
		ObjSprite2D_SetSourceRect(obj, rx, ry+32, rx+32, ry+64);
		ObjSprite2D_SetDestCenter(obj);
		ObjRender_SetPosition(obj, x, y, 0);
		ObjRender_SetColor(obj, 255, 255, 255);
		ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);

		let ea = randEffect(0,360);
		ObjRender_SetAngleZ(obj, ea);
		ascent(t in 0 .. 15)
		{
			let tmp = ((t+1)/15)^2;
			let tmp_s = (1-tmp) * 1;
			ObjRender_SetPosition(obj, x+tmp*vx, y+tmp*vy, 0);
			ObjRender_SetScaleXYZ(obj, tmp_s, tmp_s, 1);
			waitObj(objEnemy, 1);
		}
	}
	else
	{
		ObjSprite2D_SetSourceRect(obj, rx, ry+32, rx+32, ry+64);
		ObjSprite2D_SetDestCenter(obj);
		ObjRender_SetPosition(obj, x, y, 0);
		ObjRender_SetColor(obj, 255, 255, 255);
		ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);

		ObjRender_SetAngleZ(obj, randEffect(0,360));
		ObjRender_SetPosition(obj, x+randEffect(-4, 4), y+randEffect(-4, 4), 0);
		ObjRender_SetAlpha(obj, 64);
		ascent(t in 0 .. 12)
		{
			let tmp = (t/12)^2;
			let tmp_s = (1-tmp) * 2;
			ObjRender_SetScaleXYZ(obj, tmp_s, tmp_s, 1);
			waitObj(objEnemy, 1);
		}
	}
	Obj_Delete(obj);
}
task SetHitodamaVisible(obj, delay)
{
	SetEnemyVisible(obj, false);	//当たり判定消去
	waitObj(obj, delay);
	if (!Obj_IsDeleted(obj))
	{
		CallSound(sndFire);
		SetEnemyVisible(obj, true);
	}
}
task SetHitodamaVisibleSilent(obj, delay)
{
	SetEnemyVisible(obj, false);	//当たり判定消去
	waitObj(obj, delay);
	if (!Obj_IsDeleted(obj))
	{
		SetEnemyVisible(obj, true);
	}
}
/*
task DrawHitodama( objEnemy, Type )
{
	Obj_SetValue(objEnemy, "COLOR", Type);	//色を記録
	yield;
	
	let rectX = Type * 32;
	let rectY = 0;
	
	let objBase = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(objBase, GetShotRenderPriorityI()+1);
	ObjPrim_SetTexture(objBase, imgZakoHitodama);
	ObjSprite2D_SetSourceRect(objBase, rectX, rectY, rectX+32, rectY+32);
	ObjSprite2D_SetDestCenter(objBase);
	
	let vis_flg = false;
	let t = 0;
	let scale = 5;
	let alpha = 0;
	while(CanShotBullet(objEnemy))
	{
		if (!IsTimeStopObj(objEnemy))
		{
			vis_flg = GetEnemyVisible(objEnemy);
			if (IsDrawEffect() > 0 && t%4 == 0)
			{
				DrawHitodama_sub(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy),
					rectX, rectY, randEffect(-12,12), -48, vis_flg);
			}
			Obj_SetVisible(objBase, vis_flg);
			if (vis_flg)
			{
				ObjRender_SetPosition(objBase, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 0);
				ObjRender_SetScaleXYZ(objBase, scale, scale, 0);
				ObjRender_SetAngleZ(objBase, t*75);
				ObjRender_SetAlpha(objBase, alpha);
				alpha = min(255, alpha+60); scale = max(1.5, scale-0.4);
			}
			t++;
		}
		yield;
	}
	Obj_Delete(objBase);
}
task DrawHitodama_sub(objEnemy, x, y, rx, ry, vx, vy, isVisible)
{
	let obj = [ObjPrim_Create(OBJ_SPRITE_2D), ObjPrim_Create(OBJ_SPRITE_2D)];
	ascent(i in 0 .. 2)
	{
		Obj_SetRenderPriorityI(obj[i], GetShotRenderPriorityI()+1+i);
		ObjPrim_SetTexture(obj[i], imgZakoHitodama);
		ObjSprite2D_SetSourceRect(obj[i], rx, ry, rx+32, ry+32);
		ObjSprite2D_SetDestCenter(obj[i]);
		ObjRender_SetPosition(obj[i], x, y, 0);
		ObjRender_SetColor(obj[i], 255, 255, 255);
	}
	ObjRender_SetBlendType(obj[0], BLEND_SUBTRACT);
	ObjRender_SetBlendType(obj[1], BLEND_ADD_ARGB);
	ObjRender_SetColor(obj[0], 32, 32, 32);
	
	if (isVisible)
	{
		let ea = randEffect(0,360);
		ascent(i in 0 .. 2)
		{
			ObjRender_SetAngleZ(obj[i], ea);
		}
		ascent(t in 0 .. 15)
		{
			let tmp = (t/15)^2;
			let tmp_s = (1-tmp) * 1.25;
			ascent(i in 0 .. 2)
			{
				ObjRender_SetPosition(obj[i], x+tmp*vx, y+tmp*vy, 0);
			}
			ObjRender_SetScaleXYZ(obj[0], tmp_s*2, tmp_s*2, 1);
			ObjRender_SetScaleXYZ(obj[1], tmp_s, tmp_s, 1);
			waitObj(objEnemy, 1);
		}
	}
	else
	{

		ascent(i in 0 .. 2)
		{
			ObjRender_SetAngleZ(obj[i], -135);
			ObjRender_SetPosition(obj[i], x+randEffect(-4, 4), y+randEffect(-4, 4), 0);
			ObjRender_SetAlpha(obj[i], 64);
		}
		ascent(t in 0 .. 12)
		{
			let tmp = (t/12)^2;
			let tmp_s = (1-tmp) * 2;
			ObjRender_SetScaleXYZ(obj[0], tmp_s*2, tmp_s*2, 1);
			ObjRender_SetScaleXYZ(obj[1], tmp_s, tmp_s, 1);
			waitObj(objEnemy, 1);
		}
	}
	ascent(i in 0 .. 2) { Obj_Delete(obj[i]); }
}
*/

// -------------------- 人魂描画（半透明タイプ） -------------------- //
task DrawHitodama2( objEnemy, Type )
{
	Obj_SetValue(objEnemy, "COLOR", Type);	//色を記録
	yield;
	
	let rectX = Type * 32;
	let rectY = 0;
	
	let objBase = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(objBase, GetShotRenderPriorityI());
	ObjPrim_SetTexture(objBase, imgZakoHitodama);
	ObjSprite2D_SetSourceRect(objBase, rectX, rectY, rectX+32, rectY+32);
	ObjSprite2D_SetDestCenter(objBase);
	
	let t = 0;
	let scale = 1.5;
	while(CanShotBullet(objEnemy))
	{
		if (!IsTimeStopObj(objEnemy))
		{
			let hscale = Obj_GetValueD(objEnemy, "SCALE", 1);
			let halpha = Obj_GetValueD(objEnemy, "ALPHA", 255);
			if (IsDrawEffect() > 0 && t%4 == 0)
			{
				DrawHitodama_sub2(objEnemy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy),
					rectX, rectY, randEffect(-12,12)*hscale, -48*hscale, hscale, halpha);
			}
			local
			{
				ObjRender_SetPosition(objBase, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 0);
				ObjRender_SetScaleXYZ(objBase, scale*hscale, scale*hscale, 0);
				ObjRender_SetAngleZ(objBase, t*75);
				ObjRender_SetAlpha(objBase, halpha);
			}
			t++;
		}
		yield;
	}
	Obj_Delete(objBase);
}
task DrawHitodama_sub2(objEnemy, x, y, rx, ry, vx, vy, scale, alpha)
{
	let obj = [ObjPrim_Create(OBJ_SPRITE_2D), ObjPrim_Create(OBJ_SPRITE_2D)];
	ascent(i in 0 .. 2)
	{
		Obj_SetRenderPriorityI(obj[i], GetShotRenderPriorityI()+i);
		ObjPrim_SetTexture(obj[i], imgZakoHitodama);
		ObjSprite2D_SetSourceRect(obj[i], rx, ry, rx+32, ry+32);
		ObjSprite2D_SetDestCenter(obj[i]);
		ObjRender_SetPosition(obj[i], x, y, 0);
		ObjRender_SetColor(obj[i], 255, 255, 255);
		ObjRender_SetAlpha(obj[i], alpha);
	}
	ObjRender_SetBlendType(obj[0], BLEND_SUBTRACT);
	ObjRender_SetBlendType(obj[1], BLEND_ADD_ARGB);
	ObjRender_SetColor(obj[0], 32, 32, 32);
	
	let ea = randEffect(0,360);
	ascent(i in 0 .. 2)
	{
		ObjRender_SetAngleZ(obj[i], ea);
	}
	ascent(t in 0 .. 15)
	{
		let tmp = (t/15)^2;
		let tmp_s = (1-tmp) * 1.25 * scale;
		ascent(i in 0 .. 2)
		{
			ObjRender_SetPosition(obj[i], x+tmp*vx, y+tmp*vy, 0);
		}
		ObjRender_SetScaleXYZ(obj[0], tmp_s*2, tmp_s*2, 1);
		ObjRender_SetScaleXYZ(obj[1], tmp_s, tmp_s, 1);
		waitObj(objEnemy, 1);
	}
	ascent(i in 0 .. 2) { Obj_Delete(obj[i]); }
}
function SetHitodama2Size(obj, scale, alpha)
{
	Obj_SetValue(obj, "SCALE", scale);
	Obj_SetValue(obj, "ALPHA", alpha);
}
task Hitodama2_FadeIN(obj, timer)
{
	SetEnemyVisible(obj, false);	//当たり判定消去
	ascent(i in 0 .. timer)
	{
		let tmp = i/timer;
		SetHitodama2Size(obj, 0.5+tmp*0.5, tmp*96);
		waitObj(1, obj);
	}
	SetHitodama2Size(obj, 1, 255);
	SetEnemyVisible(obj, true);
}

// -------------------- 毛玉描画 -------------------- //
task DrawKedama( obj, Type )
{
	let rectX = (Type%4) * 32;
	let rectY = trunc(Type/4) * 32;
	
	//エフェクトオブジェクトを作成
	let objImg = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	Obj_SetRenderPriorityI(objImg, priorityZako);
	ObjPrim_SetTexture(objImg, imgZakoOther);
	SetVeterex2D(objImg, rectX, rectY, 32, 32, 1);

	Obj_SetValue(obj, "COLOR", Type);	//色を記録
	Obj_SetValue(obj, "IMAGE_ID", objImg);	//IDを記録

	let count = 0;
	while(!Obj_IsDeleted(obj))
	{
		if (!IsTimeStopObj(obj))
		{
			let ex = round(ObjMove_GetX(obj));
			let ey = round(ObjMove_GetY(obj));
			ObjRender_SetPosition(objImg, ex, ey, 0);
			ObjRender_SetAngleZ(objImg, 12*count);
			count++;
		}
		yield;
	}
	Obj_Delete(objImg);
}

//画面後ろから登場（毛玉） エフェクト部分
task ZakoEnterEffect_Kedama(objEnemy, timer)
{
	let objImg = GetEnemyImageID(objEnemy);	//画像ID
	SetEnemyVisible(objEnemy, false);	//当たり判定消去
	Obj_SetRenderPriorityI(objImg, priorityZako-1);	//画像を背面に
	ObjRender_SetColor(objImg, 96, 96, 96);

	ascent(t in 0 .. timer)
	{
		let tmp_s = 0.2 + ((t+1)/timer)^2 * 0.8;
		let tmp_a = min(255, (t+1)/timer*255*2);
		ObjRender_SetAlpha(objImg, tmp_a);
		ObjRender_SetScaleXYZ(objImg, tmp_s, tmp_s, 1);
		waitObj(objEnemy, 1);
	}
	Obj_SetRenderPriorityI(objImg, priorityZako);
	ObjRender_SetColor(objImg, 255, 255, 255);
	ObjRender_SetAlpha(objImg, 255);
	ObjRender_SetScaleXYZ(objImg, 1, 1, 1);
	SetEnemyVisible(objEnemy, true);	//当たり判定ON
}


// -------------------- シャボン玉描画 -------------------- //
task DrawBubbleEnemy( obj, scale )
{	
	//エフェクトオブジェクトを作成
	let objImg = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	Obj_SetRenderPriorityI(objImg, priorityZako);
	ObjPrim_SetTexture(objImg, imgZakoBubble);
	SetVeterex2D(objImg, 0, 0, 128, 128, 1);

	Obj_SetValue(obj, "IMAGE_ID", objImg);	//IDを記録
	SetEnemyVisible(obj, false);

	let count = 0;
	while(!Obj_IsDeleted(obj))
	{
		if (!IsTimeStopObj(obj))
		{
			// 当たり判定ON
			if (count == 60) { SetEnemyVisible(obj, true); }

			let ex = round(ObjMove_GetX(obj));
			let ey = round(ObjMove_GetY(obj));
			let sc = scale;
			if (count < 60) { sc *= GetCurve((count+1)/60); }
			ObjRender_SetPosition(objImg, ex, ey, 0);
			ObjRender_SetScaleXYZ(objImg, sc, sc, sc);
			ObjRender_SetAngleZ(objImg, sin(count)*30);
			count++;
		}
		yield;
	}
	Obj_Delete(objImg);
}



// -------------------- 鳥さん描画 -------------------- //
task DrawBirdOption(objBase, color, base_angle, scale)
{
	DrawBirdOption2(objBase, color, base_angle, scale, 0.05, true);
}
task DrawBirdOption2(objBase, color, base_angle, scale, AngleHomingRate, VisibleFlag)
{
	let col = [64, 64, 64];
	alternative(color%8)
	case(EFF_RED)		{ col = [210, 0, 0]; }
	case(EFF_ORANGE)	{ col = [160, 60, 0]; }
	case(EFF_YELLOW)	{ col = [100, 100, 0]; }
	case(EFF_GREEN)		{ col = [0, 120, 0]; }
	case(EFF_SKY)		{ col = [0, 100, 120]; }
	case(EFF_BLUE)		{ col = [0, 64, 255]; }
	case(EFF_PURPLE)	{ col = [140, 0, 140]; }
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(obj, GetShotRenderPriorityI+2);
	ObjPrim_SetTexture(obj, imgZakoBird );
	ObjRender_SetBlendType(obj, BLEND_ADD_ARGB );
	ObjSprite2D_SetDestRect(obj, -32*scale, -32*scale, 32*scale, 32*scale);
	ObjRender_SetPosition(obj, ObjMove_GetX(objBase), ObjMove_GetY(objBase), 0 );
	ObjRender_SetColor(obj, 128+col[0]/2, 128+col[1]/2, 128+col[2]/2);
	
	let angle = base_angle;
	let beforeX = ObjMove_GetX(objBase);
	let beforeY = ObjMove_GetY(objBase);

	let t = 0;
	let anime = 0;
	
	// 最初は無敵
	SetEnemyVisible(objBase, false);
	
	while(!Obj_IsDeleted(objBase))
	{
		if (!IsTimeStopObj(objBase) && (beforeX != ObjMove_GetX(objBase) || beforeY != ObjMove_GetY(objBase)))
		{
			let to_a = atan2(ObjMove_GetY(objBase)-beforeY, ObjMove_GetX(objBase)-beforeX);
			to_a = (to_a-angle)%360;
			if (to_a > 180) { to_a -= 360; }
			angle += to_a*AngleHomingRate;
			beforeX = ObjMove_GetX(objBase);
			beforeY = ObjMove_GetY(objBase);
		}
		
		let an = trunc(anime)%7;
		let sc = scale;
		if (t < 45)
		{
			let tmp = GetCurve((t+1)/45);
			ObjRender_SetScaleXYZ(obj, tmp, 2-tmp, 1);
			sc *= tmp;
		}
		else if (t == 45)
		{
			// 判定ON
			SetEnemyVisible(objBase, VisibleFlag);
		}
		
		ObjSprite2D_SetSourceRect(obj, 0+64*an, 0+64*trunc(an/4), 64+64*an, 64+64*trunc(an/4));
		ObjRender_SetPosition(obj, ObjMove_GetX(objBase), ObjMove_GetY(objBase), 0 );
		ObjRender_SetAngleZ(obj, angle+90);
		Obj_SetValue(objBase, "E_ANGLE", angle);
		
		if (IsDrawEffect() > 1 && t%8 == 0)
		{
			let vx = -6 + randEffect(-2,2);
			let vy = randEffect(-2,2);
			let pos = Rotate2D_XY(vx, vy, angle);
			DrawBirdOption_sub(angle+90, pos[0], pos[1], an, sc);
		}

		anime+=0.2;
		t++;
		yield;
	}
	descent(t in 0 .. 15)
	{
		let tmp = GetCurve((t+1)/15);
		ObjRender_SetScaleXYZ(obj, tmp, 2-tmp, 1);
		yield;
	}
	Obj_Delete(obj);

	task DrawBirdOption_sub(angle, vx, vy, an, scale)
	{
		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		
		Obj_SetRenderPriorityI(obj, GetShotRenderPriorityI+1);
		ObjPrim_SetTexture(obj, imgZakoBird );
		ObjRender_SetBlendType(obj, BLEND_ADD_ARGB );
		ObjSprite2D_SetDestRect(obj, -64*scale, -64*scale, 64*scale, 64*scale);
		ObjSprite2D_SetSourceRect(obj, 0+64*an, 128+64*trunc(an/4), 64+64*an, 192+64*trunc(an/4));
		ObjRender_SetColor(obj, 32+col[0], 32+col[1], 32+col[2]);
		ObjRender_SetAngleZ(obj, angle);
		
		let x = ObjMove_GetX(objBase);
		let y = ObjMove_GetY(objBase);
		let ox = 0;
		let oy = 0;
		ascent(t in 0 .. 30)
		{
			if (!Obj_IsDeleted(objBase))
			{
				x = ObjMove_GetX(objBase);
				y = ObjMove_GetY(objBase);
			}
			let tmp = (t+1)/30;
			let tmp_s = 1;
			let tmp_a = (1-tmp)*255 * min(10*tmp, 1);
			ObjRender_SetPosition(obj, x+ox, y+oy, 0 );
			ObjRender_SetAlpha(obj, tmp_a);
			ObjRender_SetScaleXYZ(obj, tmp_s, tmp_s, 1);
			ox += vx*tmp; oy += vy*tmp;
			yield;
		}
		Obj_Delete(obj);
	}
}

// -------------------- ｽｶﾗﾍﾞｻﾝ描画 -------------------- //
task DrawScarab( obj, Type )
{
	let scale = 1;
	let angle = GetAngleToPlayer(obj);
	let AngleHomingRate = 1/15;
	let beforeX = ObjMove_GetX(obj);
	let beforeY = ObjMove_GetY(obj);

	let objImg = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(objImg, priorityZako);
	ObjPrim_SetTexture(objImg, imgZakoScarab);
	ObjSprite2D_SetDestRect(objImg, -16*scale, -16*scale, 16*scale, 16*scale);

	Obj_SetValue(obj, "IMAGE_ID", objImg);	//IDを記録
	
	let t = 0;
	while(!Obj_IsDeleted(obj))
	{
		let flg_horming = (trunc(Obj_GetValueD(obj, "E_MOTION", 0)/2)%2 == 1);
		let flg_fly = Obj_GetValueD(obj, "E_MOTION", 0)%2;
		if (!IsTimeStopObj(obj))
		{
			if (flg_horming || (beforeX != ObjMove_GetX(obj) || beforeY != ObjMove_GetY(obj)))
			{
				let to_x = ObjMove_GetX(obj);
				let to_y = ObjMove_GetY(obj);
				if (flg_horming)
				{
					to_x = GetPlayerX;
					to_y = GetPlayerY;
				}
				let to_a = atan2(to_y-beforeY, to_x-beforeX);
				to_a = (to_a-angle)%360;
				if (to_a > 180) { to_a -= 360; }
				angle += to_a*AngleHomingRate;
				beforeX = ObjMove_GetX(obj);
				beforeY = ObjMove_GetY(obj);
			}
		}
		let anm = 0;
		if (flg_fly == 1) { anm = 1+trunc(t/3)%2; }
		ObjSprite2D_SetSourceRect(objImg, 0+32*anm, 0+32*Type, 32+32*anm, 32+32*Type);
		ObjRender_SetPosition(objImg, ObjMove_GetX(obj), ObjMove_GetY(obj), 0 );
		ObjRender_SetAngleZ(objImg, angle+90);
		Obj_SetValue(obj, "E_ANGLE", angle);
		t++;
		yield;
	}
	Obj_Delete(objImg);
}
// 0… 地上 1…飛翔 2…地上/自機狙い 3…飛翔/自機狙い
function SetScarabMotion(obj, Motion)
{
	Obj_SetValue(obj, "E_MOTION", Motion);
}

// -------------------- ｲﾜ描画 -------------------- //
// size = 当たり判定半径
task DrawStone( obj, size, Type )
{
	let scale = 256/144;
	let angle = randEffect(0, 360);
	let rotate_angle = randEffect(-1, 1);

	let objImg = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(objImg, priorityZako);
	ObjPrim_SetTexture(objImg, imgZakoStone);
	ObjSprite2D_SetDestRect(objImg, -size*scale, -size*scale, size*scale, size*scale);
	ObjSprite2D_SetSourceRect(objImg, 0+256*(Type%4), 0+256*trunc(Type/4), 256+256*(Type%4), 256+256*trunc(Type/4));

	Obj_SetValue(obj, "IMAGE_ID", objImg);	//IDを記録
	
	let beforeX = ObjMove_GetX(obj);
	let beforeY = ObjMove_GetY(obj);
	let add_a = 0;
	let t = 0;
	while(!Obj_IsDeleted(obj))
	{
		if (!IsTimeStopObj(obj))
		{
			if (beforeX != ObjMove_GetX(obj) || beforeY != ObjMove_GetY(obj))
			{
				if (rotate_angle > 0) { add_a = min(rotate_angle, add_a+rotate_angle/120); }
				else { add_a = max(rotate_angle, add_a+rotate_angle/120); }
			}
		} else {
			add_a = 0;
		}
		if (t < 15)
		{
			let tmp = GetCurve_d((t+1)/15);
			ObjRender_SetScaleXYZ(objImg, tmp, tmp, 1);
		}
		ObjRender_SetPosition(objImg, ObjMove_GetX(obj), ObjMove_GetY(obj), 0 );
		ObjRender_SetAngleZ(objImg, angle);
		beforeX = ObjMove_GetX(obj);
		beforeY = ObjMove_GetY(obj);
		angle += add_a;
		t++;
		yield;
	}
	descent(t in 0 .. 5)
	{
		let tmp = GetCurve_d((t+1)/5);
		ObjRender_SetScaleXYZ(objImg, tmp, tmp, 1);
		yield;
	}
	Obj_Delete(objImg);
}
