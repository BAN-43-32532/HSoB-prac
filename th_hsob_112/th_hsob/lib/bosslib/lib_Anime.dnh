// ---------------------- ボスのアニメーション動作ライブラリ

//関数の引数に使う方
let ACT_STAND	= "ACT_STAND";
let ACT_MOVE_L	= "ACT_MOVE_L";
let ACT_MOVE_R	= "ACT_MOVE_R";
let ACT_MOVE	= "ACT_MOVE";
let ACT_SHOT1	= "ACT_SHOT1";
let ACT_SHOT2	= "ACT_SHOT2";
let ACT_SHOT3	= "ACT_SHOT3";
let ACT_SHOT4	= "ACT_SHOT4";
let ACT_SHOT5	= "ACT_SHOT5";
let ACT_CHARGE1	= "ACT_CHARGE1";
let ACT_CHARGE2	= "ACT_CHARGE2";

//内部的な判別用
let _ACT_NONE	= 0;	//静止画
// ここから静止モーション用
let _ACT_STAND1_5	= 1;	//立ち状態 5コマ
let _ACT_STAND1_4	= 2;	//立ち状態 4コマ
let _ACT_STAND1_3	= 3;	//立ち状態 3コマ
let _ACT_STAND_HOROU	= 11;	//ﾎﾛｳﾁｬﾝ専用立ち状態
// ここからアクション用
let _ACT_MOVE	= 100;	//移動（自動判別）
let _ACT_MOVE_L_2	= 101;	//左移動 2コマ
let _ACT_MOVE_R_2	= 102;	//右移動 2コマ
let _ACT_MOVE_L_3	= 103;	//左移動 3コマ
let _ACT_MOVE_R_3	= 104;	//右移動 3コマ

let _ACT_SHOT_RANRAN	= 1001;	//らんらん専用筆振り上げ
let _ACT_SHOT_RANRAN2	= 1002;	//らんらん専用筆ぶん回し
let _ACT_SHOT_CHII	= 1011;	//ちぃ専用筆振り上げ
let _ACT_SHOT_CHII2	= 1012;	//ちぃ専用筆ぶん回し
let _ACT_SHOT_HIKARIKO	= 1021;	//ひかり子専用筆振り上げ
let _ACT_SHOT_HIKARIKO2	= 1022;	//ひかり子専用筆ぶん回し
let _ACT_SHOT_SIRAN	= 1031;	//上人専用通常
let _ACT_SHOT_SIRAN2	= 1032;	//上人専用数珠ぐるぐる
let _ACT_SHOT_MYSTIA	= 1041;	//みすちー専用発射
let _ACT_SHOT_MYSTIA2	= 1042;	//みすちー専用マイクオン
let _ACT_SHOT_NEBET	= 1051;	//ネベト専用
let _ACT_SHOT_NEBET2	= 1052;	//ネベト専用
let _ACT_SHOT_NEBET3	= 1053;	//ネベト専用
let _ACT_SHOT_SET	= 1061;	//セト専用
let _ACT_SHOT_SET2	= 1062;	//セト専用
let _ACT_SHOT_SET3	= 1063;	//セト専用
let _ACT_MOVE_SET_R	= 1064;	//セト専用移動
let _ACT_MOVE_SET_L	= 1065;	//セト専用移動
let _ACT_SHOT_HOROU	= 1071;	//ﾎﾛｳﾁｬﾝ専用
let _ACT_SHOT_HOROU2	= 1072;	//ﾎﾛｳﾁｬﾝ専用
let _ACT_SHOT_HOROU3	= 1073;	//ﾎﾛｳﾁｬﾝ専用
let _ACT_MOVE_HOROU_R	= 1074;	//ﾎﾛｳﾁｬﾝ専用移動
let _ACT_MOVE_HOROU_L	= 1075;	//ﾎﾛｳﾁｬﾝ専用移動
let _ACT_SHOT_MUMEI	= 1081;	//ﾑﾒｲｻﾝ専用
let _ACT_SHOT_MUMEI2	= 1082;	//ﾑﾒｲｻﾝ専用
let _ACT_SHOT_MUMEI3	= 1083;	//ﾑﾒｲｻﾝ専用
let _ACT_SHOT_MUMEI4	= 1084;	//ﾑﾒｲｻﾝ専用
let _ACT_SHOT_MUMEI5	= 1085;	//ﾑﾒｲｻﾝ専用
let _ACT_SHOT_KARATSU	= 1091;	//ｶﾗﾂｻﾝ専用
let _ACT_SHOT_KARATSU2	= 1092;	//ｶﾗﾂｻﾝ専用

//------------------------------------------------------------------------------
// ボスのアニメ設定
//------------------------------------------------------------------------------
function BossAnime_InitAnimation(obj)
{
	alternative(GetBossID(obj))
	case(BOSS_ID_RANRAN)
	{
		//画像設定
		Obj_SetValue(obj, "ANIME_SC", 1);		//拡大率
		Obj_SetValue(obj, "ANIME_W", 142);		//１コマの幅
		Obj_SetValue(obj, "ANIME_H", 144);		//１コマの高さ
		Obj_SetValue(obj, "ANIME_FL", true);		//立ち絵をふわふわさせる？
		Obj_SetValue(obj, "ANIME_BL", 40);		//瞬き時の加算ID（0だと変化なし）
		Obj_SetValue(obj, "ANIME_X", -6);		//画像配置(Xpxずらす)
		Obj_SetValue(obj, "ANIME_Y", -4);		//画像配置(Ypxずらす)
		//アニメ設定
		Obj_SetValue(obj, ACT_STAND, _ACT_NONE);	//立ち
		Obj_SetValue(obj, ACT_MOVE_L, _ACT_MOVE_L_3);	//左移動
		Obj_SetValue(obj, ACT_MOVE_R, _ACT_MOVE_R_3);	//右移動
		Obj_SetValue(obj, ACT_MOVE, _ACT_MOVE);		//移動（自動判別）
		Obj_SetValue(obj, ACT_SHOT1, _ACT_SHOT_RANRAN);	//攻撃その１
		Obj_SetValue(obj, ACT_SHOT2, _ACT_SHOT_RANRAN2);
	}
	case(BOSS_ID_CHII)
	{
		//画像設定
		Obj_SetValue(obj, "ANIME_SC", 1);		//拡大率
		Obj_SetValue(obj, "ANIME_W", 108);		//１コマの幅
		Obj_SetValue(obj, "ANIME_H", 144);		//１コマの高さ
		Obj_SetValue(obj, "ANIME_FL", true);		//立ち絵をふわふわさせる？
		Obj_SetValue(obj, "ANIME_BL", 40);		//瞬き時の加算ID（0だと変化なし）
		Obj_SetValue(obj, "ANIME_X", -18);		//画像配置(Xpxずらす)
		Obj_SetValue(obj, "ANIME_Y", -28);		//画像配置(Ypxずらす)
		//アニメ設定
		Obj_SetValue(obj, ACT_STAND, _ACT_NONE);	//立ち
		Obj_SetValue(obj, ACT_MOVE_L, _ACT_MOVE_L_2);	//左移動
		Obj_SetValue(obj, ACT_MOVE_R, _ACT_MOVE_R_2);	//右移動
		Obj_SetValue(obj, ACT_MOVE, _ACT_MOVE);		//移動（自動判別）
		Obj_SetValue(obj, ACT_SHOT1, _ACT_SHOT_CHII);	//攻撃その１
		Obj_SetValue(obj, ACT_SHOT2, _ACT_SHOT_CHII2);
	}
	case(BOSS_ID_HIKARIKO)
	{
		//画像設定
		Obj_SetValue(obj, "ANIME_SC", 1);		//拡大率
		Obj_SetValue(obj, "ANIME_W", 152);		//１コマの幅
		Obj_SetValue(obj, "ANIME_H", 160);		//１コマの高さ
		Obj_SetValue(obj, "ANIME_FL", true);		//立ち絵をふわふわさせる？
		Obj_SetValue(obj, "ANIME_BL", 60);		//瞬き時の加算ID（0だと変化なし）
		Obj_SetValue(obj, "ANIME_X",  0);		//画像配置(Xpxずらす)
		Obj_SetValue(obj, "ANIME_Y",  0);		//画像配置(Ypxずらす)
		//アニメ設定
		Obj_SetValue(obj, ACT_STAND, _ACT_NONE);	//立ち
		Obj_SetValue(obj, ACT_MOVE_L, _ACT_MOVE_L_2);	//左移動
		Obj_SetValue(obj, ACT_MOVE_R, _ACT_MOVE_R_2);	//右移動
		Obj_SetValue(obj, ACT_MOVE, _ACT_MOVE);		//移動（自動判別）
		Obj_SetValue(obj, ACT_SHOT1, _ACT_SHOT_HIKARIKO);	//攻撃その１
		Obj_SetValue(obj, ACT_SHOT2, _ACT_SHOT_HIKARIKO2);
	}
	case(BOSS_ID_SIRAN)
	{
		//画像設定
		Obj_SetValue(obj, "ANIME_SC", 1);		//拡大率
		Obj_SetValue(obj, "ANIME_W", 150);		//１コマの幅
		Obj_SetValue(obj, "ANIME_H", 150);		//１コマの高さ
		Obj_SetValue(obj, "ANIME_FL", true);		//立ち絵をふわふわさせる？
		Obj_SetValue(obj, "ANIME_BL", 20);		//瞬き時の加算ID（0だと変化なし）
		Obj_SetValue(obj, "ANIME_X",  0);		//画像配置(Xpxずらす)
		Obj_SetValue(obj, "ANIME_Y",  0);		//画像配置(Ypxずらす)
		//アニメ設定
		Obj_SetValue(obj, ACT_STAND, _ACT_NONE);	//立ち
		Obj_SetValue(obj, ACT_MOVE_L, _ACT_MOVE_L_2);	//左移動
		Obj_SetValue(obj, ACT_MOVE_R, _ACT_MOVE_R_2);	//右移動
		Obj_SetValue(obj, ACT_MOVE, _ACT_MOVE);		//移動（自動判別）
		Obj_SetValue(obj, ACT_SHOT1, _ACT_SHOT_SIRAN);	//攻撃その１
		Obj_SetValue(obj, ACT_SHOT2, _ACT_SHOT_SIRAN2);
		// 数珠アニメ用設定
		if (Obj_GetValueD(obj, "SIRAN_ROSARY", 0))
		{
			Obj_SetValue(obj, "ANIME_BL", 0);		//瞬き時の加算ID（0だと変化なし）
		}
	}
	case(BOSS_ID_MYSTIA)
	{
		//画像設定
		Obj_SetValue(obj, "ANIME_SC", 1);		//拡大率
		Obj_SetValue(obj, "ANIME_W", 96);		//１コマの幅
		Obj_SetValue(obj, "ANIME_H", 102);		//１コマの高さ
		Obj_SetValue(obj, "ANIME_FL", true);		//立ち絵をふわふわさせる？
		Obj_SetValue(obj, "ANIME_BL", 40);		//瞬き時の加算ID（0だと変化なし）
		Obj_SetValue(obj, "ANIME_X",  0);		//画像配置(Xpxずらす)
		Obj_SetValue(obj, "ANIME_Y",  0);		//画像配置(Ypxずらす)
		//アニメ設定
		Obj_SetValue(obj, ACT_STAND, _ACT_STAND1_4);	//立ち
		Obj_SetValue(obj, ACT_MOVE_L, _ACT_MOVE_L_2);	//左移動
		Obj_SetValue(obj, ACT_MOVE_R, _ACT_MOVE_R_2);	//右移動
		Obj_SetValue(obj, ACT_MOVE, _ACT_MOVE);		//移動（自動判別）
		Obj_SetValue(obj, ACT_SHOT1, _ACT_SHOT_MYSTIA);	//攻撃その１
		Obj_SetValue(obj, ACT_SHOT2, _ACT_SHOT_MYSTIA2);
	}
	case(BOSS_ID_NEBET)
	{
		//画像設定
		Obj_SetValue(obj, "ANIME_SC", 1);		//拡大率
		Obj_SetValue(obj, "ANIME_W", 82);		//１コマの幅
		Obj_SetValue(obj, "ANIME_H", 120);		//１コマの高さ
		Obj_SetValue(obj, "ANIME_FL", true);		//立ち絵をふわふわさせる？
		Obj_SetValue(obj, "ANIME_BL", 30);		//瞬き時の加算ID（0だと変化なし）
		Obj_SetValue(obj, "ANIME_X",  0);		//画像配置(Xpxずらす)
		Obj_SetValue(obj, "ANIME_Y",  0);		//画像配置(Ypxずらす)
		//アニメ設定
		Obj_SetValue(obj, ACT_STAND, _ACT_STAND1_4);	//立ち
		Obj_SetValue(obj, ACT_MOVE_L, _ACT_MOVE_L_2);	//左移動
		Obj_SetValue(obj, ACT_MOVE_R, _ACT_MOVE_R_2);	//右移動
		Obj_SetValue(obj, ACT_MOVE, _ACT_MOVE);		//移動（自動判別）
		Obj_SetValue(obj, ACT_SHOT1, _ACT_SHOT_NEBET);	//攻撃その１
		Obj_SetValue(obj, ACT_SHOT2, _ACT_SHOT_NEBET2);
		Obj_SetValue(obj, ACT_SHOT3, _ACT_SHOT_NEBET3);
	}
	case(BOSS_ID_SET)
	{
		//画像設定
		Obj_SetValue(obj, "ANIME_SC", 1);		//拡大率
		Obj_SetValue(obj, "ANIME_W", 218);		//１コマの幅
		Obj_SetValue(obj, "ANIME_H", 228);		//１コマの高さ
		Obj_SetValue(obj, "ANIME_FL", true);		//立ち絵をふわふわさせる？
		Obj_SetValue(obj, "ANIME_BL", 80);		//瞬き時の加算ID（0だと変化なし）
		Obj_SetValue(obj, "ANIME_X",  0);		//画像配置(Xpxずらす)
		Obj_SetValue(obj, "ANIME_Y",  0);		//画像配置(Ypxずらす)
		//アニメ設定
		Obj_SetValue(obj, ACT_STAND, _ACT_NONE);	//立ち
		Obj_SetValue(obj, ACT_MOVE_L, _ACT_MOVE_SET_L);	//左移動
		Obj_SetValue(obj, ACT_MOVE_R, _ACT_MOVE_SET_R);	//右移動
		Obj_SetValue(obj, ACT_MOVE, _ACT_MOVE);		//移動（自動判別）
		Obj_SetValue(obj, ACT_SHOT1, _ACT_SHOT_SET);	//攻撃その１
		Obj_SetValue(obj, ACT_SHOT2, _ACT_SHOT_SET2);
		Obj_SetValue(obj, ACT_SHOT3, _ACT_SHOT_SET3);
	}
	case(BOSS_ID_HOROU)
	{
		//画像設定
		Obj_SetValue(obj, "ANIME_SC", 1);		//拡大率
		Obj_SetValue(obj, "ANIME_W", 118);		//１コマの幅
		Obj_SetValue(obj, "ANIME_H", 128);		//１コマの高さ
		Obj_SetValue(obj, "ANIME_FL", true);		//立ち絵をふわふわさせる？
		Obj_SetValue(obj, "ANIME_BL", 60);		//瞬き時の加算ID（0だと変化なし）
		Obj_SetValue(obj, "ANIME_X",  0);		//画像配置(Xpxずらす)
		Obj_SetValue(obj, "ANIME_Y",  -12);		//画像配置(Ypxずらす)
		//本の所持状態をロード
		Obj_SetValue(obj, "HOROU_BOOK",  GetAreaCommonData(CAREA_STAGE, "HOROU_BOOK", 1));
		//アニメ設定
		Obj_SetValue(obj, ACT_STAND, _ACT_STAND_HOROU);	//立ち
		Obj_SetValue(obj, ACT_MOVE_L, _ACT_MOVE_HOROU_L);	//左移動
		Obj_SetValue(obj, ACT_MOVE_R, _ACT_MOVE_HOROU_R);	//右移動
		Obj_SetValue(obj, ACT_MOVE, _ACT_MOVE);		//移動（自動判別）
		Obj_SetValue(obj, ACT_SHOT1, _ACT_SHOT_HOROU);	//攻撃その１
		Obj_SetValue(obj, ACT_SHOT2, _ACT_SHOT_HOROU2);
		Obj_SetValue(obj, ACT_SHOT3, _ACT_SHOT_HOROU3);
	}
	case(BOSS_ID_MUMEI)
	{
		//画像設定
		Obj_SetValue(obj, "ANIME_SC", 1);		//拡大率
		Obj_SetValue(obj, "ANIME_W", 162);		//１コマの幅
		Obj_SetValue(obj, "ANIME_H", 162);		//１コマの高さ
		Obj_SetValue(obj, "ANIME_FL", true);		//立ち絵をふわふわさせる？
		Obj_SetValue(obj, "ANIME_BL", 60);		//瞬き時の加算ID（0だと変化なし）
		Obj_SetValue(obj, "ANIME_X",  0);		//画像配置(Xpxずらす)
		Obj_SetValue(obj, "ANIME_Y",  -4);		//画像配置(Ypxずらす)
		//アニメ設定
		Obj_SetValue(obj, ACT_STAND, _ACT_NONE);	//立ち
		Obj_SetValue(obj, ACT_MOVE_L, _ACT_MOVE_L_2);	//左移動
		Obj_SetValue(obj, ACT_MOVE_R, _ACT_MOVE_R_2);	//右移動
		Obj_SetValue(obj, ACT_MOVE, _ACT_MOVE);		//移動（自動判別）
		Obj_SetValue(obj, ACT_SHOT1, _ACT_SHOT_MUMEI);	//攻撃その１
		Obj_SetValue(obj, ACT_SHOT2, _ACT_SHOT_MUMEI2);
		Obj_SetValue(obj, ACT_SHOT3, _ACT_SHOT_MUMEI3);
		Obj_SetValue(obj, ACT_SHOT4, _ACT_SHOT_MUMEI4);
		Obj_SetValue(obj, ACT_SHOT5, _ACT_SHOT_MUMEI5);
	}
	case(BOSS_ID_MUMEI2)
	{
		//画像設定
		Obj_SetValue(obj, "ANIME_SC", 1);		//拡大率
		Obj_SetValue(obj, "ANIME_W", 100);		//１コマの幅
		Obj_SetValue(obj, "ANIME_H", 100);		//１コマの高さ
		Obj_SetValue(obj, "ANIME_FL", true);		//立ち絵をふわふわさせる？
		Obj_SetValue(obj, "ANIME_BL", 40);		//瞬き時の加算ID（0だと変化なし）
		Obj_SetValue(obj, "ANIME_X",  0);		//画像配置(Xpxずらす)
		Obj_SetValue(obj, "ANIME_Y",  0);		//画像配置(Ypxずらす)
		//アニメ設定
		Obj_SetValue(obj, ACT_STAND, _ACT_NONE);	//立ち
		Obj_SetValue(obj, ACT_MOVE_L, _ACT_MOVE_L_2);	//左移動
		Obj_SetValue(obj, ACT_MOVE_R, _ACT_MOVE_R_2);	//右移動
		Obj_SetValue(obj, ACT_MOVE, _ACT_MOVE);		//移動（自動判別）
		Obj_SetValue(obj, ACT_SHOT1, _ACT_SHOT_KARATSU);	//攻撃その１
		Obj_SetValue(obj, ACT_SHOT2, _ACT_SHOT_KARATSU2);
	}
	others	//仮画像
	{
		//画像設定
		Obj_SetValue(obj, "ANIME_SC", 1);		//拡大率
		Obj_SetValue(obj, "ANIME_W", 128);		//１コマの幅
		Obj_SetValue(obj, "ANIME_H", 128);		//１コマの高さ
		Obj_SetValue(obj, "ANIME_FL", true);		//立ち絵をふわふわさせる？
		Obj_SetValue(obj, "ANIME_BL", 0);		//瞬き時の加算ID（0だと変化なし）
		Obj_SetValue(obj, "ANIME_X", -6);		//画像配置(Xpxずらす)
		Obj_SetValue(obj, "ANIME_Y", -4);		//画像配置(Ypxずらす)
		//アニメ設定
		Obj_SetValue(obj, ACT_STAND, _ACT_NONE);	//立ち
		Obj_SetValue(obj, ACT_MOVE_L, _ACT_NONE);	//左移動
		Obj_SetValue(obj, ACT_MOVE_R, _ACT_NONE);	//右移動
		Obj_SetValue(obj, ACT_MOVE, _ACT_NONE);		//移動（自動判別）
		Obj_SetValue(obj, ACT_SHOT1, _ACT_NONE);	//攻撃その１
		Obj_SetValue(obj, ACT_SHOT2, _ACT_NONE);	//攻撃その２
	}
	
	Obj_SetValue(obj, "ANIME_CT", 10);		//横方向の画像並び数（固定！）
}

//------------------------------------------------------------------------------
//　アクション初期設定
//------------------------------------------------------------------------------
task BossAnime_Initialize(objBoss)
{
	//画像ファイルを取得
	let pathImg = Boss_GetBossImage(objBoss);
	//アニメ状態を設定
	BossAnime_InitAnimation(objBoss);
	//まばたきチェック
	BossAnime_Blink(objBoss);
	
	//エフェクトオブジェクトを作成
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(obj, priorityBoss);
	ObjPrim_SetTexture(obj, pathImg);
	Obj_SetValue(objBoss, "IMAGE_ID", obj);	//IDを記録
	//描画タスク起動
	if (!Obj_GetValueD(objBoss, "ANIME_FL", false) && !Obj_GetValueD(objBoss, "TALKING", 0))
		{ BossAnime_DrawTask(objBoss); }	//ふつうの
	else
		{ BossAnime_DrawTaskFloat(objBoss); }	//ふわふわ

	while(!Obj_IsDeleted(objBoss))
	{
		SetAction( objBoss, ACT_STAND, 0 );	//デフォ状態のアクション
		while( Obj_GetValueD(objBoss, "ANIME_C", 0) < Obj_GetValueD(objBoss, "ANIME_MC", 0)
			&& !Obj_IsDeleted(objBoss) )
		{
			while( Obj_GetValueD(objBoss, "ANIME_STOP", false) ){ yield; }
			if (!IsTimeStopObj(objBoss))
			{
				Obj_SetValue(objBoss, "ANIME_C", Obj_GetValueD(objBoss, "ANIME_C", 0)+1);	//アニメカウンタ
			}
			yield;
		}
	}
	Obj_Delete(obj);
}

//------------------------------------------------------------------------------
// ボスドット絵のIDを返す
//------------------------------------------------------------------------------
function GetBossImageID(objBoss)
{
	return(Obj_GetValueD(objBoss, "IMAGE_ID", -1));
}

//------------------------------------------------------------------------------
//　ボス描画タスク
//------------------------------------------------------------------------------
task BossAnime_DrawTask(objBoss)
{
	let apos = aPosition(objBoss);
	while(!Obj_IsDeleted(objBoss))
	{
		if (apos > 0)
		{
			apos = max(0, apos-0.1);
			aPositionSet(objBoss, apos);
			_DrawBoss( objBoss, ObjMove_GetX(objBoss), ObjMove_GetY(objBoss) + sin(aTime(objBoss)*3)*apos );
		}
		else
		{
			_DrawBoss( objBoss, ObjMove_GetX(objBoss), ObjMove_GetY(objBoss) );
		}
		yield;
	}
}
//ふわふわ
task BossAnime_DrawTaskFloat(objBoss)
{
	let apos = aPosition(objBoss);
	while(!Obj_IsDeleted(objBoss))
	{
		if (apos < 6)
		{
			apos = min(6, apos+0.1);
			aPositionSet(objBoss, apos);
		}
		_DrawBoss( objBoss, ObjMove_GetX(objBoss), ObjMove_GetY(objBoss) + sin(aTime(objBoss)*3)*apos );
		yield;
	}
}

//------------------------------------------------------------------------------
// まばたきチェック
//------------------------------------------------------------------------------
task BossAnime_Blink(objBoss)
{
	let bl = Obj_GetValueD(objBoss, "ANIME_BL", 0);
	if (bl == 0) { return; }
	
	while(!Obj_IsDeleted(objBoss))
	{
		if (aTime(objBoss) % 180 > 170) { Obj_SetValue(objBoss, "ANIME_OFFSET", bl); }
		else { Obj_SetValue(objBoss, "ANIME_OFFSET", 0); }
		yield;
	}
}

//------------------------------------------------------------------------------
//　アクション指定
//　※指定フレーム数が経過すると基本アクションに移行する
//------------------------------------------------------------------------------
function SetAction(
	let objBoss,
	let newAction,		//　アクション定数
	let frame			//　アクション終了までのフレーム数
){
	let actID = Obj_GetValueD(objBoss, newAction, _ACT_NONE);
	if (actID < 100) { frame = 216000; }	// 立ちモーションはID2桁以下

	Obj_SetValue(objBoss, "ANIME_ACT", actID);
	Obj_SetValue(objBoss, "ANIME_C", 0);
	Obj_SetValue(objBoss, "ANIME_MC", frame);
}

//------------------------------------------------------------------------------
//　アニメ一時停止
//　※停止途中にすぐ再開したい場合は0以下のフレーム数を指定する
//------------------------------------------------------------------------------
task StopAnime(
	let objBoss,
	let frame		//　停止するフレーム数（経過後にアニメ再開）
){
	if( frame > 0 ){
		Obj_SetValue(objBoss, "ANIME_STOP", true);
		loop( frame ){
			if( !Obj_GetValueD(objBoss, "ANIME_STOP", false) ){ break; }
			waitObj(objBoss, 1);
		}
		Obj_SetValue(objBoss, "ANIME_STOP", false);
	}
	else{ Obj_SetValue(objBoss, "ANIME_STOP", false); }
}

//==============================================================================
//　描画関連関数
//==============================================================================
//　ボスアニメ描画（通常）
//------------------------------------------------------------------------------
function DrawBoss(
	let objBoss,		//ボスのオブジェクト
){
	_DrawBoss( objBoss, ObjMove_GetX(objBoss), ObjMove_GetY(objBoss) );
}

//------------------------------------------------------------------------------
//　ボスアニメ描画（座標指定）
//------------------------------------------------------------------------------
function _DrawBoss(
	let objBoss,		//ボスのオブジェクト
	let x,				//	中心x座標
	let y				//	中心y座標
){
	let rect = SetRect(objBoss);
	let ox = Obj_GetValueD(objBoss,"ANIME_X", 0);
	let oy = Obj_GetValueD(objBoss,"ANIME_Y", 0);
	//　描画 ---------------------------------------------------------
	let objImage = GetBossImageID(objBoss);
	let scale = Obj_GetValueD(objBoss, "ANIME_SC", 1) / 2;
	ObjSprite2D_SetSourceRect(objImage,
		rect[0], rect[1],
		rect[0]+rect[2], rect[1]+rect[3]);
	ObjSprite2D_SetDestRect(objImage,
		-(rect[2]-ox)*scale, -(rect[3]-oy)*scale,
		 (rect[2]+ox)*scale,  (rect[3]+oy)*scale);
	ObjRender_SetPosition(objImage, round(x), round(y), 0);
}

//------------------------------------------------------------------------------
//　ボス画像のエフェクトオブジェクトを作成
//  デフォだとボスオブジェクトの1つ下のレイヤーに配置する
//------------------------------------------------------------------------------
function GetBossImageObject(
	let objBoss,		//ボスのオブジェクト
	let x,				//	中心x座標
	let y,				//	中心y座標
	let imageFile,
){
	let rect = SetRect(objBoss);
	let ox = Obj_GetValueD(objBoss,"ANIME_X", 0);
	let oy = Obj_GetValueD(objBoss,"ANIME_Y", 0);
	//　作成 ---------------------------------------------------------
	let objImage = ObjPrim_Create(OBJ_SPRITE_2D);
	let scale = Obj_GetValueD(objBoss, "ANIME_SC", 1) / 2;
	Obj_SetRenderPriorityI(objImage, priorityBoss-1);
	ObjPrim_SetTexture(objImage, imageFile);
	ObjSprite2D_SetSourceRect(objImage,
		rect[0], rect[1],
		rect[0]+rect[2], rect[1]+rect[3]);
	ObjSprite2D_SetDestRect(objImage,
		-(rect[2]-ox)*scale, -(rect[3]-oy)*scale,
		 (rect[2]+ox)*scale,  (rect[3]+oy)*scale);
	ObjRender_SetPosition(objImage, round(x), round(y), 0);
	return(objImage);
}

//------------------------------------------------------------------------------
//　画像の座標を取得
//------------------------------------------------------------------------------
function SetRect(objBoss)
{
	let img_id = 0;
	let action = Obj_GetValueD(objBoss, "ANIME_ACT", _ACT_NONE);
	let actionCount = Obj_GetValueD(objBoss, "ANIME_C", 0);
	let actionCountMax = Obj_GetValueD(objBoss, "ANIME_MC", 0);
	//画像の仕様チェック
	let iw = Obj_GetValueD(objBoss, "ANIME_W", 1);	//幅
	let ih = Obj_GetValueD(objBoss, "ANIME_H", 1);	//高さ
	let ict = Obj_GetValueD(objBoss, "ANIME_CT", 1);	//縦の並び数

	// 移動自動判定
	if ( action == _ACT_MOVE )
	{
		let ex = ObjMove_GetX(objBoss);
		let bx = Obj_GetValueD(objBoss, "ANIME_BX", 0);
		// 移動チェック
		if (bx > ex) { action = Obj_GetValueD(objBoss, ACT_MOVE_L, _ACT_MOVE_L_3); }
		else if (bx < ex) { action = Obj_GetValueD(objBoss, ACT_MOVE_R, _ACT_MOVE_R_3); }
		//速度が一定以下なら停止
		if (actionCount > 15 && absolute(bx-ex) < 0.25)
			{ Obj_SetValue(objBoss, "ANIME_C", max(actionCount, actionCountMax-12)); }
	}
	else
	{
	}
	Obj_SetValue(objBoss, "ANIME_BX", ObjMove_GetX(objBoss));
//	Obj_SetValue(objBoss, "ANIME_BY", ObjMove_GetY(objBoss));
	
	alternative( action )
	//　立ち状態（5コマ、まばたき）-------------------------------
	//　立ち状態（4コマ）-------------------------------
	case( _ACT_STAND1_4 ){
		let cutFrame = 12;
		let anime = trunc(actionCount/cutFrame)%4;
		img_id = [ 0, 1, 2, 3 ][ anime ];
	}
	//　立ち状態（3コマ）-------------------------------
	case( _ACT_STAND1_3 ){
		let cutFrame = 12;
		let anime = max(0, trunc(actionCount/cutFrame)%15-12);
		img_id = [ 0, 1, 2 ][ anime ];
	}

	//　左移動（3コマ）---------------------------------
	case( _ACT_MOVE_L_3 ){
		let cutFrame = 8;
		let anime = trunc( actionCount/cutFrame );
		let anime_max = trunc( (actionCountMax-actionCount)/cutFrame );
		anime = min(min(anime, 2), anime_max);
		img_id = [ 13, 14, 15 ][ anime ];
	}
	//　右移動（3コマ）---------------------------------
	case( _ACT_MOVE_R_3 ){
		let cutFrame = 8;
		let anime = trunc( actionCount/cutFrame );
		let anime_max = trunc( (actionCountMax-actionCount)/cutFrame );
		anime = min(min(anime, 2), anime_max);
		img_id = [ 10, 11, 12 ][ anime ];
	}
	//　左移動（2コマ）---------------------------------
	case( _ACT_MOVE_L_2 ){
		let cutFrame = 8;
		let anime = trunc( actionCount/cutFrame );
		let anime_max = trunc( (actionCountMax-actionCount)/cutFrame );
		anime = min(min(anime, 1), anime_max);
		img_id = [ 12, 13 ][ anime ];
	}
	//　右移動（2コマ）---------------------------------
	case( _ACT_MOVE_R_2 ){
		let cutFrame = 8;
		let anime = trunc( actionCount/cutFrame );
		let anime_max = trunc( (actionCountMax-actionCount)/cutFrame );
		anime = min(min(anime, 1), anime_max);
		img_id = [ 10, 11 ][ anime ];
	}
	//　らんらん専用---------------------------------
	case( _ACT_SHOT_RANRAN ){
		let cutFrame = 8;
		let anime = trunc( actionCount/cutFrame );
		let anime_max = trunc( (actionCountMax-actionCount)/cutFrame );
		if (anime_max < 3) { anime = 5-anime_max; }
		else { anime = min(anime, 2); }
		img_id = [ 20, 21, 22, 32, 33, 34 ][ anime ];
	}
	case( _ACT_SHOT_RANRAN2 ){
		let cutFrame = 6;
		let anime = trunc( actionCount/cutFrame );
		let anime_max = trunc( (actionCountMax-actionCount)/cutFrame );
		if (anime_max < 3) { anime = 8-anime_max; }
		else { anime = anime%6; }
		img_id = [ 23, 24, 25, 26, 30, 31, 32, 33, 34 ][ anime ];
	}
	//　ちぃ専用---------------------------------
	case( _ACT_SHOT_CHII ){
		let cutFrame = 8;
		let anime = trunc( actionCount/cutFrame );
		let anime_max = trunc( (actionCountMax-actionCount)/cutFrame );
		if (anime_max < 2) { anime = 5-anime_max; }
		else { anime = min(anime, 3); }
		img_id = [ 20, 21, 22, 23, 36, 37 ][ anime ];
	}
	case( _ACT_SHOT_CHII2 ){
		let cutFrame = 6;
		let anime = trunc( actionCount/cutFrame );
		let anime_max = trunc( (actionCountMax-actionCount)/cutFrame );
		if (anime < 3) {
			img_id = [ 20, 21, 22 ][ anime ];
		} else if (anime_max < 1) {
			img_id = 37;
		} else {
			let anime_max = trunc( (actionCountMax-actionCount-cutFrame*1)/2 );
			let anime = max(0, 13-anime_max);
			img_id = [ 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 36, 36 ][ anime ];
		}
	}
	//　ひかり子専用---------------------------------
	case( _ACT_SHOT_HIKARIKO ){
		let cutFrame = 6;
		let anime = trunc( actionCount/cutFrame );
		let anime_max = trunc( (actionCountMax-actionCount)/cutFrame );
		if (anime_max < 2) { anime = 7-anime_max; }
		else { anime = min(anime, 5); }
		img_id = [ 20, 21, 22, 23, 24, 25, 30, 31 ][ anime ];
	}
	case( _ACT_SHOT_HIKARIKO2 ){
		if (actionCount < 10) {
			img_id = 32;
		} else {
			let mx = actionCountMax-10;
			let cutFrame = mx / (ceil(mx/30) * 13);
			let anime = trunc( (actionCount-10)/cutFrame );
			img_id = [ 33, 34, 35, 40, 41, 42, 43, 44, 45, 50, 51, 52, 53, 54 ][ anime%13 ];
		}
	}
	//　上人専用---------------------------------
	case( _ACT_SHOT_SIRAN ){
		let cutFrame = 8;
		let anime = trunc( actionCount/cutFrame );
		let anime_max = trunc( (actionCountMax-actionCount)/cutFrame );
		anime = min(1, min(anime, anime_max));
		img_id = [ 2, 3 ][ anime ];
	}
	case( _ACT_SHOT_SIRAN2 ){
		let cutFrame = 4;
		let anime = trunc( actionCount/cutFrame );
		let anime_max = trunc( (actionCountMax-actionCount)/cutFrame );
		if (anime > 1) { anime = 1 + (anime-2)%3; }
		else { anime = 0; }
		if (anime_max < 2) { anime = 0; }
		img_id = [ 3, 4, 5, 15 ][ anime ];
	}
	//　みすちー専用---------------------------------
	case( _ACT_SHOT_MYSTIA ){
		let cutFrame = 8;
		let anime = trunc( actionCount/cutFrame );
		let anime_max = trunc( (actionCountMax-actionCount)/cutFrame );
		anime = min(1, min(anime, anime_max));
		img_id = [ 20, 21 ][ anime ];
	}
	case( _ACT_SHOT_MYSTIA2 ){
		let cutFrame = 6;
		let anime = trunc( actionCount/cutFrame );
		let anime_max = trunc( (actionCountMax-actionCount)/cutFrame );
		let base_anime = 4;
		if (ObjMove_GetY(objBoss) > CenY-48) { base_anime += 30; }
		else if (ObjMove_GetX(objBoss) < CenX-48) { base_anime += 20; }
		else if (ObjMove_GetX(objBoss) > CenX+48) { base_anime += 10; }
		anime = min(anime, 3);
		img_id = base_anime + [ 0, 1, 2, 3, 4 ][ anime ];
	}
	//　ネベト専用---------------------------------
	case( _ACT_SHOT_NEBET ){
		let cutFrame = 8;
		let anime = trunc( actionCount/cutFrame );
		let anime_max = trunc( (actionCountMax-actionCount)/cutFrame );
		anime = min(2, anime);
		if (anime_max < 2) { anime = 4 - anime_max; }
		img_id = [ 5, 6, 7, 8, 9 ][ anime ];
	}
	case( _ACT_SHOT_NEBET2 ){
		let cutFrame = 8;
		let anime = trunc( actionCount/cutFrame );
		let anime_max = trunc( (actionCountMax-actionCount)/cutFrame );
		anime = min(1, min(anime, anime_max));
		img_id = [ 17, 18 ][ anime ];
	}
	case( _ACT_SHOT_NEBET3 ){
		let cutFrame = 6;
		let anime = trunc( actionCount/cutFrame );
		let anime_max = trunc( (actionCountMax-actionCount)/cutFrame );
		if (anime_max < 5) { anime = 9 - anime_max; }
		else if (anime > 0) { anime = 1 + (anime-1)%4; }
		img_id = [ 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 ][ anime ];
	}
	//　セト専用---------------------------------
	case( _ACT_SHOT_SET ){
		let cutFrame = 8;
		let anime = trunc( actionCount/cutFrame );
		let anime_max = trunc( (actionCountMax-actionCount)/cutFrame );
		anime = min(3, anime);
		if (anime_max < 1) { anime = 4; }
		img_id = [ 2, 12, 22, 32, 42 ][ anime ];
	}
	case( _ACT_SHOT_SET2 ){
		let cutFrame = 6;
		let anime = trunc( actionCount/cutFrame );
		let anime_max = trunc( (actionCountMax-actionCount)/cutFrame );
		if (anime_max < 3) { anime = anime_max; }
		else if (anime > 3) { anime = 4 + (anime-4)%3; }
		img_id = [ 3, 13, 23, 33, 43, 53, 63 ][ anime ];
	}
	case( _ACT_SHOT_SET3 ){
		let cutFrame = 6;
		let anime = trunc( actionCount/cutFrame );
		let anime_max = trunc( (actionCountMax-actionCount)/cutFrame );
		if (anime_max < 1) { anime = 7; }
		else if (anime > 2) { anime = 4 + (anime-4)%3; }
		img_id = [ 4, 14, 24, 34, 44, 54, 64, 74 ][ anime ];
	}
	//　セト専用移動---------------------------------
	case( _ACT_MOVE_SET_L ){
		let cutFrame = 6;
		let anime = trunc( actionCount/cutFrame );
		let anime_max = trunc( (actionCountMax-actionCount)/cutFrame );
		if (anime_max < 3) { anime = anime_max; }
		else if (anime > 3) { anime = 4 + (anime-4)%3; }
		img_id = [ 11, 21, 31, 41, 51, 61, 71 ][ anime ];
	}
	case( _ACT_MOVE_SET_R ){
		let cutFrame = 6;
		let anime = trunc( actionCount/cutFrame );
		let anime_max = trunc( (actionCountMax-actionCount)/cutFrame );
		if (anime_max < 3) { anime = anime_max; }
		else if (anime > 3) { anime = 4 + (anime-4)%3; }
		img_id = [ 10, 20, 30, 40, 50, 60, 70 ][ anime ];
	}
	//　ﾎﾛｳﾁｬﾝ専用立ち---------------------------------
	case( _ACT_STAND_HOROU ){
		let cutFrame = 12;
		let anime = trunc( actionCount/cutFrame ) % 4;
		img_id = [ 0, 1, 2, 3 ][ anime ];
		if (!Obj_GetValueD(objBoss, "HOROU_BOOK", 1)) { img_id += 30; }
	}
	//　ﾎﾛｳﾁｬﾝ専用---------------------------------
	case( _ACT_SHOT_HOROU ){
		let cutFrame = 6;
		let anime = trunc( actionCount/cutFrame );
		let anime_max = trunc( (actionCountMax-actionCount)/cutFrame );
		anime = min(anime, 5);
		if (anime_max < 1) { anime = 6; }
		img_id = [ 4, 5, 6, 7, 14, 15, 16 ][ anime ];
		if (!Obj_GetValueD(objBoss, "HOROU_BOOK", 1)) { img_id += 30; }
	}
	case( _ACT_SHOT_HOROU2 ){
		let cutFrame = 6;
		let anime = trunc( actionCount/cutFrame );
		let anime_max = trunc( (actionCountMax-actionCount)/cutFrame );
		anime = min(anime, 3);
		if (anime_max < 4) { anime = 7 - anime_max; }
		img_id = [ 20, 21, 22, 23, 24, 25, 26, 27 ][ anime ];
	}
	case( _ACT_SHOT_HOROU3 ){
		let cutFrame = 6;
		let anime = trunc( actionCount/cutFrame );
		let anime_max = trunc( (actionCountMax-actionCount)/cutFrame );
		anime = min(anime, 4);
		if (anime_max < 3) { anime = 7 - anime_max; }
		img_id = [ 20, 21, 22, 23, 24, 25, 26, 27 ][ 7 - anime ];
	}
	//　ﾎﾛｳﾁｬﾝ専用移動---------------------------------
	case( _ACT_MOVE_HOROU_L ){
		let cutFrame = 8;
		let anime = trunc( actionCount/cutFrame );
		let anime_max = trunc( (actionCountMax-actionCount)/cutFrame );
		anime = min(min(anime, 1), anime_max);
		img_id = [ 12, 13 ][ anime ];
		if (!Obj_GetValueD(objBoss, "HOROU_BOOK", 1)) { img_id += 30; }
	}
	case( _ACT_MOVE_HOROU_R ){
		let cutFrame = 8;
		let anime = trunc( actionCount/cutFrame );
		let anime_max = trunc( (actionCountMax-actionCount)/cutFrame );
		anime = min(min(anime, 1), anime_max);
		img_id = [ 10, 11 ][ anime ];
		if (!Obj_GetValueD(objBoss, "HOROU_BOOK", 1)) { img_id += 30; }
	}
	//　ﾑﾒｲｻﾝ専用---------------------------------
	case( _ACT_SHOT_MUMEI ){
		let cutFrame = 8;
		let anime = trunc( actionCount/cutFrame );
		let anime_max = trunc( (actionCountMax-actionCount)/cutFrame );
		anime = min(anime, anime_max);
		anime = min(2, anime);
		img_id = [ 20, 21, 22 ][ anime ];
	}
	case( _ACT_SHOT_MUMEI2 ){
		let cutFrame = 5;
		let anime = trunc( actionCount/cutFrame );
		let anime_max = trunc( (actionCountMax-actionCount)/cutFrame );
		if (anime < 2 || anime_max < 2) { anime = 0; }
		else { anime = 1 + (anime-1)%6; }
		img_id = [ 20, 30, 31, 32, 33, 34, 35 ][ anime ];
	}
	case( _ACT_SHOT_MUMEI3 ){
		let cutFrame = 5;
		let anime = trunc( actionCount/cutFrame );
		let anime_max = trunc( (actionCountMax-actionCount)/cutFrame );
		if (anime < 2 || anime_max < 2) { anime = 0; }
		else { anime = 1 + (anime-1)%6; }
		img_id = [ 20, 40, 41, 42, 43, 44, 45 ][ anime ];
	}
	case( _ACT_SHOT_MUMEI4 ){
		let cutFrame = 3;
		let anime = trunc( actionCount/cutFrame );
		let anime_max = trunc( (actionCountMax-actionCount)/cutFrame );
		if (anime_max < 12) { anime = 21 - anime_max; }
		else { anime = min(anime, 9); }
		img_id = [ 20, 20, 40, 40, 41, 41, 50, 50, 51, 51, 52, 52, 53, 53, 54, 54, 54, 54, 54, 4, 3, 2, 1 ][ anime ];
	}
	case( _ACT_SHOT_MUMEI5 ){
		let cutFrame = 6;
		let anime = trunc( actionCount/cutFrame );
		let anime_max = trunc( (actionCountMax-actionCount)/cutFrame );
		if (anime_max < 5) { anime = 6 - anime_max; }
		else { anime = min(anime, 1); }
		img_id = [ 52, 53, 51, 50, 41, 40, 20 ][ anime ];
	}
	//　ｶﾗﾂｻﾝ専用---------------------------------
	case( _ACT_SHOT_KARATSU ){
		let cutFrame = 8;
		let anime = trunc( actionCount/cutFrame );
		let anime_max = trunc( (actionCountMax-actionCount)/cutFrame );
		anime = min(1, min(anime, anime_max));
		img_id = [ 20, 21 ][ anime ];
	}
	case( _ACT_SHOT_KARATSU2 ){
		let cutFrame = 8;
		let anime = trunc( actionCount/cutFrame );
		let anime_max = trunc( (actionCountMax-actionCount)/cutFrame );
		anime = min(3, anime);
		if (anime_max < 1) { anime = 4; }
		img_id = [ 30, 31, 32, 33, 34 ][ anime ];
	}
	
	//　1コマ（立ち状態） ----------------------------------------
	others{ img_id = 0; }
	
	// IDをずらす（主にまばたき用）
	img_id += Obj_GetValueD(objBoss, "ANIME_OFFSET", 0);
	
	let cx = (img_id % ict) * iw;
	let cy = trunc(img_id / ict) * ih;
	return ( [cx, cy, iw, ih] );
}

// ボスのアニメ管理タスク
task Boss_AnimeTimer(obj)
{
	let areaName = "Anime"~GetBossID(obj);
	let t = GetAreaCommonData(CAREA_STAGE, areaName, 0);
	Obj_SetValue(obj, "ATIME", areaName);
	
	while(CheckBossAlive(obj))
	{
		t++;
		SetAreaCommonData(CAREA_STAGE, areaName, t);
		waitObj(obj, 1);
	}
	// 撃破されたら記録
}
task Boss_SetAnimeTimer(obj)
{
	let areaName = "Anime"~GetBossID(obj);
	Obj_SetValue(obj, "ATIME", areaName);
}
// アニメ管理の値ゲット
function aTime(obj)
{
	return(GetAreaCommonData(CAREA_STAGE, Obj_GetValueD(obj, "ATIME", ""), 0));
}
// アニメ管理の値ゲット（その２）
function aPosition(obj)
{
	return(GetAreaCommonData(CAREA_STAGE, Obj_GetValueD(obj, "APOSITION", ""), 0));
}
function aPositionSet(obj, num)
{
	SetAreaCommonData(CAREA_STAGE, Obj_GetValueD(obj, "APOSITION", ""), num);
}
function Reset_aTime(bossID)
{
	let areaName = "Anime"~bossID;
	SetAreaCommonData(CAREA_STAGE, areaName, 0);
}
