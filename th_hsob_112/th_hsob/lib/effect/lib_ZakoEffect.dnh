task EffectZako_Explode(x, y, angle, eff_color, count, size)
{
	if (IsDrawEffect() < 1) { return; }
	// 円えへくとはエフェクト設定軽めでも表示する
	let tmp_c = GetEffectColor(eff_color);
	let cr = tmp_c[0];
	let cg = tmp_c[1];
	let cb = tmp_c[2];
	
	_EffectZako_Explode(x, y, angle, 45, size, 255, 255, 255);
	if (size >= 4) { _EffectZako_Explode(x, y, angle, 30, size*1.25, 255, 255, 255); }
	if (size >= 5) { ascent(i in 0 .. 3) { _EffectZako_Explode(x, y, angle, 20-i*5, size*(1+i*0.1), 255, 255, 255); } }

	if (IsDrawEffect() < 2) { return; }

	ascent(i in 0 .. count)
	{
		let ea = randEffect(0, 360);
		let er = randEffect(0, 1)^0.5 * size*12;
		let ex = x + er*cos(ea);
		let ey = y + er*sin(ea);
		_EffectZako_Explode2(ex, ey, 0, 30, randEffect(size/2,size), randEffect(0,255), randEffect(0,255), randEffect(0,255));
		loop(5) { yield; }
	}
}

task _EffectZako_Explode(x, y, angle, timer, size, cr, cg, cb)
{
	let ex = x;
	let ey = y;
	let obj = CreateParticleEffect([ex, ey], size/2, 9);
	ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
	ObjRender_SetColor(obj, cr, cg, cb);
	
	ascent(i in 0 .. timer)
	{
		let tmp = sin((i+1)/timer*90);
		ObjRender_SetPosition(obj, ex, ey, 0);
		ObjRender_SetAlpha(obj, (1-tmp)*512);
		ObjRender_SetScaleXYZ(obj, tmp, tmp, 1);
		yield;
	}
	Obj_Delete(obj);
}

task _EffectZako_Explode2(x, y, angle, timer, size, cr, cg, cb)
{
	let ex = x;
	let ey = y;
	let obj = CreateParticleEffect([x, y], size/2, 2);
	ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
	ObjRender_SetColor(obj, cr, cg, cb);

	ascent(i in 0 .. timer)
	{
		let tmp = sin((i+1)/timer*90);
		ObjRender_SetScaleXYZ(obj, tmp, tmp, 1);
		ObjRender_SetAlpha(obj, (1-tmp)*512);
		yield;
	}
	Obj_Delete(obj);
}
