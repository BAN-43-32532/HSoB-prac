//----------------------------------------------------------------
//----------------------------------------------------------------
//　サンプラ
sampler Tex0	: register( s0 );
texture g_Texture;
sampler Samp0 = sampler_state
{
	Texture		= <g_Texture>;
	MipFilter	= LINEAR;	//　縮小間フィルタ（？）
	MinFilter	= LINEAR;	//　縮小フィルタ
	MagFilter	= LINEAR;	//　拡大フィルタ
	AddressU	= 1;		//　地続きのマッピングU
	AddressV	= 1;		//　地続きのマッピングV
};

float m_frame;
float m_pow;
float m_wave;
float4 m_color;
float4 m_pos;

float2 m_rtSize;
float2 m_texSize;

//----------------------------------------------------------------
//----------------------------------------------------------------
//　入出力
struct PS_INPUT
{
	float4 pos		: POSITION0;
	float2 tec0		: TEXCOORD0;
};
struct PS_OUTPUT
{
	float4 col	: COLOR0;
};

//----------------------------------------------------------------
//----------------------------------------------------------------
//　ピクセルシェーダ
PS_OUTPUT PscBubble( PS_INPUT In )
{
	PS_OUTPUT Out = ( PS_OUTPUT )0;
	
	//　元テクスチャ
	float4 tex = tex2D( Tex0, In.tec0 );
	
	float r = pow( pow(In.tec0.x-0.5, 2)+pow(In.tec0.y-0.5, 2), 0.5 );
	float ang = radians( r*(360*m_wave) + m_frame*8 );
	float ofr = sin(ang) * max(0, 0.5-r) / 32.0 * m_pow;
	float ofa = atan2(In.tec0.y-0.5, In.tec0.x-0.5);

	//　拡縮値
	float2 m_cvTex2Rt = m_rtSize / m_texSize;
	//　座標連携
	float2 rtp = m_pos * ( 1 / m_rtSize );
	//　中央補正
	float2 cen = m_texSize / 2 * ( 1 / m_rtSize );
	//  サンプリング基準座標
	float2 pos = In.tec0 / m_cvTex2Rt + rtp - cen;

	//  ゆがみ補正
	pos.x += ofr * cos(ofa);
	pos.y += ofr * sin(ofa);

	//　サンプリング
	float4 samp = tex2D( Samp0, pos );
	
	Out.col.rgb = samp.rgb * m_color.rgb;
	Out.col.a = tex.a * samp.rgb * m_color.a;
	
	return Out;
}


//================================================================
//--------------------------------
//technique
technique TecBubble
{
	pass P0
	{
		PixelShader = compile ps_3_0 PscBubble();
	}
}

