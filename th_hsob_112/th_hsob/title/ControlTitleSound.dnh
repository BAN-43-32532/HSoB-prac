// 効果音コントロール
#include "./lib/lib_Common.dnh"

//効果音
let TITLE_SOUNDS = [seDIR ~ "menuselect.wav",
	seDIR ~ "menucancel.wav",
	seDIR ~ "menudecide.wav",
	seDIR ~ "boon_pitchUP.wav",
	seDIR ~ "boon_pitchDOWN.wav",
	seDIR ~ "pause.wav",
	seDIR ~ "se_extend2.wav",
	seDIR ~ "nc93572.wav",
	seDIR ~ "nc93575.wav",
	seDIR ~ "pi64.wav",
	seDIR ~ "spellcard.wav",
	seDIR ~ "chapter_d.wav",
];

let objSounds = [];

@Initialize
{
	SetAutoDeleteObject(true);	//オブジェクトの自動削除ON
	SetAreaCommonData(CAREA_TITLE, "SCRIPT_SOUND", GetOwnScriptID());	//ID記録
	TMain();
}


@Event
{
	alternative(GetEventType())
	case(ev_Title_CallSound)
	{
		let seID = GetEventArgument(0);
		if (seID >= 0 && seID < length(objSounds))
		{
			ObjSound_Play(objSounds[seID]);
		}
	}
	case(ev_Title_ResetVolume)
	{
		let tmp_volume = GetSoundVolume();
		ascent(i in 0 .. length(objSounds))
		{
			ObjSound_SetVolumeRate(objSounds[i], tmp_volume);
		}
	}
}

@MainLoop
{
	yield;
}

@Finalize
{
}

//サウンドロード
task TMain()
{
	let tmp_volume = GetSoundVolume();
	ascent(i in 0 .. length(TITLE_SOUNDS))
	{
		let obj = ObjSound_Create();
		ObjSound_Load(obj, TITLE_SOUNDS[i]);
		ObjSound_SetVolumeRate(obj, tmp_volume);
		ObjSound_SetSoundDivision(obj, SOUND_SE);
		objSounds = objSounds ~ [obj];
		yield;	//てきとーに待機
	}
}
