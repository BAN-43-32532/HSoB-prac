
// まにゅある
function SceneManual(selectedDefault)
{
	let imgValue = [0, 1, 2, 3, 4, 5, 6, 15, 7, 8, 9, 11, 12];
	if (DEBUG_MODE || GetAreaCommonData(CAREA_SAVE, "PLAYER_KAGUYA", false )) { imgValue = [0, 1, 2, 3, 4, 5, 6, 15, 7, 8, 9, 10, 11, 12]; }
	if (DEBUG_MODE || GetAreaCommonData(CAREA_SAVE, "EXTRA_FIRST", false)) { imgValue = imgValue ~ [13, 14]; }
	
	let selectMax = length(imgValue);
	let animeTimer = 10;
	let tmpResult = -1;
	
	let objParent = ObjText_Create();	//適当なオブジェクトを生成（データのやり取り用）
	Obj_SetValue(objParent, "VALUE", selectedDefault);

	//メニュー配置
	local
	{
		let mx = 96+256;
		let my = 96;
		ascent(i in 0 .. selectMax)
		{
			TMenuItemManual(objParent, i, mx, my+22*i, imgValue[i]);
		}
	}
	wait(5);
	//キー状態がリセットされるまで待機
	WaitForResetKeyEx([VK_OK, VK_CANCEL]);

	loop
	{
		//キー入力待ち
		let downKey = CheckKey_MenuEx(30, 6, [VK_UP, VK_DOWN, VK_OK, VK_CANCEL]);
		
		alternative (downKey)
		case (VK_UP)
		{
			CallSoundPackage(sndTtSelect);
			Menu_AddValue(objParent, "VALUE", -1, selectMax);
		}
		case (VK_DOWN)
		{
			CallSoundPackage(sndTtSelect);
			Menu_AddValue(objParent, "VALUE", 1, selectMax);
		}
		case (VK_OK)
		{
			tmpResult = Obj_GetValueD(objParent, "VALUE", 0);
			MenuEnter(objParent);
			break;
		}
		case (VK_CANCEL)
		{
			tmpResult = -1;
			CallSoundPackage(sndTtCancel);
			break;
		}
		wait(2);	//適当に固定ディレイ
	}
	Obj_Delete(objParent);
	// 画像説明へ
	if (tmpResult >= 0) { SceneManual2(tmpResult, imgValue); }
	
	// メニュー選択時モーション
	function MenuEnter(parent)
	{
		CallSoundPackage(sndTtDecide);
		Obj_SetValue(parent, "FLASH", 1);
		wait(10);
		Obj_SetValue(parent, "FLASH", 0);
	}
	// メニューパーツ
	task TMenuItemManual(parent, index, base_x, base_y, img_index)
	{
		let objText = ObjPrim_Create(OBJ_SPRITE_2D);
		Obj_SetRenderPriorityI(objText, 91);
		ObjPrim_SetTexture(objText, imgTtManual00);
		ObjSprite2D_SetSourceRect(objText, 0, img_index*32, 256, 32+img_index*32);
		ObjSprite2D_SetDestRect(objText, -256, 0, 0, 32);
		ObjRender_SetPosition(objText, base_x, base_y, 0);
		ObjRender_SetScaleX(objText, 0);
		
		let baseColor = 255;
		let tmpColor = baseColor;
		
		let t = 0;
		let before_index = -99999;
		let selected_index = -1;
		while(!Obj_IsDeleted(parent))
		{
			selected_index = Obj_GetValueD(parent, "VALUE", -1);
			let now_index = index-selected_index;
			
			// 開幕アニメ
			if (t < animeTimer)
			{
				let tmp = sin((t+1)/animeTimer*90);
				ObjRender_SetScaleX(objText, tmp);
			}
			// 選択決定
			if (Obj_GetValueD(parent, "FLASH", 0))
			{
				if (selected_index == index) {
					descent(t in 0 .. 10)
					{
						let alpha = 255 - ((trunc(t/3)+1)%2)*128;
						ObjRender_SetAlpha(objText, alpha);
						yield;
					}
				}
				descent(t in 0 .. 10)
				{
					let alpha = 255*((t+1)/10);
					ObjRender_SetAlpha(objText, alpha);
					if (selected_index != index) { ObjRender_SetX(objText, ObjRender_GetX(objText)+3); }
					yield;
				}
				break;
			}
			
			if (before_index != now_index)
			{
				tmpColor = baseColor*max(0.4, (1-absolute(now_index)*0.6));
			}
			// 明滅
			if (selected_index == index) {
				let tmp_c = tmpColor - (sin(t*10)+0.75)*32;
				ObjRender_SetColor(objText, tmp_c, tmp_c, tmp_c);
			} else {
				ObjRender_SetColor(objText, tmpColor, tmpColor, tmpColor);
			}
			t++;
			yield;
		}
		Obj_Delete(objText);
	}
}

// まにゅある（画像説明部分）
function SceneManual2(selectedDefault, imgValue)
{
//	let imgValue = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
	let selectMax = length(imgValue);
	let tmpResult = -1;
	
	let objParent = ObjText_Create();	//適当なオブジェクトを生成（データのやり取り用）
	Obj_SetValue(objParent, "VALUE", selectedDefault);

	// 最初の１つ
	TMenuItemManual2(objParent, selectedDefault);
	
	loop
	{
		//キー入力待ち
		let downKey = CheckKey_MenuEx(30, 6, [VK_LEFT, VK_RIGHT, VK_CANCEL]);
		
		alternative (downKey)
		case (VK_LEFT)
		{
			CallSoundPackage(sndTtSelect);
			Menu_AddValue(objParent, "VALUE", -1, selectMax);
			
			let tmpIdx = Obj_GetValueD(objParent, "VALUE", 0);
			TMenuItemManual2(objParent, tmpIdx);
		}
		case (VK_RIGHT)
		{
			CallSoundPackage(sndTtSelect);
			Menu_AddValue(objParent, "VALUE", 1, selectMax);
			
			let tmpIdx = Obj_GetValueD(objParent, "VALUE", 0);
			TMenuItemManual2(objParent, tmpIdx);
		}
		case (VK_CANCEL)
		{
			CallSoundPackage(sndTtCancel);
			break;
		}
		wait(2);	//適当に固定ディレイ
	}
	local
	{
		let tmpIdx = Obj_GetValueD(objParent, "VALUE", -1);
		tmpResult = tmpIdx;
	}
	Obj_Delete(objParent);
	SceneManual(tmpResult);
	
	// メニューパーツ
	task TMenuItemManual2(parent, _index)
	{
		let ix; let iy; let iw; let ih;
		let imgManual = "";
		let index = imgValue[_index];

		alternative(index)
		case(0)
		{
			ix = 0; iy = 0;
			iw = 512; ih = 256;
			imgManual = imgTtManual01;
		}
		case(1)
		{
			ix = 0; iy = 0;
			iw = 512; ih = 256;
			imgManual = imgTtManual02;
		}
		case(2)
		{
			ix = 0; iy = 0;
			iw = 512; ih = 512;
			imgManual = imgTtManual05;
		}
		case(3)
		{
			ix = 0; iy = 256;
			iw = 512; ih = 128;
			imgManual = imgTtManual02;
		}
		case(4)
		{
			ix = 0; iy = 384;
			iw = 512; ih = 256;
			imgManual = imgTtManual02;
		}
		case(5)
		{
			ix = 0; iy = 640;
			iw = 512; ih = 256;
			imgManual = imgTtManual02;
		}
		case(6)
		{
			ix = 0; iy = 0;
			iw = 512; ih = 256;
			imgManual = imgTtManual06;
		}
		case(7)
		{
			ix = 0; iy = 0;
			iw = 512; ih = 512;
			imgManual = imgTtManual03a;
		}
		case(8)
		{
			ix = 0; iy = 0;
			iw = 512; ih = 512;
			imgManual = imgTtManual03b;
		}
		case(9)
		{
			ix = 0; iy = 0;
			iw = 512; ih = 512;
			imgManual = imgTtManual03c;
		}
		case(10)
		{
			ix = 0; iy = 0;
			iw = 512; ih = 512;
			imgManual = imgTtManual03d;
		}
		case(11)
		{
			ix = 0; iy = 0;
			iw = 512; ih = 512;
			imgManual = imgTtManual04a;
		}
		case(12)
		{
			ix = 0; iy = 0;
			iw = 512; ih = 512;
			imgManual = imgTtManual04b;
		}
		case(13)
		{
			ix = 0; iy = 0;
			iw = 512; ih = 320;
			imgManual = imgTtManual07;
		}
		case(14)
		{
			ix = 0; iy = 320;
			iw = 512; ih = 384;
			imgManual = imgTtManual07;
		}
		case(15)
		{
			ix = 0; iy = 256;
			iw = 512; ih = 256;
			imgManual = imgTtManual06;
		}
		others
		{
			ix = 0; iy = 0;
			iw = 512; ih = 512;
		}
		
		let base_x = GetScreenWidth/2 - iw/2;
		let base_y = 48;
		let isScrool = false;
		if (ih > 512) { base_y = 96; isScrool = true; }
		if (index == 7 || index == 8 || index == 9 || index == 10) { base_y -= 16; }
		if (index == 2) { base_y = -1; }
		
		let objText = ObjPrim_Create(OBJ_SPRITE_2D);
		Obj_SetRenderPriorityI(objText, 91);
		ObjPrim_SetTexture(objText, imgManual);
		ObjSprite2D_SetSourceRect(objText, ix, iy, ix+iw, iy+ih);
		ObjSprite2D_SetDestRect(objText, 0, 0, iw, ih);
		ObjRender_SetPosition(objText, base_x, base_y, 0);

		let t = 0;
		while(!Obj_IsDeleted(parent))
		{
			// 開幕アニメ
			if (t < 5)
			{
				let alpha = 255*((t+1)/5);
				ObjRender_SetAlpha(objText, alpha);
			}
			// 終了
			if (_index != Obj_GetValueD(parent, "VALUE", -1))
			{
				descent(t in 0 .. 5)
				{
					let alpha = 255*((t+1)/5);
					ObjRender_SetAlpha(objText, alpha);
					yield;
				}
				break;
			}
			// スクロール
			if (isScrool)
			{
				if (GetVirtualKeyState(VK_UP) == KEY_HOLD) { base_y = min(96, base_y+4); }
				if (GetVirtualKeyState(VK_DOWN) == KEY_HOLD) { base_y = max(GetScreenHeight-ih, base_y-4); }
				ObjRender_SetY(objText, base_y);
			}
			t++;
			yield;
		}
		Obj_Delete(objText);
	}
}
