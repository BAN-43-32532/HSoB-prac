#include "./lib/lib_SystemScene.dnh"
#include "../lib/lib_HighScore.dnh"
#include "../lib/lib_StaffRoll.dnh"
#include "../lib/loadlib/file_character.dnh"


#include "../img/ed/ed_files.dnh"

/*--------エンディング用--------*/
let STUFF_FLG = true;


//　ゲームクリア時

@Initialize{
	SetAutoDeleteObject(true);
	SetHighScore();

	TBackground();
	TEnding();
}

@MainLoop{
	yield;
}

@Finalize{
	//ClosePackage();
}



task TEnding()
{
	/*
	エンディング関係
	*/
	let flgBad = GetAreaCommonData(CAREA_TITLE, "FlgBadEnding", false);
	SetAreaCommonData(CAREA_TITLE, "FlgBadEnding", false);
	SetAreaCommonData(CAREA_TITLE, "FlgBadEnding_Before", flgBad);
	
	SetFlag(flgBad);
	// エンディングのベース背景
	ENDING_INTRO();

	if (!flgBad)
	{
		//GOD is 神
		
		// BGM
		PlayMusic( 17, 120, 120 );
		
		// すたっふろーる
		StartStaffRoll();
		
		TBackgroundEd();
		wait(120);

		// 参戦!!
		if (DEBUG_MODE || GetAreaCommonData(CAREA_STAGE, "GAME_CLEAR_FIRST", 0))
		{
			wait(90);
			HIMESAMA_SANSEN();
			wait(30);
		}
	}
	else
	{
		//BAD
		
		// BGM
		PlayMusic( 1, 120, 120 );
		
		TBackgroundEd();
		wait(120);
	}

	TMenu();
}

// エンディングのベース背景
task ENDING_INTRO()
{
	let obj2 = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(obj2, 100);
	ObjSprite2D_SetDestRect(obj2, 0, 0, GetScreenWidth, GetScreenHeight);
	ObjRender_SetBlendType(obj2, BLEND_ADD_ARGB);
	ObjRender_SetColor(obj2, 255, 255, 255);
	
	descent(i in 0 .. 240)
	{
		let tmp = sin((i+1)/240*90);
		ObjRender_SetAlpha(obj2, tmp*255);
		yield;
	}
	Obj_Delete(obj2);
}


// 体験版用
function ENDING_TAIKEN
{
	// ベースの背景
	let objBaseBg = ObjPrim_Create(OBJ_SPRITE_2D); //2Dスプライトオブジェクト生成
	ObjPrim_SetTexture(objBaseBg, imgEdBack_Taiken2);
	ObjSprite2D_SetSourceRect(objBaseBg, 0, 0, GetScreenWidth, GetScreenHeight);
	ObjSprite2D_SetDestRect(objBaseBg, 0, 0, GetScreenWidth, GetScreenHeight);
	Obj_SetRenderPriorityI(objBaseBg, 0);
	
	ascent(i in 0 .. 60)
	{
		ObjRender_SetAlpha(objBaseBg, (i+1)/60*255);
		yield;
	}
	WaitForResetKeyEx([VK_OK, VK_CANCEL, VK_PAUSE]);
	CheckKey_Menu(15, [VK_CANCEL, VK_OK]);
	CallSoundPackage(sndTtCancel);
	_ENDING_TAIKEN();
	waitEx(60);

	task _ENDING_TAIKEN()
	{
		descent(i in 0 .. 120)
		{
			ObjRender_SetAlpha(objBaseBg, (i+1)/120*255);
			yield;
		}
		Obj_Delete(objBaseBg);
	}
}

function HIMESAMA_SANSEN()
{
	let SANSEN_FLAG = true;
	let posShine = [GetStgFrameWidth/2-210, GetStgFrameHeight/2-24];
	let posShine2 = [GetStgFrameWidth/2+128, GetStgFrameHeight/2-64];
	
	CallSoundPackage(sndTtDanger);
	ascent(i in 0 .. 10)
	{
		SANSEN_ALERT([GetStgFrameWidth/2, GetStgFrameHeight*(i+0.5)/10],
			randEffect(-30,30), GetStgFrameWidth*1.5, [255,0,0], 180-i*10);
		wait(5);
	}
	wait(90);
	
	CallSoundPackage(sndTtCallSpellCard);
	SANSEN_PIC([GetStgFrameWidth/2+64, GetStgFrameHeight/2+108], [640, 640],
			[[-0.1,0.0], [0.0,-0.2], [0.1,0.0], [0.1,0.2]], imgCharaKaguya[4], 0);

	SANSEN_PIC([GetStgFrameWidth/2-48, GetStgFrameHeight/2+32], [560, 280],
			[[0.0,0.0], [0.0,0.2], [-0.2,0.0], [-0.2,-0.2]], imgEdSansen, 1);
	wait(60);
	SANSEN_SHINE(posShine, 0, [192,192,192], 2, 6, 30, 1);
	SANSEN_SHINE(posShine, 0, [128,128,128], 9, 6, 60, 0);
	wait(30);
	SANSEN_SHINE(posShine, 0, [255,255,255], 2, 8, 60, 0);
	
	ascent(i in 0 .. 15)
	{
		SANSEN_SHINE2(posShine2, randEffect(0,360), randEffect(-90,90),
			[randEffect(32,128),randEffect(32,128),randEffect(32,128)], randEffect(16,128), 120);
		wait(5);
	}
	
	wait(180);
	SANSEN_FLAG = false;

	task SANSEN_ALERT(pos, base_angle, size, color, timer)
	{
		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjPrim_SetTexture(obj, imgSystemChapter);
		Obj_SetRenderPriorityI(obj, 100);
		ObjSprite2D_SetSourceRect(obj, 0, 192, size, 224);
		ObjSprite2D_SetDestCenter(obj);
		ObjRender_SetPosition(obj, pos[0], pos[1], 0);
		ObjRender_SetAngleZ(obj, base_angle);
		ObjRender_SetColor(obj, color[0], color[1], color[2]);

		ascent(i in 0 .. timer)
		{
			let move = sin(min(1,i/30)*90);
			let move2 = sin(min(1,(timer-i)/30)*90);
			let r = -(1-move)*size + (1-move2)*size + (i/timer-0.5)*size/16;
			ObjRender_SetPosition(obj, pos[0]+r*cos(base_angle), pos[1]+r*sin(base_angle), 0);
			yield;
		}
		Obj_Delete(obj);
	}

	task SANSEN_PIC(pos, size, offset, imgFile, motion_type)
	{
		let cut = 32;
		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		Obj_SetRenderPriorityI(obj, 99);
		ObjPrim_SetTexture(obj, imgFile);
		ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLESTRIP);
		ObjPrim_SetVertexCount(obj, (cut+1)*2);
		ObjRender_SetPosition(obj, pos[0], pos[1], 0);
		ascent(i in 0 .. cut+1)
		{
			let tmp = i/cut;
			ObjPrim_SetVertexUV(obj, i*2+0, tmp, 0);
			ObjPrim_SetVertexUV(obj, i*2+1, tmp, 1);
		}

		let t = 0;
		while(SANSEN_FLAG)
		{
			let move = sin(min(1,t/60)*90);
			let move2 = sin(min(1,t/24)*90);
			let ipos = [
				[-size[0]*(0.5+offset[0][0]*move), -size[1]*(0.5+offset[0][1]*move)],
				[-size[0]*(0.5+offset[1][0]*move),  size[1]*(0.5+offset[1][1]*move)],
				[ size[0]*(0.5+offset[2][0]*move), -size[1]*(0.5+offset[2][1]*move)],
				[ size[0]*(0.5+offset[3][0]*move),  size[1]*(0.5+offset[3][1]*move)]
			];
			ascent(i in 0 .. cut+1)
			{
				let tmp = i/cut;
				ObjPrim_SetVertexPosition(obj, i*2+0, ipos[0][0]*(1-tmp)+ipos[2][0]*tmp, ipos[0][1]*(1-tmp)+ipos[2][1]*tmp, 0);
				ObjPrim_SetVertexPosition(obj, i*2+1, ipos[1][0]*(1-tmp)+ipos[3][0]*tmp, ipos[1][1]*(1-tmp)+ipos[3][1]*tmp, 0);
			}
			if (motion_type == 0) {
				ObjRender_SetAlpha(obj, move2*255);
			} else {
				ObjRender_SetScaleXYZ(obj, 2-move2, move2, 1);
				ObjRender_SetPosition(obj, pos[0]+(1-move2)*512, pos[1]-(1-move2)*72, 0);
			}
			t++;
			yield;
		}
		descent(t in 0 .. 15)
		{
			let move2 = sin(min(1, t/15)*90);

			if (motion_type == 0) {
				ObjRender_SetAlpha(obj, move2*255);
			} else {
				ObjRender_SetScaleXYZ(obj, 2-move2, move2, 1);
				ObjRender_SetPosition(obj, pos[0]+(1-move2)*512, pos[1]-(1-move2)*128, 0);
			}
			yield;
		}
		Obj_Delete(obj);
	}

	task SANSEN_SHINE(pos, base_angle, color, particle_id, scale, timer, motion_type)
	{
		let obj = CreateParticleEffect(pos, scale, particle_id);
		Obj_SetRenderPriorityI(obj, 99);
		ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
		ObjRender_SetColor(obj, color[0], color[1], color[2]);

		let angle = base_angle;
		ascent(i in 0 .. timer)
		{
			let move = sin(min(1,i/timer)*90);
			ObjRender_SetAngleZ(obj, angle+90*move);
			if (motion_type == 1) { move = 1-move; }
			ObjRender_SetScaleXYZ(obj, move, move, move);
			ObjRender_SetAlpha(obj, (1-move)*255);
			yield;
		}
		Obj_Delete(obj);
	}

	task SANSEN_SHINE2(pos, base_angle, add_angle, color, size, timer)
	{
		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		Obj_SetRenderPriorityI(obj, 98);
		ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLELIST);
		ObjPrim_SetVertexCount(obj, 3);
		ObjRender_SetPosition(obj, pos[0], pos[1], 0);
		ObjPrim_SetVertexPosition(obj, 0, 0, 0, 0);
		ObjPrim_SetVertexPosition(obj, 1, 800, size, 0);
		ObjPrim_SetVertexPosition(obj, 2, 800, -size, 0);
		ObjRender_SetColor(obj, color[0], color[1], color[2]);
		ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);

		ascent(i in 0 .. timer)
		{
			let move = sin(min(1,i/timer)*90);
			let move2 = move * (2-move*2);
			ObjRender_SetAngleZ(obj, base_angle+add_angle*move);
			ObjRender_SetAlpha(obj, move2*255);
			yield;
		}
		Obj_Delete(obj);
	}
}



//----------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------
task TMenu
{
	// ゲームオーバーBGM
//	if (GetPlayMode() != GAME_SPELL) { PlayMusic(1, 120, 30); }
	
	//メニュー配置
	let mx			= GetScreenWidth/2;
	let my			= 330;
	let myRESULT_HELP = 107777;
	
	let texts		= ["リプレイを保存する", "タイトルに戻る"];
	let listResult		= [RESULT_SAVE_REPLAY, RESULT_END];
	let listReverify	= [ false, true ];
	let rgb			= [160,160,64];
	let continue		= GetContinueCount();

	//　こんてぬー
	if( continue > 0 )
	{
		texts		= ["タイトルに戻る"];
		listResult	= [RESULT_END];
		listReverify	= [ true ];
	}
	let countMenu	= length(texts);

	//　メニュータイトル作成
	let objParent = ObjText_Create();	//適当なオブジェクトを生成（データのやり取り用）
	Obj_SetValue(objParent, "VALUE", 0);


	//　項目作成
	ascent( var iText in 0 .. countMenu )
	{
		TMenuItem(objParent, iText, mx-12, my-32, texts[iText] );
		my += 32;
		mx += 8;
	//	if (iText == 0) { mx += 32; }
	}
	
	//　8フレーム待機
	loop( 30 ){ yield; }
	
	// Tips
	SetTips(objParent, 112, 420, 0, TIPS_CLEAR);

	//キー状態がリセットされるまで待機
	WaitForResetKeyEx([VK_OK, VK_CANCEL, VK_PAUSE]);
	
	loop
	{
		//キー入力待ち
		let downKey = CheckKey_Menu(8, [VK_UP, VK_DOWN, VK_CANCEL, VK_OK]);

		alternative (downKey)
		case (VK_UP)
		{
			CallSoundPackage(sndTtSelect);
			Menu_AddValue(objParent, "VALUE", -1, countMenu);
		}
		case (VK_DOWN)
		{
			CallSoundPackage(sndTtSelect);
			Menu_AddValue(objParent, "VALUE", 1, countMenu);
		}
		case (VK_CANCEL)
		{
			Obj_SetValue(objParent, "VALUE", 0);
			CallSoundPackage(sndTtCancel);
		}
		case (VK_OK)
		{
			let selectIndex = Obj_GetValueD(objParent, "VALUE", 0);
			Obj_SetValue(objParent, "ACTIVE", false);
			
			let menu_flg = true;
			if (listReverify[selectIndex])
			{
				CallSoundPackage(sndTtDecide);
				menu_flg = TReverify(330, 270);
			}

			if (menu_flg)
			{
				if (listResult[selectIndex] == myRESULT_HELP)
				{
					// ヘルプ
					CallSoundPackage(sndTtDecide);
					SceneManual(-1);
				}
				else
				{
					//　リザルトセット
					SetScriptResult( listResult[selectIndex] );
					
					if( listResult[ selectIndex ] == RESULT_SAVE_REPLAY )
					{
						CallSoundPackage(sndTtDecide);
						CallReplaySaveScene();
					}
					else
					{
						//　得点リセット
						AddScore( -GetScore() );
						CallSoundPackage(sndTtDecide);
						loop( 12 ){ yield; }
						CloseScript( GetOwnScriptID() );
						return;
					}
				}
			}
			Obj_SetValue(objParent, "ACTIVE", true);
		}
		loop(3) { yield; }	//適当に固定ディレイ
	}
	Obj_Delete(objParent);
}




function CallReplaySaveScene()
{
	let csd			= GetCurrentScriptDirectory();
	let pathScript	= csd ~ "./SceneReplay.dnh";
	let idScript	= LoadScript(pathScript);
	let cc			= 0;
	
	IsReplaySave = true;
	SetScriptArgument(idScript, 0, 1);	//クリア時はキーボードを真ん中に
	StartScript(idScript);
	
	while( !IsCloseScript(idScript) )
	{
		yield;
	}
	
	IsReplaySave = false;
}


// エンディングのベース背景
task WHITEOUT_ED2()
{
	let obj2 = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(obj2, 99);
	ObjSprite2D_SetDestRect(obj2, 0, 0, GetScreenWidth, GetScreenHeight);
	ObjRender_SetBlendType(obj2, BLEND_ADD_ARGB);
	ObjRender_SetColor(obj2, 255, 255, 255);
	
	descent(i in 0 .. 240)
	{
		let tmp = sin((i+1)/240*90);
		ObjRender_SetAlpha(obj2, tmp*255);
		yield;
	}
	Obj_Delete(obj2);
}

// 背景
task TBackgroundEd
{
	// ベースの背景
	let objBaseBg = ObjPrim_Create(OBJ_SPRITE_2D); //2Dスプライトオブジェクト生成
	ObjPrim_SetTexture(objBaseBg, imgEdBack);
	ObjSprite2D_SetSourceRect(objBaseBg, 0, 0, GetScreenWidth, GetScreenHeight);
	ObjSprite2D_SetDestRect(objBaseBg, 0, 0, GetScreenWidth, GetScreenHeight);
	Obj_SetRenderPriorityI(objBaseBg, 0);
	
	ascent(i in 0 .. 60)
	{
		ObjRender_SetAlpha(objBaseBg, (i+1)/60*255);
		yield;
	}
}

// 解放フラグ
function SetFlag(isBadEnding)
{
	// クリアフラグ
	if (!isBadEnding)
	{
		CDM_SetExtraStageFlag( GetPlayerType() );	// フラグは自機共通（会話が変わらない為）
		CDM_SetAllClearFlag( GetPlayerType(), GetAreaCommonData(CAREA_SYSTEM, "PlayerType_Base", 0 ), Difficult() );
		if (!GetAreaCommonData(CAREA_SAVE, "PLAYER_KAGUYA", false))
		{
			// 初クリアフラグ
			SetAreaCommonData(CAREA_STAGE, "GAME_CLEAR_FIRST", 1 );
		}
		// 輝夜さん解禁
		SetAreaCommonData(CAREA_SAVE, "PLAYER_KAGUYA", true );
		// ゲームクリアフラグON
		SetAreaCommonData(CAREA_STAGE, "GAME_CLEAR", 1 );
		// コモンデータ保存
		SaveCommonDataAreaA2(CAREA_SAVE, saveCommonSAVE);
	}
}

// ハイスコア保存
function SetHighScore()
{
	let stage_clear		= GetAreaCommonData(CAREA_SYSTEM, "ClearStage", false);
	if (GetPlayMode() == GAME_MAIN)
	{
		let com = "";
		if (Difficult() == D_EXTRA) { com = ["ExClear", "ExEClr", "ExZClr"][DifficultEx]; }
		else { com = "Clear"; }
		
		if (Difficult() == D_EXTRA) {
			AddHighScoreEx(Difficult(), GetPlayerType(), GetAreaCommonData(CAREA_SYSTEM, "PlayerType_Base", 0 ),
				0, GetPlayMode(), GetScore(), com, GetAllPlayerSubWeapon());
		} else {
			AddHighScore(Difficult(), GetPlayerType(), GetAreaCommonData(CAREA_SYSTEM, "PlayerType_Base", 0 ),
				0, GetPlayMode(), GetScore(), com)
		}
	}
}
