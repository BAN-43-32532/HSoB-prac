// 監視系

// 敵撃破カウント（毎フレームリセット）
let EnemyKillCount	= 0;

// xグレイズ毎にアイテムを落とす
let ItemDropPerGraze = 5;
let ItemDropPerGraze_Orange = 10;

//----------------------------------------------------
//最大得点加算
//----------------------------------------------------
task TAddMaxScore()
{
	let before_graze = GetGraze();
	loop
	{
		let tmp_graze = GetGraze();
		if (GetPlayMode() != GAME_SPELL && tmp_graze != before_graze)
		{
			let ct = 0;
			let add_ct = ItemDropPerGraze;
			if (GetPlayerWeapon() == WEAPON_ORANGE) { add_ct = ItemDropPerGraze_Orange; }
			
			while(before_graze <= tmp_graze-add_ct && ct < 4)	// 1フレーム5個でストッパー
			{
				let a = -90 + rand(-15,15);
				SetItemEx(GetPlayerX+64*cos(a), GetPlayerY+64*sin(a), 3, a, MY_ITEM_TIME, ITEM_SIZE_1);
				before_graze += add_ct;
				ct++;
			}
			if (tmp_graze < before_graze)
			{
				// コンティニューでグレイズ減った時対策
				before_graze = tmp_graze;
			}
//			AddMaxScore((tmp_graze-before_graze)*10);
//			before_graze = tmp_graze;
		}
		yield;
	}
}


//----------------------------------------------------
// かけらの数を監視
//----------------------------------------------------
task TCheckExtend()
{
	yield;	// プレイヤー情報読み込み待機
	
	ExLife();
	ExSpell();
	ExZSpell();
	
	task ExLife()
	{
		// ふつう
		let EXTEND = [
			100000000,
			200000000,
			500000000,
			700000000,
			1000000000,
			1500000000,
			4000000000,
			12000000000
		];
		
		if (Difficult == D_EXTRA)
		{
			alternative(DifficultEx())
			case(D_EX_NORM)
			{
				// Extra - 虹
				if (IsRainbow())
				{
					EXTEND = [
						1000000000,
						1000000000,
						1000000000,
						2000000000,
						2700000000,
					];
				}
				// Extra - 白黒
				else
				{
					EXTEND = [
						200000000,
						200000000,
						200000000,
						200000000,
						200000000,
					];
				}
			}
			case(D_EX_EASY)
			{
				// ExtraEasy - 虹
				if (IsRainbow())
				{
					EXTEND = [
						250000000,
						250000000,
						500000000,
						500000000,
						500000000,
						1000000000,
						2000000000,
					];
				}
				// ExtraEasy - 白黒
				else
				{
					EXTEND = [
						100000000,
						100000000,
						100000000,
						150000000,
						150000000,
						200000000,
						200000000,
					];
				}
			}
			case(D_EX_HARD)
			{
				// ExtraZLabel - 虹
				if (IsRainbow())
				{
					EXTEND = [
						5000000000,
						5000000000,
						5000000000,
						7500000000,
						15200000000,
					];
				}
				// ExtraZLabel - 白黒
				else
				{
					EXTEND = [
						700000000,
						1000000000,
						1000000000,
						1000000000,
						1000000000,
					];
				}
			}
		}
		else
		{
			// 通常ステージ - 白黒
			if (GetItemLegacyMode())
			{
				EXTEND = [
					50000000,
					150000000,
					300000000,
					500000000,
					500000000,
					500000000,
					3000000000,
					5000000000
				];
			}
		}
		let ex = GetAreaCommonData(CAREA_SYSTEM, "ExtendCounter", 0);

		// 初期値
		if (length(EXTEND) > ex) { SetExtendMax(EXTEND[ex]); }
		else { SetExtendMax(-1); }
		yield;
		
		let beforeScore = GetScore();
		let beforeLife = GetPlayerLife();
		while(!GetAreaCommonData(CAREA_STAGE, "GAME_CLEAR", 0))
		{
			// エクステンドチェック
			if (length(EXTEND) > ex)
			{
				if (beforeScore < GetScore())
				{
					let addScore = GetScore() - beforeScore;
					beforeScore = GetScore();
					
					AddExtendScore(addScore);

					if (GetExtendScore() >= GetExtendMax())
					{
						SetPlayerLife(GetPlayerLife()+1);
						ex++;
						
						if (length(EXTEND) > ex)
						{
							AddExtendScore(-GetExtendMax());
							SetExtendMax(EXTEND[ex]);
							SetAreaCommonData(CAREA_SYSTEM, "ExtendCounter", ex);
						}
						else
						{
							SetExtendScore(0);
							SetExtendMax(-1);
							SetAreaCommonData(CAREA_SYSTEM, "ExtendCounter", ex);
						}
					}
				}
				else
				{
					// コンティニューでスコアが減少した場合
					beforeScore = GetScore();
				}
			}
			// エクステンド表示
			if (beforeLife != GetPlayerLife())
			{
				if (beforeLife < GetPlayerLife())
				{
					// Extend!!
					SetSystemAscii02(0.66, [255,96,255], 240, "LIFE   EXTEND");
					CallSound(snd1UP);
				}
				beforeLife = GetPlayerLife();
			}
			yield;
		}
	}

	task ExSpell()
	{
		let EXTEND = [150, 210, 277, 360, 450, 550, 650, 777];
		let ex = GetPlayerSpell();

		if (Difficult == D_EXTRA)
		{
		}
		
		// 初期値
		SetTimeItemMax(GetSpellExtendCount(ex));
		yield;
		
		let beforeScore = GetTimeItem();
		let beforeLevel = GetPlayerSpell();
		let beforeSpell = GetPlayerSpell();
		while(!GetAreaCommonData(CAREA_STAGE, "GAME_CLEAR", 0))
		{
			// レベルチェック
			if (beforeLevel != GetPlayerSpell())
			{
				let before_ex = GetSpellExtendCount(beforeLevel);
				let next_ex = GetSpellExtendCount(GetPlayerSpell());
				let new_item = GetTimeItem();
				if (beforeLevel > GetPlayerSpell())
				{
					// レベルが下がった場合アイテムも最大値に応じて目減りする
					new_item = trunc( new_item * (next_ex/before_ex) );
				}
//				SetCommonData("item", GetTimeItem());
//				SetCommonData("next_ex", next_ex);
//				SetCommonData("GetExtendMax", GetExtendMax());
				SetTimeItem(new_item);
				SetTimeItemMax(next_ex);

				beforeLevel = GetPlayerSpell();
			}
			// エクステンドチェック
			if (GetTimeItem() >= GetTimeItemMax())
			{
				if (GetPlayerSpell() >= length(EXTEND))
				{
					// ボム最大所持数をる場合寸止め
					SetTimeItem(GetTimeItemMax()-1);
				}
				else
				{
					SetPlayerSpell(GetPlayerSpell()+1);
					let next_ex = GetSpellExtendCount(GetPlayerSpell());
					let old_ex = GetTimeItemMax();
					
					AddTimeItem(-old_ex);
					SetTimeItemMax(next_ex);
				}
			}
			// エクステンド表示
			if (beforeSpell != GetPlayerSpell())
			{
				if (beforeSpell < GetPlayerSpell() && !GetAreaCommonData(CAREA_SYSTEM, "PLAYER_SHOOT_DOWN", 0))
				{
					// Extend!!
					SetSystemAscii02(0.66, [96,255,96], 240, "SPELL  EXTEND");
					CallSound(sndExtSpell);
				}
				SetAreaCommonData(CAREA_SYSTEM, "PLAYER_SHOOT_DOWN", 0);
				beforeSpell = GetPlayerSpell();
			}
			yield;
		}
		
		function GetSpellExtendCount(lv)
		{
			let next_ex = -1;
			if (lv >= 0 && lv < length(EXTEND))
			{
				next_ex = EXTEND[lv];
			}
			if (next_ex < 0)
			{
				next_ex = EXTEND[length(EXTEND)-1];
			}
			return(next_ex);
		}
	}

	
	task ExZSpell()
	{
		// 初期値
		SetZSpellItemMax(3333);
		
		if (GetPlayMode() == GAME_PRACTICE && !GetItemLegacyMode())
		{
			SetZSpellItem(trunc(GetZSpellItemMax() * GetAreaCommonData(CAREA_STAGE, "Prac_ZSpell", 0)/100));
		}
		yield;
		
		let beforeScore = GetZSpellItem();
		while(!GetAreaCommonData(CAREA_STAGE, "GAME_CLEAR", 0))
		{
			// エクステンド表示
			if (beforeScore != GetZSpellItem())
			{
				beforeScore = GetZSpellItem();
				if (beforeScore >= GetZSpellItemMax())
				{
					// Extend!!
					SetSystemAscii02(0.66, [255,255,0], 240, "Z SPELL  STANDBY");
					CallSound(sndExtMag);
				}
			}
			yield;
		}
	}
}

//----------------------------------------------------
// 装備切り替え（デバッグ用）
//----------------------------------------------------
task TDebugWeaponChange()
{
	if (!DEBUG_MODE) { return; }
	
	loop
	{
		// 装備切り替え
		if (GetKeyState(KEY_0) == KEY_PUSH || GetKeyState(KEY_NUMPAD0) == KEY_PUSH)
			{ SetAreaCommonData(CAREA_SYSTEM, "PlayerType", 0); }
		if (GetKeyState(KEY_1) == KEY_PUSH || GetKeyState(KEY_NUMPAD1) == KEY_PUSH)
			{ SetAreaCommonData(CAREA_SYSTEM, "PlayerType", 1); }
		if (GetKeyState(KEY_2) == KEY_PUSH || GetKeyState(KEY_NUMPAD2) == KEY_PUSH)
			{ SetAreaCommonData(CAREA_SYSTEM, "PlayerType", 2); }
		if (GetKeyState(KEY_3) == KEY_PUSH || GetKeyState(KEY_NUMPAD3) == KEY_PUSH)
			{ SetAreaCommonData(CAREA_SYSTEM, "PlayerType", 3); }
		if (GetKeyState(KEY_4) == KEY_PUSH || GetKeyState(KEY_NUMPAD4) == KEY_PUSH)
			{ SetAreaCommonData(CAREA_SYSTEM, "PlayerType", 4); }
		if (GetKeyState(KEY_5) == KEY_PUSH || GetKeyState(KEY_NUMPAD5) == KEY_PUSH)
			{ SetAreaCommonData(CAREA_SYSTEM, "PlayerType", 5); }
		if (GetKeyState(KEY_6) == KEY_PUSH || GetKeyState(KEY_NUMPAD6) == KEY_PUSH)
			{ SetAreaCommonData(CAREA_SYSTEM, "PlayerType", 6); }
		if (GetKeyState(KEY_7) == KEY_PUSH || GetKeyState(KEY_NUMPAD7) == KEY_PUSH)
			{ SetAreaCommonData(CAREA_SYSTEM, "PlayerType", 7); }
		if (GetKeyState(KEY_8) == KEY_PUSH || GetKeyState(KEY_NUMPAD8) == KEY_PUSH)
			{ SetAreaCommonData(CAREA_SYSTEM, "PlayerType", 8); }
		if (GetKeyState(KEY_9) == KEY_PUSH || GetKeyState(KEY_NUMPAD9) == KEY_PUSH)
			{ SetAreaCommonData(CAREA_SYSTEM, "PlayerType", 9); }
		// ライフ、ボム増減
		let t = [1,-1][1];
		if (GetKeyState(KEY_Q) == KEY_PUSH)
			{ SetPlayerLife(max(0,min(8,GetPlayerLife()+([1,-1][GetKeyState(KEY_LSHIFT)==KEY_HOLD])))); }
		if (GetKeyState(KEY_W) == KEY_PUSH)
			{ SetPlayerSpell(max(0,min(8,GetPlayerSpell()+([1,-1][GetKeyState(KEY_LSHIFT)==KEY_HOLD])))); }
		if (GetKeyState(KEY_E) == KEY_PUSH)
			{ AddZSpellItem(99999); }
		// ショット向き
		if (GetKeyState(KEY_T) == KEY_PUSH)
			{ SetPlayerAngle((GetPlayerAngle()+90)%360); }
		yield;
	}
}

//----------------------------------------------------
// デバッグ表示用
//----------------------------------------------------
task TDebugDisplay()
{
	if (!DEBUG_MODE) { return; }
	
	let TYPE_TEXT = 0;
	let TYPE_INT = 1;
	let TYPE_FLOAT = 2;
	let TYPE_TIME = 3;
	let TYPE_OTHER = 4;
	
	/*
	DISP(0, 0, CAREA_STAGE, "STG7R_EXTEND", TYPE_FLOAT);
	DISP(0, 0, CAREA_SYSTEM, "ITEM_LEGACY", TYPE_FLOAT);
	DISP(0, 16, CAREA_SYSTEM, "ITEM_LEGACY_MAX", TYPE_FLOAT);
	DISP(0, 32, CAREA_SYSTEM, "TIME_ITEM_COUNT", TYPE_FLOAT);
	DISP(0, 48, CAREA_SYSTEM, "TIME_ITEM_MAX", TYPE_FLOAT);
	*/
	/*
	DISP(0, 0, CAREA_SYSTEM, "PlayerRebirthFrame", TYPE_INT);
	DISP(0, 16, CAREA_STAGE, "", TYPE_OTHER);
	DISP(0, 32, CAREA_STAGE, "AllDropItem_Road", TYPE_INT);
	DISP(0, 0, CAREA_STAGE, "AllDropItem_Road", TYPE_INT);
	DISP(0, 16, CAREA_STAGE, "AllDropItem_Boss", TYPE_INT);
	*/
//	DISP(0, 16, "", "", TYPE_TIME);

	let t = 0;
	loop
	{
		SetAreaCommonData(CAREA_SYSTEM, "GAME_FRAME", t);
		t++;
		yield;
	}
	
	task DISP(x, y, common_area, common_data, data_type)
	{
		let objText = ObjText_Create();
		Obj_SetRenderPriorityI(objText, 100);
		ObjText_SetFontSize(objText, 16);
		ObjText_SetFontBorderWidth(objText, 1);
		ObjText_SetFontBorderColor(objText, 64, 64, 64);
		ObjText_SetFontBorderType(objText, BORDER_SHADOW);
		ObjText_SetText(objText, "");
		ObjRender_SetPosition(objText, x, y, 0);
		
		while(IsGame())
		{
			alternative(data_type)
			case (TYPE_TEXT) { ObjText_SetText(objText, GetAreaCommonData(common_area, common_data, "")); }
			case (TYPE_INT) { ObjText_SetText(objText, IntToString(GetAreaCommonData(common_area, common_data, 0))); }
			case (TYPE_FLOAT) { ObjText_SetText(objText, ToString(GetAreaCommonData(common_area, common_data, 0))); }
			case (TYPE_TIME) { ObjText_SetText(objText, IntToString(GetStageTime())); }
			case (TYPE_OTHER) { if (length(GetEnemyBossObjectID) > 0) { ObjText_SetText(objText, ObjEnemy_GetInfo(GetEnemyBossObjectID()[0], INFO_LIFE)); } }
			yield;
		}
	}
}

