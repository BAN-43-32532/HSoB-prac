#東方弾幕風[Single]
#ScriptVersion[3]
#Title["セト通常2"]
#Text["セト通常2"]
#Background[""]
#System["./../../../system/System.dnh"]

//---------------------------------------------------------------------

// 関数取り込み
#include"./../../../lib/lib_boss.dnh"
#include"./lib_Set.dnh"

@Event {
	alternative(GetEventType())
	case(EV_REQUEST_LIFE)		{ SetScriptResult(2800);	}
	case(EV_REQUEST_TIMER)		{ SetScriptResult(55);		}
	BossEvent();
}

let BX;
let BY;
let RightHandPos = [CenX-105, 105];
let LeftHandPos = [CenX+105, 105];

@Initialize {
	// アイテム数
	bossDropItem = 50;

	Boss_Init();	//初期設定
	objEnemy = CreateBoss(BOSS_ID_SET);	//ボスセット
	//手のオブジェクト初期化
	SetHandInitialize();

	// チャプター開始
	ChapterStartBoss(GetBossID(objEnemy), 2, CHAPTER_BOSS);
	CheckLinkLife_Boss(objEnemy);
	Task_Main();
}

@MainLoop {
	yield;
}

// メインタスク
task Task_Main
{
	let wtInit = 60;
	let objHand = Ini_SetAndSetHand(wtInit, CenX, 180,
					RightHandPos[0], RightHandPos[1],
					LeftHandPos[0], LeftHandPos[1]);
	WaitSetHand(wtInit);
	let ang = rand(0, 360);
	let way = [6, 7, 9, 9][Difficult];
	let D = 1;
	SetSetHandMove01(objHand[0], 60);
	SetSetHandMove01(objHand[1], 150);
//	TShot2(8, 75, 1.2);
	BposMoveBreaking();
	SetAction(objEnemy, ACT_SHOT2, 99999);
	while(eAlive)
	{
		ascent(i in 0 .. way){
			TShot(90+ang+360*i/way, D);
		}
		loop(2){
			if(!eAlive){return;}
			SetAction(objEnemy, ACT_SHOT2, 180);
			waitObj(objEnemy, 150);
			if(!eAlive){return;}
			EnemyRandomMove(objEnemy, 160, 32);
			waitObj(objEnemy, 30);
		}
		D = -D;
	}

	task BposMoveBreaking(){
		BX = ObjMove_GetX(objEnemy);
		BY = ObjMove_GetY(objEnemy);
		while(eAlive){
			BX += (ObjMove_GetX(objEnemy)-BX)*0.02;
			BY += (ObjMove_GetY(objEnemy)-BY)*0.02;
			waitObj(objEnemy, 1);
		}
	}

	task TShot(ang, Dirc){
		let r = 60;
		let t = 0;
		let c = 0;
		let c2 = 0;
		let time = [390, 390, 372, 372][Difficult];
		let itv = [90, 90, 72, 72][Difficult];
		let angAdd = -[0.40, 0.35, 0.27, 0.27][Difficult]*Dirc;
		let blt_ang = 90*Dirc;
		let bltAngAdd = [1.2, 1.5, 2.0, 2.7][Difficult]*Dirc;
		let spd = [3.2, 4.0, 5.4, 7.2][Difficult];
		let bltItv = [25, 20, 15, 10][Difficult];
		let wtMx = [15.0, 12.5, 12.0, 11.0][Difficult];
		let wtMn = [1.25, 1.00, 0.75, 0.5][Difficult];
		let r2 = [18, 18, 15, 15][Difficult];
		let wtR = (wtMx - wtMn)/2;
		let wtC = (wtMx + wtMn)/2;
		let grap = [BGW_BALL_SS_ORANGE, BGB_BALL_S_ORANGE];
		while(eAlive){
			if(t >= time){break;}
			let wt = wtC+wtR*cos(360*t/itv);
			while(c >= wt){
				CallSound(sndShot3);
				c -= wt;
				let rate = 1-c;
				ang += angAdd*rate;
				let rP = RandPos(r2);
				let a = ang+blt_ang;
				let objS = My_CreateShotA2(BX + r*cos(ang) + rP[0], BY + r*sin(ang) + rP[1],
					 spd, a, -spd/(bltItv*2), spd/2, grap[c2%2], 10);
				ascent(i in 0 .. 4){
					ObjMove_AddPatternA2(objS, i*bltItv/4, NO_CHANGE, NO_CHANGE, -spd/(bltItv*2), bltAngAdd*(1-0.25*i), spd/2);
				}
				c2++;
				ang -= angAdd*rate;
			}
			c++;
			t++;
			ang += angAdd;
			waitObj(objEnemy, 1);
		}
		function RandPos(r){
			r = rand(0,r);
			let ang = rand(0, 360);
			return [r*cos(ang), r*sin(ang)];
		}
	}
/*	task TShot(time, spd, ang, ang_spd, blt_ang, blt_ang_spd, blt_wt){
		let r = 60;
		let t = 0;
		let c = 0;
		let c2 = 0;
		let wtMx = 12.0;
		let wtMn = 1.0;
		let wtR = (wtMx - wtMn)/2;
		let wtC = (wtMx + wtMn)/2;
		let grap = [BGW_BALL_SS_ORANGE, BGB_BALL_S_ORANGE];
		while(eAlive){
			if(t >= time){break;}
			let wt = wtC+wtR*cos(360*t/90);
			while(c >= wt){
				CallSound(sndShot3);
				c -= wt;
				let rate = 1-c;
				ang += ang_spd;
				let rP = RandPos(20);
				let objS = My_CreateShotA2(BX+r*cos(ang)+rP[0], BY+r*sin(ang)+rP[1],
					 spd, ang+blt_ang, -spd/(blt_wt*2), spd/2, grap[c2%2], 10);
				ascent(i in 0 .. 4){
					ObjMove_AddPatternA2(objS, i*blt_wt/4, NO_CHANGE, NO_CHANGE, -spd/(blt_wt*2), blt_ang_spd*(1-0.25*i), spd/2);
				}
				c2++;
				ang -= ang_spd;
			}
			c++;
			t++;
			ang += ang_spd;
			waitObj(objEnemy, 1);
		}
		function RandPos(r){
			r = rand(0,r);
			let ang = rand(0, 360);
			return [r*cos(ang), r*sin(ang)];
		}
	}*/
}

task SetSetHandMove01(objHand, wt){
	let eColor = EFF_PURPLE;
	CheckLinkLife_Familier(objEnemy, objHand, 0.6);	// ボスと体力連動
	TAct();
	WaitForKilledFamilier(objHand, 8, 0);
	ZakoFinalize(objHand, eColor);
	
	task TAct()
	{
		SetEnemyVisible(objHand, true);
		waitObj_WithHoming(objHand, wt, 0.03);
		TMove;

	}
	
	task TMove(){
//		let objImgID = Obj_GetValueD(objFamilier, "IMAGE_ID_ALL", []);
		while(CanShotBullet(objHand)){
//			BossCharge(objHand);
			waitObj_WithHoming(objHand, 60, 0.03);
			waitObj_WithHomingCresc(objHand, 30, 0.03);
			let ang = ObjMove_GetAngle(objHand);
			if(!IsTimeStopObj(objHand)){
				TShot(ang);
			}
			wait(90);
		}
		EraseEnemy(objHand);

		task TShot(ang){
			let r = 30;
			let way = [7,9,9,9][Difficult];
			let quant = [20,25,50,65][Difficult];
			let wt = [3,3,2,2][Difficult];
			let arc = [25,20,20,20][Difficult];
			let spd = [4, 8 ,9, 10][Difficult];
			let spdRate = [0.6, 0.45 ,0.4, 0.35][Difficult];
			let spdRate2 = 1-spdRate;
			let W = (way-1)/2;
//			CallSound(sndShot4);
			ascent(i in 0 .. way){
				Shot(quant, wt, r, spd * (1-0.2*(i%2)), ang+arc*(i-W));
			}
			
			task Shot(quant, wt, r, spd, ang){
				ascent(i in 0 .. quant){
					if(!CanShotBullet(objHand) || IsTimeStopObj(objHand)){return;}
					CallSound(sndShot3);
					let s = (spdRate+spdRate2*i/quant) * spd;
					My_CreateShotA1(ObjMove_GetX(objHand)+r*cos(ang), ObjMove_GetY(objHand)+r*sin(ang), s, ang, BGW_ICE_ORANGE, 5);
					wait(wt);
				}
			}
		}
	}

	task RenderHandScale(obj, wt){
		ascent(i in 1 .. 16){
			let rate =  i/15;
			Obj_SetValue(obj, "SCALE_X", setHandInitialScale*(1+rate));
			Obj_SetValue(obj, "SCALE_Y", setHandInitialScale*(1-rate));
			waitObj(obj, 1);
		}
		waitObj(obj, wt-15);
		descent(i in 0 .. 15){
			let rate =  i/15;
			Obj_SetValue(obj, "SCALE_X", setHandInitialScale*(1+rate));
			Obj_SetValue(obj, "SCALE_Y", setHandInitialScale*(1-rate));
			wait(1);
		}
	}
}