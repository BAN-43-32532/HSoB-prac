#東方弾幕風[Single]
#ScriptVersion[3]
#Title["セトスペカ2"]
#Text["E-N:農園「レタスファーマーセト」　H:不惑「萵苣は始終にして惑わず」　L:鉄心「大地を巡り爆ぜる血脈」"]
#Background[""]
#System["./../../../system/System.dnh"]

//---------------------------------------------------------------------

// 関数取り込み
#include"./../../../lib/lib_boss.dnh"
#include"./lib_Set.dnh"

@Event {
	alternative(GetEventType())
	case(EV_REQUEST_LIFE)		{ SetScriptResult(300);	}
	case(EV_REQUEST_TIMER)		{ SetScriptResult(55);		}
	BossEvent();
}

let yAdd = 0;
let RightHandPos = [CenX-120, 90];
let LeftHandPos = [CenX+120, 90];

@Initialize {
	let SPELL_ID = 62;
	let SPELL_NAME = [3, 3, 4, 5][Difficult];


	//ダメージ透過率
	dIni_Shot = [10, 10, 10, 8][Difficult];
	// アイテム数
	bossDropItem = 150;

	Boss_Init();	//初期設定
	objEnemy = CreateBoss(BOSS_ID_SET);	//ボスセット
	//手のオブジェクト初期化
	SetHandInitialize();

	//スペカデータ・セット
	SetSpellCardData(GetSpellCardID(SPELL_ID), SPELL_NAME, 
	GetCurrentScriptDirectory()~"05c_Background.dnh",
	GetBossTexture(objEnemy, I_CUTIN), 0.6, CUTMOTION_NORMAL);

	// チャプター開始
	ChapterStartBoss(GetBossID(objEnemy), SPELL_NAME, CHAPTER_SPELL);
	CheckLinkLife_Boss(objEnemy);

	Task_Main();
}

@MainLoop {
	yield;
}

// メインタスク
task Task_Main
{
	let wtInit = 0;
	let objHand = Ini_SetAndSetHand2(wtInit, 600, CenX, 160,
					RightHandPos[0], RightHandPos[1],
					LeftHandPos[0], LeftHandPos[1]);
	WaitSetHand(wtInit);
	CallSpellCard(true);	//スペカ起動
	if(Difficult <= D_NORM){
		SetSetHandMove01(objHand[0], SET_RIGHT_HAND, 300, 720);
		SetSetHandMove01(objHand[1], SET_LEFT_HAND,  660, 720);
	}else if(Difficult == D_HARD){
		SetSetHandMove01(objHand[0], SET_RIGHT_HAND, 300, 480);
		SetSetHandMove01(objHand[1], SET_LEFT_HAND,  300, 480);
	}else{
		SetSetHandMove01(objHand[0], SET_RIGHT_HAND, 300, 1200);
		SetSetHandMove01(objHand[1], SET_LEFT_HAND,  900, 1200);
	}
	
	let D = 1;
//	waitObj(objEnemy, 60);
	BossCharge(objEnemy);
	TShotA();
	TYAddManage();
	while(eAlive){
		let ang = GetAngleToPlayer(objEnemy);
		waitObj(objEnemy, 240);
	}
}

task TYAddManage(){
	let AddMax = [0.75, 0.75, 0.75, 0.5][Difficult];
	wait(150);
	ascent(i in 0 .. 150){
		yAdd = AddMax*i/150;
		wait(1);
	}
	yAdd = AddMax;
}

task TShotA(){
	let grid = [60, 60, 60, 48][Difficult];
	let ini_x = ObjMove_GetX(objEnemy);
	let ini_y = ObjMove_GetY(objEnemy);
	let bx = ini_x;
	let by = ini_y;
	let rate = (2^0.5);
	let Dirc = 1;
	let count = [0, 0, 0, 0.5][Difficult];
	TLaser(ini_x+grid*count, ini_y);
	
	let IronQuant = 5;
	let IronDist = 6*rate;
	while(by < GetClipMaxY()+16){
		let IronAng = 90+45*Dirc;
		Expa(bx+grid*(count+1), by,					 2*grid,   0, 120, IronQuant, IronAng, IronDist);
		Expa(bx+grid*(count-1), by,					 2*grid, 180, 120, IronQuant, IronAng, IronDist);
		Expa(bx+grid*(count+1), ini_y-(by-ini_y),	 2*grid,   0, 120, IronQuant, IronAng, IronDist);
		Expa(bx+grid*(count-1), ini_y-(by-ini_y),	 2*grid, 180, 120, IronQuant, IronAng, IronDist);
		waitObj(objEnemy, 6);
		count = (count+1)%2;
		Dirc = -Dirc;
		by += grid;
	}
	let count2 = 0;
	while(eAlive){
		by -= yAdd;
		while(by < GetClipMaxY()+16){
			let IronAng = 90+45*Dirc;
			let time = max(90-count2, 0);
			Expa(bx+grid*(count+1), by, 2*grid,   0, 0, IronQuant, IronAng, IronDist);
			Expa(bx+grid*(count-1), by, 2*grid, 180, 0, IronQuant, IronAng, IronDist);
			count = (count+1)%2;
			by += grid;
			Dirc = -Dirc;
		}
		count2++;
		wait(1);
	}

	task Expa(x, y, dist, ang, wt, IronQuant, IronAng, IronDist){
		while(CheckDispINEx(x, y, 16)){
			Shot(x, y, wt, IronQuant, IronAng, IronDist);
			x += dist*cos(ang);
			y += dist*sin(ang);
		}
	}

	task Shot(x, y, wt, quant, IronAng, IronDist){
		CallSound(sndShot2);
		if(Difficult <= D_HARD){
			_EffectZako_Explode(x, y, 0, 30, 3, 255,255,255);
			wait(wt);
			LettuceBomber(x, y, rand(-3.0, 3.0));
		}else{
			let iMinus = (quant-1)/2;
			ascent(i in 0 .. quant){
				if(!eAlive){return;}
				let L = IronDist*(i-iMinus);
				let bx = L*cos(IronAng);
				let by = L*sin(IronAng);
				while((y+by) >= (GetClipMaxY()+0)){
					y -= yAdd;
					wt--;
					wait(1);
				}
				Shot(bx+x, by+y, IronAng, max(wt, 0));
			}

			task Shot(x, y, ang, wt){
				_EffectZako_Explode(x, y, 0, 30, 3, 255,255,255);
				wait(wt);
				Iron(x, y, ang);
			}
		}
	}
	
	task TLaser(x, y){
		ascent(i in 0 .. 5){
			let dist = 2*grid*(i+0.5);
			ascent(j in 0 .. 4){
				IniLaser(x+dist, y, 10*rate, 90*(j+0.5));
				IniLaser(x-dist, y, 10*rate, 90*(j+0.5));
			}
//			waitObj(objEnemy, 6);
		}
	}
	
	task IniLaser(x, y, spd, ang){
		let objL = My_CreateStraightLaserA1(x, y, ang, 0, 10, 120, ADD_BGW_BEAM_WHITE, 120, false);
		ObjShot_SetAutoDelete(objL, false);
		ascent(i in 1 .. 120){
			ObjLaser_SetLength(objL, spd*i);
			ObjMove_SetY(objL, ObjMove_GetY(objL)-yAdd);
			wait(1);
		}
		CallSound(sndShot4);
		loop(150){
			ObjMove_SetY(objL, ObjMove_GetY(objL)-yAdd);
			wait(1);
		}
	}
}

task Iron(x, y, ang){
	let objS = My_CreateShotA1(x, y, 0, ang, BGW_RICE_M_WHITE, 10);
	ObjShot_SetSpellResist(objS, true);
	Obj_SetValue(objS, "Lettuce", true);
	Obj_SetValue(objS, "Harvest", false);
	while(y > GetClipMinY()-16){
		if(Obj_GetValueD(objS, "Harvest", true) || Obj_IsDeleted(objS)){
			return;
		}
		y -= yAdd;
		ObjMove_SetPosition(objS, x, y);
		wait(1);
	}
	Obj_Delete(objS);
}

task LettuceBomber(x, y, ang_spd){
	let objS = My_CreateShotA1(x, y, 0, 270, BGB_BALL_S_GREEN, 10);
	ObjShot_SetSpellResist(objS, true);
	ObjShot_SetAutoDelete(objS, false);
	Obj_SetValue(objS, "Lettuce", true);
	Obj_SetValue(objS, "Harvest", false);
	let way = 5;
	let ang = rand(0, 5400);
	if(trunc(ang)%270 == 135){
		let a = rand(0, 360);
		Shot(objS, 0.0, a+12, BGW_WATER_WHITE, [255,255,191]);
		Shot(objS, 8.0, a-12, BGW_WATER_WHITE, [255,255,191]);
	}
	ang %= 360;
	ascent(i in 0 .. way){
		Shot(objS, 4, 360*i/way, ADD_BGW_RICE_M_GREEN, [127,255,127]);
	}
	way = 5;
	ascent(i in 0 .. way){
		Shot(objS, 7, 360*(i+0.5)/way, ADD_BGB_RICE_S_GREEN, [191,255,191]);
	}
	AngleManage();
	while(y > GetClipMinY()-16){
		if(Obj_GetValueD(objS, "Harvest", true) || Obj_IsDeleted(objS)){
			return;
		}
		y -= yAdd;
		ObjMove_SetPosition(objS, x, y);
		wait(1);
	}
	Obj_Delete(objS);

	task AngleManage(){
		while(!Obj_IsDeleted(objS)){
			ang += ang_spd;
			wait(1);
		}
	}
	
	task Shot(objS, r, ang2, grap, color){
		let objS2 = My_CreateShotA1(ObjMove_GetX(objS)+r*cos(ang+ang2), ObjMove_GetY(objS)+r*sin(ang+ang2), 0, ang, grap, 10);
		ObjShot_SetSpellResist(objS2, true);
		ObjRender_SetColor(objS2, color[0], color[1], color[2]);
		while(!Obj_IsDeleted(objS2) && !Obj_IsDeleted(objS)){
			ObjMove_SetPosition(objS2, ObjMove_GetX(objS)+r*cos(ang+ang2), ObjMove_GetY(objS)+r*sin(ang+ang2));
			ObjMove_SetAngle(objS2, ang+ang2);
			wait(1);
		}
		Obj_Delete(objS2);
	}
}

task SetSetHandMove01(objHand, handNum, wt, interval){
	let eColor = EFF_PURPLE;
	CheckLinkLife_Familier(objEnemy, objHand, 0.6);	// ボスと体力連動
	TAct();
	WaitForKilledFamilier(objHand, 8, 0);
	ZakoFinalize(objHand, eColor);
	let ThrowFlag = false;
	let THETA = 0;
	let IronBallIniPos = [0,0];
	let IronBallIniSpd = 0;
	let IronBallIniAng = 0;
	
	task TAct()
	{
		TEnemyVisible();
		waitObj_WithHoming(objHand, wt, 0.03);
		TMove;

	}

	task TEnemyVisible(){
		SetEnemyVisible(objHand, false);
		while(!GetEnemyVisible(objEnemy)){
			wait(1);
		}
		SetEnemyVisible(objHand, true);
	}
	
	task TMove(){
		let time = [150, 150, 150, 180][Difficult];
		let count = 0;
		let hand_r = [90, 120, 100, 150][Difficult];
		if(handNum == SET_RIGHT_HAND){
			count++;
		}
		let Dirc = [1,-1][handNum == SET_RIGHT_HAND];
		if(Difficult <= D_HARD){
			while(CanShotBullet(objHand)){
				let ang = ObjMove_GetAngle(objHand);
				SetAction(objEnemy, ACT_SHOT1, time+90);
				if(!IsTimeStopObj(objHand)){
					TShot(objHand, hand_r, time);
				}
				waitObj_WithHoming(objHand, 60, 0.03);
				let q =  trunc(time/30);
				descent(i in 0 .. q){
					Effect_LaserWarning2(objHand, 30, 600, 30);
					waitObj_WithHoming2(objHand, 30, 0.03*(i+1)/q, 0.03*i/q);
				}
				wait(30);
				EnemyRandomMove(objEnemy, 160, 64);
				wait(30);
				waitObj_WithHoming(objHand, 90, 0.03);
				if(Difficult == D_HARD && count%2 == 0){
					let L = GetDistance( [GetPlayerX(),GetPlayerY()], [ObjMove_GetX(objHand),ObjMove_GetY(objHand)] );
					L = min(200, L);
					let a = GetAngleToPlayer(objHand);
					SetMovePositionBrakingEx(objHand, ObjMove_GetX(objHand)+L*cos(a), ObjMove_GetY(objHand)+L*sin(a), 120, MOVE_BRAKING02);
				}
				count++;
				waitObj_WithHoming(objHand, interval-360, 0.03);
			}
		}else{
			while(CanShotBullet(objHand)){
				ThrowFlag = false;
				let ang = ObjMove_GetAngle(objHand);
				SetEffectResist(objHand, 1);			// 状態異常耐性(効かない)
				waitObj_WithHoming(objHand, 15, 0.03);
				
				if(!CanShotBullet(objHand)){return;}
				let t1 = 0;
				while(IsTimeStopObj(objHand)){
					t1++;
					wait(1);
				}
				SetAction(objEnemy, ACT_SHOT1, time+90);
				TShot_Lunatic(objHand, hand_r, 80, time);
				waitObj_WithHoming(objHand, 60, 0.03);
				let q =  trunc(time/30);
				descent(i in 0 .. q){
					waitObj_WithHoming2(objHand, 30, 0.03*(i+1)/q, 0.03*i/q);
				}
				let dx = ObjMove_GetX(objHand) - ObjMove_GetX(objEnemy);
				let dy = ObjMove_GetY(objHand) - ObjMove_GetY(objEnemy);
				let HL = (dy^2 + dx^2)^0.5;
				let HA = AngleCenterAdjustment(atan2(dy, dx), 90);
				let tA = 90-225*Dirc;
				let ini_a = AngleCenterAdjustment(ObjMove_GetAngle(objHand),90);
				let old_a = ini_a;
				let R = HL;
				let t2 = 0;
				ascent(t in 1 .. 76){
					t2 ++;
					let rate = 0.5-cos(180*t/75)/2;
					let a = HA + (tA - HA)*rate;
					R = HL*(1-0.4*rate);
					ObjMove_SetPosition(objHand, ObjMove_GetX(objEnemy)+R*cos(a), ObjMove_GetY(objEnemy)+R*sin(a));
					let hand_a = (ini_a- HA-90*Dirc)*(1-rate)+ a+90*Dirc;
					ObjMove_SetAngle(objHand,  hand_a);
					THETA = hand_a-old_a;
					old_a = hand_a;
					wait(1);
				}
				
				if(!CanShotBullet(objHand)){return;}
				R = HL*0.6;
				dx = GetPlayerX() - ObjMove_GetX(objEnemy);
				dy = GetPlayerY() - ObjMove_GetY(objEnemy);
				let PL = (dy^2 + dx^2)^0.5;
				let PA = atan2(dy, dx);
				let fin_a = PA-acos(R/max(R, PL))*Dirc;
				let hosei = 30;
/*				if(((fin_a+hosei)%90) < hosei*2 ){
					//90度±10度方向には絶対に撃たせない。
					let arc = ((fin_a+hosei)%90)-hosei;
					let D = 1;
					if(arc < 0){D = -1;}
					fin_a += (hosei*D-arc);
				}*/
				//22.5°＋45 x N °方向に撃たる。
				fin_a = trunc( ( fin_a %360) /hosei) *hosei+hosei/2;
				fin_a = AngleCenterAdjustment(fin_a, 90);
				let aAdd = 0;
				let aAcce = 0.05*Dirc;
				Effect_LaserWarning(ObjMove_GetX(objEnemy)+R*cos(fin_a), ObjMove_GetY(objEnemy)+R*sin(fin_a), fin_a+90*Dirc, 80, 600, 30);
				CallSound(sndBoon);
				while(-Dirc * (tA-fin_a) > 0){
					ObjMove_SetPosition(objHand, ObjMove_GetX(objEnemy)+R*cos(tA), ObjMove_GetY(objEnemy)+R*sin(tA));
					ObjMove_SetAngle(objHand, tA+90*Dirc);
					THETA = tA-old_a;
					old_a = tA;
					aAdd += aAcce;
					tA += aAdd;
					t2++;
					wait(1);
				}
				
				if(!CanShotBullet(objHand)){return;}
				IronBallIniSpd = absolute(R*(aAdd/360)*2*3.1415926535);
				IronBallIniAng = fin_a+90*Dirc;
				IronBallIniPos = [ObjMove_GetX(objEnemy)+R*cos(fin_a), ObjMove_GetY(objEnemy)+R*sin(fin_a)];
				ThrowFlag = true;
				while(aAdd*Dirc > 0){
					ObjMove_SetPosition(objHand, ObjMove_GetX(objEnemy)+R*cos(tA), ObjMove_GetY(objEnemy)+R*sin(tA));
					ObjMove_SetAngle(objHand, tA+90*Dirc);
					aAdd -= aAcce*2;
					tA += aAdd;
					t2++;
					wait(1);
				}

				if(!CanShotBullet(objHand)){return;}
				SetEffectResist(objHand, 1-(1/1.75));			// 状態異常耐性(通常の1.75倍に設定、元に戻す)
				wait(90);
				
				if(!CanShotBullet(objHand)){return;}
				let IniPos = [RightHandPos, LeftHandPos][handNum == SET_LEFT_HAND];				
				SetMovePositionBrakingEx(objHand, IniPos[0], IniPos[1], 120, MOVE_BRAKING02);
				waitObj_WithHoming2(objHand, 120, 0, 0.03);

				count++;
				waitObj_WithHoming(objHand, interval-(75+t1+time+t2+90+120), 0.03);
			}
		}
		EraseEnemy(objHand);

		function AngleCenterAdjustment(ang, CenterAng){
			return ((ang + CenterAng)%360) - CenterAng;
		}
	}

	task Effect_LaserWarning(x, y, ang, r, leng, time){
		ascent(i in 1 .. time+1){
			if(!CanShotBullet(objHand)){return;}
			let r2 = r*sin(90*i/time);
			Effect(x, y, ang, r2,  90, leng, 20);
			Effect(x, y, ang, r2, -90, leng, 20);
			wait(1);
		}
		
		task Effect(x, y, ang, r, angPlus, leng, time){
			let objEffect = CreateStraightLaserA1(x + r * cos(ang + angPlus), y + r * sin(ang + angPlus), ang, leng, 6, 9999, BGW_BEAM_E_PURPLE, 0);
			ObjStLaser_SetSource(objEffect, false);
			ObjShot_SetIntersectionEnable(objEffect, false);
			ObjShot_SetItemChange(objEffect, false);

			descent(i in 1 .. time+1){
				ObjRender_SetAlpha(objEffect, 96*i/time);
				wait(1);
			}
			Obj_Delete(objEffect);
		}
	}
	task Effect_LaserWarning2(obj, r, leng, time){
		ascent(i in 1 .. time+1){
			if(!CanShotBullet(objHand)){return;}
			let r2 = r*sin(90*i/time);
			Effect(obj, r2,  90, leng, 20);
			Effect(obj, r2, -90, leng, 20);
			wait(1);
		}
		
		task Effect(obj, r, angPlus, leng, time){
			let objEffect = CreateStraightLaserA1(ObjMove_GetX(obj), ObjMove_GetY(obj), ObjMove_GetAngle(obj), leng, 6, 9999, BGW_BEAM_E_PURPLE, 0);
			ObjStLaser_SetSource(objEffect, false);
			ObjShot_SetIntersectionEnable(objEffect, false);
			ObjShot_SetItemChange(objEffect, false);

			descent(i in 1 .. time+1){
				if(!CanShotBullet(obj)){break;}
				let ang = ObjMove_GetAngle(obj);
				ObjMove_SetPosition(objEffect, ObjMove_GetX(obj) + r * cos(ang + angPlus), ObjMove_GetY(obj) + r * sin(ang + angPlus));
				ObjStLaser_SetAngle(objEffect, ang);
				ObjRender_SetAlpha(objEffect, 63*i/time);
				wait(1);
			}
			Obj_Delete(objEffect);
		}
	}

	task TShot_Lunatic(objHand, hand_r, ball_rMax, time){
		CallSound(sndShot3);
		SetAction(objEnemy, ACT_SHOT1, 180);
		let objBase = -1;
		let objEfc = RingEffect_INI(0.41);
		let BX = ObjMove_GetX(objEnemy);
		let BY = ObjMove_GetY(objEnemy);
		let BAng = ObjMove_GetAngle(objHand);
		let BLeng = 0;
		let BScaleRate = 0;
		let BQuant = 0;
		let IronBallRMin = 15;
		let IronBallRMax = ball_rMax;
		let IronBallR = IronBallRMin;
		let IronBallRWill = 0;
		RingScale(hand_r, time);
		loop(60){
			BAng = ObjMove_GetAngle(objHand);
			BX = ObjMove_GetX(objEnemy);
			BY = ObjMove_GetY(objEnemy);
			wait(1);
		}
		if(!CanShotBullet(objHand) || IsTimeStopObj(objHand)){return;}
		CallSound(sndPower1);
		IronBallAttack(time);
		let objS = GetShotIdInCircleA2(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), hand_r, TARGET_ENEMY);
		descent(i in 0 .. length(objS)){
			if(!Obj_GetValueD(objS[i], "Lettuce", false)){
				objS = erase(objS, i);
			}
		}
		BQuant = length(objS);
		let tArray = [];
		ascent(i in 0 .. BQuant){
			tArray = tArray ~ [60+trunc((time-60)*i/(BQuant-1))];
		}
		descent(i in 0 .. BQuant){
			Obj_SetValue(objS[i], "Harvest", true);
			let rd = (trunc(rand(0, (i+1)*100-0.0001)))%(i+1);
			TShotMove(objS[i], tArray[rd]);
			tArray = erase(tArray, rd);
		}
		let sandGrap = [ADD_BGW_BALL_SS_ORANGE, ADD_BGB_BALL_S_ORANGE];
		ascent(t in 1 .. time+1){
			if(!CanShotBullet(objHand) || IsTimeStopObj(objHand) || (objBase != -1 && Obj_IsDeleted(objBase))){return;}
			BScaleRate = (1-cos(180*t/time))/2;
			BAng = ObjMove_GetAngle(objHand);
			BLeng = -30+IronBallR;
			BX = ObjMove_GetX(objEnemy) + ( ObjMove_GetX(objHand) + BLeng*cos(BAng) - ObjMove_GetX(objEnemy) ) * BScaleRate;
			BY = ObjMove_GetY(objEnemy) + ( ObjMove_GetY(objHand) + BLeng*sin(BAng) - ObjMove_GetY(objEnemy) ) * BScaleRate;
			IronBallRWill = IronBallRMin+(IronBallRMax-IronBallRMin) * (t-60) / (time-60);
			wait(1);
		}
		while(!ThrowFlag){
			if(!CanShotBullet(objHand) || IsTimeStopObj(objHand) || Obj_IsDeleted(objBase)){return;}
			BScaleRate = 1;
			BAng = ObjMove_GetAngle(objHand);
			BLeng = -30+IronBallR;
			BX = ObjMove_GetX(objHand) + BLeng*cos(BAng);
			BY = ObjMove_GetY(objHand) + BLeng*sin(BAng);
			wait(1);
		}
		
		task IronBallAttack(wt){
			wt -= 60;
			wait(60);
			if(!CanShotBullet(objHand) || IsTimeStopObj(objHand)){return;}
			let nx = 0;
			let ny = 0;
			let nz = 1;

			let quant = 8;
			let IronBallSizeRate = 1.0;
			objBase = NuclearShot(BX, BY, [31,31,31], IronBallR-10, 15);
			let objBEfc = Obj_GetValueD(objBase, "IMAGE_ID_ALL", [-1,-1,-1]);
			ascent(i in 0 .. length(objBEfc)){
				Obj_SetRenderPriorityI(objBEfc[i], 41);
			}
			THETA = ObjMove_GetAngle(objHand);
			ascent(iQ in 0 .. quant){
				let angZ = 180*( iQ+0.5 )/quant;
				let way = 4*max( trunc( 5*sin( angZ ) ), 1 );
				ascent(iW in 0 .. way){
					let sn = IronBallRMax * sin(angZ);
					let cs = IronBallRMax * cos(angZ);
					ObjShot(objBase, wt, cos(360*iW/way) * sn, sin(360*iW/way) * sn, cs, BGB_SCALE_WHITE);
				}
			}
			THETA = 0;
			while(!Obj_IsDeleted(objBase)){
				if(ThrowFlag){break;}
				ObjMove_SetPosition(objBase, BX, BY);
				Obj_SetValue(objBase, "SIZE", IronBallR-10);
				wait(1);
			}
			if(Obj_IsDeleted(objBase)){return;}
			let sMax = 2.0;
			ObjMove_SetPosition(objBase, IronBallIniPos[0]+BLeng*cos(IronBallIniAng), IronBallIniPos[1]+BLeng*sin(IronBallIniAng));
			ObjMove_AddPatternA2(objBase, 0, IronBallIniSpd, IronBallIniAng, -0.25, 0, sMax);
			CallSound(sndShot4);
			nz = 0;
			let time2Max = interval-480;
			let time2 = time2Max;
			while(!Obj_IsDeleted(objBase)){
				let Dist = -IronBallR * IronBallSizeRate + 30;
				time2--;
				if(!CheckDispIN(objBase, Dist)){
					CallSound(sndFlare);
					DisplayShake(20, 3);
					sMax = 8.0-6.0*(time2/time2Max);
					IronBallSizeRate = 0.6+0.4*(time2/time2Max);
					Obj_SetValue(objBase, "SIZE", IronBallR * IronBallSizeRate - 10);
					ObjMove_AddPatternA2(objBase, 0, NO_CHANGE, NO_CHANGE, -0.15, 0, sMax);
					if(!CheckDispX_LineIN(objBase, Dist)){
						if(time2 <= 0){break;}
						let Dirc2 = 1;
						if(ObjMove_GetX(objBase) < GetCenterX()){Dirc2 = -1;}
						let DCX = GetClipMaxX()-GetCenterX()+ Dist;
						ObjMove_SetX(objBase, 2*( GetCenterX() + DCX * Dirc2 ) - ObjMove_GetX(objBase) );
						ObjMove_SetAngle(objBase, 180-ObjMove_GetAngle(objBase));
						let bx = GetCenterX()+(DCX-Dist)*Dirc2;
						 CreateShotCircleA2(bx, ObjMove_GetY(objBase), 0, rand(0, 360), 0.9/180, 0.9, BGW_RICE_M_WHITE, 15, 30, 15);
					}else{
						let Dirc2 = 1;
						if(ObjMove_GetY(objBase) < GetCenterY()){Dirc2 = -1;}
						if(time2 <= 0 && Dirc2 < 0){break;}
						let DCY = GetClipMaxY()-GetCenterY()+ Dist;
						ObjMove_SetY(objBase, 2*( GetCenterY() + DCY * Dirc2 ) - ObjMove_GetY(objBase) );
						ObjMove_SetAngle(objBase, 360-ObjMove_GetAngle(objBase));
						let a = rand(0, 360);
						if(Dirc2 < 0){
							let by = GetCenterY()+(DCY-Dist)*Dirc2;
							 CreateShotCircleA2(ObjMove_GetX(objBase), by, 3.6, rand(0, 360), -2.7/60, 0.9, BGW_RICE_M_WHITE, 15, 40, 15);
						}
					}
				}
				THETA = ObjMove_GetSpeed(objBase)*(360/(2*3.1415926535))/IronBallRMax;
				let a = ObjMove_GetAngle(objBase);
				nx = cos(a+90);
				ny = sin(a+90);
				wait(1);
			}
			Obj_Delete(objBase);

			

			function ObjShot(objBase, wt, x, y, z, grap){
				let objS = My_CreateShotA1(0, 0, 0, 0, grap, 30);
				Move(objS, wt, x, y, z, grap);
				return objS;
				
				task Move(objS, wt, x, y, z, grap){
					ObjShot_SetAutoDelete(objS, false);
					ObjShot_SetSpellResist(objS, true);
					ascent(i in 1 .. wt+1){
						if(Obj_IsDeleted(objS) || Obj_IsDeleted(objBase)){break;}
						let POS = Rotate3D_XYZ(x, y, z, nx, ny, nz, THETA);
						x = POS[0];		y = POS[1];		z = POS[2];
//						let rate = sin(90*i/wt);
						let rate = IronBallR / IronBallRMax;
						ObjMove_SetPosition(objS, ObjMove_GetX(objBase) +x*rate, ObjMove_GetY(objBase) +y*rate);
						ObjMove_SetAngle(objS, atan2(y, x));
						ObjRender_SetScaleY(objS, ((y^2 + x^2)^0.5)/IronBallRMax);
						Collision(objS, z > 0);
						yield;
					}
					loop{
						if(Obj_IsDeleted(objS) || Obj_IsDeleted(objBase)){break;}
						let POS = Rotate3D_XYZ(x, y, z, nx, ny, nz, THETA);
						x = POS[0];		y = POS[1];		z = POS[2];
						ObjMove_SetPosition(objS, ObjMove_GetX(objBase) + x * IronBallSizeRate, ObjMove_GetY(objBase) + y * IronBallSizeRate);
						ObjMove_SetAngle(objS, atan2(y, x));
						ObjRender_SetScaleY(objS, ((y^2 + x^2)^0.5)/IronBallRMax);
						Collision(objS, z > 0);
						yield;
					}
					if(Obj_IsDeleted(objS)){return;}
					if(!eAlive){	Obj_Delete(objS);	return;}
					if(z > 0){
						CallSound(sndShot4);
						let spd = ((y^2 + x^2)^0.5)/IronBallRMax*0.8;
						let ang = atan2(y, x);
						ascent(iQ in 0 .. 9){
							let s = (1-0.03*absolute(iQ-4))*spd;
							let a = ang+0.75*(iQ-4);
							let objS2 = My_CreateShotA2(ObjMove_GetX(objS), ObjMove_GetY(objS), 2*s, a, -s/30, s, grap, 10);
							ObjMove_AddPatternA2(objS2, 30, NO_CHANGE, NO_CHANGE, 9*s/900, 0, 10*s);
						}
					}
					Obj_Delete(objS);
				}
			}

			function Collision(objS, flag){
				ObjRender_SetAlpha(objS, 95+160*flag);
				Obj_SetValue(objS, "ALPHA", 95+160*flag);
//				ObjShot_SetIntersectionEnable(objS, flag);
			}

			function Rotate3D_XYZ(x, y, z, nx, ny, nz, theta){
				let CS = cos(theta);
				let NCS = 1-CS;
				let SN = sin(theta);
				return [
					 (nx*nx*NCS +	 CS)*x		+(nx*ny*NCS - nz*SN)*y		+(nx*nz*NCS + ny*SN)*z,
					 (nx*ny*NCS + nz*SN)*x		+(ny*ny*NCS +	 CS)*y		+(nz*ny*NCS - nx*SN)*z,
					 (nx*nz*NCS - ny*SN)*x		+(ny*nz*NCS + nx*SN)*y		+(nz*nz*NCS +	 CS)*z
				];
			}
		}

		task TShotMove(objS, time){
//			ObjShot_SetSpellResist(objS, false);
			ObjShot_SetAutoDelete(objS, false);
			let pos1 = [ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy)];
			let pos2 = [ObjMove_GetX(objS), ObjMove_GetY(objS)];
			let MaxR = GetDistance(pos1, pos2);
			let ang = GetGapAngle(pos1, pos2);
			let r = MaxR;
			let x = r*cos(ang);
			let y = r*sin(ang);
			let old_x = x;
			let old_y = y;
			let t = 0;
			loop(time){
				if(Obj_IsDeleted(objS)){		return;}
				if(!CanShotBullet(objHand)){	Obj_Delete(objS);	return;}
				if(IsTimeStopObj(objHand)){		break;}
				old_x = x;
				old_y = y;
				let r = MaxR + (IronBallR - MaxR)*t/time;
				x = r*cos(ang);
				y = r*sin(ang);
				ObjMove_SetPosition(objS, BX + x, BY + y);
				ang += 1.0+5.0*(1 - (r - IronBallR) / (hand_r - IronBallR));
				t++;
				wait(1);
			}
			Obj_SetValue(objS, "Lettuce", false);
			if(t >= time){
				CallSound(sndShot5);
				IronBallR = IronBallRWill;
				Obj_Delete(objS);
			}else{
				if(t > 0){
					let s = ((y-old_y)^2+(x-old_x)^2)^0.5;
					ObjMove_AddPatternA2(objS, 0, s, atan2(y-old_y, x-old_x), -s/30, 0 ,s/2);
				}else{
					ObjMove_AddPatternA1(objS, 0, yAdd, 270);
				}
			}
		}
		
		task RingScale(hand_r, time){
			ascent(i in 1 .. 61){
				if(Obj_IsDeleted(objHand)){break;}
				ObjRender_SetPosition(objEfc, BX, BY, 1);
				RingEffect_SetScareToRadius(objEfc, hand_r*sin(90*i/60));
				wait(1);
			}
			ascent(t in 1 .. time + 1){
				if(Obj_IsDeleted(objHand)){break;}
				let r = hand_r *(1 - 0.8*BScaleRate);
				let yRate = 1-BScaleRate*0.5;
				ObjRender_SetPosition(objEfc, BX, BY, 1);
				RingEffect_SetScareToRadius(objEfc, r);
				wait(1);
			}
			Obj_Delete(objEfc);
		}
	}
	
	task TShot(objHand, hand_r, time){
		CallSound(sndShot3);
		let objEfc = RingEffect_INI(0.41);
		let BX = ObjMove_GetX(objHand);
		let BY = ObjMove_GetY(objHand);
		let BAng = ObjMove_GetAngle(objHand);
		let BLeng = 0;
		let BScaleRate = 0;
		RingScale(hand_r, time);
		loop(60){
			BAng = ObjMove_GetAngle(objHand);
			BX = ObjMove_GetX(objHand) + BLeng*cos(BAng);
			BY = ObjMove_GetY(objHand) + BLeng*sin(BAng);
			wait(1);
		}
		if(!CanShotBullet(objHand) || IsTimeStopObj(objHand)){return;}
		CallSound(sndPower1);
		let objS = GetShotIdInCircleA2(ObjMove_GetX(objHand), ObjMove_GetY(objHand), hand_r, TARGET_ENEMY);
		let q = length(objS);
		ascent(i in 0 .. q){
			if(Obj_GetValueD(objS[i], "Lettuce", false)){
				Obj_SetValue(objS[i], "Harvest", true);
				let s = 6.0-3.0*(i)/(q+2);
				TShotMove(objS[i], time, s);
			}
		}
		let sandGrap = [ADD_BGW_BALL_SS_ORANGE, ADD_BGB_BALL_S_ORANGE];
		ascent(t in 1 .. time+1){
			if(!CanShotBullet(objHand) || IsTimeStopObj(objHand)){return;}
			if(t < 100){
				TShotSand(hand_r*rand(0.5, 1), rand(0, 360), t-1, time, 8-6*t/100, sandGrap[t%2]);
			}
			BScaleRate = (1-cos(90*t/time));
			BAng = ObjMove_GetAngle(objHand);
			BLeng = 40*(BScaleRate);
			BX = ObjMove_GetX(objHand) + BLeng*cos(BAng);
			BY = ObjMove_GetY(objHand) + BLeng*sin(BAng);
			wait(1);
		}
		if(!CanShotBullet(objHand) || IsTimeStopObj(objHand)){return;}
		CallSound(sndShot4);

		task TShotMove(objS, time, spd){
			ObjShot_SetSpellResist(objS, false);
			let pos1 = [ObjMove_GetX(objHand), ObjMove_GetY(objHand)];
			let pos2 = [ObjMove_GetX(objS), ObjMove_GetY(objS)];
			let MaxR = GetDistance(pos1, pos2);
			let MinR = MaxR*0.2;
			let ang = GetGapAngle(pos1, pos2)-ObjMove_GetAngle(objHand);
			let r = MaxR + (MinR-MaxR)*BScaleRate;
			let yRate = 1-BScaleRate*0.5;
			let pos = Rotate2D_XY(r*cos(ang)*yRate, r*sin(ang), BAng);
			let x = pos[0];
			let y = pos[1];
			let old_x = x;
			let old_y = y;
			let t = 0;
			loop(time){
				if(Obj_IsDeleted(objS)){		return;}
				if(!CanShotBullet(objHand)){	Obj_Delete(objS);	return;}
				if(IsTimeStopObj(objHand)){		break;}
				old_x = x;
				old_y = y;
				let r = MaxR + (MinR-MaxR)*BScaleRate;
				let yRate = 1-BScaleRate*0.5;
				let pos = Rotate2D_XY(r*cos(ang)*yRate, r*sin(ang), BAng);
				x = pos[0];
				y = pos[1];
				ObjMove_SetPosition(objS, BX + x, BY + y);
				ang += 1.0+5.0*(t/time);
				t++;
				wait(1);
			}
			Obj_SetValue(objS, "Lettuce", false);
			if(t >= time){
				ObjMove_AddPatternA1(objS, 0, spd, ObjMove_GetAngle(objHand)+rand(-3,3));
			}else{
				if(t > 0){
					let s = ((y-old_y)^2+(x-old_x)^2)^0.5;
					ObjMove_AddPatternA2(objS, 0, s, atan2(y-old_y, x-old_x), -s/30, 0 ,s/2);
				}else{
					ObjMove_AddPatternA1(objS, 0, yAdd, 270);
				}
			}
			while(CheckDispIN(objS, -8)){
				if(Obj_IsDeleted(objS)){return;}
				wait(1);
			}
			if(Obj_IsDeleted(objS)){return;}
			ObjShot_SetAutoDelete(objS, true);
			let way = [12, 16, 14, 12][Difficult];
			CallSound(sndFlare);
			x = ObjMove_GetX(objS);
			y = ObjMove_GetY(objS);
			let objN = NuclearShot(x, y, [31,191,31], 30, 15);
			EffectExplodeCloudSet(x, y, 15, [31,191,31], 60, 1);
			ObjShot_SetAutoDelete(objN, false);
			ang = atan2(GetPlayerY()-y, GetPlayerX()-x);
			ascent(i in 0 .. way){
				let spd = 4.8;
				let a = ang+360*i/way;
				Effect(x, y, a, 600, 30);
				let Half = 0.5*(i%2);
				ascent(iQ in 0 .. 5){
					let s = spd*(1-(0.15*(iQ + Half)));
					let objS = My_CreateShotA2(x, y, 0, a, s/240, s, BGW_WATER_WHITE, 10);
				}
			}
			Obj_Delete(objS);
			wait(60);
			Obj_Delete(objN);
		}

		task Effect(x, y, ang, leng, time){
			let objEffect = CreateStraightLaserA1(x, y, ang, leng, 6, 9999, BGW_BEAM_E_WHITE, 0);
			ObjStLaser_SetSource(objEffect, false);
			ObjShot_SetIntersectionEnable(objEffect, false);
			ObjShot_SetItemChange(objEffect, false);

			descent(i in 1 .. time+1){
				ObjRender_SetAlpha(objEffect, 255*i/time);
				wait(1);
			}
			Obj_Delete(objEffect);
		}

		task TShotSand(r, ang, tPlus, time, spd, grap){
			let MaxR = r;
			let MinR = r*0.1;
			let r2 = MaxR + (MinR-MaxR)*BScaleRate;
			let yRate = 1-BScaleRate*0.5;
			let pos = Rotate2D_XY(r2*cos(ang)*yRate, r2*sin(ang), BAng);
			let x = pos[0];
			let y = pos[1];
			let old_x = x;
			let old_y = y;
			
			let objS = My_CreateShotA1(BX +x, BY + y, 0, 90, grap, 10);
			ObjShot_SetAutoDelete(objS, false);
			let t = tPlus;
			while(t < time){
				if(!CanShotBullet(objHand)){	Obj_Delete(objS);	return;}
				if(IsTimeStopObj(objHand)){break;}
				old_x = x;
				old_y = y;
				r2 = MaxR + (MinR-MaxR)*BScaleRate;
				yRate = 1-BScaleRate*0.5;
				let pos = Rotate2D_XY(r2*cos(ang)*yRate, r2*sin(ang), BAng);
				x = pos[0];
				y = pos[1];
				ObjMove_SetPosition(objS, BX +x, BY + y);
				ang += 1.0+5.0*(t/time);
				t++;
				wait(1);
			}
			if(t >= time){
				ObjMove_AddPatternA1(objS, 0, spd, ObjMove_GetAngle(objHand)+rand(-3,3));
			}else{
				if(t > tPlus){
					let s = ((y-old_y)^2+(x-old_x)^2)^0.5;
					ObjMove_AddPatternA2(objS, 0, s, atan2(y-old_y, x-old_x), -s/30, 0 ,s/2);
				}else{
					Obj_Delete(objS);
				}
			}
			ObjShot_SetAutoDelete(objS, true);
		}

		task RingScale(hand_r, time){
			ascent(i in 1 .. 61){
				if(Obj_IsDeleted(objHand)){break;}
				ObjRender_SetPosition(objEfc, BX, BY, 1);
				ObjRender_SetAngleZ(objEfc, BAng);
				RingEffect_SetScareToRadius(objEfc, hand_r*sin(90*i/60));
				wait(1);
			}
			ascent(t in 1 .. time + 1){
				if(Obj_IsDeleted(objHand)){break;}
				let r = hand_r *(1 - 0.8*BScaleRate);
				let yRate = 1-BScaleRate*0.5;
				ObjRender_SetPosition(objEfc, BX, BY, 1);
				ObjRender_SetAngleZ(objEfc, BAng);
				RingEffect_SetScareToRadius2(objEfc, r*yRate, r);
				wait(1);
			}
			Obj_Delete(objEfc);
		}
	}
}