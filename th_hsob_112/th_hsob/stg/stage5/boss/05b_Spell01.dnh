#東方弾幕風[Single]
#ScriptVersion[3]
#Title["EN-冥蝶「ダークテラースケールス」　HL-冥主「ダークテラーミストレス」"]
#Text["EN-冥蝶「ダークテラースケールス」　HL-冥主「ダークテラーミストレス」"]
#Background[""]
#System["./../../../system/System.dnh"]

//---------------------------------------------------------------------

// 関数取り込み
#include"./../../../lib/lib_boss.dnh"

@Event {
	alternative(GetEventType())
	case(EV_REQUEST_LIFE)		{ SetScriptResult(300);	}
	case(EV_REQUEST_TIMER)		{ SetScriptResult(35);		}
	BossEvent();
}

@Initialize {
	let SPELL_ID = 51;
	let SPELL_NAME = [0, 0, 1, 1][Difficult];

	//ダメージ透過率
	dIni_Shot = 10;
	// アイテム数
	bossDropItem = 100;

	Boss_Init();	//初期設定
	objEnemy = CreateBoss(BOSS_ID_NEBET);	//ボスセット
	//スペカデータ・セット
	SetSpellCardData(GetSpellCardID(SPELL_ID), SPELL_NAME, 
	GetCurrentScriptDirectory()~"05b_Background.dnh",
	GetBossTexture(objEnemy, I_CUTIN), 0.7, CUTMOTION_NORMAL);

	// チャプター開始
	ChapterStartBoss(GetBossID(objEnemy), SPELL_NAME, CHAPTER_SPELL);

	Task_Main();
}

@MainLoop {
	yield;
}



// メインタスク
task Task_Main
{
	standBy(objEnemy, CenX, 160, 15);
	CallSpellCard(true);	//スペカ起動
	waitObj(objEnemy, 1);
	
	let wt = [180, 180, 300, 240][Difficult];
	let boon_wt = [240, 240, 360, 360][Difficult];
	
	let D = 1;
	let SMode = 0;
	while(eAlive)
	{
		BossCharge(objEnemy);
		waitObj(objEnemy, 60);
		if (!eAlive) { return; }

		if (SMode%3 == 2)
		{
			SetAction(objEnemy, ACT_SHOT2, 180);
			TShot(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), -3, 1.3, D, 10, 0.6);
			CallSoundDelay(sndBoon, boon_wt, objEnemy);
			waitObj(objEnemy, 60);
			if (!eAlive) { return; }
			TShot(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), -3, 1.3, -D, 10, 0.6);
			waitObj(objEnemy, 60);
		}
		else
		{
			SetAction(objEnemy, ACT_SHOT2, 120);
			TShot(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), -3, 1.3, D, 10, 1);
			CallSoundDelay(sndBoon, boon_wt, objEnemy);
		}
		waitObj(objEnemy, wt);
		D = -D;
		if (!eAlive) { return; }
		EnemyRandomMove(objEnemy, 160, 32);
		SetAction(objEnemy, ACT_MOVE, 120);
		waitObj(objEnemy, wt);
		SMode++;
	}
}

task TShot(x, y, rAdd, angAdd, Dirc, delay, shot_span){
	let r = 0;
	let rPlus = rAdd;
	let r2 = [150, 180, 180, 180][Difficult];
	let baseAng = 0;
	let baseAngAdd = angAdd*Dirc;
	let grap = [ADD_BGW_BUTTERFLY_PURPLE, BGW_LIGHT_S_YELLOW, BGW_LIGHT_S_PURPLE, BGW_BUTTERFLY_PURPLE];
	if (Difficult >= D_HARD)
	{
		grap = [ADD_BGW_BUTTERFLY_RED, BGW_LIGHT_S_YELLOW, BGW_LIGHT_S_BLUE, BGW_BUTTERFLY_BLUE];
	}

	let bx = x;
	let by = y;
	let bs = 0;
	let ba = 0;
	let ang = rand(0, 360);
	let old_x = 0;
	let old_y = 0;

	let bltWay = [4, 4, 5, 5][Difficult];
	let bltAng = rand(0, 360);
	let bltAngAdd = 23.6*Dirc;
	let bltR = [60, 60, 300, 300][Difficult];
	let bltItv = [7, 5, 4, 3][Difficult];
	bltItv = trunc(bltItv/shot_span);
	let bll_frame = [120, 120, 240, 240][Difficult];
	let bll_frame_wait = [150, 150, 270, 270][Difficult];

	let shot_speed = [1.25, 1.25, 1.5, 2][Difficult];
	let way = [8, 8, 6, 6][Difficult];
	let time1 = [120, 120, 120, 120][Difficult];
	let time2 = [60, 60, 60, 60][Difficult];

	CallSound(sndShot4);
	ascent(iW in 0 .. way){
		ShotA(ang+360*iW/way, grap, iW);
	}
	let rSin = r2-rPlus*time1;
	ascent(i in 1 .. time1+1){
		r = rSin*sin(90*i/time1)+ rPlus*i;
		x = r*cos(baseAng);
		y = r*sin(baseAng);
		let dx = x-old_x;
		let dy = y-old_y;
		bs = (dy^2+dx^2)^0.5;
		ba = atan2(dy, dx);
		old_x = x;
		old_y = y;
		baseAng += (i/time1)*baseAngAdd;

		wait(1);
	}
	ascent(i in 1 .. time2+1){
		r += rPlus;
		x = r*cos(baseAng);
		y = r*sin(baseAng);
		let dx = x-old_x;
		let dy = y-old_y;
		bs = (dy^2+dx^2)^0.5;
		ba = atan2(dy, dx);
		old_x = x;
		old_y = y;
		baseAng += baseAngAdd*(r2/r);
		
		bltAng += bltAngAdd/bltItv;
		wait(1);
	}
	
	task ShotA(ang, bltGrap, index){
		let objS = [
			My_CreateShotA1(bx, by, 0, ang, bltGrap[0], 0),
			My_CreateShotA1(bx, by, 0, ang, bltGrap[1], delay)
		];
		ascent(i in 0 .. length(objS)){
			ObjShot_SetSpellResist(objS[i], true);
			ObjShot_SetAutoDelete(objS[i], false);
			ObjShot_SetIntersectionEnable(objS[i], false);
		}
		ObjRender_SetScaleY(objS[0], 1.5);
		let count = 0;
		loop(time1 + 1){
			ascent(i in 0 .. length(objS)){
				ObjMove_SetSpeed(objS[i], bs);
				ObjMove_SetAngle(objS[i], ang+ba);
				ObjShot_SetIntersectionEnable(objS[i], false);
			}
			ObjRender_SetScaleX(objS[0], 1.5*sin(count*3));
			count++;
			wait(1);
		}
		let D = 1;
		ascent(t in 0 .. time2){
			if(Obj_IsDeleted(objS[0]) || Obj_IsDeleted(objS[1])){break;}
			if(t%bltItv == 0){
				CallSound(sndShot5);
				let a = ang + baseAng;
				ascent(iW in 0 .. bltWay){
					let bltA = bltAng + 360*iW/bltWay;
					let br = bltR;
					if (Difficult >= D_HARD)
					{
						br *= (1-t/time2*0.95);
						bltA += 180*index;
					}
					let dx = ((r+br)*cos(bltA) + 10*cos(a+90*D))-(ObjMove_GetX(objS[0])-bx);
					let dy = ((r+br)*sin(bltA) + 10*sin(a+90*D))-(ObjMove_GetY(objS[0])-by);
					let baa = atan2(dy, dx);
					let bll = (dy^2+dx^2)^0.5;
					let ts = shot_speed;
					let ta = bltA + a;
					DarkButterflyShot(ObjMove_GetX(objS[0]), ObjMove_GetY(objS[0]), bll/bll_frame, baa, bltGrap[2], bltGrap[3], 10, ts, ta, bll_frame_wait);
				}
				D = -D;
			}
			ascent(i in 0 .. length(objS)){
				ObjMove_SetSpeed(objS[i], bs);
				ObjMove_SetAngle(objS[i], ang+ba);
			}
			ObjRender_SetScaleX(objS[0], 1.5*sin(count*3));
			count++;
			wait(1);
		}
		ascent(i in 0 .. length(objS)){
			ObjShot_SetAutoDelete(objS[i], true);
			ObjShot_SetIntersectionEnable(objS[i], false);
		}
		descent(t in 0 .. 30){
			ascent(i in 0 .. length(objS)){
				ObjRender_SetAlpha(objS[i], 255*t/30);
			}
			wait(1);
		}
		descent(i in 0 .. length(objS)){
			Obj_Delete(objS[i]);
		}
	}
	
	task DarkButterflyShot(x, y, speed, angle, graphic, graphic2, delay, to_speed, to_angle, time)
	{
		let obj = My_CreateShotA1(x, y, speed, angle, graphic, delay);
		ObjMove_AddPatternA2(obj, time-60, NO_CHANGE, NO_CHANGE, -speed/60, 0, 0);
		loop(time)
		{
			if (Obj_IsDeleted(obj)) { return; }
			yield;
		}
		if (!Obj_IsDeleted(obj))
		{
			if (CheckDispIN(obj, 0))
			{
				let obj2 = My_CreateShotA2(ObjMove_GetX(obj), ObjMove_GetY(obj), 0, to_angle, to_speed/8/60, to_speed/8, graphic2, 0);
				ObjMove_AddPatternA2(obj2, 60, NO_CHANGE, NO_CHANGE, to_speed/240, 0, to_speed);
				My_RaiseShotEffect01Ex(obj2, 30, 255, 0);
			}
			ObjShot_FadeDelete(obj);
			CallSound(sndShot2);
		}
	}
}