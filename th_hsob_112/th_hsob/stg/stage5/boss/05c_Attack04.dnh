#東方弾幕風[Single]
#ScriptVersion[3]
#Title["セト通常4"]
#Text["セト通常4"]
#Background[""]
#System["./../../../system/System.dnh"]

//---------------------------------------------------------------------

// 関数取り込み
#include"./../../../lib/lib_boss.dnh"
#include"./lib_Set.dnh"

@Event {
	alternative(GetEventType())
	case(EV_REQUEST_LIFE)		{ SetScriptResult(2700);	}
	case(EV_REQUEST_TIMER)		{ SetScriptResult(55);		}
	BossEvent();
}

let BX;
let BY;
let RightHandPos = [CenX-120, 150];
let LeftHandPos = [CenX+120, 150];

@Initialize {
	// アイテム数
	bossDropItem = 50;

	Boss_Init();	//初期設定
	objEnemy = CreateBoss(BOSS_ID_SET);	//ボスセット
	//手のオブジェクト初期化
	SetHandInitialize();

	// チャプター開始
	ChapterStartBoss(GetBossID(objEnemy), 4, CHAPTER_BOSS);
	CheckLinkLife_Boss(objEnemy);
	Task_Main();
}

@MainLoop {
	yield;
}

// メインタスク
task Task_Main
{
	let wtInit = 60;
	let objHand = Ini_SetAndSetHand(wtInit, CenX, 180,
					RightHandPos[0], RightHandPos[1],
					LeftHandPos[0], LeftHandPos[1]);
	WaitSetHand(wtInit);
//	let ang = rand(0, 360);
	let way = [4, 5, 8, 8][Difficult];
	let fistItv = [240, 180, 180, 180][Difficult];
	let aAddRate = [1, 1, 1, 2][Difficult];;
	let aAdd = aAddRate*180/way/fistItv;
	let D = 1;
	let ang = 180/way;
	SetSetHandMove01(objHand[0], RightHandPos[0], RightHandPos[1], FIST_RIGHT, 60+fistItv, fistItv*2);
	SetSetHandMove01(objHand[1], LeftHandPos[0], LeftHandPos[1], FIST_LEFT, 60, fistItv*2);
	BposMoveBreaking();
	SetAction(objEnemy, ACT_SHOT2, 99999);
	ascent(i in 0 .. way){
		TShot(90+ang+360*i/way, -aAdd, 1);
		TShot(90-ang+360*(i+0.5)/way, aAdd, -1);
	}
	while(eAlive)
	{
		EnemyRandomMove(objEnemy, 144, 32);
		waitObj(objEnemy, 240);
	}

	task BposMoveBreaking(){
		BX = ObjMove_GetX(objEnemy);
		BY = ObjMove_GetY(objEnemy);
		while(eAlive){
			BX += (ObjMove_GetX(objEnemy)-BX)*0.02;
			BY += (ObjMove_GetY(objEnemy)-BY)*0.02;
			waitObj(objEnemy, 1);
		}
	}
	
	task TShot(ang, angAdd, Dirc){
		let r = 60;
		let t = 0;
		let c = 0;
		let c2 = 0;
		let itv = [90, 90, 72, 72][Difficult];
		let blt_ang = 90*Dirc;
		let bltAngAdd = [1.2, 1.5, 2.0, 2.7][Difficult]*Dirc;
		let spd = [3.2, 4.0, 5.4, 7.2][Difficult];
		let bltItv = [25, 20, 15, 10][Difficult];
		let wtMx = [16.0, 13.5, 12.5, 12.0][Difficult];
		let wtMn = [2.50, 2.00, 1.50, 1.25][Difficult];
		let r2 = [18, 18, 15, 15][Difficult];
		let wtR = (wtMx - wtMn)/2;
		let wtC = (wtMx + wtMn)/2;
		let grap = [BGW_BALL_SS_ORANGE, BGB_BALL_S_ORANGE];
		while(eAlive){
			let wt = wtC+wtR*cos(360*t/itv);
			while(c >= wt){
				c -= wt;
				if(!IsTimeStopObj(objEnemy)){
					CallSound(sndShot3);
					let rate = 1-c;
					ang += angAdd*rate;
					let rP = RandPos(r2);
					let a = ang+blt_ang;
					let objS = My_CreateShotA2(BX + r*cos(ang) + rP[0], BY + r*sin(ang) + rP[1],
						 spd, a, -spd/(bltItv*2), spd/2, grap[c2%2], 10);
					ascent(i in 0 .. 4){
						ObjMove_AddPatternA2(objS, i*bltItv/4, NO_CHANGE, NO_CHANGE, -spd/(bltItv*2), bltAngAdd*(1-0.25*i), spd/2);
					}
					c2++;
					ang -= angAdd*rate;
				}
			}
			c++;
			t++;
			ang += angAdd;
			wait(1);
		}
		function RandPos(r){
			r = rand(0,r);
			let ang = rand(0, 360);
			return [r*cos(ang), r*sin(ang)];
		}
	}
}


task SetSetHandMove01(objHand, base_x, base_y, fistNum, wt, interval){
	let eColor = EFF_PURPLE;
	CheckLinkLife_Familier(objEnemy, objHand, 0.6);	// ボスと体力連動
	TAct();
	WaitForKilledFamilier(objHand, 8, 0);
	ZakoFinalize(objHand, eColor);
	
	task TAct()
	{
		SetEnemyVisible(objHand, true);
		waitObj_WithHoming(objHand, wt, 0.02);
		TMove;

	}
	
	task TMove(){
		let ChargeCancel = false;
		while(CanShotBullet(objHand)){
			ChargeCancel = IsTimeStopObj(objHand);
			if(!ChargeCancel){
				CallSound(sndPower1);
				WarningLine(objHand);
			}
			waitObj_WithHoming(objHand, 30, 0.02);
			waitObj_WithHomingDecresc(objHand, 60, 0.02);
			
			let ang = ObjMove_GetAngle(objHand);
			if(!ChargeCancel){
				TFistShot(objHand, ang, fistNum);
				RenderHandScale(objHand, 150);
				Enemy_SetPatternA2(objHand, 0, 0, ang, 8.0/120, 0, 8.0);
				wait(150);
				
				Enemy_SetPatternA2(objHand, 0, 0, NO_CHANGE, 0, 0, 0);
				ObjMove_SetPosition(objHand, base_x -360 * cos(ang), base_y -360 * sin(ang));
				SetMovePositionBrakingEx(objHand, base_x, base_y, 90, MOVE_BRAKING02);
				wait(60);
			}else{
				loop(210){
					if(!IsTimeStopObj(objHand)){
						SetHomingAngle(objHand, 0.02);
					}
					wait(1);
				}
			}
			waitObj_WithHoming(objHand, interval-300, 0.02);
		}
		EraseEnemy(objHand);

		task WarningLine(objHand){
			SoundWarning([24, 16, 12, 8, 6, 4, 3, 3, 3, 3, 2, 2, 2, 2]);			//合計90フレーム警告音
			loop(3){
				if(!CanShotBullet(objHand)){return;}
				Effect_LaserWarning2(objHand, 15, 500, 30);
				loop(30){
					if(!CanShotBullet(objHand) || IsTimeStopObj(objHand)){
						ChargeCancel = true;
						return;
					}
					wait(1);
				}
			}
			if(!CanShotBullet(objHand) || IsTimeStopObj(objHand)){return;}
			Effect_LaserWarning(ObjMove_GetX(objHand), ObjMove_GetY(objHand), ObjMove_GetAngle(objHand), 50, 500, 45);
			

			task SoundWarning(wtArray){
				ascent(i in 0 .. length(wtArray)){
					if(!CanShotBullet(objHand) || IsTimeStopObj(objHand)){return;}
					CallSound(sndShot2);
					wait(wtArray[i]);
				}
			}
			
			task Effect_LaserWarning(x, y, angle, r, leng, time){
				ascent(i in 1 .. time+1){
					if(!CanShotBullet(objHand)){return;}
					let r2 = r*sin(90*i/time);
					Effect(x+r2*cos(angle+90), y+r2*sin(angle+90), angle, leng, 30);
					Effect(x+r2*cos(angle-90), y+r2*sin(angle-90), angle, leng, 30);
					wait(1);
				}
				
				task Effect(x, y, angle, leng, time){
					let objEffect = CreateStraightLaserA1(x, y, angle, leng, 6, 9999, BGW_BEAM_E_PURPLE, 0);
					ObjStLaser_SetSource(objEffect, false);
					ObjShot_SetIntersectionEnable(objEffect, false);
//					ObjRender_SetColor(objEffect, 0, 0, 0);
					ObjShot_SetItemChange(objEffect, false);

					descent(i in 1 .. time+1){
						if(!CanShotBullet(objHand)){break;}
						ObjRender_SetAlpha(objEffect, 47*i/time);
						wait(1);
					}
					Obj_Delete(objEffect);
				}
			}
			
			task Effect_LaserWarning2(obj, r, leng, time){
				ascent(i in 1 .. time+1){
					if(!CanShotBullet(objHand)){return;}
					let r2 = r*sin(90*i/time);
					Effect(obj, r2,  90, leng, 20);
					Effect(obj, r2, -90, leng, 20);
					wait(1);
				}
				
				task Effect(obj, r, angPlus, leng, time){
					let objEffect = CreateStraightLaserA1(ObjMove_GetX(obj), ObjMove_GetY(obj), ObjMove_GetAngle(obj), leng, 6, 9999, BGW_BEAM_E_PURPLE, 0);
					ObjStLaser_SetSource(objEffect, false);
					ObjShot_SetIntersectionEnable(objEffect, false);
//					ObjRender_SetColor(objEffect, 0, 0, 0);
					ObjShot_SetItemChange(objEffect, false);

					descent(i in 1 .. time+1){
						if(!CanShotBullet(obj)){break;}
						let ang = ObjMove_GetAngle(obj);
						ObjMove_SetPosition(objEffect, ObjMove_GetX(obj) + r * cos(ang + angPlus), ObjMove_GetY(obj) + r * sin(ang + angPlus));
						ObjStLaser_SetAngle(objEffect, ang);
						ObjRender_SetAlpha(objEffect, 47*i/time);
						wait(1);
					}
					Obj_Delete(objEffect);
				}
			}
		}

		task TFistShot(objHand, ang, fistNum){
			SetEnemyVisible(objHand, false);
			CallSound(sndFlare);
			DisplayShake(30, 6);
			let b_spd = 2;

			let objFist = FistShot2(ObjMove_GetX(objHand), ObjMove_GetY(objHand), [255, 63, 255], 50, ang, fistNum, 15);
			ObjShot_SetSpellResist(objFist, true);
			ascent(i in 0 .. 180){
				if(!CanShotBullet(objHand)){break;}
				ObjMove_SetPosition(objFist, ObjMove_GetX(objHand), ObjMove_GetY(objHand));
				let rand_r = 60*(1-sin(90*i/180));
				let a = ang + 180 + rand(-rand_r, rand_r);
				if(i%1 == 0){
					let bx = ObjMove_GetX(objHand);
					let by = ObjMove_GetY(objHand);
					if(CheckDispINEx(bx, by, 30)){
						CallSound(sndShot6);
						ascent(j in 0 .. 3){
							let s = (b_spd+ObjMove_GetSpeed(objHand)/2)*(1-0.025*j);
							let objS = My_CreateShotA2(bx + 30*cos(a), by + 30*sin(a),  s*2, a, -s/60, s, BGB_SCALE_RED, 10);
						}
					}
				}
				wait(1);
			}
			SetEnemyVisible(objHand, true);
			Obj_Delete(objFist);
		}
	}

	task RenderHandScale(obj, wt){
		ascent(i in 1 .. 16){
			let rate =  i/15;
			Obj_SetValue(obj, "SCALE_X", setHandInitialScale*(1+rate));
			Obj_SetValue(obj, "SCALE_Y", setHandInitialScale*(1-rate));
			waitObj(obj, 1);
		}
		waitObj(obj, wt-15);
		descent(i in 0 .. 15){
			let rate =  i/15;
			Obj_SetValue(obj, "SCALE_X", setHandInitialScale*(1+rate));
			Obj_SetValue(obj, "SCALE_Y", setHandInitialScale*(1-rate));
			wait(1);
		}
	}
}