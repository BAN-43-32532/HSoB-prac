#東方弾幕風[Single]
#ScriptVersion[3]
#Title["上人スペカ1（道中）"]
#Text["E-N:「南無不可思議如来光」　H-L:「帰命尽十方無碍如来光」"]
#Background[""]
#System["./../../../system/System.dnh"]

//---------------------------------------------------------------------

// 関数取り込み
#include"./../../../lib/lib_boss.dnh"
#include"./lib_Siran.dnh"

@Event {
	alternative(GetEventType())
	case(EV_REQUEST_LIFE)		{ SetScriptResult(1600);	}
	case(EV_REQUEST_TIMER)		{ SetScriptResult(22);		}
	BossEvent();
}

@Initialize {
	let SPELL_ID = 31;
	let SPELL_NAME = [0, 0, 1, 1][Difficult];

	// アイテム数
	bossDropItem = 0;

	Boss_Init();	//初期設定
	objEnemy = CreateBoss(BOSS_ID_SIRAN);	//ボスセット
	SetSiranRosary();	// 数珠配置

	//スペカデータ・セット
	SetSpellCardData(GetSpellCardID(SPELL_ID), SPELL_NAME, 
			GetCurrentScriptDirectory()~"04a_Background.dnh",
			GetBossTexture(objEnemy, I_CUTIN), 0.6, CUTMOTION_NORMAL);

	// チャプター開始
	ChapterStartBoss(GetBossID(objEnemy), SPELL_NAME, CHAPTER_SPELL);

	Task_Main();
}

@MainLoop {
	yield;
}



// メインタスク
task Task_Main
{
	//数珠の画像を操作したい場合は、GetBossImageID(objEnemyRosary)　で数珠の画像IDを取得する
	
	standBy(objEnemy, CenX, 160, 60);
	SetActionSiran(objEnemy, ACT_MOVE, 120);
	waitObj(objEnemy, 60);
	CallSpellCard(true);	//スペカ起動
	Main();

	task Main(){
		SetActionSiran(objEnemy, ACT_SHOT2, 9999);
		BossCharge(objEnemy);
		let D = 1;
		while(eAlive)
		{
			let angle = rand(0, 360);
			if(!CanShotBullet(objEnemy)){return;}
			TShotA(10, 3, D);
			D = -D;
			waitObj(objEnemy, 240);
		}
	}
}

task TShotA(way, wt, D){
	let delay = 150;
	let ang = rand(0, 360);
	let ang_spd = [5.00, 5.15, 4.80, 4.75][Difficult];
	let ang_acce = [-4.75, -4.80, -4.50, -4.50][Difficult]/delay;
	let minAng_spd = [0.25, 0.35, 0.30, 0.25][Difficult];
	
	ascent(i in 0 .. way){
		if(!CanShotBullet(objEnemy)){return;}
		let time = delay-wt*i;
		SetFamilier01(ang-(360*i/way)*D, ang_spd*D, ang_acce*D, minAng_spd*D, time);
		loop(wt){
			ang += ang_spd*D;
			ang_spd += ang_acce;
			wait(1);
		}
	}
}

// 数珠オプション
task SetFamilier01(ang, ang_spd, ang_acce, minAng_spd, delay)
{
	let eSize = ENEMY_M;
	let eColor = EFF_PURPLE;
	let laser_way = [1, 2, 2, 3][Difficult];
	
	let objFamilier = MakeEnemyFamilier(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 55, eSize);
	CheckLinkLife_Familier(objEnemy, objFamilier, 0.8);	// ボスと体力連動
	SetEnemyVisible(objFamilier, false);
//	DrawOnmyou( objFamilier, eColor );
	DrawRosaryFamilier( objFamilier, eColor );
	TAct();
	WaitForKilledFamilier(objFamilier, 24, 4);
	ZakoFinalize(objFamilier, eColor);
	
	task TAct()
	{
		TMove;
	}
	
	task TMove(){
		let R = 60;
		let objImgID = Obj_GetValueD(objFamilier, "IMAGE_ID_ALL", []);
		let way = 1;
		let arc = [0, 123.0, 166.0, 171.5][Difficult];
//		let arc = [0, 158.0, 166.0, 171.5][Difficult];

		let time = delay-45;
		ascent(t in 1 .. time+1){
			if(!CanShotBullet(objFamilier) || !eAlive){break;}
			let rate = sin(90*min(t,45)/45);
			let r = 120*rate;
			Render(objImgID, rate*1.5, 85*t/time);
			ObjMove_SetPosition(objFamilier, ObjMove_GetX(objEnemy)+r*cos(ang), ObjMove_GetY(objEnemy)+r*sin(ang));
			ang += ang_spd;
			ang_spd += ang_acce;
			yield;
		}
		time = 45;
		ascent(t in 1 .. time+1){
			if(!CanShotBullet(objFamilier) || !eAlive){break;}
			let rate = t/time;
			let rate2 = cos(90*rate);
			let r = R+60*rate2;
			Render(objImgID, 1.5-0.5*rate, 85+170*rate);
			ObjMove_SetPosition(objFamilier, ObjMove_GetX(objEnemy)+r*cos(ang), ObjMove_GetY(objEnemy)+r*sin(ang));
			ang += ang_spd;
			ang_spd += ang_acce;
			yield;
		}
		time = 330;
		ascent(i in 0 .. laser_way){
			if(!CanShotBullet(objFamilier) || !eAlive){break;}
			let s = 2.5+1.45*(i%2);
			let a = arc*i;
			TLaser(objFamilier, s, a, 240);
			if(i != 0){
				TLaser(objFamilier, s,-a, 240);
			}
		}
		let D = absolute(minAng_spd)/minAng_spd;
		TShot(objFamilier, 240, -D);
		ascent(t in 1 .. time+1){
			if(!CanShotBullet(objFamilier) || !eAlive){break;}
			let r = 60+45*t/time;
			ObjMove_SetPosition(objFamilier, ObjMove_GetX(objEnemy)+r*cos(ang), ObjMove_GetY(objEnemy)+r*sin(ang));
			ang += minAng_spd*(1-0.75*t/time);
			yield;
		}
		ZakoFinalize(objFamilier, eColor);
//		TCheckDispINOut(objFamilier, 32);

		function Render(objImgID, scale, alpha){
			ascent(i in 0 .. length(objImgID)){
				ObjRender_SetScaleXYZ(objImgID[i], scale, scale, scale);
				ObjRender_SetAlpha(objImgID[i], alpha);
			}
		}
	}

	task TShot(objEnemy, time, D){
		let wt = [40, 30, 16, 10][Difficult];
		let itrv = [2, 2, 3, 3][Difficult];
		let grap = [BGW_SCALE_PURPLE, BGW_FUGU_PURPLE];
		let quant = trunc(time/wt);
		waitObj(objEnemy, 90);
		ascent(t in 0 .. quant)
		{
			if (Obj_IsDeleted(objEnemy)) { return; }
			CallSound(sndShot5);
			let s = 2.4+(0.0+1.0*t/quant)+(itrv-(t%itrv))*1.0;
			let ang_spd = 0.60-(itrv-(t%itrv))*0.15;
//			let ang_spd = 0.65-0.4*t/quant;
			ascent(i in 0 .. 2){
				let rate = 0.985+0.015*i;
				let objS = My_CreateShotA2(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), (s+1.2)*rate, ang+180, -s*rate/60, 1.2*rate, grap[i], 10);
				ObjMove_AddPatternA2(objS, 60, NO_CHANGE, NO_CHANGE, 0, ang_spd*D, 1);
				ObjMove_AddPatternA2(objS, 240, NO_CHANGE, NO_CHANGE, 0, 0, 1);
			}
			waitObj(objEnemy, wt);
		}
	}

	task TLaser(objEnemy, lsr_spd, lsr_ang, time)
	{
		let l_len = 480;
		let r = 15;
		let graphic =	BGW_BEAM_PURPLE;
		
		let objLaser = [My_CreateStraightLaserA1Ex(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), ang, 0, 12, 999999, graphic, 9999, [true,false]),
						My_CreateStraightLaserA1Ex(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), ang, 0, 12, 999999, graphic,    0, [true,false])];
		ascent(i in 0 .. length(objLaser)){
			ObjShot_SetAutoDelete(objLaser[i], false);
		}
		ascent(t in 0 .. 90)
		{
			if (Obj_IsDeleted(objEnemy) || Obj_IsDeleted(objLaser[0])) { return; }
			let ex = ObjMove_GetX(objEnemy);
			let ey = ObjMove_GetY(objEnemy);
			let a = ang + lsr_ang;
	//			let ea = base_angle - (ey-CenY)/GetClipHeight*30*mukiX;
			ascent(i in 0 .. length(objLaser)){
				ObjMove_SetPosition(objLaser[i], ex+r*cos(a), ey+r*sin(a));
				ObjStLaser_SetAngle(objLaser[i], a);
			}
			ObjLaser_SetLength(objLaser[0], min(ObjLaser_GetLength(objLaser[0])+lsr_spd*3, l_len));
			wait(1);
		}
		CallSound(sndLaser1);
		ascent(t in 0 .. time)
		{
			if (Obj_IsDeleted(objEnemy) || Obj_IsDeleted(objLaser[0])) { return; }
			let ex = ObjMove_GetX(objEnemy);
			let ey = ObjMove_GetY(objEnemy);
			let a = ang + lsr_ang;
	//			let ea = base_angle - (ey-CenY)/GetClipHeight*30*mukiX;
			ascent(i in 0 .. length(objLaser)){
				ObjMove_SetPosition(objLaser[i], ex+r*cos(a), ey+r*sin(a));
				ObjStLaser_SetAngle(objLaser[i], ang + lsr_ang);
			}
			ObjLaser_SetLength(objLaser[1], min(ObjLaser_GetLength(objLaser[1])+lsr_spd, l_len));
			wait(1);
		}
		if (Obj_IsDeleted(objEnemy) || Obj_IsDeleted(objLaser)) { return; }
		let x = ObjMove_GetX(objLaser[0]);
		let y = ObjMove_GetY(objLaser[0]);
		ascent(i in 0 .. length(objLaser)){
			Obj_Delete(objLaser[i]);
		}
/*		let D = absolute(minAng_spd)/minAng_spd;
		CallSound(sndShot4);
		let blt_ang = ang + lsr_ang;
		let r_plus = rand(0, 36);
		ascent(t in 0 .. 15){
			let r = r_plus+36*t;
			Shot(x+r*cos(blt_ang), y+r*sin(blt_ang), 0.1, rand(0, 360));
			D = -D;
			wait(1);
		}

		task Shot(x, y, spd, ang){
			let objS = My_CreateShotA1(x, y, spd, ang, BGW_BALL_SS_PURPLE, 10);
			wait(240);
			Obj_Delete(objS);
		}*/
	}
}