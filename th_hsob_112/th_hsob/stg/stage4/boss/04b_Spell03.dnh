#東方弾幕風[Single]
#ScriptVersion[3]
#Title["上人スペカ3"]
#Text["E-N:無断転サエ「片翼の白鷺」　H:無断改変「両翼の白鷺にしてみた」　L:無断魔改造「六枚羽の魔王」"]
#Background[""]
#System["./../../../system/System.dnh"]

//---------------------------------------------------------------------

// 関数取り込み
#include"./../../../lib/lib_boss.dnh"
#include"./lib_Siran.dnh"

@Event {
	alternative(GetEventType())
	case(EV_REQUEST_LIFE)		{ SetScriptResult(330);	}
	case(EV_REQUEST_TIMER)		{ SetScriptResult(50);		}
	BossEvent();
}

@Initialize {
	let SPELL_ID = 34;
	let SPELL_NAME = [8, 8, 9, 10][Difficult];


	//ダメージ透過率
	dIni_Shot = 10;
	// アイテム数
	bossDropItem = 150;

	Boss_Init();	//初期設定
	objEnemy = CreateBoss(BOSS_ID_SIRAN);	//ボスセット
	SetSiranRosary();	// 数珠配置

	//スペカデータ・セット
	SetSpellCardData(GetSpellCardID(SPELL_ID), SPELL_NAME, 
	GetCurrentScriptDirectory()~"04a_Background.dnh",
	GetBossTexture(objEnemy, I_CUTIN), 0.6, CUTMOTION_NORMAL);

	// チャプター開始
	ChapterStartBoss(GetBossID(objEnemy), SPELL_NAME, CHAPTER_SPELL);

	Task_Main();
}

@MainLoop {
	yield;
}

// メインタスク
task Task_Main
{
	//数珠の画像を操作したい場合は、GetBossImageID(objEnemyRosary)　で数珠の画像IDを取得する
	
	standBy(objEnemy, CenX, 160, 90);
	SetActionSiran(objEnemy, ACT_MOVE, 120);
	waitObj(objEnemy, 60);	// ちょっとだけ処理待ち
	CallSpellCard(true);	//スペカ起動
	
	BossCharge(objEnemy);
	let D = 1;
	waitObj(objEnemy, 60);
	if(Difficult <= D_NORM){
		while(CanShotBullet(objEnemy)){
			SetActionSiran(objEnemy, ACT_SHOT2, 60);
			waitObj(objEnemy, 15);
			if(!CanShotBullet(objEnemy)){return;}
			SetFamilier01(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), GetCenterX+150*D, GetCenterY-30, GetCenterX-150*D, GetCenterY-180, 0, 0, D);
			waitObj(objEnemy, 195);
			D = -D;
		}
	}else if((Difficult <= D_HARD)){
		while(CanShotBullet(objEnemy)){
			SetActionSiran(objEnemy, ACT_SHOT2, 60);
			waitObj(objEnemy, 15);
			if(!CanShotBullet(objEnemy)){return;}
			SetFamilier01(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), GetCenterX+150*D, GetCenterY-30, GetCenterX-150*D, GetCenterY-165, 0, 0, D);
			waitObj(objEnemy, 30);
			D = -D;
			if(!CanShotBullet(objEnemy)){return;}
			SetFamilier01(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), GetCenterX+150*D, GetCenterY-75, GetCenterX-150*D, GetCenterY-210, 0, 0, D);
			waitObj(objEnemy, 195);
		}
	}else{
		while(CanShotBullet(objEnemy)){
			SetActionSiran(objEnemy, ACT_SHOT2, 60);
			waitObj(objEnemy, 15);
			if(!CanShotBullet(objEnemy)){return;}
			SetFamilier01(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), GetCenterX+60*D, 120, GetCenterX-180*D, 240, 5.0, 90, D);
			waitObj(objEnemy, 30);
			if(!CanShotBullet(objEnemy)){return;}
			SetFamilier01(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), GetCenterX-60*D, 120, GetCenterX+180*D, 240, 5.0, 90, D);
			waitObj(objEnemy, 30);
			
			if(!CanShotBullet(objEnemy)){return;}
			SetFamilier01(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), GetCenterX+30*D, 150, GetCenterX-210*D, 160, 4.5, 105, D);
			waitObj(objEnemy, 30);
			if(!CanShotBullet(objEnemy)){return;}
			SetFamilier01(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), GetCenterX-30*D, 150, GetCenterX+210*D, 160, 4.5, 105, D);
			waitObj(objEnemy, 30);
			
			if(!CanShotBullet(objEnemy)){return;}
			SetFamilier01(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), GetCenterX+60*D, 180, GetCenterX-180*D, 30, 4.0, 120, D);
			waitObj(objEnemy, 30);
			if(!CanShotBullet(objEnemy)){return;}
			SetFamilier01(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), GetCenterX-60*D, 180, GetCenterX+180*D, 30, 4.0, 120, D);
			D = -D;
			waitObj(objEnemy, 165);
		}
	}
}

// 片翼の白鷲
task SetFamilier01(x, y, tx, ty, tx2, ty2, blt_spd, blt_frame, D){
	let eSize = ENEMY_M;
	let eColor = [EFF_WHITE, EFF_RED][Difficult == D_LUNA];

	let frame = [150, 150, 150, 90][Difficult];
	if(blt_frame > 0){
		frame = blt_frame;
	}
	let wt = [6.00, 4.00, 5.00, 2.50][Difficult];
	let way = [2,2,2,1][Difficult];
	wt /= way;
	let arc = 60;
	if(blt_spd <= 0){
		blt_spd = [7.5, 10, 6.5, 5.0][Difficult];
	}
	let arc2 = -450*D;
	let iniAng = [90-60*D+rand(-15, 15), 90-180*D+rand(-15, 15)];
	let leng = [320, 320, 240, 180][Difficult];
	
	let objFamilier = MakeEnemyFamilier(x, y, 1000, eSize);
	CheckLinkLife_Familier(objEnemy, objFamilier, 0);	// ボスと体力連動
	SetEnemyVisible(objFamilier, false);
	DrawBirdOption2(objFamilier, eColor, atan2(ty-y, tx-x), 1, 1.00, false);
	TAct();
	WaitForKilledFamilier(objFamilier, 8, 0);
	ZakoFinalize(objFamilier, eColor);
	
	task TAct()
	{
		TMove;
	}
	
	task TMove(){
		let wt2 = [75, 75, 75, 30][Difficult];
		SetMovePositionBrakingEx(objFamilier, tx, ty, wt2, MOVE_BRAKING01);
		waitObj(objFamilier, wt2);
		if(!CanShotBullet(objFamilier)){return;}
		CallSound(sndFlare);
		let pat = Obj_GetValueD(objFamilier, "PAT", 0) + 1;
		Obj_SetValue(objFamilier, "PAT", pat);
		let cx = (ObjMove_GetX(objFamilier)+tx2)/2;
		let cy = (ObjMove_GetY(objFamilier)+ty2)/2;
		let rx = (tx2-ObjMove_GetX(objFamilier))/2;
		let ry = (ty2-ObjMove_GetY(objFamilier))/2;
		let count = 0;
		let j = 0;
		ascent(time in 1 .. frame+1){
			if(Obj_IsDeleted(objFamilier) || pat != Obj_GetValueD(objFamilier, "PAT", 0)){return;}
			count++;
			while(count >= wt){
				count -= wt;
				let rate = (time - count) / frame;
				let t_rate = 180 * rate;
				ObjMove_SetX(objFamilier, cx - rx * cos(t_rate));
				ObjMove_SetY(objFamilier, cy - ry * cos(t_rate));
				CallSound(sndLaser2);
				ascent(k in 0 .. length(iniAng)){
						let a = iniAng[k]+arc2*rate;
						let a2 = a+arc*(j-(way-1)/2);
					Laser(ObjMove_GetX(objFamilier)+24*cos(a), ObjMove_GetY(objFamilier)+24*sin(a), blt_spd, a2, leng);
				}
				j++;
				j %= way;
			}
			let t_rate = 180 * time / frame;
			ObjMove_SetX(objFamilier, cx - rx * cos(t_rate));
			ObjMove_SetY(objFamilier, cy - ry * cos(t_rate));
			waitObj(objFamilier, 1);
		}
		ObjMove_SetX(objFamilier, tx2);
		ObjMove_SetY(objFamilier, ty2);

		task Laser(x, y, spd, ang, leng){
			let time = 200;
			let grap = [[ADD_BGW_BALL_M_WHITE, BGB_SCALE_WHITE], [ADD_BGW_BALL_M_RED, BGB_SCALE_RED]][Difficult == D_LUNA];
			let objL = My_CreateLooseLaserA1(x, y, 0, ang, leng, 10, grap[0], 0);
			ObjRender_SetColor(objL, 191, 191, 191);
//			My_CreateShotA2(x, y, 0, ang, spd/time, spd, grap[1], 10);
			let objS = My_CreateShotA1(x, y, 0, ang, grap[1], 10);
			ObjMove_AddPatternA2(objS, trunc(leng*0.1/spd), NO_CHANGE, NO_CHANGE, spd/time, 0, spd);
			ascent(i in 1 .. time+1){
				ObjMove_SetSpeed(objL, spd*i/time);
				yield;
			}
		}

		EraseEnemy(objFamilier);
//		ZakoFinalizeEx(objFamilier, eColor, false);
//		TCheckDispINOut(objFamilier, 32);
	}
}