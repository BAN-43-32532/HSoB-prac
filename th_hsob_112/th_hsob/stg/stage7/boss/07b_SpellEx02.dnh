#東方弾幕風[Single]
#ScriptVersion[3]
#Title["ラスワ"]
#Text["ラスワ"]
#Background[""]
#System["./../../../system/System.dnh"]

//---------------------------------------------------------------------

// 関数取り込み
#include"./../../../lib/lib_boss.dnh"
#include"./lib_Mumei.dnh"

let FLG_ACT_ENM = -1;
let FLG_ACT_ENM2 = -1;
let ENM_FALLED = [false, false, false, false, false, false, false];
let ENM_FALLED_CT = 0;

@Event {
	alternative(GetEventType())
	case(EV_REQUEST_LIFE)		{ SetScriptResult(1000);	}
	case(EV_REQUEST_TIMER)		{ SetScriptResult(177);		}
	case(EV_REQUEST_IS_LAST_SPELL)	{ SetScriptResult(true);	}
	BossEvent();
}

@Initialize {
	let SPELL_ID = 1009;
	let SPELL_NAME = 11;
	
	// アイテム数
	bossDropItem = 0;
	//ダメージ透過率（敵撃破ごとにやわっこくする）
	dIni_Shot = 10;
	//防御率再計算
	SetMumeiDefence2();

	//初期設定
	Boss_Init();

	InitMumei();
	// 終了後えへくと自壊
	MumeiEffect_SetDeleteMotion(true);

	objEnemy = CreateBoss(BOSS_ID_MUMEI);	//ボスセット

	//スペカデータ・セット
	SetSpellCardData(GetSpellCardID(SPELL_ID), SPELL_NAME, 
			GetCurrentScriptDirectory()~"07b_Background.dnh",
			GetBossTexture(objEnemy, I_CUTIN), 0.65, CUTMOTION_NONE);

	// チャプター開始
	ChapterStartBoss(GetBossID(objEnemy), SPELL_NAME, CHAPTER_SPELL);

	// 使い魔と体力連動
	CheckLinkLife_Boss(objEnemy);
	
	// 羽弾
	LoadWingShotData();

	Task_Main();
}

@MainLoop {
	yield;
}

// メインタスク
task Task_Main
{
	let isPrac = (GetPlayMode() == GAME_SPELL || GetPlayMode() == GAME_NONE);

	SetEnemyVisible(objEnemy, false);
	
	if (isPrac)
	{
		LW_TimeStop(135);
		MoveToSlowdown(objEnemy, CenX, 220, 60);
		SetAction(objEnemy, ACT_MOVE, 60);
		
		// ﾜｲﾜｲ
		SetEnemyBoss01(MinX-128, 120, 0, isPrac);
		SetEnemyBoss01(MaxX+128, 120, 2, isPrac);
		SetEnemyBoss01(MinX-128, 0, 1, isPrac);
		SetEnemyBoss01(MaxX+128, 0, 4, isPrac);
		SetEnemyBoss01(CenX, -128, 3, isPrac);
		if (DifficultEx() != D_EX_EASY)
		{
			SetEnemyBoss01(MinX-256, CenX, 5, isPrac);
			SetEnemyBoss01(MaxX+256, CenX, 6, isPrac);
		}
		wait(120);
		SetAction(objEnemy, ACT_SHOT2, 60*999);
		wait(15);
	}
	else
	{
		LW_TimeStop(270+60);
		MoveToSlowdown(objEnemy, CenX, 220, 120);
		SetAction(objEnemy, ACT_MOVE, 120);
		BossFinalExplodeA_S10(objEnemy, true);
		CallSound(sndBossEndBigin);
		wait(60);
		
		// ﾜｲﾜｲ
		SetEnemyBoss01(MinX-128, 120, 0, isPrac);
		SetEnemyBoss01(MaxX+128, 120, 2, isPrac);
		SetEnemyBoss01(MinX-128, 0, 1, isPrac);
		SetEnemyBoss01(MaxX+128, 0, 4, isPrac);
		SetEnemyBoss01(CenX, -128, 3, isPrac);
		if (DifficultEx() != D_EX_EASY)
		{
			SetEnemyBoss01(MinX-256, CenX, 5, isPrac);
			SetEnemyBoss01(MaxX+256, CenX, 6, isPrac);
		}
		wait(120);
		SetAction(objEnemy, ACT_SHOT1, 270-180+30);
		wait(270-135);
		SetAction(objEnemy, ACT_SHOT2, 60*999);
		wait(15);
	}
	
	SetEnemyVisible(objEnemy, true);
	CallSpellCard(true);	//スペカ起動
	// 効果音
	CallSound(sndCallSpellCard);
	SetAreaCommonData(CAREA_SYSTEM, "PACKAGE_CUTIN", true );
	SetAreaCommonData(CAREA_SYSTEM, "PACKAGE_CUTIN_ID", -15 );
	yield;
	
	TShot();
	TShotFam();
	
	task TShot()
	{
		let speed = [5, 3.33, 5][DifficultEx()];
		let way = [2, 2, 2][DifficultEx()];
		let wt = [4, 8, 4][DifficultEx()];
		
		// 本体
		TShot_subE(-1, speed, 0, 0, 0, 0, way, wt, BGW_CHRYSTAL_S_WHITE);
		// 上人
		TShot_subE(3, speed, 0.5, 0.05, 1.5, 3, way, wt, BGW_FUGU_PURPLE);
		// ひかりこ
		TShot_subE(2, speed*0.8, 0.25, 0.025, 1.5, 2, way, wt, BGW_FUGU_BLUE);
		// らんらん
		TShot_subE(0, speed*0.8, 0.75, 0.025, 1.5, 2, way, wt, BGW_FUGU_RED);
		// ちぃ
		TShot_subE(1, speed*0.6, 0.1, 0, 1.5, 2, way, wt, BGW_FUGU_YELLOW);
		// ﾎﾛｳﾁｬﾝ
		TShot_subE(4, speed*0.6, 0.9, 0, 1.5, 2, way, wt, BGW_FUGU_WHITE);
		// みすちー
		TShot_subE(5, speed*0.4, 0.25, 0, 1.5, 1, way, wt, BGW_FUGU_GREEN);
		// ねべちー
		TShot_subE(6, speed*0.4, 0.75, 0, 1.5, 1, way, wt, BGW_FUGU_SKY);
	}

	task TShot_subE(EID, speed, angle, s_add, a_add, w_add, way, wt, graphic)
	{
		let count = 0;
		while(eAlive)
		{
			let sx = ObjMove_GetX(objEnemy);
			let sy = ObjMove_GetY(objEnemy)-72;
			let ba = -count * 360/1.618/15.5;
			let bs = speed * (1 + (1-GetBossLifeRate(objEnemy))*0.5);
			
			if (EID < 0)
			{
				// 本体
				let quant = 4;
				ascent(iW in 0 .. way)
				{
					let va = ba + 360*iW/way;
					let vpos = [cos(va), sin(va)/2];
					let ss = bs * ((vpos[0])^2 + (vpos[1])^2)^0.5;
					let sa = atan2(vpos[1], vpos[0]);
					RhombusShotEx(objEnemy, quant, 8.0, 4.8, sx, sy,
						ss, sa, graphic, 10);
				}
				CallSound(sndShot3);
			}
			else
			{
				if (ENM_FALLED[EID])
				{
					// ゆゆゆゆゆうじょうパワー!!
					ascent(iW in 0 .. way)
					{
						ascent(iW2 in 0 .. w_add)
						{
							let tmp = iW2 - (w_add-1)/2;
							let va = ba + 360*(iW+angle)/way + tmp*a_add;
							let vpos = [cos(va), sin(va)/2];
							let ss = bs * ((vpos[0])^2 + (vpos[1])^2)^0.5 * (1+tmp*s_add);
							let sa = atan2(vpos[1], vpos[0]);
							Ex02_CreateShotA1(sx, sy, ss, sa, graphic, 10, trunc(24/ss));
						}
					}
					//CallSound(sndShot3);
				}
			}
			count++;
			waitObj(objEnemy, wt);
		}
	}
	
	// 菱形弾の発射遅延に合わせる
	task Ex02_CreateShotA1(x, y, speed, angle, graphic, delay, timer)
	{
		wait(timer);
		if (!eAlive) { return; }
		let objS = My_CreateShotA2(x, y, 0, angle, speed/80, speed, graphic, delay);
	}
	
	task TShotFam()
	{
		let wt_min = [60, 90, 45][DifficultEx()];
		let wt_max = [180, 240, 180][DifficultEx()];
		let wt_dec = [135, 120, 135][DifficultEx()];
		
		let count = 0;
		waitObj(objEnemy, 390);
		while(eAlive)
		{
			let tmpL = GetBossLifeRate(objEnemy);
			let wt = max(wt_min, wt_max-wt_dec*(1-tmpL));
			let enm = [0, 1, 2, 4][count%4];
			let enm2 = [5, -1, 6, -1][count%4];
			
			FLG_ACT_ENM = enm;
			FLG_ACT_ENM2 = enm2;
			waitObj(objEnemy, wt);
			count++;
		}
	}
}

// ラスワ開幕モーション
task LW_TimeStop(timer)
{
	// タイマー停止
	ObjEnemyBossScene_SetSpellTimer(objScene, -1);
	wait(timer);
	// タイマー開始
	ObjEnemyBossScene_SetSpellTimer(objScene, ObjEnemyBossScene_GetInfo(objScene, INFO_ORGTIMERF));
}

task BossFinalExplodeA_S10(objTarget, bigEffect)
{
	ascent (i in 0 .. 30)
	{
		let tmp = i/29;
		_BossFinalExplodeA(objTarget, 45, 4+tmp*10, tmp*360);
		wait(5);
	}
	descent (i in 0 .. 10)
	{
		let tmp = i/9;
		_BossFinalExplodeA(objTarget, 45, 4+tmp*10, tmp*360);
		wait(5);
	}
}

// ボス配置
// ID:0	らんらん
// ID:1	ちぃ
// ID:2	ひかりこ
// ID:3	上人
// ID:4	ﾎﾛｳﾁｬﾝ
// ID:5	みすちー
// ID:6	ねべちー
task SetEnemyBoss01(iniX, iniY, iniType, iniPracFlag)
{
	let eLife = [1500, 1000, 1500][DifficultEx()];
	let eSize = ENEMY_LL;
	let eColor = [EFF_RED, EFF_SKY, EFF_BLUE, EFF_PURPLE, EFF_WHITE, EFF_PURPLE, EFF_YELLOW][iniType];
	let eEffColor = [[192,64,64], [128,128,128], [64,64,192], [192,64,192], [128,128,128], [192,64,192], [192,192,64]][iniType];
	let eName = [BOSS_ID_RANRAN, BOSS_ID_CHII, BOSS_ID_HIKARIKO, BOSS_ID_SIRAN, BOSS_ID_HOROU, BOSS_ID_MYSTIA, BOSS_ID_NEBET][iniType];
	let eDRate = [100, 50, 100, 80, 50, 555, 555][iniType];
	
	let objSubEnemy = MakeEnemy(iniX, iniY, eLife, eSize);
	SetEnemyDropItem(objSubEnemy, [MY_ITEM_TIME_10], [MY_ITEM_TIME_3, 7]);	// アイテム排出セット
	SetEnemyVisible(objSubEnemy, false);
	ObjEnemy_SetDamageRate(objSubEnemy, eDRate*GetDefenceEx(), 0);
	SetEffectResist(objSubEnemy, bossResistEffect);	// 状態異常耐性
	SetTimeResist(objSubEnemy, bossResistTime);	// 停止耐性
	
	Boss_SetIDtoObj(objSubEnemy, eName);
	Boss_AnimeTimer(objSubEnemy);
	BossAnime_Initialize(objSubEnemy);
	FamilierEffect_LifeCircle(objSubEnemy, 64);
	CheckLinkLife_Boss(objSubEnemy);	// 使い魔と体力連動
	TAct();
	WaitForKilledFamilier(objSubEnemy, 32, 16);
	BossFinalExplode_Ex2(objSubEnemy, false);
	if (eAlive)
	{
		EffectConcentrationPoint(ObjMove_GetX(objSubEnemy), ObjMove_GetY(objSubEnemy), objEnemy, eEffColor, 15, 120);
		DisplayShake(30, 18);
		CallSound(sndPower1);
	}
	Obj_Delete(objSubEnemy);
	wait(120);
	if (eAlive)
	{
		if (eName != BOSS_ID_SIRAN) {
			// 上人ｻﾝは貫通自機じゃないとまず倒せないので除外
			ENM_FALLED_CT++;
		}
		ENM_FALLED[iniType] = true;	// フラグON
		// やわっこくする
		if (ENM_FALLED_CT > 5) { dIni_Shot = 100; }
		else if (ENM_FALLED_CT > 4) { dIni_Shot = 50; }
		else if (ENM_FALLED_CT > 3) { dIni_Shot = 33; }
		else if (ENM_FALLED_CT > 2) { dIni_Shot = 17.5; }
		else if (ENM_FALLED_CT > 1) { dIni_Shot = 15; }
		else if (ENM_FALLED_CT > 0) { dIni_Shot = 12.5; }
		// 難易度で更に補正
		alternative(DifficultEx())
		case(D_EX_NORM)	{ dIni_Shot /= 1; }
		case(D_EX_EASY)	{ dIni_Shot /= 0.65; }
		case(D_EX_HARD)	{ dIni_Shot /= 1; }
		
		ObjEnemy_SetDamageRate(objEnemy, dIni_Shot, dIni_Shot*dIni_Spell);
	}
	
	task TAct()
	{
		alternative(eName)
		case(BOSS_ID_RANRAN) { TAct_Ranran; }
		case(BOSS_ID_CHII) { TAct_Chii; }
		case(BOSS_ID_HIKARIKO) { TAct_Hikariko; }
		case(BOSS_ID_SIRAN) { TAct_Siran; }
		case(BOSS_ID_HOROU) { TAct_Horou; }
		case(BOSS_ID_MYSTIA) { TAct_Mystia; }
		case(BOSS_ID_NEBET) { TAct_Nebet; }
		
		while(eAlive && !GetEnemyVisible(objEnemy))
		{
			yield;
		}
		SetEnemyVisible(objSubEnemy, true);
	}
	
	// 使い魔用キルチェック
	task CheckSubEnemyKilled(objSubEnemy, objFamilier)
	{
		while(CanShotBullet(objFamilier))
		{
			if (Obj_IsDeleted(objSubEnemy))
			{
				EraseEnemy(objFamilier);
				break;
			}
			yield;
		}
	}
	
	// 前の敵が倒されたら前面に出てやわっこくなる
	task TMoveFront(objBoss, frontID, toPos)
	{
		while(CanShotBullet(objBoss))
		{
			if (ENM_FALLED[frontID] && !Obj_GetValueD(objBoss,"SHOOTING",false))
			{
				MoveToSlowdown(objBoss, toPos[0], toPos[1], 120);
				SetAction(objBoss, ACT_MOVE, 120);
				ObjEnemy_SetDamageRate(objBoss, 100*GetDefenceEx(), 0);
				return;
			}
			waitObj(objBoss, 1);
		}
	}
	
	task SetShootingTime(objBoss, timer)
	{
		Obj_SetValue(objBoss,"SHOOTING",true);
		waitObj(objBoss, timer);
		Obj_SetValue(objBoss,"SHOOTING",false);
	}
	
	// ボスの硬さ調整
	function GetDefenceEx()
	{
		alternative(GetPlayerType())
		case(PLAYER_REIMU_A)  { return(1); }
		case(PLAYER_MARISA_A) { return(1/1.2); }
		case(PLAYER_SAKUYA_A) { return(1/1.2); }
		case(PLAYER_KAGUYA_A) { return(1/0.9); }
	}
// ----------------- らんらん ----------------- //
	task TAct_Ranran
	{
		#include"./../../stage1/boss/lib_Ranran.dnh"
		TAct;
		
		task TAct
		{
			// 開幕
			if (iniPracFlag)
			{
				MoveToSlowdown(objSubEnemy, CenX-144, 240, 60);
				SetAction(objSubEnemy, ACT_MOVE, 60);
			}
			else
			{
				waitObj(objSubEnemy, 30);
				MoveToSlowdown(objSubEnemy, CenX-144, 240, 60);
				SetAction(objSubEnemy, ACT_MOVE, 60);
				EffectConcentrationPoint(MinX-64, ObjMove_GetY(objSubEnemy), objEnemy,
					eEffColor, 15, 60);
				CallSound(sndPower1);
			}
			
			let count = 0;
			while(CanShotBullet(objSubEnemy))
			{
				if (FLG_ACT_ENM == iniType)
				{
					FLG_ACT_ENM = -1;
					
					TShot(count);
					CallSound(sndPower3);
					SetAction(objSubEnemy, ACT_SHOT1, 120);
					SetShootingTime(objSubEnemy, 120);
					count++;
				}
				waitObj(objSubEnemy, 1);
			}
		}
		
		task TShot(count)
		{
			SetFamilier01(ObjMove_GetX(objSubEnemy), ObjMove_GetY(objSubEnemy), 12, [15,10][count%2], count%2);
			CallSound(sndBoon);
		}

		// 筆ショット
		task SetFamilier01(iniX, iniY, iniSpeed, iniAngle, iniValue)
		{
			let eSize = ENEMY_SS;
			let eColor = EFF_RED;
			
			let objFamilier = MakeEnemyFamilier(iniX, iniY, 999999, eSize);
			SetEnemyVisible(objFamilier, false);
			DrawRanranOption(objFamilier);
			CheckSubEnemyKilled(objSubEnemy, objFamilier);	// 使い魔用キルチェック
			TAct();
			WaitForKilledFamilier(objFamilier, 0, 0);
			ZakoFinalize(objFamilier, eColor);
			
			task TAct()
			{
				TMove;
			}
			
			task TMove()
			{
				let fa = 10-120;
				let vx = cos(iniAngle);
				let vy = sin(iniAngle);
				let vs = 0;
				let vr_max = [48, -48][iniValue%2];
				let vr2_max = [32, -64][iniValue%2];
				let vr_span = [8, -12][iniValue%2];
				let vr_span2 = [8, -6][iniValue%2];
				let shot_angle = [iniAngle+180, iniAngle+180][iniValue%2];
				let shot_add = [36, -36][iniValue%2];
				
				Enemy_SetPatternA2(objFamilier, 0, 2.5, fa, -2.5/60, 0, 0);
				waitObj(objFamilier, 60);
				
				if (!CanShotBullet(objFamilier)) { return; }
				TShot(shot_angle, shot_add, vr_span);
				
				let bx = ObjMove_GetX(objFamilier);
				let by = ObjMove_GetY(objFamilier);
				
				let t = 0;
				while(CanShotBullet(objFamilier))
				{
					let vr = sin(t*vr_span)*max(0,1-t/120)*vr_max;
					let vr2 = -sin(t*vr_span2)*max(0,1-t/120)*vr2_max;
					ObjMove_SetPosition(objFamilier, bx+vr*cos(iniAngle+90)+vr2*cos(iniAngle), by+vr*sin(iniAngle+90)+vr2*sin(iniAngle));
					bx += vx*vs;
					by += vy*vs;
					vs = min(iniSpeed, vs+iniSpeed/180);
					t++;
					waitObj(objFamilier, 1);
				}
			}
			
			task TShot(base_angle, add_angle, vr_span)
			{
				let speed = [1.33, 1, 1.33][DifficultEx()];
				let shot_rate = [1, 3, 1][DifficultEx()];
				
				let t = 0;
				while(CanShotBullet(objFamilier))
				{
					if (CheckDispIN(objFamilier, 8))
					{
						let shot_flg = (trunc(t/2)%shot_rate == 0);
						let sa = base_angle+cos(trunc(t/2)*vr_span*4)*add_angle;
						let ss = speed * (1 + sin(trunc(t/2)*90)/4);
						RedRedShot(ObjMove_GetX(objFamilier), ObjMove_GetY(objFamilier), ss, sa, BGW_SCALE_RED, 15, 2, 180, shot_flg);
						CallSound(sndShot2);
					}
					t++;
					waitObj(objFamilier, 1);
				}
			}
			task RedRedShot(x, y, speed, angle, graphic, delay, way, way_angle, shot_flg)
			{
				let obj = My_CreateShotA1(x, y, 0, 90, ADD_BGW_BALL_S_RED, 15);
				wait(60);
				if (!Obj_IsDeleted(obj))
				{
					if (shot_flg)
					{
						ascent(i in 0 .. way)
						{
							let sa = angle + (i-(way-1)/2)*way_angle;
							let to_obj = My_CreateShotA1(x, y, 0.1, sa, graphic, delay);
							ObjMove_AddPatternA2(to_obj, 60, NO_CHANGE, NO_CHANGE, speed/60, 0, speed);
							Obj_SetRenderPriorityI(to_obj, GetShotRenderPriorityI+1);
						}
					}
					DeleteBulletEffect(obj);
				}
			}
		}
	}
// ----------------- ちぃ ----------------- //
	task TAct_Chii
	{
		#include"./../../stage2/boss/lib_Chii.dnh"
		TAct;
		
		task TAct
		{
			// 開幕
			if (iniPracFlag)
			{
				MoveToSlowdown(objSubEnemy, CenX-128, 120, 60);
				SetAction(objSubEnemy, ACT_MOVE, 60);
			}
			else
			{
				waitObj(objSubEnemy, 90);
				MoveToSlowdown(objSubEnemy, CenX-128, 120, 60);
				SetAction(objSubEnemy, ACT_MOVE, 60);
				EffectConcentrationPoint(MinX-64, ObjMove_GetY(objSubEnemy), objEnemy,
					eEffColor, 15, 60);
				CallSound(sndPower1);
			}

			// 前の敵が倒されたら前面に出てやわっこくなる
			TMoveFront(objSubEnemy, 0, [CenX-144, 240]);

			let count = 0;
			while(CanShotBullet(objSubEnemy))
			{
				if (FLG_ACT_ENM == iniType)
				{
					FLG_ACT_ENM = -1;
					
					TShot(count);
					CallSound(sndPower3);
					SetAction(objSubEnemy, ACT_SHOT1, 120);
					SetShootingTime(objSubEnemy, 120);
					count++;
				}
				waitObj(objSubEnemy, 1);
			}
		}
		
		task TShot(count)
		{
			waitObj(objSubEnemy, 60);
			if (!CanShotBullet(objSubEnemy)) { return; }
			alternative(count%2)
			case(0)
			{
				// つまようじ
				let timer = [24, 24, 24][DifficultEx()];
				let speed = [3.5, 2.5, 3.5][DifficultEx()];
				let wt = [1, 1, 1][DifficultEx()];
				let way = [5, 1, 5][DifficultEx()];
				let arc = [24, 24, 24][DifficultEx()];
				
				let w1 = (way-1)/2;
				
				ascent(t in 0 .. timer)
				{
					if (!CanShotBullet(objSubEnemy)) { return; }
					if (t%wt == 0)
					{
						ascent(iW in 0 ..way){
							let ss = speed * (1-t/timer/4);
							let sa = -90+rand(-90,90)+((ObjMove_GetX(objSubEnemy)-MinX)/GetClipWidth-0.5)*120;
							TumaShot_ToPlayer(ObjMove_GetX(objSubEnemy), ObjMove_GetY(objSubEnemy), rand(1, 5^2)^0.5, sa, BGW_STICK_YELLOW, 30,
								ss, arc*(iW-w1), BGW_STICK_YELLOW, 60);
							CallSound(sndShot1);
						}
					}
					waitObj(objSubEnemy, 1);
				}
			}
			case(1)
			{
				// つまようじ
				let timer = [24, 24, 24][DifficultEx()];
				let speed = [3.5, 2.5, 3.5][DifficultEx()];
				let wt = [1, 1, 1][DifficultEx()];
				let way = [3, 1, 3][DifficultEx()];
				let arc = [5, 5, 5];
				
				let w1 = (way-1)/2;
				
				ascent(t in 0 .. timer)
				{
					if (!CanShotBullet(objSubEnemy)) { return; }
					if (t%wt == 0)
					{
						ascent(iW in 0 ..way){
							let ss = speed * (1-t/timer/4);
							let sa = -90+rand(-90,90)+((ObjMove_GetX(objSubEnemy)-MinX)/GetClipWidth-0.5)*120;
							TumaShot_ToPlayer(ObjMove_GetX(objSubEnemy), ObjMove_GetY(objSubEnemy), rand(1, 5^2)^0.5, sa, BGW_STICK_YELLOW, 30,
								ss, arc*(iW-w1), BGW_STICK_YELLOW, 60);
							CallSound(sndShot1);
						}
					}
					waitObj(objSubEnemy, 1);
				}
			}
		}
	}
// ----------------- ひかりこ ----------------- //
	task TAct_Hikariko
	{
		#include"./../../stage3/boss/lib_Hikariko.dnh"
		TAct;
		
		task TAct
		{
			// 開幕
			if (iniPracFlag)
			{
				MoveToSlowdown(objSubEnemy, CenX+144, 240, 60);
				SetAction(objSubEnemy, ACT_MOVE, 60);
			}
			else
			{
				waitObj(objSubEnemy, 30);
				MoveToSlowdown(objSubEnemy, CenX+144, 240, 60);
				SetAction(objSubEnemy, ACT_MOVE, 60);
				EffectConcentrationPoint(MaxX+64, ObjMove_GetY(objSubEnemy), objEnemy,
					eEffColor, 15, 60);
				CallSound(sndPower1);
			}
			
			while(CanShotBullet(objSubEnemy))
			{
				if (FLG_ACT_ENM == iniType)
				{
					FLG_ACT_ENM = -1;
					
					TShot();
					CallSound(sndPower3);
					SetAction(objSubEnemy, ACT_SHOT1, 120);
					SetShootingTime(objSubEnemy, 120);
				}
				waitObj(objSubEnemy, 1);
			}
		}
		
		task TShot()
		{
			SetFamilier01(ObjMove_GetX(objSubEnemy), ObjMove_GetY(objSubEnemy), 12, 90+80, 1);
			SetFamilier01(ObjMove_GetX(objSubEnemy), ObjMove_GetY(objSubEnemy), 12, 90+80+20, -1);
			CallSound(sndBoon);
		}

		task SetFamilier01(iniX, iniY, iniSpeed, iniAngle, iniValue)
		{
			let eSize = ENEMY_SS;
			let eColor = EFF_BLUE;
			
			let objFamilier = MakeEnemyFamilier(iniX, iniY, 999999, eSize);
			SetEnemyVisible(objFamilier, false);
			DrawBirdOption(objFamilier, EFF_BLUE, iniAngle, 1);
			CheckSubEnemyKilled(objSubEnemy, objFamilier);	// 使い魔用キルチェック
			TAct();
			WaitForKilledFamilier(objFamilier, 0, 0);
			ZakoFinalize(objFamilier, eColor);
			
			task TAct()
			{
				TMove;
			}
			
			task TMove()
			{
				Enemy_SetPatternA2(objFamilier, 0, 2.5, iniAngle+120*iniValue, -2.5/60, 0, 0);
				waitObj(objFamilier, 60);
				if (!CanShotBullet(objFamilier)) { return; }
				Enemy_SetPatternA2(objFamilier, 0, 0, iniAngle-45*iniValue, iniSpeed/120, 1*iniValue, iniSpeed);
				TCheckDispINOut(objFamilier, 64);
				TShot;
			}
			
			task TShot()
			{
				let speed = [1.5, 1, 1.5][DifficultEx()];
				let add_shot = [true, false, true][DifficultEx()];
				
				let t = 0;
				while(CanShotBullet(objFamilier))
				{
					if (CheckDispIN(objFamilier, 8))
					{
						let shot_flg = (add_shot || trunc(t/3)%2==0);
						let wa = 360 + t*5;
						let sa = iniAngle+(240-t*3)*iniValue;
						let ss = speed * (1 - (trunc(t/3)%2)/3);
						RedRedShot(ObjMove_GetX(objFamilier), ObjMove_GetY(objFamilier), ss, sa, BGW_BALL_BS_BLUE, 15, 1, wa, shot_flg);
						SetAction(objSubEnemy, ACT_SHOT1, 120);
						CallSound(sndShot2);
					}
					t++;
					waitObj(objFamilier, 1);
				}
			}
			task RedRedShot(x, y, speed, angle, graphic, delay, way, way_angle, shot_flg)
			{
				let obj = My_CreateShotA1(x, y, 0, 90, ADD_BGW_BALL_S_BLUE, 15);
				wait(60);
				if (!Obj_IsDeleted(obj))
				{
					if (shot_flg)
					{
						ascent(i in 0 .. way)
						{
							let sa = angle + (i-(way-1)/2)*way_angle;
							let to_obj = My_CreateShotA1(x, y, 0.2, sa, graphic, delay);
							ObjMove_AddPatternA2(to_obj, 15, NO_CHANGE, NO_CHANGE, speed/60, 0, speed);
							Obj_SetRenderPriorityI(to_obj, GetShotRenderPriorityI+1);
						}
					}
					DeleteBulletEffect(obj);
				}
			}
		}
	}
// ----------------- 上人 ----------------- //
	task TAct_Siran
	{
		#include"./../../stage4/boss/lib_Siran.dnh"
		TAct;
		
		task TAct
		{
			_SetSiranRosary(objSubEnemy);	// 数珠配置
			// 開幕
			if (iniPracFlag)
			{
				MoveToSlowdown(objSubEnemy, CenX, 80, 120);
				SetActionSiran(objSubEnemy, ACT_MOVE_L, 120);
			}
			else
			{
				waitObj(objSubEnemy, 150);
				MoveToSlowdown(objSubEnemy, CenX, 80, 120);
				SetActionSiran(objSubEnemy, ACT_MOVE_L, 120);
				EffectConcentrationPoint(ObjMove_GetX(objSubEnemy), MinY-32, objEnemy,
					eEffColor, 15, 120);
				CallSound(sndPower1);
			}
			waitObj(objSubEnemy, 120);
			
			
			let D = 1;
			let way = [12, 10, 12][DifficultEx()];
			let wt = 5;
			let add_ang = 0.25;
			let wt_base = [300, 330, 300][DifficultEx()];
			
			while(CanShotBullet(objSubEnemy))
			{
				let ang = rand(0,360);
				let ID = [];
				ascent(i in 0 .. way){
					ID = ID ~ [i];
				}
				ascent(i in 0 .. way){
					if(!eAlive){return;}
					let j = trunc(rand(0, length(ID)*999)%length(ID));
					SetFamilier01(ObjMove_GetX(objSubEnemy), ObjMove_GetY(objSubEnemy), 0, ang-(360*ID[j]/way-add_ang*wt*i)*D, 1, add_ang, 150-wt*i, D);
					wait(wt);
					ID = erase(ID, j);
				}
				SetShootingTime(objSubEnemy, 120);
				D = -D;
				waitObj(objSubEnemy, wt_base);
			}

		}


		// 数珠オプション
		task SetFamilier01(iniX, iniY, iniSpeed, iniAngle, iniValue, ang_spd, Delay, Dirc)
		{
			iniValue %= 2;
			let eSize = ENEMY_M;
			let eColor = EFF_RED;
			let baseAngle = iniAngle;

			
			let objFamilier = MakeEnemyFamilier(iniX, iniY, 55, eSize);
			CheckLinkLife_Familier(objSubEnemy, objFamilier, 0.8);	// ボスと体力連動
			SetEnemyVisible(objFamilier, false);
			if(iniValue){
				eColor = EFF_PURPLE;
			}
			DrawRosaryFamilier( objFamilier, eColor );
			CheckSubEnemyKilled(objSubEnemy, objFamilier);	// 使い魔用キルチェック
			TAct();
			WaitForKilledFamilier(objFamilier, 24, 4);
			ZakoFinalize(objFamilier, eColor);
			
			task TAct()
			{
				TMove;
			}
			
			task TMove(){
				let R = 96;
				let time = 300;
				let wt_base = [30, 45, 30][DifficultEx()];
				let ang = iniAngle;
				let ini_spd = [1.75, 1.5, 1.75][DifficultEx()];
				let fin_spd = [1.25, 1, 1.25][DifficultEx()];
				let way = 1;
				let grap = [BGW_FUGU_RED, BGW_FUGU_PURPLE][iniValue];
				let objImgID = Obj_GetValueD(objFamilier, "IMAGE_ID_ALL", []);

				let iniTime = trunc(Delay*2/3);
				ascent(t in 1 .. iniTime+1){
					if(!CanShotBullet(objFamilier) || !eAlive){break;}
					let rate = sin(90*t/iniTime);
					let r = R*rate*1.5;
					Render(objImgID, rate*1.5, 85*t/iniTime);
					ObjMove_SetPosition(objFamilier, iniX+r*cos(ang), iniY-64*rate+r*sin(ang));
					ang += ang_spd*Dirc;
					yield;
				}
				iniY -= 64;
				let iniTime2 = Delay-iniTime;
				ascent(t in 1 .. iniTime2+1){
					if(!CanShotBullet(objFamilier) || !eAlive){break;}
					let rate = t/iniTime2;
					let rate2 = GetCurve_ad(rate);
					let r = R*(1.5-0.5*rate2);
					Render(objImgID, 1.5-0.5*rate, 85+170*rate);
					ObjMove_SetPosition(objFamilier, iniX+r*cos(ang), iniY+r*sin(ang));
					ang += ang_spd*Dirc;
					yield;
				}
				if(!iniValue){	SetEnemyVisible(objFamilier, true);}
				let c = 0;
				let wt = 15;
				let w_rate = 1;
				ascent(t in 1 .. time+1){
					if(!CanShotBullet(objFamilier) || !eAlive){break;}
					let rate = GetCurve_ad(t/time);
					let r = R*(1.0+rate*0.5);
					let s_rate = 1 + 4*rate;
					c++;
					if(c >= wt){
						let rate2 = (c-wt);
						ang += ang_spd*rate2*Dirc;
						ObjMove_SetPosition(objFamilier, iniX+r*cos(ang), iniY+r*sin(ang));
						c -= wt;
						let rate2b = (rate+rate2/time);
						let s = ini_spd+(fin_spd-ini_spd)*rate2b;
						let a = ang;
						CreateShotWay(ObjMove_GetX(objFamilier)+rate2*s*cos(a), ObjMove_GetY(objFamilier)+rate2*s*sin(a),
							s, a, grap, 5, way, 45, 10);
						CallSound(sndShot2);
						w_rate = 1 + 3*rate;
						ang -= ang_spd*rate2*Dirc;
					}
					ObjMove_SetPosition(objFamilier, iniX+r*cos(ang), iniY+r*sin(ang));
					wt = wt_base / w_rate;
					ang += ang_spd*s_rate*Dirc;
					yield;
				}
				ascent(t in 1 .. 120){
					if(!CanShotBullet(objFamilier) || !eAlive){break;}
					let rate = GetCurve_a(t/120);
					let s_rate = 5 + 8*rate;
					let r = R*(1.5+0.5*rate);
					ObjMove_SetPosition(objFamilier, iniX+r*cos(ang), iniY-224*rate+r*sin(ang));
					ang += ang_spd*s_rate*Dirc;
					yield;
				}
				EraseEnemy(objFamilier);

				function Render(objImgID, scale, alpha){
					ascent(i in 0 .. length(objImgID)){
						ObjRender_SetScaleXYZ(objImgID[i], scale, scale, scale);
						ObjRender_SetAlpha(objImgID[i], alpha);
					}
				}
			}
		}
	}
// ----------------- ﾎﾛｳﾁｬﾝ ----------------- //
	task TAct_Horou
	{
		#include"./../../stage6/boss/lib_Horou.dnh"
		TAct;
		
		task TAct
		{
			// 開幕
			if (iniPracFlag)
			{
				MoveToSlowdown(objSubEnemy, CenX+128, 120, 60);
				SetAction(objSubEnemy, ACT_MOVE, 60);
			}
			else
			{
				waitObj(objSubEnemy, 90);
				MoveToSlowdown(objSubEnemy, CenX+128, 120, 60);
				SetAction(objSubEnemy, ACT_MOVE, 60);
				EffectConcentrationPoint(MaxX+64, ObjMove_GetY(objSubEnemy), objEnemy,
					eEffColor, 15, 60);
				CallSound(sndPower1);
			}

			// 前の敵が倒されたら前面に出てやわっこくなる
			TMoveFront(objSubEnemy, 2, [CenX+144, 240]);

			let count = 0;
			while(CanShotBullet(objSubEnemy))
			{
				if (FLG_ACT_ENM == iniType)
				{
					FLG_ACT_ENM = -1;
					
					TShot(count);
					CallSound(sndPower3);
					SetAction(objSubEnemy, ACT_SHOT1, 120);
					SetShootingTime(objSubEnemy, 120);
					count++;
				}
				waitObj(objSubEnemy, 1);
			}
		}
		
		task TShot(count)
		{
			waitObj(objSubEnemy, 60);
			if (!CanShotBullet(objSubEnemy)) { return; }
			alternative(count%2)
			case(0)
			{
				let speed = [3, 3, 3][DifficultEx()];
				let way = [7, 3, 7][DifficultEx()];
				let way_angle = [15, 2, 15][DifficultEx()];
				
				let ba = GetAngleToPlayer(objSubEnemy);
				
				ascent(i in 0 .. way)
				{
					if (!CanShotBullet(objSubEnemy)) { return; }
					let sa = ba + i*way_angle;
					let sx = ObjMove_GetX(objSubEnemy) + 32*cos(sa);
					let sy = ObjMove_GetY(objSubEnemy) + 32*sin(sa);
					StraightWing(sx, sy, speed, sa, BGW_WING_WHITE, 5, 15);
					if (i > 0)
					{
						let sa = ba - i*way_angle;
						let sx = ObjMove_GetX(objSubEnemy) + 32*cos(sa);
						let sy = ObjMove_GetY(objSubEnemy) + 32*sin(sa);
						StraightWing(sx, sy, speed, sa, BGW_WING_WHITE, 5, 15);
					}
					CallSound(sndBulletBreak);
					waitObj(objSubEnemy, 6);
				}
			}
			case(1)
			{
				let speed = [3, 3, 3][DifficultEx()];
				let way = [4, 3, 4][DifficultEx()];
				let way_angle = [3, 2, 3][DifficultEx()];
				
				let ba = GetAngleToPlayer(objSubEnemy);
				
				ascent(i in 0 .. way)
				{
					if (!CanShotBullet(objSubEnemy)) { return; }
					let sa = ba + i*way_angle;
					let sx = ObjMove_GetX(objSubEnemy) + 32*cos(sa);
					let sy = ObjMove_GetY(objSubEnemy) + 32*sin(sa);
					StraightWing(sx, sy, speed, sa, BGW_WING_WHITE, 5, 15);
					if (i > 0)
					{
						let sa = ba - i*way_angle;
						let sx = ObjMove_GetX(objSubEnemy) + 32*cos(sa);
						let sy = ObjMove_GetY(objSubEnemy) + 32*sin(sa);
						StraightWing(sx, sy, speed, sa, BGW_WING_WHITE, 5, 15);
					}
					CallSound(sndBulletBreak);
					waitObj(objSubEnemy, 6);
				}
			}
		}
		
		task StraightWing(x, y, speed, angle, graphic, delay, count)
		{
			let objL = LaserEffectEx02(x, y, angle, 800, EFF_WHITE, 90+33);
			wait(90);
			ascent(i in 0 .. count)
			{
				if (!CanShotBullet(objSubEnemy) || Obj_IsDeleted(objL)) { return; }
				let ss = speed * (1+i/count*2);
				let objS = My_CreateShotA1(x, y, ss, angle, graphic, delay);
				ObjRender_SetBlendType(objS, BLEND_ADD_ARGB);
				let objS2 = My_CreateShotA1(x, y, ss, angle, ADD_BGW_FUGU_WHITE, delay);
				CallSound(sndShot5);
				wait(2);
			}
		}
	}
// ----------------- みすちー ----------------- //
	task TAct_Mystia
	{
		TAct;
		
		task TAct
		{
			// 開幕は隠れてる
			SetEnemyVisible(objSubEnemy, false);

			let count = 0;
			while(CanShotBullet(objSubEnemy))
			{
				if (FLG_ACT_ENM2 == iniType)
				{
					FLG_ACT_ENM2 = -1;
					
					TShot(count);
					SetShootingTime(objSubEnemy, 240);
					count++;
				}
				waitObj(objSubEnemy, 1);
			}
		}
		
		task TShot(count)
		{
			let speed = 1.5;
			let wt = 5;
			let shot_count = 5;
			let graphic = BGW_NOTE_GREEN;
			
			let timer = 180;
			let muki = 1;
			
			ObjMove_SetPosition(objSubEnemy, CenX+280*muki, -84);
			if (ENM_FALLED_CT < 4) { return; }	// x体以上撃破で始動
			SetAction(objSubEnemy, [ACT_MOVE_L, ACT_MOVE_R][muki>0], timer);
			SetEnemyVisible(objSubEnemy, true);
			CallSound(sndPower3);
			
			let st = 0;
			ascent(t in 0 .. timer)
			{
				if (!CanShotBullet(objSubEnemy)) { return; }
				let tmp = GetCurve_a(t/timer);
				let ex = CenX + (tmp*2-1)*280*muki;
				let ey = -84 + tmp^0.5*900 - tmp*800;
				ObjMove_SetPosition(objSubEnemy, ex, ey);
				
				if (t%wt == 0 && CheckDispIN(objSubEnemy, 0))
				{
					ascent(i in 0 .. shot_count)
					{
						let ss = speed * (1+i*0.2);
						let sa = GetAngleToPlayer(objSubEnemy) + st*3*muki;
						My_CreateShotA2(ex, ey, ss*3, sa, -ss/5, ss, graphic, 15);
						My_CreateShotA2(ex, ey, ss*3, sa+180, -ss/5, ss, graphic, 15);
					}
					st++;
					CallSound(sndShot5);
				}
				waitObj(objSubEnemy, 1);
			}
			SetEnemyVisible(objSubEnemy, false);
		}
	}
// ----------------- ねべちー ----------------- //
	task TAct_Nebet
	{
		TAct;
		
		task TAct
		{
			// 開幕は隠れてる
			SetEnemyVisible(objSubEnemy, false);

			let count = 0;
			while(CanShotBullet(objSubEnemy))
			{
				if (FLG_ACT_ENM2 == iniType)
				{
					FLG_ACT_ENM2 = -1;
					
					TShot(count);
					SetShootingTime(objSubEnemy, 240);
					count++;
				}
				waitObj(objSubEnemy, 1);
			}
		}
		
		task TShot(count)
		{
			let timer = 180;
			let speed = 1.5;
			let wt = 5;
			let shot_count = 5;
			let graphic = BGW_BUTTERFLY_SKY;
			
			let muki = -1;
			ObjMove_SetPosition(objSubEnemy, CenX+280*muki, -84);
			if (ENM_FALLED_CT < 4) { return; }	// x体以上撃破で始動
			SetAction(objSubEnemy, [ACT_MOVE_L, ACT_MOVE_R][muki>0], timer);
			SetEnemyVisible(objSubEnemy, true);
			CallSound(sndPower3);
			
			let st = 0;
			ascent(t in 0 .. timer)
			{
				if (!CanShotBullet(objSubEnemy)) { return; }
				let tmp = GetCurve_a(t/timer);
				let ex = CenX + (tmp*2-1)*280*muki;
				let ey = -84 + tmp^0.5*900 - tmp*800;
				ObjMove_SetPosition(objSubEnemy, ex, ey);

				if (t%wt == 0 && CheckDispIN(objSubEnemy, 0))
				{
					ascent(i in 0 .. shot_count)
					{
						let ss = speed * (1+i*0.2);
						let sa = GetAngleToPlayer(objSubEnemy) + st*3*muki;
						My_CreateShotA2(ex, ey, ss*3, sa, -ss/5, ss, graphic, 15);
						My_CreateShotA2(ex, ey, ss*3, sa+180, -ss/5, ss, graphic, 15);
					}
					st++;
					CallSound(sndShot5);
				}
				waitObj(objSubEnemy, 1);
			}
			SetEnemyVisible(objSubEnemy, false);
		}
	}
}

//----------------------------------------
// 撃破エフェクト
//----------------------------------------
function BossFinalExplode_Ex2(objTarget, bigEffect)
{
	DisplayShake(30, 36);
	
	let bx = ObjMove_GetX(objTarget);
	let by = ObjMove_GetY(objTarget);
	let timer = 45;
	let size = 6;
	CallSound(sndBossEnd);
	DeleteShotAll_Effect(bx, by);
	ascent (i in 0 .. 15)
	{
		_BossFinalExplodeB(bx, by,
			randEffect(0,360), timer, randEffect(0,size^2)^0.5, randEffect(192,255), randEffect(192,255), 192);
		yield;
	}
}

// 直線えへくと
// 返り値のオブジェクトレーザー操作で移動出来る
function LaserEffectEx02(x, y, angle, l_length, color, timer)
{
	let objDummy = CreateStraightLaserA1(x, y, angle, l_length, 0, timer, BGW_BALL_S_RED+SHOT_COLOR[color], 0);
	// 予告線
	ObjStLaser_SetSource(objDummy, false);
	ObjShot_SetAutoDelete(objDummy, false);
	ObjShot_SetItemChange(objDummy, false);
	ObjShot_SetIntersectionEnable(objDummy, false);
	Obj_SetVisible(objDummy, false);
	LaserEffect_SingleEx02(objDummy, color, timer/4, timer);
	return(objDummy);
}
// えへくと単品
task LaserEffect_SingleEx02(objDummy, color, delay, timer)
{
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(obj, GetShotRenderPriorityI()-1);
	ObjPrim_SetTexture(obj, imgEffectBullet);
	ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
	ObjSprite2D_SetSourceRect(obj, 1+32*color, 66, 31+32*color, 94);
	ObjSprite2D_SetDestRect(obj, -1, 0, 1, 640);
	
	let t = 0;
	while(!Obj_IsDeleted(objDummy) && t < timer)
	{
		if (t < delay) { ObjRender_SetAlpha(obj, (t+1)/delay*255); }
		ObjRender_SetScaleY(obj, ObjLaser_GetLength(objDummy)/640);
		ObjRender_SetPosition(obj, ObjMove_GetX(objDummy), ObjMove_GetY(objDummy), 0);
		ObjRender_SetAngleZ(obj, ObjStLaser_GetAngle(objDummy)-90);
		t++;
		yield;
	}
	descent(i in 0 .. 15)
	{
		ObjRender_SetAlpha(obj, 255*i/15);
		yield;
	}
	Obj_Delete(obj);
}
