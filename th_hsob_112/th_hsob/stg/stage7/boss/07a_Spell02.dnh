#東方弾幕風[Single]
#ScriptVersion[3]
#Title["「七人のちいちい侍」"]
#Text["「七人のちいちい侍」"]
#Background[""]
#System["./../../../system/System.dnh"]

//---------------------------------------------------------------------

// 関数取り込み
#include"./../../../lib/lib_boss.dnh"
#include"./../../stage2/boss/lib_Chii.dnh"
#include"./../Road07_lib.dnh"

let objSword = [];

@Event {
	alternative(GetEventType())
	case(EV_REQUEST_LIFE)		{ SetScriptResult(2100);	}
	case(EV_REQUEST_TIMER)		{ SetScriptResult(24);		}
	BossEvent();
}

@Initialize {
	let SPELL_ID = 82;
	let SPELL_NAME = 9;

	// アイテム数
	if (IsRainbow())	{ bossDropItem = 300; }
	else			{ bossDropItem = 150; }

	//初期設定
	Boss_Init();

	objEnemy = CreateBoss(BOSS_ID_CHII);	//ボスセット

	//スペカデータ・セット
	SetSpellCardData(GetSpellCardID(SPELL_ID), SPELL_NAME, 
			GetCurrentScriptDirectory()~"../stage2/boss/02a_Background.dnh",
			GetBossTexture(objEnemy, I_CUTIN), 0.75, CUTMOTION_NORMAL);

	// チャプター開始
	ChapterStartBoss(GetBossID(objEnemy), SPELL_NAME, CHAPTER_SPELL);

	// 使い魔と体力連動
	CheckLinkLife_Boss(objEnemy);

	Task_Main();
}

@MainLoop {
	yield;
}
// メインタスク
task Task_Main
{
	if (GetPlayMode() == GAME_SPELL)
	{
		standBy(objEnemy, CenX, 180, 0);
	} else {
		SetEnemyVisible(objEnemy, false);
		waitObj(objEnemy, 1);
		SetEnemyVisible(objEnemy, true);
	}

	EraseChiiS02(objEnemy, 1, 15);
	BossEffect_DisableMagicCircle(objEnemy);
	SetEnemyChii01(CenX-180, 200, 0, 0, 0);
	SetEnemyChii01(CenX+180, 200, 0, 0, 1);
	SetEnemyChii01(CenX-120, 180, 0, 0, 2);
	SetEnemyChii01(CenX+120, 180, 0, 0, 3);
	SetEnemyChii01(CenX-60, 160, 0, 0, 4);
	SetEnemyChii01(CenX+60, 160, 0, 0, 5);
	SetEnemyChii01(CenX, 140, 0, 0, 6);
	waitObj(objEnemy, 61);
	
	CallSpellCard(true);	//スペカ起動
	waitObj(objEnemy, 60);
	
}
// いっぱいちぃちぃ
task SetEnemyChii01(iniX, iniY, iniSpeed, iniAngle, iniValue)
{
	let eScale = 0.85;
	
	let e_type = iniValue%2;
	let eSize = ENEMY_S;
	let eColor = EFF_BLUE;
	
	let objFamilier = MakeEnemy(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 999999, eSize);
	CheckLinkLife_Familier(objEnemy, objFamilier, 1);	// ボスと体力連動
	Boss_SetIDtoObj(objFamilier, BOSS_ID_CHII);
	Boss_SetAnimeTimer(objFamilier);
	BossAnime_Initialize(objFamilier);
	Obj_SetValue(objFamilier, "ANIME_SC", eScale);
	FamilierEffect_LinkLifeCircle(objFamilier, objEnemy, 48);
	Obj_SetRenderPriorityI(GetBossImageID(objFamilier), priorityBoss-1);	// レイヤーを下に
	TAct();
	WaitForKilledFamilier(objFamilier, 32, 16);
	ZakoFinalize(objFamilier, eColor);
	
	task TAct()
	{
		ArizeChiiS02(objFamilier, eScale, 15);
		MoveToSlowdown2(objFamilier, iniX, iniY, 60);
		SetAction(objFamilier, [ACT_MOVE_L,ACT_MOVE_R][iniX>ObjMove_GetX(objFamilier)], 60);
		waitObj(objFamilier, 90);
		SetAction(objFamilier, ACT_SHOT1, 60*60);
		TShot();
	}
	task TShot()
	{
		let iniMuki = [1, -1][ObjMove_GetX(objFamilier) < CenX];
		
		alternative(trunc(iniValue/2))
		case(0)
		{
			let speed = [1.25, 1, 1.25][DifficultEx()];
			let angle = GetAngleToPlayer(objFamilier);
			let add_a = 2.5 * iniMuki;
			let way = 6;
			let graphic = BGW_STICK_YELLOW;
			
			let shot_span = [48, 60, 48][DifficultEx()];
			let shot_count = [8, 5, 8][DifficultEx()];
			let wt = 3;
			
			let t = 0;
			let st = 0;
			while(CanShotBullet(objFamilier))
			{
				if (t%wt == 0)
				{
					if (st%shot_span < shot_count)
					{
						if (!IsTimeStopObj(objFamilier))
						{
							let ss = speed;
							ascent(i in 0 .. way)
							{
								let sa = angle + i*360/way;
								ExShot(ObjMove_GetX(objFamilier), ObjMove_GetY(objFamilier), ss, sa, graphic, 15);
							}
							CallSound(sndShot3);
						}
						angle += add_a;
					}
					st++;
				}
				t++;
				yield;
			}
		}
		case(1)
		{
			let speed = [2.5, 2, 2.5][DifficultEx()];
			let angle = GetAngleToPlayer(objFamilier);
			let way = 6;
			
			let shot_span = [24, 48, 24][DifficultEx()];
			let shot_count = [5, 4, 5][DifficultEx()];
			let wt = 3;
			
			let way_angle = 360/shot_count;
			let pos = [
				[1, 0],
				[cos(way_angle/2), sin(way_angle/2)]
				];

			let t = 0;
			let st = 0;
			while(CanShotBullet(objFamilier))
			{
				if (t%wt == 0)
				{
					if (st%shot_span == 0)
					{
						angle = GetAngleToPlayer(objFamilier);
					}
					if (st%shot_span < shot_count)
					{
						if (!IsTimeStopObj(objFamilier))
						{
							let i = st%shot_span;
							let tmp = i/(way-0.5);
							let ox = pos[0][0]*(1-tmp) + pos[1][0]*tmp;
							let oy = pos[0][1]*(1-tmp) + pos[1][1]*tmp;
							let add_a = atan2(oy,ox);
							let os = ((ox^2+oy^2)^0.5);
							let os2 = 1;
							let ss = speed;
							ascent(j in 0 .. way)
							{
								let sa = angle + j*360/way;
								TumaShot(ObjMove_GetX(objFamilier), ObjMove_GetY(objFamilier),
									6*os, sa+add_a, BGW_STICK_RED, 30, speed*os2, sa, BGW_STICK_RED, 15);
								if (add_a > 0)
								{
									TumaShot(ObjMove_GetX(objFamilier), ObjMove_GetY(objFamilier),
										6*os, sa-add_a, BGW_STICK_RED, 30, speed*os2, sa, BGW_STICK_RED, 15);
								}
							}
							CallSound(sndShot3);
						}
					}
					st++;
				}
				t++;
				yield;
			}
		}
		case(2)
		{
			let speed = [2, 1.5, 2][DifficultEx()];
			let angle = GetAngleToPlayer(objFamilier);
			
			let shot_span = [90, 120, 90][DifficultEx()];
			let shot_count = [15, 7, 15][DifficultEx()];
			let wt = 2;

			let t = 0;
			let st = 0;
			while(CanShotBullet(objFamilier))
			{
				if (t%wt == 0)
				{
					if (st%shot_span < shot_count)
					{
						if (!IsTimeStopObj(objFamilier))
						{
							let ss = speed * rand(0.5, 1);
							let sa = 90 + rand(-15,15);
							TumaShot(ObjMove_GetX(objFamilier), ObjMove_GetY(objFamilier),
								rand(1, 6^2)^0.5, 270+rand(-90,90), BGW_STICK_ORANGE, 30, ss, sa, BGW_STICK_ORANGE, 60);
							CallSound(sndShot3);
						}
					}
					st++;
				}
				t++;
				yield;
			}
		}
		case(3)
		{
			let speed = [8, 6, 8][DifficultEx()];
			let angle = 270;
			let angle_max = [180, 120, 180][DifficultEx()];
			
			let wt = 8;

			let t = 0;
			let st = 0;
			while(CanShotBullet(objFamilier))
			{
				if (t%wt == 0)
				{
					if (!IsTimeStopObj(objFamilier))
					{
						let tmp = ObjEnemyBossScene_GetInfo(objScene, INFO_TIMERF)/(30*60);
						let way_angle = angle_max + angle_max*(1-tmp);
						let way = ceil(way_angle/10);
						ascent(i in 0 .. way)
						{
							let ss = speed * min(1, 0.33+st/30);
							let sa = 270 + (i-(way-1)/2)/(way-1)*way_angle;
							ExShot(ObjMove_GetX(objFamilier), ObjMove_GetY(objFamilier)-24, ss, sa, BGW_STICK_WHITE, 10);
						}
					}
					st++;
				}
				t++;
				yield;
			}
		}
	}
	
	task ExShot(x, y, speed, angle, graphic, delay)
	{
		let obj = My_CreateShotA2(x, y, 4, angle, -4/15, 0, graphic, delay);
		ObjMove_AddPatternA2(obj, 15, NO_CHANGE, NO_CHANGE, speed/60, 0, speed);
	}
}

task ArizeChiiS02(objFamilier, scale, timer)
{
	let objImg = GetBossImageID(objFamilier);
	SetEnemyVisible(objFamilier, false);
	ascent(t in 0 .. timer)
	{
		let tmp = (t+1)/timer;
		let sc = 1 - (1-scale)*tmp;
		Obj_SetValue(objFamilier, "ANIME_SC", sc);
		ObjRender_SetAlpha(objImg, tmp*255);
		wait(1);
	}
	waitObj(objFamilier, 60);
	SetEnemyVisible(objFamilier, true);
}
task EraseChiiS02(objFamilier, scale, timer)
{
	SetEnemyVisible(objFamilier, false);

	let objImg = GetBossImageID(objFamilier);
	descent(t in 0 .. timer)
	{
		let tmp = (t+1)/timer;
		let sc = scale*tmp;
		Obj_SetValue(objFamilier, "ANIME_SC", sc);
		ObjRender_SetAlpha(objImg, tmp*255);
		wait(1);
	}
	Obj_SetValue(objFamilier, "ANIME_SC", 0);
	if (objFamilier != objEnemy) { EraseEnemy(objFamilier); }
}
