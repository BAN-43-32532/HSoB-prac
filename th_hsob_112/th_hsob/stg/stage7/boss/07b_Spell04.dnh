#東方弾幕風[Single]
#ScriptVersion[3]
#Title["スペカ4"]
#Text["スペカ4"]
#Background[""]
#System["./../../../system/System.dnh"]

//---------------------------------------------------------------------

// 関数取り込み
#include"./../../../lib/lib_boss.dnh"
#include"./lib_Mumei.dnh"

let colorArray = [
	[0, 255, 127, 127],
	[1, 127, 255, 127],
	[2, 127, 127, 255],
	[3, 255, 255, 127],
	[4, 255, 127, 255],
	[5, 127, 255, 255],
	[6, 255, 191, 0],
	[7, 255, 255, 255]
];

let GlassArray = [];

@Event {
	alternative(GetEventType())
	case(EV_REQUEST_LIFE)		{ SetScriptResult(400);	}
	case(EV_REQUEST_TIMER)		{ SetScriptResult(90);		}
	BossEvent();
}

@Initialize {
	let SPELL_ID = 94;
	let SPELL_NAME = 3;
	
	// アイテム数
	if (IsRainbow())	{ bossDropItem = 400; }
	else			{ bossDropItem = 150; }

	//ダメージ透過率
	dIni_Shot = 10;
	//防御率再計算
	SetMumeiDefence2();

	//初期設定
	Boss_Init();

	InitMumei();
	// 終了後えへくと自壊
	MumeiEffect_SetDeleteMotion(true);

	objEnemy = CreateBoss(BOSS_ID_MUMEI);	//ボスセット

	//スペカデータ・セット
	SetSpellCardData(GetSpellCardID(SPELL_ID), SPELL_NAME, 
			GetCurrentScriptDirectory()~"07b_Background.dnh",
			GetBossTexture(objEnemy, I_CUTIN), 0.65, CUTMOTION_NORMAL);

	// チャプター開始
	ChapterStartBoss(GetBossID(objEnemy), SPELL_NAME, CHAPTER_SPELL);

	// 使い魔と体力連動
	CheckLinkLife_Boss(objEnemy);
	
	// バーリアーｗｗｗｗｗ
	TBombBarrierEx(objEnemy);

	Task_Main();
}

@MainLoop {
	yield;
}

// メインタスク
task Task_Main
{
	standBy(objEnemy, CenX, CenY-80, 120);
	MumeiEffect_SetDeleteMotion(true);	// 背負いもの削除モーション付き
	SetMumeiEffect(objEnemy, false);
	SetMumeiEffect_v2(objEnemy, false, 60);
	
	waitObj(objEnemy, 60);

	CallSpellCard(true);	//スペカ起動
	
	let wt_add = [0, 60, 0][DifficultEx()];
	let D = 1;
	let type = 0;
	while(eAlive)
	{
		if(type%2 == 0){
			if (!eAlive) { return; }
			BossCharge(objEnemy);
			SetAction(objEnemy, ACT_SHOT2, 240);
			let leng = 40;
			let ang = GetAngleToPlayer(objEnemy);
			let way = [8, 6, 8][DifficultEx()];
			TStainedGlassSet(D, way, ang, leng, 360/way);
			waitObj(objEnemy, 300);
			D = -D;
		}else{
			let leng = 40;
			let way = [8, 6, 8][DifficultEx()];
			let move_r = [75, 32, 75][DifficultEx()];
			ascent(i in 0 .. 3){
				let ang = GetAngleToPlayer(objEnemy);
				if (!eAlive) { return; }
				TStainedGlassSet2(D, way, ang, leng, 360/way);
				SetAction(objEnemy, ACT_SHOT3, 90);
				waitObj(objEnemy, 90);
				if (!eAlive) { return; }
				if(i<2){
					let a = GetAngleToPlayer(objEnemy);
					SetMovePositionBrakingEx(objEnemy, ObjMove_GetX(objEnemy)+move_r*cos(a), ObjMove_GetY(objEnemy)+move_r*sin(a), 60, MOVE_BRAKING01);
				}else{
					SetMovePositionBrakingEx(objEnemy, CenX, CenY-80, 120, MOVE_BRAKING01);
				}
				SetAction(objEnemy, ACT_MOVE, 120);
				waitObj(objEnemy, 30);
			}
			waitObj(objEnemy, 120);
		}
		if (!eAlive) { return; }
		CallSound(sndBoon);
		SetAction(objEnemy, ACT_SHOT1, 180);
		TGlassBreak(D);
		if (!eAlive) { return; }
		CallSoundDelay(sndPower1, 60, objEnemy);
		if (type%2 == 0) { CallSoundDelay(sndPower3, 420+wt_add, objEnemy); }
		waitObj(objEnemy, 180);
		type++;
		waitObj(objEnemy, 300+wt_add);
	}
}

task TGlassBreak(D){
	let tuboR = 40;
	ascent(iA in 0 .. length(GlassArray)){
		Laser(GlassArray[iA]);
	}
	waitObj(objEnemy, 90);
	TuboLaser(tuboR, 90, 6*D);

	task Laser(objS){
		let color = Obj_GetValueD(objS, "COLOR", 7);
		let ang1 = GetGapAngle_Obj(objEnemy, objS);
		let leng1 = GetDistance_Obj(objEnemy, objS);
		let r = 40;
		let rAdd = 2;
		if(leng1 > r){
			let objL = My_CreateStraightLaserA1Ex(ObjMove_GetX(objEnemy)+tuboR*cos(ang1), ObjMove_GetY(objEnemy)+tuboR*sin(ang1), ang1, 0, 20, 30, BGW_BEAM_WHITE, 999999, [false,false]);
			while(r < GetDistance_Obj(objEnemy, objS)){
				r += rAdd;
				rAdd += 3.0/80;
				ang1 = GetGapAngle_Obj(objEnemy, objS);
				ObjLaser_SetLength(objL, r-tuboR);
				ObjMove_SetPosition(objL, ObjMove_GetX(objEnemy)+tuboR*cos(ang1), ObjMove_GetY(objEnemy)+tuboR*sin(ang1));
				ObjStLaser_SetAngle(objL, ang1);
				wait(1);
			}
			r -= GetDistance_Obj(objEnemy, objS)-tuboR;
			Laser1Manage(objL);
		}else{
			r = 0;
		}
		let ang2 = GetAngleToPlayer(objS);
		Obj_SetValue(objS, "ANG2", ang2);
		let objL2 = My_CreateStraightLaserA1Ex(ObjMove_GetX(objS), ObjMove_GetY(objS), ang2, r, 20, 30, BGW_BEAM_RED + color, 999999, [true,false]);
		while(!Obj_IsDeleted(objS)){
			r += rAdd;
			rAdd += 3.0/80;
			ObjLaser_SetLength(objL2, r);
			wait(1);
		}
		Obj_Delete(objL2);

		task Laser1Manage(objL){
			while(!Obj_IsDeleted(objS)){
				if(Obj_IsDeleted(objL)){return;}
				ObjLaser_SetLength(objL, GetDistance_Obj(objEnemy, objS)-40);
				ObjStLaser_SetAngle(objL, GetGapAngle_Obj(objEnemy, objS));
				wait(1);
			}
			Obj_Delete(objL);
		}
	}

	//　2点間の距離を取得
	function GetDistance_Obj( obj1, obj2 ) { return ( (ObjMove_GetY(obj2)-ObjMove_GetY(obj1))^2 + (ObjMove_GetX(obj2)-ObjMove_GetX(obj1))^2 ) ^ 0.5; }
	//　pos1 から見た pos2 への角度を取得
	function GetGapAngle_Obj( obj1, obj2 ) { return atan2( ObjMove_GetY(obj2)-ObjMove_GetY(obj1), ObjMove_GetX(obj2)-ObjMove_GetX(obj1) ); }

}

task TStainedGlassSet(D, way, ang, leng, arc){
	if (!eAlive) { return; }
	TStainedGlass(120, 180, D, way, leng, ang, leng*0.8, arc, 0, 0.75);
	waitObj(objEnemy, 30);
	
	if (!eAlive) { return; }
	let leng2 = leng*2*cos(arc/2);
	TStainedGlass(105, 150, -D, way, leng2, ang+arc/2, (leng2-leng/cos(arc/2))*0.8, 2*arc, 0, 1.5);
	waitObj(objEnemy, 30);
	
	if (!eAlive) { return; }
	let leng3 = leng*3;
	TStainedGlass(90, 120, D, way, leng*3, ang, leng*0.8, arc, 0, 2.25);
	waitObj(objEnemy, 15);
	
	if (!eAlive) { return; }
	let leng4 = leng*(((sin(arc))^2+(2+cos(arc))^2)^0.5);
	let a4 = atan2(sin(arc), 2+cos(arc));
	TStainedGlass(85, 105, -D, way, leng4, ang+a4*D, leng*0.8, arc, (arc-a4)*D, 1.95);
	waitObj(objEnemy, 15);
	
	if (!eAlive) { return; }
	TStainedGlass(80, 90, D, way, leng4, ang-a4*D, leng*0.8, arc, -(arc-a4)*D, 1.95);
}

task TStainedGlassSet2(D, way, ang, leng, arc){
	if (!eAlive) { return; }
	TStainedGlass(75, 90, D, way, leng, ang, leng*0.8, arc, 0, 0.75);
	waitObj(objEnemy, 15);
	
	if (!eAlive) { return; }
	let leng2 = leng*2*cos(arc/2);
	TStainedGlass(60, 75, -D, way, leng2, ang+arc/2, (leng2-leng/cos(arc/2))*0.8, 2*arc, 0, 1.5);
}

task TStainedGlass(wt, wt2, D, way, rMax, ang, leng, arc, angPlus, bSpd){
	if (!eAlive) { return; }
//	let l = length(color);
	CallSound(sndBoon);
	ascent(iW in 0 .. way){
		let a = 360*iW/way;
		let cl = 7;
		let a2 = (ang+a+angPlus+101.25)%180;
		if(		a2 <  22.5){	cl = 0;	}
		else if(a2 <  45.0){	cl = 4;	}
		else if(a2 <  67.5){	cl = 1;	}
		else if(a2 <  90.0){	cl = 5;	}
		else if(a2 < 112.5){	cl = 2;	}
		else if(a2 < 135.0){	cl = 6;	}
		else if(a2 < 157.5){	cl = 3;	}
		else if(a2 < 180.0){	cl = 7;	}
		StainedGlass(wt, wt2, D, rMax, ang + a, leng, arc, angPlus, cl, bSpd);
	}
}
task StainedGlass(wt, wt2, D, rMax, ang, leng, arc, angPlus, color, bSpd){
	let clNum = colorArray[color][0];
	let RGB = colorArray[color][1..4];
	let objS = My_CreateShotA1(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 0, ang + angPlus, BGW_CHRYSTAL_M_RED + clNum, 0);
	let bx = ObjMove_GetX(objS);
	let by = ObjMove_GetY(objS);

	ObjShot_SetIntersectionEnable(objS, false);
	ObjShot_SetAutoDelete(objS, false);
	ObjShot_SetSpellResist(objS, true);
	Obj_SetVisible(objS, false);
	Obj_SetValue(objS, "RATE", 0);
	Obj_SetValue(objS, "COLOR", clNum);
	GlassArray = GlassArray ~ [objS];
	Manage(objS);
	Laser(objS, arc/2, 1, clNum, RGB, 0);
	Laser(objS, -arc/2, 1, clNum, RGB, 1);
	Laser(objS, 180+arc/2, -1, clNum, RGB, 0);
	Laser(objS, 180-arc/2, -1, clNum, RGB, 1);
	
	ascent(t in 1 .. wt+1){
		let rate = sin(90*t/wt);
		Obj_SetValue(objS, "RATE", rate);
		let r = rMax*rate;
		let a = ang + 180*(rate-1)*D;
		ObjMove_SetPosition(objS, ObjMove_GetX(objEnemy) + r*cos(a), ObjMove_GetY(objEnemy) + r*sin(a));
		ObjMove_SetAngle(objS, a + angPlus);
		wait(1);
	}
	loop(wt2-wt){
		ObjMove_SetPosition(objS, ObjMove_GetX(objEnemy) + rMax*cos(ang), ObjMove_GetY(objEnemy) + rMax*sin(ang));
		ObjMove_SetAngle(objS, ang + angPlus);
		wait(1);
	}
	if(Obj_IsDeleted(objS)){return;}
	CallSound(sndShot4);
	ObjMove_AddPatternA2(objS, 0, bSpd, NO_CHANGE, -bSpd/200, 0, 0);

	task Manage(objS){
		while(!Obj_IsDeleted(objS)){
			bx = ObjMove_GetX(objS);
			by = ObjMove_GetY(objS);
			yield;
		}
		ascent(i in 0 .. length(GlassArray)){
			if(GlassArray[i] == objS){
				GlassArray = erase(GlassArray, i);
				break;
			}
		}
	}

	task Laser(objS, angPlus, D, color, cArray, type){
		type = type%2;
		let objL = My_CreateSimpleLaserA1(ObjMove_GetX(objS), ObjMove_GetY(objS), ObjMove_GetAngle(objS) + angPlus, 0, 8, 999999, BGW_BEAM_RED + color, 0);
		let objLEfc = CreateDelayEffect(objL);
		if(type == 0){		Efc(objL, objLEfc);	}
		else{				Efc2(objL, objLEfc);	}
		ObjShot_SetAutoDelete(objL, false);
		let lRate = 1/absolute(cos(angPlus));
		while(!Obj_IsDeleted(objS) && !Obj_GetValueD(objS, "BREAK", false)){
			ObjRender_SetColor(objL, cArray[0], cArray[1], cArray[2]);
			let rate = Obj_GetValueD(objS, "RATE", 0);
			let a = ObjMove_GetAngle(objS);
			ObjMove_SetPosition(objL, ObjMove_GetX(objS) + leng*rate*cos(a+90+90*D), ObjMove_GetY(objS) + leng*rate*sin(a+90+90*D));
			ObjStLaser_SetAngle(objL, a+angPlus);
			ObjLaser_SetLength(objL, leng * lRate * rate);
			wait(1);
		}
		if(Obj_GetValueD(objS, "BREAK", false)){
			let L = ObjLaser_GetLength(objL);
			let A = ObjStLaser_GetAngle(objL);
			let way = [4, 4, 4][DifficultEx()];
			let real_way = [1, 2, 1][DifficultEx()];
			let base_spd = [1, 0.75, 1][DifficultEx()];
			ascent(i in type .. way+type){
				let rate = i/way;
				let x = ObjMove_GetX(objL) + L*rate*cos(A);
				let y = ObjMove_GetY(objL) + L*rate*sin(A);
				let spd = base_spd*(((y-by)^2+(x-bx)^2)^0.5)/leng;
				let ang = atan2(y-by, x-bx)+180;
				StainedGlass_Shot(x, y, spd, ang, color, 15, (i%real_way)==0);
				/*
				let objS2 = My_CreateShotA1(x, y,  spd/20, ang, BGW_CHRYSTAL_S_RED + color, 10);
				ObjMove_AddPatternA2(objS2, 180, spd/20, NO_CHANGE, (spd*19/20)/120, 0, spd);
				ObjMove_AddPatternA2(objS2, 300, spd, NO_CHANGE, spd/600, 0, 4*spd);
				*/
			}
//			if(!Obj_IsDeleted(objS)){Obj_Delete(objS);}
		}
		Obj_Delete(objL);
		
		task StainedGlass_Shot(x, y, spd, ang, color, delay, shot_flg)
		{
			if (!CheckDispINEx(x, y, 8)) { return; }
			let objS2 = My_CreateShotA1(x, y,  spd/20, ang, BGW_CHRYSTAL_S_RED + color, delay);
			ObjMove_AddPatternA2(objS2, 180, spd/20, NO_CHANGE, (spd*19/20)/120, 0, spd);
			ObjMove_AddPatternA2(objS2, 300, spd, NO_CHANGE, spd/600, 0, 4*spd);
			let objS2_Eff = My_CreateShotA1(x, y,  spd/20, ang, ADD_BGW_CHRYSTAL_S_RED + color, 0);
			ObjMove_AddPatternA2(objS2_Eff, 180, spd/20, NO_CHANGE, (spd*19/20)/120, 0, spd);
			ObjMove_AddPatternA2(objS2_Eff, 300, spd, NO_CHANGE, spd/600, 0, 4*spd);
			Obj_SetRenderPriorityI(objS2_Eff, GetShotRenderPriorityI-1);
			ObjRender_SetColor(objS2_Eff, colorArray[color][1]-128, colorArray[color][2]-128, colorArray[color][3]-128);
			if (!shot_flg)
			{
				wait(120);
				ObjShot_FadeDelete(objS2);
				ObjShot_FadeDelete(objS2_Eff);
			}
			
			/*
			let t = 0;
			while(!Obj_IsDeleted(objS2))
			{
				if (t < delay)
				{
					let tmp = GetCurve_d((t+1)/delay);
					let tmp_s = tmp*2;
					ObjRender_SetScaleXYZ(objS2_Eff, tmp_s, tmp_s, tmp_s);
					ObjRender_SetAlpha(objS2_Eff, tmp*128);
				}
				t++;
				yield;
			}
			Obj_Delete(objS2_Eff);
			*/
			ascent(t in 0 .. delay)
			{
				let tmp = GetCurve_d((t+1)/delay);
				let tmp_s = tmp*2;
				ObjRender_SetScaleXYZ(objS2_Eff, tmp_s, tmp_s, tmp_s);
				ObjRender_SetAlpha(objS2_Eff, tmp*128);
				t++;
				yield;
			}
		}

		task Efc(objL, objLEfc){
			let max_scale = 8/20;
			let scale = 0;
			let t = 0;
			while(!Obj_IsDeleted(objL)){
				// 根本
				scale = (1 + (t%4)/8) * max_scale;
				ObjRender_SetScaleXYZ(objLEfc, scale, scale, 1);
				ObjRender_SetAngleZ(objLEfc, t*166);
				ObjRender_SetPosition(objLEfc, ObjMove_GetX(objL), ObjMove_GetY(objL), 0);
				t++;
				wait(1);
			}
			Obj_Delete(objLEfc);

		}
		task Efc2(objL, objLEfc){
			let max_scale = 8/20;
			let scale = 0;
			let t = 0;
			while(!Obj_IsDeleted(objL)){
				// 根本
				scale = (1 + (t%4)/8) * max_scale;
				ObjRender_SetScaleXYZ(objLEfc, scale, scale, 1);
				ObjRender_SetAngleZ(objLEfc, t*166);
				let L = ObjLaser_GetLength(objL);
				let A = ObjStLaser_GetAngle(objL);
				ObjRender_SetPosition(objLEfc, ObjMove_GetX(objL) + L*cos(A), ObjMove_GetY(objL) + L*sin(A), 0);
				t++;
				wait(1);
			}
			Obj_Delete(objLEfc);

		}
	}
}

task TuboLaser(r, ini_ang, aAdd)
{
	let D = absolute(aAdd)/aAdd;
		
	let objS = PorcelainEnemy(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), PORCELAIN_POT, 8, 60, 100000, 0.8);
	let objImgAll = Obj_GetValueD(objS, "IMAGE_ID_ALL", []);
	ascent(i in 0 .. length(objImgAll)) { Obj_SetRenderPriorityI(objImgAll[i], GetShotRenderPriorityI()+1); }
	let arc = aAdd/2*(60-30);
	let ang = ini_ang;
	ini_ang += arc;
	ascent(t in 1 .. 61)
	{
		if (Obj_IsDeleted(objS)) { return; }
		let tmp = GetCurve_d(t/60);
		ini_ang -= aAdd*(1-t/60);
		let a = ini_ang;
		ObjMove_SetPosition(objS, ObjMove_GetX(objEnemy)+r*tmp*cos(a), ObjMove_GetY(objEnemy)+r*tmp*sin(a));
		ObjMove_SetAngle(objS, a);
		wait(1);
	}
	ascent(t in 1 .. 31)
	{
		if (Obj_IsDeleted(objS)) { return; }
		ini_ang += aAdd*t/30;
		let a = ini_ang;
		ObjMove_SetPosition(objS, ObjMove_GetX(objEnemy)+r*cos(a), ObjMove_GetY(objEnemy)+r*sin(a));
		ObjMove_SetAngle(objS, a);
		wait(1);
	}
	ascent(iA in 0 .. length(GlassArray)){
		let objS = GlassArray[iA];
		let a = atan2(ObjMove_GetY(objS)-ObjMove_GetY(objEnemy), ObjMove_GetX(objS)-ObjMove_GetX(objEnemy));
		while((a - ini_ang)*D < 0){
			a += 360*D;
		}
		Obj_SetValue(objS, "ANG", a);
	}
	
	let a2 = 0;
	while(a2 <= 360){
		a2 += aAdd*D;
		ang += aAdd;
		ObjMove_SetPosition(objS, ObjMove_GetX(objEnemy)+r*cos(ang), ObjMove_GetY(objEnemy)+r*sin(ang));
		ObjMove_SetAngle(objS, ang);
		descent(i in 0 .. length(GlassArray)){
			if((Obj_GetValueD(GlassArray[i], "ANG", 90)-ang)*D <= 0){
				TuboLaserA(objS, GlassArray[i], 30);
				GlassArray = erase(GlassArray, i);
//				Obj_Delete(GlassArray[i]);
			}
		}
		wait(1);
	}
	ascent(t in 1 .. 91)
	{
		if (Obj_IsDeleted(objS)) { return; }
		let tmp = GetCurve_d(1-t/90);
		ang += aAdd*(1-t/90);
		let a = ini_ang;
		ObjMove_SetPosition(objS, ObjMove_GetX(objEnemy)+r*tmp*cos(ang), ObjMove_GetY(objEnemy)+r*tmp*sin(ang));
		ObjMove_SetAngle(objS, ang);
		wait(1);
	}
	Obj_Delete(objS);
	if (eAlive) { CallSound(sndFreeze); }

	task TuboLaserA(objE, objS, spd){
		CallSound(sndLaser1);
		let ang1 = GetGapAngle_Obj(objEnemy, objS);
		let leng1 = GetDistance_Obj(objEnemy, objS);
		let color = Obj_GetValueD(objS, "COLOR", 7);

		if(leng1 > r){
			let objL = My_CreateSimpleLaserA1(ObjMove_GetX(objE), ObjMove_GetY(objE), ang1, 0, 12, 999999, BGW_BEAM_WHITE, 0);
			let l = -30;
			Manage();
			while(leng1-r > l){
				ObjLaser_SetLength(objL, l);
				wait(1);
			}
			ObjLaser_SetLength(objL, leng1-r);
			Obj_SetValue(objS, "BREAK", true);

			task Manage(){
				while(l < spd*45){
					l += spd;
					wait(1);
				}
				ObjLaser_SetLength(objL, ObjLaser_GetLength(objL)-spd);
				while(ObjLaser_GetLength(objL) > 0){
					ObjLaser_SetLength(objL, ObjLaser_GetLength(objL)-spd);
					ObjMove_SetPosition(objL, ObjMove_GetX(objL) + spd*cos(ang1), ObjMove_GetY(objL) + spd*sin(ang1));
					wait(1);
				}
				Obj_Delete(objL);
			}
		}
		CallSound(sndShot4);
		let ang2 = Obj_GetValueD(objS, "ANG2", 90);
		let objL2 = My_CreateLooseLaserA1(ObjMove_GetX(objS), ObjMove_GetY(objS), spd, ang2, spd*45, 12, BGW_BEAM_RED+color, 0);
		yield;
		Obj_Delete(objS);
	}
	//　2点間の距離を取得
	function GetDistance_Obj( obj1, obj2 ) { return ( (ObjMove_GetY(obj2)-ObjMove_GetY(obj1))^2 + (ObjMove_GetX(obj2)-ObjMove_GetX(obj1))^2 ) ^ 0.5; }
	//　pos1 から見た pos2 への角度を取得
	function GetGapAngle_Obj( obj1, obj2 ) { return atan2( ObjMove_GetY(obj2)-ObjMove_GetY(obj1), ObjMove_GetX(obj2)-ObjMove_GetX(obj1) ); }
}
