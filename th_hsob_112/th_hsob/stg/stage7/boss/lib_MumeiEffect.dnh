//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
//　使用テクスチャ
let MUMEI_EFF_IMG = [
	GetCurrentScriptDirectory() ~ "./../../../img/world/stg7img/enm07a_eff.png",
	GetCurrentScriptDirectory() ~ "./../../../img/world/stg7img/enm07b_eff.png",
	GetCurrentScriptDirectory() ~ "./../../../img/effect/aura01d.png",
	GetCurrentScriptDirectory() ~ "./../../../img/world/stg7img/slash01.png",
];

#include "./lib_MumeiEffect2.dnh"

//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
//　核と文様
task SetMumeiEffect(arg_obj, arg_is_flame)
{
	let flgContinue = MumeiEffect_GetContinue();	// えへくと継続フラグ
	let flgDelMotion = MumeiEffect_GetDeleteMotion();	// 削除モーション

	// --- 追加 --- フラグチェックマン（えへくとカット用にこっちへ）
	if (flgContinue > 0) {
	} else {
		MumeiEffect_SetContinue(1);
	}
	// --- 追加 ---
	if (IsDrawEffect() < 2) { return; }

	let LAYER	= 31;
	let SCALES	= 0.8;
	let obj = [
		Stg7CreateSpriteObj(LAYER),
		Stg7CreateSpriteObj(LAYER),
		Stg7CreateSpriteObj(LAYER),
		Stg7CreateSpriteObj(LAYER),
	];
	let objEmv = [
		Stg7CreateSpriteObj(LAYER),
		Stg7CreateSpriteObj(LAYER),
		Stg7CreateSpriteObj(LAYER),
		Stg7CreateSpriteObj(LAYER),
	];
	let frame = 0;
	let spin = 0;
	let move1 = 0;
	let moveA = 0;
	
	ascent( let i in 0..length(obj) ){
		ObjPrim_SetPrimitiveType(obj[i], PRIMITIVE_TRIANGLESTRIP);
		ObjPrim_SetVertexCount(obj[i], 4);
		ObjPrim_SetVertexPosition(obj[i], 0, -128, -128, 0);
		ObjPrim_SetVertexPosition(obj[i], 1, -128, 128, 0);
		ObjPrim_SetVertexPosition(obj[i], 2, 128, -128, 0);
		ObjPrim_SetVertexPosition(obj[i], 3, 128, 128, 0);
		ObjPrim_SetVertexUVT(obj[i], 0, 0 + i*256, 0);
		ObjPrim_SetVertexUVT(obj[i], 1, 0 + i*256, 256);
		ObjPrim_SetVertexUVT(obj[i], 2, 256 + i*256, 0);
		ObjPrim_SetVertexUVT(obj[i], 3, 256 + i*256, 256);
	}
	
	SetMumeiEffect_Emblem01(arg_obj, objEmv[0], LAYER, [192,128,255], flgContinue, flgDelMotion);
	SetMumeiEffect_Emblem02(arg_obj, [objEmv[1], objEmv[2]], LAYER, [192,128,255], flgContinue, flgDelMotion);
	SetMumeiEffect_Emblem03(arg_obj, objEmv[3], LAYER - 1, [192,128,255], flgContinue, flgDelMotion);
	//　アステロイド
	SetMumeiEffect_Astroid(arg_obj, 24, LAYER+10, [224,192,255], arg_is_flame, flgContinue);
	
	//　arg_is_flame = trueで纏炎化
	if( arg_is_flame ){
		//　炎集中エフェクト
		MumeiFlameCharge(arg_obj, LAYER, 30, 60);
		//　火の粉
		SetMumeiEffect_SparkAstroid(arg_obj, 24, LAYER+10, [255,128,64]);
		//　カラーリング変更
		SetMumeiEffect_Flame(objEmv, [192,128,255], 120, flgContinue);
	}
	
	// --- 追加 --- フラグチェックマン
	if (flgContinue > 0) {
		moveA = 90;
	} else {
		CallSound(sndBoon);
//		MumeiEffect_SetContinue(1);
	}
	// --- 追加 ---
	
	
	while( !Obj_IsDeleted(arg_obj) ){
		let gpos = [ ObjMove_GetX(arg_obj), ObjMove_GetY(arg_obj) ];
		move1 = 1 * sin( moveA );
		
		frame = MumeiEffect_GetTimer();
		spin = trunc(frame/4)*4;

		ascent( i in 0..length(obj) ){
			let sca = SCALES + 0.05 * sin( i*90 + spin*2 );
			ObjRender_SetPosition(obj[i], gpos[0], gpos[1], 0);
			ObjRender_SetScaleXYZ(obj[i], move1*sca, move1*sca, 0);
		}
		ObjRender_SetAngleZ(obj[0], -spin/2);
		ObjRender_SetAngleZ(obj[1], spin/4);
		ObjRender_SetAngleZ(obj[2], spin/8);
		ObjRender_SetAngleZ(obj[3], -spin/16);
		
		//　パーティクル（負荷次第で節約
		if( frame%8 == 1 ){
			let d = randEffect(0, 96) * SCALES;
			let r = randEffect(0, 180);
			let pos = [ gpos[0]+d*cos(r), gpos[1]+d*sin(r) ];
			MumeiParticle(pos, 90+randEffect(-16,16), randEffect(0.4,1), randEffect(0.2,0.6), [128,128,128], LAYER, randEffect(30,60));
		}
		
		if( move1 < 1 ){ moveA += 1; }
//		if( frame%4 == 0 ){ spin += 4; }
//		frame++;
		
		yield;
	}
	if (flgDelMotion)
	{
		while( move1 > 0 ){
			move1 = 1 * sin( moveA );
			
			//frame = MumeiEffect_GetTimer();
			spin = trunc(frame/4)*4;

			ascent( i in 0..length(obj) ){
				let sca = SCALES + 0.05 * sin( i*90 + spin*2 );
				ObjRender_SetScaleXYZ(obj[i], move1*sca, move1*sca, 0);
			}
			ObjRender_SetAngleZ(obj[0], -spin/2);
			ObjRender_SetAngleZ(obj[1], spin/4);
			ObjRender_SetAngleZ(obj[2], spin/8);
			ObjRender_SetAngleZ(obj[3], -spin/16);
			
			moveA -= 1;
			frame++;
			
			yield;
		}
	}
	else
	{
		yield;	// 次のえへくとまで待ち
	}
	ascent( i in 0..length(obj) ){
		Obj_Delete( obj[i] );
	}
}


//　ｳﾈｳﾈ展開
task SetMumeiEffect_v2(arg_obj, arg_is_flame, arg_wait)
{
	let flgContinue = MumeiEffect_GetContinue();	// えへくと継続フラグ
	if (flgContinue > 1) { arg_wait = 0; }

	// --- 追加 --- フラグチェックマン
	if (flgContinue > 1) {
	} else {
		MumeiEffect_SetContinue(2);
	}
	// --- 追加 ---

	if (IsDrawEffect() < 2) { return; }

	let LAYER = 31;
	let LPMAX = 9;		//　この辺も不可次第で（ry
	
	loop(arg_wait){ yield; }
	ascent(i in 0..LPMAX){
		SetMumeiEffect_Tail(arg_obj, [32, 16], 270 + i * (360 / LPMAX), 8, LAYER - 1, arg_is_flame, flgContinue);
	}

	// --- 追加 --- フラグチェックマン
	if (flgContinue > 1) {
	} else {
		CallSound(sndBoon);
//		MumeiEffect_SetContinue(2);
	}
	// --- 追加 ---
	
	//　纏炎化時のみ
	let OFFSET = 16;
	let frame = 0;
	while( arg_is_flame && !Obj_IsDeleted(arg_obj) ){
		if( frame%4 == 0 ){
			MumeiParticleRadiationFlame(arg_obj, LAYER - 2, 0.6, 0 - OFFSET + randEffect(-1,1)*16, 3, [64,255,64,32], 30);
			MumeiParticleRadiationFlame(arg_obj, LAYER - 2, 0.6, 180 + OFFSET + randEffect(-1,1)*16, 3, [64,255,64,32], 30);
		}
		frame++;
		yield;
	}
}


//　纏炎化
task SetMumeiEffect_Flame(arg_obj_ary, arg_rgb_ary, arg_wait, flgContinue){
	let RGB = [255, 128, 64];
	if (flgContinue > 0)
	{
		loop(2)
		{
			ascent(let i in 0..length(arg_obj_ary)){
				ObjRender_SetColor(arg_obj_ary[i], RGB[0], RGB[1], RGB[2]);
			}
			yield;
		}
		return;
	}
	
	loop(arg_wait){ yield; }
	let move1 = 0;
	let moveA = 0;
	//　一度白色へ
	while( move1 < 1 ){
		ascent(let i in 0..length(arg_obj_ary)){
			move1 = 1 * sin(moveA);
			let srgb = [
				arg_rgb_ary[0] + move1 * (255 - arg_rgb_ary[0]),
				arg_rgb_ary[1] + move1 * (255 - arg_rgb_ary[1]),
				arg_rgb_ary[2] + move1 * (255 - arg_rgb_ary[2]),
			];
			ObjRender_SetColor(arg_obj_ary[i], srgb[0], srgb[1], srgb[2]);
		}
		moveA += 15;
		yield;
	}
	move1 = 0;
	moveA = 0;
	//　RGBの色へ
	while( move1 < 1 ){
		ascent(let i in 0..length(arg_obj_ary)){
			move1 = 1 * sin(moveA);
			let srgb = [
				255 - move1 * (255 - RGB[0]),
				255 - move1 * (255 - RGB[1]),
				255 - move1 * (255 - RGB[2]),
			];
			ObjRender_SetColor(arg_obj_ary[i], srgb[0], srgb[1], srgb[2]);
		}
		moveA += 5;
		yield;
	}
}

//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
//　ケトル買い換えたい
task SetMumeiEffect_Emblem01(arg_obj, arg_objc, arg_lay, arg_rgb, flgContinue, flgDelMotion){
	let SCALE = 0.8;
	let ALPHA = 255;
	ObjPrim_SetPrimitiveType(arg_objc, PRIMITIVE_TRIANGLESTRIP);
	ObjPrim_SetVertexCount(arg_objc, 4);
	ObjPrim_SetVertexPosition(arg_objc, 0, -128, -128, 0);
	ObjPrim_SetVertexPosition(arg_objc, 1, -128, 128, 0);
	ObjPrim_SetVertexPosition(arg_objc, 2, 128, -128, 0);
	ObjPrim_SetVertexPosition(arg_objc, 3, 128, 128, 0);
	ObjPrim_SetVertexUVT(arg_objc, 0, 256, 256);
	ObjPrim_SetVertexUVT(arg_objc, 1, 256, 512);
	ObjPrim_SetVertexUVT(arg_objc, 2, 512, 256);
	ObjPrim_SetVertexUVT(arg_objc, 3, 512, 512);
	ObjRender_SetColor(arg_objc, arg_rgb[0], arg_rgb[1], arg_rgb[2]);
	ObjRender_SetBlendType(arg_objc, BLEND_ADD_ARGB);
	
	let move1 = 0;
	let moveA = 0;
	if (flgContinue > 0) { moveA = 90; }
	
	while( !Obj_IsDeleted(arg_obj) ){
		move1 = 1 * sin( moveA );
		let pos = [
			ObjRender_GetX(arg_obj) + 64 * cos(270),
			ObjRender_GetY(arg_obj) + 64 * sin(270),
		];
		ObjRender_SetPosition(arg_objc, pos[0], pos[1], 0);
		ObjRender_SetScaleXYZ(arg_objc, move1 * SCALE, SCALE*2 - move1*SCALE, 0);
		ObjRender_SetAlpha(arg_objc, move1 * ALPHA);
		if( move1 < 1 ){ moveA += 2; }
		yield;
	}
	if (flgDelMotion)
	{
		while( move1 > 0 ){
			move1 = 1 * sin( moveA );
			ObjRender_SetScaleXYZ(arg_objc, move1 * SCALE, SCALE*2 - move1*SCALE, 0);
			ObjRender_SetAlpha(arg_objc, move1 * ALPHA);
			moveA -= 2;
			yield;
		}
	}
	else
	{
		yield;	// 次のえへくとまで待ち
	}
	Obj_Delete(arg_objc);
}


//　藤の紋章
task SetMumeiEffect_Emblem02(arg_obj, arg_objc_ary, arg_lay, arg_rgb, flgContinue, flgDelMotion){
	let frame = 0;
	let SCALE = 0.6;
	let ANGLE = 180;
	let ALPHA = 255;
	ascent(let i in 0..length(arg_objc_ary)){
		ObjPrim_SetPrimitiveType(arg_objc_ary[i], PRIMITIVE_TRIANGLESTRIP);
		ObjPrim_SetVertexCount(arg_objc_ary[i], 4);
		ObjPrim_SetVertexPosition(arg_objc_ary[i], 0, -128, -128, 0);
		ObjPrim_SetVertexPosition(arg_objc_ary[i], 1, -128, 128, 0);
		ObjPrim_SetVertexPosition(arg_objc_ary[i], 2, 128, -128, 0);
		ObjPrim_SetVertexPosition(arg_objc_ary[i], 3, 128, 128, 0);
		ObjPrim_SetVertexUVT(arg_objc_ary[i], 0, 512, 256);
		ObjPrim_SetVertexUVT(arg_objc_ary[i], 1, 512, 512);
		ObjPrim_SetVertexUVT(arg_objc_ary[i], 2, 768, 256);
		ObjPrim_SetVertexUVT(arg_objc_ary[i], 3, 768, 512);
		ObjRender_SetColor(arg_objc_ary[i], arg_rgb[0], arg_rgb[1], arg_rgb[2]);
		ObjRender_SetBlendType(arg_objc_ary[i], BLEND_ADD_ARGB);
	}
	ObjRender_SetAngleY(arg_objc_ary[1], 180);
	
	//　しぇだついか
	let shd = [
		CreateShaderObject(arg_objc_ary[0], 15),
		CreateShaderObject(arg_objc_ary[1], 15),
	];
	
	let move1 = 0;
	let moveA = 0;
	if (flgContinue > 0) { moveA = 90; }
	
	while( !Obj_IsDeleted(arg_obj) ){
		move1 = 1 * sin( moveA );
		frame = MumeiEffect_GetTimer();
		ascent(i in 0..length(arg_objc_ary)){
			let pos = [
				ObjRender_GetX(arg_obj) + 72 * cos(ANGLE + i*180),
				ObjRender_GetY(arg_obj) + 72 * sin(ANGLE + i*180),
			];
			ObjRender_SetPosition(arg_objc_ary[i], pos[0], pos[1], 0);
			ObjRender_SetScaleXYZ(arg_objc_ary[i], move1 * SCALE, move1 * SCALE, 0);
			ObjRender_SetAngleZ(arg_objc_ary[i], -64 + 8 * sin(frame*3) - move1*360);
			ObjRender_SetAlpha(arg_objc_ary[i], move1 * ALPHA);
		}
		ascent(i in 0..length(shd)){
			ObjShader_SetFloat(shd[i], "m_frame", frame);
			ObjShader_SetFloat(shd[i], "m_angle", ObjRender_GetAngleZ(arg_objc_ary[i]) + 200 );
			ObjShader_SetVector(shd[i], "m_color", arg_rgb[0], arg_rgb[1], arg_rgb[2], 0);
		}
//		frame++;
		if( move1 < 1 ){ moveA += 1; }
		yield;
	}
	if (flgDelMotion)
	{
		while( move1 > 0 ){
			move1 = 1 * sin( moveA );
			//frame = MumeiEffect_GetTimer();
			ascent(i in 0..length(arg_objc_ary)){
				ObjRender_SetScaleXYZ(arg_objc_ary[i], move1 * SCALE, move1 * SCALE, 0);
				ObjRender_SetAngleZ(arg_objc_ary[i], -64 + 8 * sin(frame*3) - move1*360);
				ObjRender_SetAlpha(arg_objc_ary[i], move1 * ALPHA);
			}
			ascent(i in 0..length(shd)){
				ObjShader_SetFloat(shd[i], "m_frame", frame);
				ObjShader_SetFloat(shd[i], "m_angle", ObjRender_GetAngleZ(arg_objc_ary[i]) + 200 );
				ObjShader_SetVector(shd[i], "m_color", arg_rgb[0], arg_rgb[1], arg_rgb[2], 0);
			}
			moveA -= 1;
			frame++;
			yield;
		}
	}
	else
	{
		yield;	// 次のえへくとまで待ち
	}
	ascent(i in 0..length(arg_objc_ary)){
		Obj_Delete(arg_objc_ary[i]);
	}
	ascent(i in 0..length(shd)){
		Obj_Delete(shd[i]);
	}
}


//　魔方陣めいた
task SetMumeiEffect_Emblem03(arg_obj, arg_objc, arg_lay, arg_rgb, flgContinue, flgDelMotion){
	let SCALE = 0.8;
	let ALPHA = 128;
	ObjPrim_SetTexture(arg_objc, MUMEI_EFF_IMG[1]);
	ObjPrim_SetPrimitiveType(arg_objc, PRIMITIVE_TRIANGLESTRIP);
	ObjPrim_SetVertexCount(arg_objc, 4);
	ObjPrim_SetVertexPosition(arg_objc, 0, -128, -128, 0);
	ObjPrim_SetVertexPosition(arg_objc, 1, -128, 128, 0);
	ObjPrim_SetVertexPosition(arg_objc, 2, 128, -128, 0);
	ObjPrim_SetVertexPosition(arg_objc, 3, 128, 128, 0);
	ObjPrim_SetVertexUVT(arg_objc, 0, 0, 0);
	ObjPrim_SetVertexUVT(arg_objc, 1, 0, 512);
	ObjPrim_SetVertexUVT(arg_objc, 2, 512, 0);
	ObjPrim_SetVertexUVT(arg_objc, 3, 512, 512);
	ObjRender_SetColor(arg_objc, arg_rgb[0], arg_rgb[1], arg_rgb[2]);
	ObjRender_SetBlendType(arg_objc, BLEND_ADD_ARGB);
	
	let move1 = 0;
	let moveA = 0;
	let frame = 0;
	let angle = 0;
	if (flgContinue > 0) { moveA = 90; }
	
	while( move1 < 1 ){
		move1 = 1 * sin( moveA );
		frame = MumeiEffect_GetTimer();
		let dist = 128 - move1*128;
		let pos = [
			ObjRender_GetX(arg_obj) + dist * cos(270),
			ObjRender_GetY(arg_obj) + dist * sin(270),
		];
		ObjRender_SetPosition(arg_objc, pos[0], pos[1], 0);
		ObjRender_SetScaleXYZ(arg_objc, move1*SCALE, move1*SCALE, 0);
		ObjRender_SetAngleZ(arg_objc, 0);
		ObjRender_SetAlpha(arg_objc, move1 * ALPHA);
		moveA += 1;
//		frame++;
		yield;
	}
	move1 = 0;
	moveA = 0;
	while( !Obj_IsDeleted(arg_obj) ){
		move1 = 1 * sin( moveA );
		frame = MumeiEffect_GetTimer();
		let pos = [
			ObjRender_GetX(arg_obj) + 0 * cos(270),
			ObjRender_GetY(arg_obj) + 0 * sin(270),
		];
		ObjRender_SetPosition(arg_objc, pos[0], pos[1], 0);
		ObjRender_SetAngleZ(arg_objc, -angle*(360/12) - move1*(360/12));
		if( move1 < 1 ){ moveA += 1; }
		else{
			move1 = 0;
			moveA = 0;
			angle++;
		}
//		frame++;
		yield;
	}
	if (flgDelMotion)
	{
		let move2 = 1;
		let moveB = 90;
		while( move2 > 0 ){
			move1 = 1 * sin( moveA );
			move2 = 1 * sin( moveB );
			//frame = MumeiEffect_GetTimer();
			ObjRender_SetAngleZ(arg_objc, -angle*(360/12) - move1*(360/12));
			ObjRender_SetScaleXYZ(arg_objc, move2*SCALE, move2*SCALE, 0);
			if( move1 < 1 ){ moveA += 1; }
			else{
				move1 = 0;
				moveA = 0;
				angle++;
			}
			moveB--;
			frame++;
			yield;
		}
	}
	else
	{
		yield;	// 次のえへくとまで待ち
	}
	Obj_Delete(arg_objc);
}


//　ｳﾈ
task SetMumeiEffect_Tail(arg_obj, arg_range_ary, arg_angle, arg_long, arg_lay, arg_is_flame, flgContinue){
	let obj = [];
	ascent(let i in 0..arg_long){
		obj = obj ~ [Stg7CreateSpriteObj(arg_lay)];
	}
	
	//　中身の触手めいたもの
	let tclAdd = Stg7CreateSpriteObj(arg_lay - 1);
	let tclSub = Stg7CreateSpriteObj(arg_lay - 1);
	SetMumeiEffect_Tentacle(obj, tclAdd, 24, BLEND_ADD_ARGB, [192,128,255]);
	SetMumeiEffect_Tentacle(obj, tclSub, 16, BLEND_SUBTRACT, [192,128,255]);
	if( arg_is_flame ){
		SetMumeiEffect_Flame([tclAdd, tclSub], [192,128,255], 60, flgContinue);
	//	SetMumeiEffect_Flame(obj, [192,128,255], 60, flgContinue);
	}
	
	ascent(i in 0..length(obj)){
		let rgb = [128 + i*(128/arg_long), 128 + i*(128/arg_long), 128 + i*(128/arg_long)];
		if(i == 0){
			SetMumeiEffect_Fragment(arg_obj, obj[i], arg_range_ary, arg_angle, arg_lay, rgb);
		}
		else{
			SetMumeiEffect_Fragment(obj[i - 1], obj[i], arg_range_ary, arg_angle, arg_lay, rgb);
		}
	}
	
	let frame = 0;
	let ang = 0;
	while( !Obj_IsDeleted(arg_obj) ){
		ang = arg_angle + 24 * sin(frame * 4);
		ObjRender_SetPosition(obj[0], ObjRender_GetX(arg_obj) + arg_range_ary[0] * cos(ang), ObjRender_GetY(arg_obj) + arg_range_ary[1] * sin(ang), 0);
		frame++;
		yield;
	}
	/*
	ascent(i in 0..length(obj)){
		Obj_Delete(obj[i]);
	}
	*/
}


//　廃材アート用（SetMumeiEffect_Tailで制御）
task SetMumeiEffect_Fragment(arg_obj, arg_objc, arg_range_ary, arg_angle, arg_lay, arg_rgb){
	let frame = 0;
	let SCALE = 0.6;
	let ALPHA = 255;
	let rect_ = [ truncate(randEffect(0,2))*128, truncate(randEffect(0,2))*128 ];
	ObjPrim_SetPrimitiveType(arg_objc, PRIMITIVE_TRIANGLESTRIP);
	ObjPrim_SetVertexCount(arg_objc, 4);
	ObjPrim_SetVertexPosition(arg_objc, 0, -64, -64, 0);
	ObjPrim_SetVertexPosition(arg_objc, 1, -64, 64, 0);
	ObjPrim_SetVertexPosition(arg_objc, 2, 64, -64, 0);
	ObjPrim_SetVertexPosition(arg_objc, 3, 64, 64, 0);
	ObjPrim_SetVertexUVT(arg_objc, 0, 0 + rect_[0], 256 + rect_[1]);
	ObjPrim_SetVertexUVT(arg_objc, 1, 0 + rect_[0], 384 + rect_[1]);
	ObjPrim_SetVertexUVT(arg_objc, 2, 128 + rect_[0], 256 + rect_[1]);
	ObjPrim_SetVertexUVT(arg_objc, 3, 128 + rect_[0], 384 + rect_[1]);
	ObjRender_SetColor(arg_objc, arg_rgb[0], arg_rgb[1], arg_rgb[2]);
	
	let sang = arg_angle + randEffect(-32, 32);
	let spos = [
		ObjRender_GetX(arg_obj) + arg_range_ary[0]*2 * cos(sang),
		ObjRender_GetY(arg_obj) + arg_range_ary[1]*2 * sin(sang),
	];
	ObjRender_SetPosition(arg_objc, spos[0], spos[1], 0);
	
	let ex = ObjRender_GetX(arg_obj);
	let ey = ObjRender_GetY(arg_obj);
	let move1 = 0;
	let moveA = 0;
	let rang = randEffect(0, 1);
	while( !Obj_IsDeleted(arg_obj) ){
		ex = ObjRender_GetX(arg_obj);
		ey = ObjRender_GetY(arg_obj);
		//　座標
		let dist = Stg7GetDistance(
			[ObjRender_GetX(arg_objc), ObjRender_GetY(arg_objc)],
			[ex + arg_range_ary[0] * cos(arg_angle), ey + arg_range_ary[1] * sin(arg_angle)]
		);
		let ang = Stg7GetGapAngle(
			[ObjRender_GetX(arg_objc), ObjRender_GetY(arg_objc)],
			[ex + arg_range_ary[0] * cos(arg_angle), ey + arg_range_ary[1] * sin(arg_angle)]
		);
		let pos = [
			ObjRender_GetX(arg_objc) + (dist/8) * cos(ang),
			ObjRender_GetY(arg_objc) + (dist/8) * sin(ang),
		];
		ObjRender_SetPosition(arg_objc, pos[0], pos[1], 0);
		//　テクスチャ角度
		let angZ = Stg7GetGapAngle(
			[ObjRender_GetX(arg_objc), ObjRender_GetY(arg_objc)],
			[ex, ey]
		);
		ObjRender_SetAngleZ(arg_objc, angZ + 90 + 32 * sin(rang*360 + frame/2));
		//　サイズ
		move1 = 1 * sin( moveA );
		ObjRender_SetScaleXYZ(arg_objc, move1 * SCALE, move1 * SCALE, 0);
		ObjRender_SetAlpha(arg_objc, move1 * ALPHA);
		frame++;
		if( move1 < 1 ){ moveA += 1; }
		yield;
	}

	// 削除モーション
	let del_frame = randEffect(5, 10);
	let fall_x = randEffect(-32, 32);
	let fall_y = randEffect(-4, -16);
	while( move1 > 0 ){
		//　座標
		let dist = Stg7GetDistance(
			[ObjRender_GetX(arg_objc), ObjRender_GetY(arg_objc)],
			[ex + arg_range_ary[0] * cos(arg_angle), ey + arg_range_ary[1] * sin(arg_angle)]
		);
		let ang = Stg7GetGapAngle(
			[ObjRender_GetX(arg_objc), ObjRender_GetY(arg_objc)],
			[ex + arg_range_ary[0] * cos(arg_angle), ey + arg_range_ary[1] * sin(arg_angle)]
		);
		let pos = [
			ObjRender_GetX(arg_objc) + (dist/8) * cos(ang) + fall_x*(1-move1),
			ObjRender_GetY(arg_objc) + (dist/8) * sin(ang) + fall_y*(1-move1),
		];
		ObjRender_SetPosition(arg_objc, pos[0], pos[1], 0);
		//　テクスチャ角度
		let angZ = Stg7GetGapAngle(
			[ObjRender_GetX(arg_objc), ObjRender_GetY(arg_objc)],
			[ex, ey]
		);
		ObjRender_SetAngleZ(arg_objc, angZ + 90 + 32 * sin(rang*360 + frame/2));
		//　サイズ
		move1 = 1 * sin( moveA );
		ObjRender_SetScaleXYZ(arg_objc, move1 * SCALE, move1 * SCALE, 0);
		ObjRender_SetAlpha(arg_objc, move1 * ALPHA);
		frame++;
		moveA -= 90/del_frame;
		yield;
	}
	Obj_Delete(arg_objc);
}


//　破片アステロイド
task SetMumeiEffect_Astroid(arg_obj, arg_num, arg_lay, arg_rgb, arg_is_flame, flgContinue){
	let obj = [];
	ascent(let i in 0..arg_num){
		obj = obj ~ [Stg7CreateSpriteObj(arg_lay)];
	}
	
	//　arg_is_flame = trueで纏炎化
	if( arg_is_flame ){ SetMumeiEffect_Flame(obj, [255,224,192], 120, flgContinue); }
	
	ascent(i in 0..length(obj)){
		let range_ary = [128 + randEffect(0,32), 32 + randEffect(0,32)];
		let ang = randEffect(0, 360);
		let spd = randEffect(0.1, 1);
		SetMumeiEffect_AstroidParts(arg_obj, obj[i], range_ary, ang, spd, arg_lay, arg_rgb);
	}
	
	// 削除は個別タスク内で
	/*
	let frame = 0;
	let ang = 0;
	while( !Obj_IsDeleted(arg_obj) ){
		frame++;
		yield;
	}
	ascent(i in 0..length(obj)){
		Obj_Delete(obj[i]);
	}
	*/
}


//　破片アステロイド用（SetMumeiEffect_Astroidで制御）
task SetMumeiEffect_AstroidParts(arg_obj, arg_objc, arg_range_ary, arg_angle, arg_speed, arg_lay, arg_rgb){
	let frame = 0;
	let SCALE = randEffect(0.4, 1) * 0.4;
	let ALPHA = 255;
	let rect_ = [ truncate(randEffect(0,2))*128, truncate(randEffect(0,2))*128 ];
	ObjPrim_SetPrimitiveType(arg_objc, PRIMITIVE_TRIANGLESTRIP);
	ObjPrim_SetVertexCount(arg_objc, 4);
	ObjPrim_SetVertexPosition(arg_objc, 0, -64, -64, 0);
	ObjPrim_SetVertexPosition(arg_objc, 1, -64, 64, 0);
	ObjPrim_SetVertexPosition(arg_objc, 2, 64, -64, 0);
	ObjPrim_SetVertexPosition(arg_objc, 3, 64, 64, 0);
	ObjPrim_SetVertexUVT(arg_objc, 0, 0 + rect_[0], 256 + rect_[1]);
	ObjPrim_SetVertexUVT(arg_objc, 1, 0 + rect_[0], 384 + rect_[1]);
	ObjPrim_SetVertexUVT(arg_objc, 2, 128 + rect_[0], 256 + rect_[1]);
	ObjPrim_SetVertexUVT(arg_objc, 3, 128 + rect_[0], 384 + rect_[1]);
	ObjRender_SetColor(arg_objc, arg_rgb[0], arg_rgb[1], arg_rgb[2]);
	
	//　初期位置
	let spos = [
		ObjRender_GetX(arg_obj),
		ObjRender_GetY(arg_obj),
	];
	ObjRender_SetPosition(arg_objc, spos[0], spos[1], 0);
	
	let ex = ObjRender_GetX(arg_obj);
	let ey = ObjRender_GetY(arg_obj);
	let move1 = 0;
	let moveA = 0;
	let angle = arg_angle;
	while( !Obj_IsDeleted(arg_obj) ){
		//　座標
		angle = angle + 2 * sin(frame/2);
		ex = ObjRender_GetX(arg_obj);
		ey = ObjRender_GetY(arg_obj);
		let pos = [
			ex + (arg_range_ary[0]+32*sin(frame/2)) * cos(angle%360),
			ey + (arg_range_ary[1]+32*sin(frame/2)) * sin(angle%360),
		];
		ObjRender_SetPosition(arg_objc, pos[0], pos[1], 0);
		//　テクスチャ角度
		let angZ = Stg7GetGapAngle(
			[ObjRender_GetX(arg_objc), ObjRender_GetY(arg_objc)],
			[ex, ey]
		);
		ObjRender_SetAngleZ(arg_objc, angZ);
		//　サイズ
		move1 = 1 * sin( moveA );
		ObjRender_SetScaleXYZ(arg_objc, move1 * SCALE, move1 * SCALE, 0);
		ObjRender_SetAlpha(arg_objc, move1 * ALPHA);
		//　レイヤー操作
		if( angle%360 >= 180 ){ Obj_SetRenderPriorityI(arg_objc, arg_lay - 10); }
		else{ Obj_SetRenderPriorityI(arg_objc, arg_lay + 10); }
		if( move1 < 1 ){ moveA += 1; }
		frame++;
		angle += arg_speed;
		yield;
	}
	
	// 削除モーション
	let del_frame = randEffect(60, 120);
	let fall_y = randEffect(64, 256);
	while( move1 > 0 ){
		//　座標
		angle = angle + 2 * sin(frame/2);
		let pos = [
			ex + (arg_range_ary[0]+32*sin(frame/2)) * cos(angle%360),
			ey + (arg_range_ary[1]+32*sin(frame/2)) * sin(angle%360) + fall_y*(1-move1),
		];
		ObjRender_SetPosition(arg_objc, pos[0], pos[1], 0);
		//　テクスチャ角度
		let angZ = Stg7GetGapAngle(
			[ObjRender_GetX(arg_objc), ObjRender_GetY(arg_objc)],
			[ex, ey]
		);
		ObjRender_SetAngleZ(arg_objc, angZ);
		//　サイズ
		move1 = 1 * sin( moveA );
		ObjRender_SetScaleXYZ(arg_objc, move1 * SCALE, move1 * SCALE, 0);
		ObjRender_SetAlpha(arg_objc, move1 * ALPHA);
		//　レイヤー操作
		if( angle%360 >= 180 ){ Obj_SetRenderPriorityI(arg_objc, arg_lay - 10); }
		else{ Obj_SetRenderPriorityI(arg_objc, arg_lay + 10); }
		moveA -= 90/del_frame;
		frame++;
		angle += arg_speed*move1;
		yield;
	}
	Obj_Delete(arg_objc);
}


//　火の粉アステロイド
task SetMumeiEffect_SparkAstroid(arg_obj, arg_num, arg_lay, arg_rgb){
	let obj = [];
	ascent(let i in 0..arg_num){
		obj = obj ~ [Stg7CreateSpriteObj(arg_lay)];
	}
	
	ascent(i in 0..length(obj)){
		let range_ary = [128 + randEffect(32,64), 32 + randEffect(32,64)];
		let ang = randEffect(0, 360);
		let spd = randEffect(1, 2);
		SetMumeiEffect_SparkAstroidParts(arg_obj, obj[i], range_ary, ang, -spd, arg_lay, arg_rgb);
	}
	
	let frame = 0;
	let ang = 0;
	while( !Obj_IsDeleted(arg_obj) ){
		frame++;
		yield;
	}
	ascent(i in 0..length(obj)){
		Obj_Delete(obj[i]);
	}
}


//　火の粉アステロイド用（SetMumeiEffect_SparkAstroidで制御）
task SetMumeiEffect_SparkAstroidParts(arg_obj, arg_objc, arg_range_ary, arg_angle, arg_speed, arg_lay, arg_rgb){
	let frame = 0;
	let SCALE = randEffect(0.4, 1) * 0.2;
	let ALPHA = 255;
	let rect_ = [ truncate(randEffect(0,2))*128, truncate(randEffect(0,2))*128 ];
	ObjPrim_SetPrimitiveType(arg_objc, PRIMITIVE_TRIANGLESTRIP);
	ObjPrim_SetVertexCount(arg_objc, 4);
	ObjPrim_SetVertexPosition(arg_objc, 0, -64, -64, 0);
	ObjPrim_SetVertexPosition(arg_objc, 1, -64, 64, 0);
	ObjPrim_SetVertexPosition(arg_objc, 2, 64, -64, 0);
	ObjPrim_SetVertexPosition(arg_objc, 3, 64, 64, 0);
	ObjPrim_SetVertexUVT(arg_objc, 0, 768, 256);
	ObjPrim_SetVertexUVT(arg_objc, 1, 768, 320);
	ObjPrim_SetVertexUVT(arg_objc, 2, 832, 256);
	ObjPrim_SetVertexUVT(arg_objc, 3, 832, 320);
	ObjRender_SetColor(arg_objc, arg_rgb[0], arg_rgb[1], arg_rgb[2]);
	ObjRender_SetBlendType(arg_objc, BLEND_ADD_ARGB);
	
	//　初期位置
	let spos = [
		ObjRender_GetX(arg_obj),
		ObjRender_GetY(arg_obj),
	];
	ObjRender_SetPosition(arg_objc, spos[0], spos[1], 0);
	
	let move1 = 0;
	let moveA = 0;
	let angle = arg_angle;
	while( !Obj_IsDeleted(arg_obj) ){
		//　座標
		angle = angle + 2 * sin(frame/2);
		let pos = [
			ObjRender_GetX(arg_obj) + (arg_range_ary[0]+32*sin(frame/2)) * cos(angle%360),
			ObjRender_GetY(arg_obj) + (arg_range_ary[1]+32*sin(frame/2)) * sin(angle%360),
		];
		ObjRender_SetPosition(arg_objc, pos[0], pos[1], 0);
		//　テクスチャ角度
		let angZ = Stg7GetGapAngle(
			[ObjRender_GetX(arg_objc), ObjRender_GetY(arg_objc)],
			[ObjRender_GetX(arg_obj), ObjRender_GetY(arg_obj)]
		);
		ObjRender_SetAngleZ(arg_objc, angZ);
		//　サイズ
		move1 = 1 * sin( moveA );
		ObjRender_SetScaleXYZ(arg_objc, move1 * SCALE, move1 * SCALE, 0);
		ObjRender_SetAlpha(arg_objc, (move1*ALPHA)/2 + (move1*ALPHA)/4 * sin(arg_angle + frame*32));
		//　レイヤー操作
		if( angle%360 >= 180 ){ Obj_SetRenderPriorityI(arg_objc, arg_lay - 10); }
		else{ Obj_SetRenderPriorityI(arg_objc, arg_lay + 10); }
		if( move1 < 1 ){ moveA += 1; }
		frame++;
		angle += arg_speed;
		yield;
	}
}


//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
//　破片パーティクル（種別はガチャ
task MumeiParticle(arg_pos, arg_angle, arg_speed, arg_scale, arg_rgb, arg_lay, arg_kill){
	let ALPHA = 255;
	let obj = Stg7CreateSpriteObj(arg_lay);
	let rect_ = [ truncate(randEffect(0,2))*128, truncate(randEffect(0,2))*128 ];
	let frame = 0;
	let move1 = 0;
	let moveA = 0;
	let ag = randEffect(0,360);
	let ads = randEffect(-2,2);
	ObjRender_SetPosition(obj, arg_pos[0], arg_pos[1], 0);
	ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLESTRIP);
	ObjPrim_SetVertexCount(obj, 4);
	ObjPrim_SetVertexPosition(obj, 0, -64, -64, 0);
	ObjPrim_SetVertexPosition(obj, 1, -64, 64, 0);
	ObjPrim_SetVertexPosition(obj, 2, 64, -64, 0);
	ObjPrim_SetVertexPosition(obj, 3, 64, 64, 0);
	ObjPrim_SetVertexUVT(obj, 0, 0 + rect_[0], 256 + rect_[1]);
	ObjPrim_SetVertexUVT(obj, 1, 0 + rect_[0], 384 + rect_[1]);
	ObjPrim_SetVertexUVT(obj, 2, 128 + rect_[0], 256 + rect_[1]);
	ObjPrim_SetVertexUVT(obj, 3, 128 + rect_[0], 384 + rect_[1]);
	ObjRender_SetColor(obj, arg_rgb[0], arg_rgb[1], arg_rgb[2]);
	while( frame < arg_kill ){
		let pos = [ ObjRender_GetX(obj), ObjRender_GetY(obj) ];
		
		move1 = 1 * sin( moveA );
		
		ObjRender_SetPosition(obj, pos[0]+arg_speed*cos(arg_angle), pos[1]+arg_speed*sin(arg_angle), 0);
		ObjRender_SetScaleXYZ(obj, move1*arg_scale, move1*arg_scale, 0);
		ObjRender_SetAngleZ(obj, ag);
		ObjRender_SetAlpha(obj, move1*ALPHA);
		
		if( move1 < 1 ){ moveA += 10; }
		else{ frame++; }
		if( frame > 0 && frame%4 == 0 ){ ag += ads*4; }
		
		yield;
	}
	while( move1 > 0 ){
		let pos = [ ObjRender_GetX(obj), ObjRender_GetY(obj) ];
		
		move1 = 1 * sin( moveA );
		
		ObjRender_SetPosition(obj, pos[0]+arg_speed*cos(arg_angle), pos[1]+arg_speed*sin(arg_angle), 0);
		ObjRender_SetScaleXYZ(obj, move1*arg_scale, move1*arg_scale, 0);
		ObjRender_SetAngleZ(obj, ag);
		ObjRender_SetAlpha(obj, move1*ALPHA);
		
		moveA += 1;
		frame++;
		if( frame > 0 && frame%4 == 0 ){ ag += ads*4; }
		
		yield;
	}
	Obj_Delete(obj);
}


//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
//　2d primitive
function Stg7CreateSpriteObj(arg_lay){
	let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	ObjPrim_SetTexture(obj, MUMEI_EFF_IMG[0]);
	ObjRender_SetBlendType(obj, BLEND_ALPHA);
	Obj_SetRenderPriorityI(obj, arg_lay);
	return obj;
}


//　2点間の距離を取得
function Stg7GetDistance( pos1, pos2 ){
	return ( (pos2[1]-pos1[1])^2 + (pos2[0]-pos1[0])^2 ) ^ 0.5;
}


//　pos1 から見た pos2 への角度を取得
function Stg7GetGapAngle( pos1, pos2 ){
	return atan2( pos2[1]-pos1[1], pos2[0]-pos1[0] );
}

//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
//　追加分
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------

// singleの最初に実行するやつ
task MumeiEffect_Init()
{
	if (GetPlayMode() == GAME_SPELL)
//	if (GetPlayMode() == GAME_SPELL || GetPlayMode() == GAME_NONE)
	{
		// スぺプラの場合は開幕えへくとなし
		MumeiEffect_SetContinue(2);
		MumeiEffect_SetDeleteMotion(true);
	}
	else
	{
		MumeiEffect_SetDeleteMotion(false);
	}
	// タイマー加算
	TMumeiEffect_Timer();
}

// 前のえへくとからの続きか？のフラグ
function MumeiEffect_SetContinue(val)
{
	SetAreaCommonData(CAREA_STAGE, "STG7_MEFF_SET", val);
}
function MumeiEffect_GetContinue()
{
	return(GetAreaCommonData(CAREA_STAGE, "STG7_MEFF_SET", 0));
}

// 撃破後に消滅えへくとを付けるかどうか
function MumeiEffect_SetDeleteMotion(val)
{
	SetAreaCommonData(CAREA_STAGE, "STG7_MEFF_DELMOTION", val);
}
function MumeiEffect_GetDeleteMotion()
{
	return(GetAreaCommonData(CAREA_STAGE, "STG7_MEFF_DELMOTION", false));
}

// アニメ共通フレーム数
task TMumeiEffect_Timer()
{
	let frame = GetAreaCommonData(CAREA_STAGE, "STG7_MEFF_FR", 0);
	while(eAlive)
	{
		SetAreaCommonData(CAREA_STAGE, "STG7_MEFF_FR", frame);
		frame++;
		yield;
	}
}
function MumeiEffect_GetTimer()
{
	return(GetAreaCommonData(CAREA_STAGE, "STG7_MEFF_FR", 0));
}
