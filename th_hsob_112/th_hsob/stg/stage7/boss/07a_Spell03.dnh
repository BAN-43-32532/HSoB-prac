#東方弾幕風[Single]
#ScriptVersion[3]
#Title["「フライングファイアスフィア」"]
#Text["「フライングファイアスフィア」"]
#Background[""]
#System["./../../../system/System.dnh"]

//---------------------------------------------------------------------

// 関数取り込み
#include"./../../../lib/lib_boss.dnh"
#include"./../../stage3/boss/lib_Hikariko.dnh"
#include"./../Road07_lib.dnh"

@Event {
	alternative(GetEventType())
	case(EV_REQUEST_LIFE)		{ SetScriptResult(2000);	}
	case(EV_REQUEST_TIMER)		{ SetScriptResult(24);		}
	BossEvent();
}

@Initialize {
	let SPELL_ID = 83;
	let SPELL_NAME = 13;

	// アイテム数
	if (IsRainbow())	{ bossDropItem = 300; }
	else			{ bossDropItem = 150; }

	//初期設定
	Boss_Init();

	objEnemy = CreateBoss(BOSS_ID_HIKARIKO);	//ボスセット

	//スペカデータ・セット
	SetSpellCardData(GetSpellCardID(SPELL_ID), SPELL_NAME, 
			GetCurrentScriptDirectory()~"../stage3/boss/03a_Background.dnh",
			GetBossTexture(objEnemy, I_CUTIN), 0.65, CUTMOTION_NORMAL);

	// チャプター開始
	ChapterStartBoss(GetBossID(objEnemy), SPELL_NAME, CHAPTER_SPELL);

	// 使い魔と体力連動
	CheckLinkLife_Boss(objEnemy);

	Task_Main();
}

@MainLoop {
	yield;
}

// メインタスク
task Task_Main
{
	if (GetPlayMode() == GAME_SPELL)
	{
		standBy(objEnemy, CenX, 200, 60);
	} else {
		SetEnemyVisible(objEnemy, false);
		waitObj(objEnemy, 15);
		SetEnemyVisible(objEnemy, true);
	}

	CallSpellCard(true);	//スペカ起動
	
	let b_muki = 1;
	let t = 0;
	while(eAlive)
	{
		BossCharge(objEnemy);
		SetAction(objEnemy, ACT_SHOT1, 120);
		ascent(i in 0 .. 2)
		{
			if (!eAlive) { return; }
			let muki = [1, -1][i%2] * b_muki;
			let sa = -90-45*muki;
			let add_a = -0.6*muki;
			let timer = 120;
			let s_count = [2, 1, 2][DifficultEx()];
			SetFamilier01(ObjMove_GetX(objEnemy)+32*cos(sa), ObjMove_GetY(objEnemy)+32*sin(sa),
				4, sa, add_a, s_count, muki, timer);
			CallSound(sndShot2);
			waitObj(objEnemy, phaseExEnemy(4));
		}
		ascent(i in 0 .. 2)
		{
			if (!eAlive) { return; }
			let muki = [1, -1][i%2];
			let sa = 90-60*muki;
			let add_a = -0.6*muki;
			let timer = 120;
			let s_count = 1;
			SetFamilier01(ObjMove_GetX(objEnemy)+32*cos(sa), ObjMove_GetY(objEnemy)+32*sin(sa),
				4, sa, add_a, 1, -muki, timer);
			CallSound(sndShot2);
		}
		waitObj(objEnemy, phaseExEnemy(4));
		if (!eAlive) { return; }
		EnemyRandomMove(objEnemy, 200, 48);
		waitObj(objEnemy, phaseExEnemy(4));
		b_muki = -b_muki;
	}
}

// 人魂
task SetFamilier01(iniX, iniY, iniSpeed, iniAngle, iniValue, iniValue2, iniMuki, iniTimer)
{
//	let iniMuki = [1, -1][iniValue < 0];
	
	let eSize = ENEMY_M;
	let eColor = EFF_BLUE;
	let baseAngle = iniAngle;
	
	let objFamilier = MakeEnemyFamilier(iniX, iniY, 99999, eSize);
	DrawBirdOption(objFamilier, EFF_BLUE, iniAngle, 1);
	TAct();
	WaitForKilledFamilier(objFamilier, 0, 0);
	ZakoFinalize(objFamilier, eColor);
	
	task TAct()
	{
		TMove;
		TShot;
	}
	
	task TMove()
	{
		let add_a = iniValue;
		let mvMuki = [1, -1][iniValue < 0];

		Enemy_SetPatternA2(objFamilier, 0, iniSpeed, iniAngle, -iniSpeed/(iniTimer-60), add_a, iniSpeed/4);
		Enemy_SetPatternA2(objFamilier, iniTimer-30, NO_CHANGE, NO_CHANGE, iniSpeed/120, add_a, iniSpeed);
		
		ascent(t in 0 .. iniTimer)
		{
			if (Obj_IsDeleted(objFamilier)) { return; }
			let tmp = GetCurve_z((t+1)/iniTimer);
			Enemy_SetAngle(objFamilier, Enemy_GetAngle(objFamilier)+(tmp*1.5)*mvMuki);
			waitObj(objFamilier, 1);
		}
		TCheckDispINOut(objFamilier, 32);
	}
	
	task TShot()
	{
		waitObj(objFamilier, 60);
		
		let way = [28, 20, 28][DifficultEx()];
		let r_add = iniMuki * [0.25, 0.175, 0.25][DifficultEx()];
		let graphic = BGW_FIRE_BLUE;
		
		loop(iniValue2)
		{
			if (!CanShotBullet(objFamilier)) { return; }
			let ss = 1.125;
			let sa = GetAngleToPlayer(objFamilier);
			if (iniValue2 > 1) { sa = 90; }
			FlyShotWay(ObjMove_GetX(objFamilier), ObjMove_GetY(objFamilier), ss, sa, graphic, 30, r_add, 240, 720, way);
			CallSound(sndShot2);
			waitObj(objFamilier, 135);
		}
	}
}


task FlyShotWay(x, y, speed, angle, graphic, delay, r_add, max_r, timer, way)
{
	let ss = 0;
	let ba = rand(0, 360);
	let br = 0;
	
	let objBase = CreateShotA1(x, y, 0, angle, graphic, 0);
	ObjMove_AddPatternA2(objBase, 0, 0, angle, speed/240, 0, speed);
	ObjMove_AddPatternA2(objBase, 240, NO_CHANGE, NO_CHANGE, speed/600, 0, speed*2);
	ObjShot_SetAutoDelete(objBase, false);
	
	SetShotDisabled(objBase);
	Obj_SetVisible(objBase, false);
	ObjShot_SetDeleteFrame(objBase, timer*2);
	Obj_SetValue(objBase, "R", br);
	Obj_SetValue(objBase, "A", ba);
	
	let objEffect = RingEffect_INI(GetShotRenderPriorityI-2);
	ObjRender_SetAlpha(objEffect, 192);
	ObjRender_SetColor(objEffect, 0, 64, 255);
	ObjRender_SetBlendType(objEffect, BLEND_ADD_ARGB);
	
	ascent(i in 0 .. way)
	{
		FlyShot(objBase, speed, i*360/way, graphic, delay);
	}
	
	let t = 0;
	while(!Obj_IsDeleted(objBase))
	{
		if (t < timer)
		{
			br = max_r * sin(t/timer*180);
			ba += r_add;
		}
		else
		{
			br = max_r * sin((timer*2-t)/timer*180);
			ba += r_add;
		}
		Obj_SetValue(objBase, "R", br);
		Obj_SetValue(objBase, "A", ba);
		
		ObjRender_SetPosition(objEffect, ObjMove_GetX(objBase), ObjMove_GetY(objBase), 0);
		ObjRender_SetAlpha(objEffect, min(1,br/64)*255);
		RingEffect_SetScareToRadius(objEffect, br);
		t++;
		yield;
	}
	Obj_Delete(objBase);
	Obj_Delete(objEffect);
}

task FlyShot(objBase, speed, angle, graphic, delay)
{
	let r = 0;
	let a = 0;
	let obj = My_CreateShotA1(ObjMove_GetX(objBase), ObjMove_GetY(objBase), 0, 0, graphic, delay);
	ObjShot_SetAutoDelete(obj, false);
	
	while(!Obj_IsDeleted(obj) && !Obj_IsDeleted(objBase))
	{
		r = Obj_GetValueD(objBase, "R", 0);
		a = angle + Obj_GetValueD(objBase, "A", 0);
		ObjMove_SetDestAtFrame(obj, ObjMove_GetX(objBase)+r*cos(a), ObjMove_GetY(objBase)+r*sin(a), 1);
		yield;
	}
	Obj_Delete(obj);
}
