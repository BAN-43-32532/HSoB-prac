//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
//　炎集中エフェクト
task MumeiFlameCharge(arg_obj, arg_lay, arg_long, arg_wait){
	loop( arg_wait ){ yield; }
	loop( arg_long ){
		MumeiParticleFlame(arg_obj, arg_lay, randEffect(0,1)*512, randEffect(0,1)*360, [255,96,64]);
		yield;
	}
}


//　炎っぽいパーティクル
task MumeiParticleFlame(arg_obj, arg_lay, arg_range, arg_angle, arg_rgb){
	let ALPHA = 32;
	let SCALE = 1;
	let obj = Stg7CreateSpriteObj(arg_lay);
	ObjPrim_SetTexture(obj, MUMEI_EFF_IMG[2]);
	ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLESTRIP);
	ObjPrim_SetVertexCount(obj, 4);
	ObjPrim_SetVertexPosition(obj, 0, -128, -128, 0);
	ObjPrim_SetVertexPosition(obj, 1, -128, 128, 0);
	ObjPrim_SetVertexPosition(obj, 2, 128, -128, 0);
	ObjPrim_SetVertexPosition(obj, 3, 128, 128, 0);
	ObjPrim_SetVertexUVT(obj, 0, 0, 0);
	ObjPrim_SetVertexUVT(obj, 1, 0, 256);
	ObjPrim_SetVertexUVT(obj, 2, 256, 0);
	ObjPrim_SetVertexUVT(obj, 3, 256, 256);
	ObjRender_SetColor(obj, arg_rgb[0], arg_rgb[1], arg_rgb[2]);
	ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
	ObjRender_SetAngleZ(obj, randEffect(0,1)*360);
	
	//　初期生成座標
	let pos = [
		ObjRender_GetX(arg_obj) + arg_range * cos(arg_angle),
		ObjRender_GetY(arg_obj) + arg_range * sin(arg_angle),
	];
	ObjRender_SetPosition(obj, pos[0], pos[1], 0);
	
	let move1 = 0;
	let moveA = 0;
	let frame = 0;
	//　update
	while( !Obj_IsDeleted(arg_obj) && move1 < 1 ){
		move1 = 1 * sin(moveA);
		let pos = [
			ObjRender_GetX(arg_obj) + (arg_range - move1*arg_range) * cos(arg_angle),
			ObjRender_GetY(arg_obj) + (arg_range - move1*arg_range) * sin(arg_angle),
		];
		ObjRender_SetPosition(obj, pos[0], pos[1], 0);
		ObjRender_SetAlpha(obj, move1 * ALPHA);
		moveA += 2;
		frame++;
		yield;
	}
	move1 = 0;
	moveA = 0;
	//　削除
	while( !Obj_IsDeleted(arg_obj) && move1 < 1 ){
		move1 = 1 * sin(moveA);
		ObjRender_SetAlpha(obj, ALPHA - (move1 * ALPHA));
		moveA += 15;
		frame++;
		yield;
	}
	Obj_Delete(obj);
}


//　炎っぽいパーティクル（放射
task MumeiParticleRadiationFlame(arg_obj, arg_lay, arg_scale, arg_angle, arg_speed, arg_argb, arg_long){
	let obj = Stg7CreateSpriteObj(arg_lay);
	ObjPrim_SetTexture(obj, MUMEI_EFF_IMG[2]);
	ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLESTRIP);
	ObjPrim_SetVertexCount(obj, 4);
	ObjPrim_SetVertexPosition(obj, 0, -128, -128, 0);
	ObjPrim_SetVertexPosition(obj, 1, -128, 128, 0);
	ObjPrim_SetVertexPosition(obj, 2, 128, -128, 0);
	ObjPrim_SetVertexPosition(obj, 3, 128, 128, 0);
	ObjPrim_SetVertexUVT(obj, 0, 0, 0);
	ObjPrim_SetVertexUVT(obj, 1, 0, 256);
	ObjPrim_SetVertexUVT(obj, 2, 256, 0);
	ObjPrim_SetVertexUVT(obj, 3, 256, 256);
	ObjRender_SetColor(obj, arg_argb[1], arg_argb[2], arg_argb[3]);
	ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
	ObjRender_SetScaleXYZ(obj, arg_scale, arg_scale, 0);
	ObjRender_SetAngleZ(obj, randEffect(0,1)*360);
	
	//　初期生成座標
	let pos = [
		ObjRender_GetX(arg_obj),
		ObjRender_GetY(arg_obj),
	];
	ObjRender_SetPosition(obj, pos[0], pos[1], 0);
	
	let move1 = 0;
	let moveA = 0;
	let frame = 0;
	//　update
	while( !Obj_IsDeleted(arg_obj) && frame < arg_long ){
		move1 = 1 * sin(moveA);
		let pos = [
			ObjRender_GetX(obj) + arg_speed * cos(arg_angle),
			ObjRender_GetY(obj) + arg_speed * sin(arg_angle),
		];
		ObjRender_SetPosition(obj, pos[0], pos[1], 0);
		ObjRender_SetAlpha(obj, move1 * arg_argb[0]);
		if( move1 < 1 ){ moveA += 5; }
		frame++;
		yield;
	}
	move1 = 0;
	moveA = 0;
	//　削除
	while( !Obj_IsDeleted(arg_obj) && move1 < 1 ){
		move1 = 1 * sin(moveA);
		let pos = [
			ObjRender_GetX(obj) + arg_speed * cos(arg_angle),
			ObjRender_GetY(obj) + arg_speed * sin(arg_angle),
		];
		ObjRender_SetPosition(obj, pos[0], pos[1], 0);
		ObjRender_SetAlpha(obj, arg_argb[0] - (move1 * arg_argb[0]));
		moveA += 2;
		frame++;
		yield;
	}
	Obj_Delete(obj);
}


//　ｳﾈの芯
task SetMumeiEffect_Tentacle(arg_obj_ary, arg_objc, arg_width, arg_blend, arg_rgb){
	let ALPHA = 255;
	let VERTEX = length(arg_obj_ary) * 2;
	ObjPrim_SetTexture(arg_objc, MUMEI_EFF_IMG[3]);
	ObjPrim_SetPrimitiveType(arg_objc, PRIMITIVE_TRIANGLESTRIP);
	ObjPrim_SetVertexCount(arg_objc, VERTEX);
	ObjRender_SetColor(arg_objc, arg_rgb[0], arg_rgb[1], arg_rgb[2]);
	ObjRender_SetBlendType(arg_objc, arg_blend);
	
	let angle = 0;
	let vpos = [];
	let anctr = 0;
	let anime = 0;
	let move1 = 0;
	let moveA = 0;
	while( !Obj_IsDeleted(arg_obj_ary[0]) ){
		move1 = 1 * sin( moveA );
		ascent( let i in 0..VERTEX / 2 ){
			if( i < (VERTEX / 2) - 1 ){
				angle = Stg7GetGapAngle(
					[ObjRender_GetX(arg_obj_ary[i]), ObjRender_GetY(arg_obj_ary[i])],
					[ObjRender_GetX(arg_obj_ary[i+1]), ObjRender_GetY(arg_obj_ary[i+1])]
				);
				vpos = [
					[ObjRender_GetX(arg_obj_ary[i]) + arg_width * cos(angle - 90), ObjRender_GetY(arg_obj_ary[i]) + arg_width * sin(angle - 90)],
					[ObjRender_GetX(arg_obj_ary[i]) + arg_width * cos(angle + 90), ObjRender_GetY(arg_obj_ary[i]) + arg_width * sin(angle + 90)],
				];
			}
			else{
				angle = Stg7GetGapAngle(
					[ObjRender_GetX(arg_obj_ary[i]), ObjRender_GetY(arg_obj_ary[i])],
					[ObjRender_GetX(arg_obj_ary[i]) + 64 * cos(angle), ObjRender_GetY(arg_obj_ary[i]) + 64 * sin(angle)]
				);
				let BASE = [ObjRender_GetX(arg_obj_ary[i])+64*cos(angle), ObjRender_GetY(arg_obj_ary[i])+64*sin(angle)];
				vpos = [
					[BASE[0] + (arg_width/2) * cos(angle - 90), BASE[1] + (arg_width/2) * sin(angle - 90)],
					[BASE[0] + (arg_width/2) * cos(angle + 90), BASE[1] + (arg_width/2) * sin(angle + 90)],
				];
			}
			ObjPrim_SetVertexPosition(arg_objc, 0 + i*2, vpos[0][0], vpos[0][1], 0);
			ObjPrim_SetVertexPosition(arg_objc, 1 + i*2, vpos[1][0], vpos[1][1], 0);
			ObjPrim_SetVertexUVT(arg_objc, 0 + i*2, i*(512 / ((VERTEX/2)-1)), 0 + (anime%8)*32);
			ObjPrim_SetVertexUVT(arg_objc, 1 + i*2, i*(512 / ((VERTEX/2)-1)), 32 + (anime%8)*32);
		}
		ObjRender_SetAlpha(arg_objc, move1 * ALPHA);
		if( anctr > 0 && anctr%4 == 0 ){ anime++; }
		anctr++;
		if( move1 < 1 ){ moveA += 2; }
		yield;
	}
	Obj_Delete(arg_objc);
}
