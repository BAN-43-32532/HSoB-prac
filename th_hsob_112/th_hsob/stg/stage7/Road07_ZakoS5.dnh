// -------------- ìGîzíu -------------- //

let S5_eBaseColor = 0;

task S5_F01(x, to_x, count, f_rev, f_type)
{
	let c_base = S5_eBaseColor;
	S5_eBaseColor++;

	ascent(i in 0 .. count)
	{
		_S5_F01(x, to_x, i+1, [0, f_type][i==0], c_base);
		c_base++;
		WaitRoad(phaseEx(0.5));
	}
	if (f_rev)
	{
		descent(i in 0 .. count-1)
		{
			_S5_F01(x, to_x, i+1, 0, c_base);
			c_base++;
			WaitRoad(phaseEx(0.5));
		}
	}
}
task _S5_F01(x, to_x, count, f_type, c_base)
{
	ascent(i in 0 .. count)
	{
		let offset = (i-(count-1)/2)*32;
		let ex = x + offset*3;
		let ey = MinY-16;
		let es = 0.85;
		let ec = c_base%7;
	//	if (i > 0 && i < count-1) { es += 0.075; }
		let tx = to_x + offset;
		let timer = 105;
		if (f_type == 1) { S5_SetEnemyF01(ex, ey, es, 90, tx, f_type, 0, timer, ec); }
		else { S5_SetEnemyF01(ex, ey, es, 90, tx, 0, 0, timer, ec); }
	}
}
task S5_F02(x, to_x, count)
{
	let c_base = S5_eBaseColor;
	S5_eBaseColor++;

	let muki = [1, -1][x > CenX];
	ascent(i in 0 .. count)
	{
		let offset = i*3*muki;
		let ex = x + offset*3;
		let ey = MinY-16;
		let es = 0.4;
		let ec = (c_base+i)%7;
		let tx = to_x;
		let timer = 150;
		if (i == 0) { S5_SetEnemyF01(ex, ey, es, 90, tx, 1, 0, timer, ec); }
		else { S5_SetEnemyF01(ex, ey, es, 90, tx, 0, 0, timer, ec); }
		muki = -muki;
		WaitRoad(phaseEx(0.5));
	}
}
task S5_F01b(x, to_x, angle, count, f_type)
{
	let c_base = S5_eBaseColor;
	S5_eBaseColor++;

	ascent(i in 0 .. count)
	{
		let ct = [2, 1][i==0];
		let muki = 1;
		loop(ct)
		{
			let offset = (i+0.25)*21*muki;
			if (i == 0) { offset = 0; }
			let ex = x + offset*2;
			let ey = MinY-16;
			let es = 0.5;
			let ec = (c_base+i)%7;
			let tx = to_x + offset;
			let timer = phaseExEnemy(4);
			let flgBig = (i == trunc(count-1)/2);
			if (i == 0) { S5_SetEnemyF01(ex, ey, es, angle, tx, f_type+3, i/count, timer, ec); }
			else { S5_SetEnemyF01(ex, ey, es, angle, tx, 0+3, i/count, timer, ec); }
			muki = -muki;
		}
		WaitRoad(phaseEx(1/4));
	}
}
task S5_I01(x, count)
{
	let c_base = 0;
	
	ascent(i in 0 .. count)
	{
		let ex = x;
		let ey = MaxY+16;
		let ea = atan2(ey-(MaxX+512), ex-CenX);
		let es = 0.5;
		let ec = (c_base+i)%7;
		S5_SetEnemyI01(ex, ey, es, ea, 0, i/8, ec);
		WaitRoad(phaseEx(1));
	}
}

// ------------------------------------------------------------------ //
//                            ìGíPëÃÇÃèàóù                            //
// ------------------------------------------------------------------ //
// ó¨ÇÍÇÈódê∏
task S5_SetEnemyF01(iniX, iniY, iniSpeed, iniAngle, iniToX, iniValue, iniValue2, iniWait, iniColor)
{
	if (flgStopSetZako) { return; }
	
	let timer = iniWait;
	let iniMuki = [1, -1][iniX < iniToX];
	let e_type = trunc(iniValue/3)%2;
	let e_size = iniValue%3;

	let eSize = [ENEMY_S, ENEMY_M, ENEMY_L][e_size];
	let eGraph = [FAIRY_SMALL, FAIRY_MIDDLE, FAIRY_LARGE][e_size];
	let eLife = [15, 120, 180][e_size];
	let eColor = iniColor;
	let emnImage = GetFairyImageFile(eColor);
	
	let objEnemy = MakeEnemy(iniX, iniY, eLife, eSize);
	if (eGraph == FAIRY_LARGE)	{ SetEnemyDropItem_Extra(objEnemy, 30); }
	if (eGraph == FAIRY_MIDDLE)	{ SetEnemyDropItem_Extra(objEnemy, 15); }
	if (eGraph == FAIRY_SMALL)	{ SetEnemyDropItem_Extra(objEnemy, 3); }
	DrawFairy( objEnemy, emnImage, eGraph );
	TAct();
	WaitForKilled(objEnemy);
	ZakoFinalize(objEnemy, eColor);
	
	task TAct()
	{
		R05_GainDamageRate(objEnemy, 0, iniWait/4);
		TShot();
		TMove();
	}
	
	task TMove()
	{
		if (e_type == 0) { DesertFairyMotion(objEnemy, iniX, iniY, iniSpeed, iniAngle, iniToX, timer); }
		else if (e_type == 1) { DesertFairyMotion2(objEnemy, iniX, iniY, iniSpeed, iniAngle, iniToX, timer); }
	}
	
	task TShot()
	{
		let wt = phaseExEnemy(2);
		let shot_delay = phaseExEnemy(2);
		let shot_count = [2, 1, 2][DifficultEx()];
		
		let speed = [2.25, 1.75, 2.25][DifficultEx()];
		let way = [2, 2, 2][DifficultEx()];
		let way_angle = [180, 180, 180][DifficultEx()];
		let graphic = [
			BGW_CHRYSTAL_M_RED + SHOT_COLOR[iniColor],
			BGW_CHRYSTAL_S_RED + SHOT_COLOR[iniColor]];
		
		if (e_type == 1)
		{
			speed = [3, 2, 3][DifficultEx()] * (1 - iniValue2*0.5/3);
			way = [5, 3, 5][DifficultEx()];
			way_angle = [15, 24, 15][DifficultEx()];
			shot_count = [2, 1, 2][DifficultEx()];
		}
		
		let st = 0;
		let t = 0;
		waitObj(objEnemy, shot_delay);
		t += shot_delay;
		while(CanShotBullet(objEnemy) && st < shot_count)
		{
			let ba = 0;
			if (e_type == 1) { ba = GetAngleToPlayer(objEnemy); }
			ascent(i in 0 .. way)
			{
				let sx = ObjMove_GetX(objEnemy);
				let sy = ObjMove_GetY(objEnemy);
				let sa = ba + (i-(way-1)/2)*way_angle;
				let ss = speed * (1-st*0.25);
				My_CreateShotA2Ex(sx, sy, ss*3, sa, -ss/15, ss, graphic[st%2], 10, DELAY_ADD);
			}
			CallSound(sndShot2);
			waitObj(objEnemy, wt);
			t += wt;
			st++;
		}
	}
}

// óxÇÈâAózíe
task S5_SetEnemyI01(iniX, iniY, iniSpeed, iniAngle, iniValue, iniWait, iniColor)
{
	if (flgStopSetZako) { return; }
	
	let iniMuki = [1, -1][cos(iniAngle) > 0];
	let rorate_angle = 0;

	let e_type = iniValue%2;
	let eSize = ENEMY_M;
	let eColor = iniColor;
	
	let objEnemy = MakeEnemy(iniX, iniY, 30, eSize);
	SetEnemyDropItem_Extra(objEnemy, 12);
	DrawOnmyou( objEnemy, eColor );
	TAct();
	WaitForKilled(objEnemy);
	ZakoFinalize(objEnemy, eColor);
	
	task TAct()
	{
		TShot();
		TMove();
	}
	
	// à⁄ìÆ
	task TMove()
	{
		TCheckDispINOut(objEnemy, 48);
		let bx = iniX;
		let by = iniY;
		let es = iniSpeed;
		let ea = -iniValue*iniMuki;
		
		while(CanShotBullet(objEnemy))
		{
			let er = es*28;
			let pos = Rotate2D_XY(er*cos(ea)*0.5, er*sin(ea), iniAngle);
			ObjMove_SetPosition(objEnemy, bx+pos[0], by+pos[1]);
			bx += es*cos(iniAngle);
			by += es*sin(iniAngle);
			es += iniSpeed/75;
			ea += iniMuki*360/phaseExEnemy(8);
			waitObj(objEnemy, 1);
		}
	}
	
	// ÉVÉáÉbÉg
	task TShot()
	{
		let wt = phaseExEnemy(0.5);
		let shot_delay = phaseExEnemy(8);
		let timer = phaseExEnemy(12);
		
		let speed = [2.25, 1.75, 2.25][DifficultEx()];
		let way = [3, 2, 3][DifficultEx()];
		let way_angle = [30, 45, 30][DifficultEx()];
		let graphic = BGW_SCALE_RED + SHOT_COLOR[iniColor];
		
		let st = 0;
		let t = 0;
		waitObj(objEnemy, shot_delay);
		t += shot_delay;
		while(CanShotBullet(objEnemy) && t < timer)
		{
			let ba = GetAngleToPlayer(objEnemy);
			ascent(i in 0 .. way)
			{
				let sx = ObjMove_GetX(objEnemy);
				let sy = ObjMove_GetY(objEnemy);
				let sa = ba + (i-(way-1)/2)*way_angle;
				let ss = speed;
				let obj = My_CreateShotA2(sx, sy, 0, sa, ss/60, ss, graphic, 30);
				ObjMove_AddPatternB2(obj, 60, NO_CHANGE, NO_CHANGE, 0, 0.02, 0, 99);
			}
			CallSound(sndShot2);
			waitObj(objEnemy, wt);
			t += wt;
			st++;
		}
	}
}

// èòî’ódê∏éÅÉÇÅ[ÉVÉáÉì
task DesertFairyMotion(objEnemy, iniX, iniY, iniSpeed, iniAngle, iniToX, timer)
{
	TCheckDispINOut(objEnemy, 32);
	
	let ex = iniX;
	let ey = iniY;
	let es = iniSpeed;
	let to_x = iniToX;
	
	let t = 0;
	while(CanShotBullet(objEnemy))
	{
		if (t < timer)
		{
			let tmp = GetCurve_d((t+1)/timer);
			ex = iniX*(1-tmp) + to_x*tmp
		} else if (t < timer*3) {
			let tmp = GetCurve_a(min(1,(t-timer)/(timer*2)))*4;
			ex = iniX*tmp + to_x*(1-tmp);
		} else {
			EraseEnemy(objEnemy);
			return;
		}
		ey += es;
		es = min(es*4, es+iniSpeed/60);
		ObjMove_SetPosition(objEnemy, ex, ey);
		t++;
		waitObj(objEnemy, 1);
	}
}
// èòî’ódê∏éÅÉÇÅ[ÉVÉáÉì
task DesertFairyMotion2(objEnemy, iniX, iniY, iniSpeed, iniAngle, iniToX, timer)
{
	TCheckDispINOut(objEnemy, 32);
	
	let ex = iniX;
	let ey = iniY;
	let es = iniSpeed;
	let to_x = iniToX;
	
	let t = 0;
	while(CanShotBullet(objEnemy) && t < timer)
	{
		if (t < timer)
		{
			let tmp = GetCurve_d((t+1)/timer);
			ex = iniX*(1-tmp) + to_x*tmp
		}
		ey += es;
		es = min(es*2, es+iniSpeed/timer);
		ObjMove_SetPosition(objEnemy, ex, ey);
		t++;
		waitObj(objEnemy, 1);
	}
	t = 0;
	let ox = cos(iniAngle);
	while(CanShotBullet(objEnemy))
	{
		let tmp = GetCurve_d(min(1, (t+1)/240));
		ex += es*ox*tmp;	// ê≥ämÇ…ÇÕäpìxÇ…å¸Ç©Ç§ÇÌÇØÇ∂Ç·Ç»Ç¢
		ey += es;
		if (t < 60) { es -= iniSpeed/45; }
		else { es = min(es*4, es+iniSpeed/30); }
		ObjMove_SetPosition(objEnemy, ex, ey);
		t++;
		waitObj(objEnemy, 1);
	}
}


task R05_GainDamageRate(objEnemy, delay, timer)
{
	timer = trunc(timer);
	ObjEnemy_SetDamageRate(objEnemy, 10, 10);
	waitObj(objEnemy, delay);
	ascent(t in 0 .. timer)
	{
		if (Obj_IsDeleted(objEnemy)) { return; }
		let tmp = 100 / (10-(t+1)/timer*9);
		ObjEnemy_SetDamageRate(objEnemy, tmp, tmp);
		waitObj(objEnemy, 1);
	}
	ObjEnemy_SetDamageRate(objEnemy, 100, 100);
}

// ódê∏Ç≥ÇÒÇÃâÊëúéÊìæ
function GetFairyImageFile(color)
{
	alternative(color%8)
	case(EFF_RED) { return(imgZakoFairyRed); }
	case(EFF_ORANGE) { return(imgZakoFairyEgypt); }
	case(EFF_YELLOW) { return(imgZakoFairyYellow); }
	case(EFF_GREEN) { return(imgZakoFairyGreen); }
	case(EFF_SKY) { return(imgZakoFairyEx2); }
	case(EFF_BLUE) { return(imgZakoFairyBlue); }
	case(EFF_PURPLE) { return(imgZakoFairyEx); }
	others { return(imgZakoFairyDark); }
}
