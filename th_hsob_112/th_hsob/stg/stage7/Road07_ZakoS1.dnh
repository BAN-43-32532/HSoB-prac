// -------------- ìGîzíu -------------- //

task S1_F01(pos, x_span, y_span)
{
	let ct = y_span[2];
	ascent(i in 0 .. ct)
	{
		let ex = pos[0] + y_span[0] * i;
		let ey = pos[1] + y_span[1] * i;
		_F01([ex, ey]);
		WaitRoad(phaseEx(2));
	}

	task _F01(bpos)
	{
		let ct = x_span[2];
		ascent(i in 0 .. ct)
		{
			let ex = bpos[0] + x_span[0] * i;
			let ey = bpos[1] + x_span[1] * i;
			S1_SetEnemyF01(ex, ey, 3, 0, 0, 0);
			WaitRoad(phaseEx(1));
		}
	}
}

task S1_F03d(pos, mspan, count, wt_phase)
{
	ascent(i in 0 .. count)
	{
		let ex = pos[0] + mspan[0]*i;
		let ey = pos[1] + mspan[1]*i;
		let es = 2;
		let ea = atan2(ey-(MinY-32), ex-CenX);
		S1_SetEnemyF03(ex, ey, es, ea, 0, 0);
		WaitRoad(phaseEx(wt_phase));
	}
}


// ------------------------------------------------------------------ //
//                            ìGíPëÃÇÃèàóù                            //
// ------------------------------------------------------------------ //

// éûä‘í‚é~ÇÕÇ»Ç¢ÇÃÇ≈ÇøÇÂÇ¡Ç∆ïœçX
function MoveWithBackS01(objEnemy, iniX, iniY, iniTimer)
{
	let BX = MaxX+384;
	let BY = MinY-128;
	let BS = 0.25;
	ObjMove_SetPosition(objEnemy, iniX, iniY);
	FairyFadeIN_MotionStraight02(objEnemy, iniTimer, (iniX-BX)*BS, (iniY-BY)*BS);
	return(atan2(iniY-BY, iniX-BX));
}
function MoveWithBackS01_GetAngle(x, y)
{
	let BX = MaxX+384;
	let BY = MinY-128;
	let BS = 0.12;
	return(atan2(x-BY, y-BX));
}
task FairyFadeIN_S01(objEnemy, timer)
{
	let objImg = GetEnemyImageID(objEnemy);
	SetEnemyVisible(objEnemy, false);
	Obj_SetRenderPriorityI(objImg, priorityZakoBack);
	ascent(t in 0 .. timer-45)
	{
		if (Obj_IsDeleted(objEnemy)) { break; }
		let tmp = (t+1)/(timer-45);
		let tmp_c = tmp * 96;
		ObjRender_SetAlpha(objImg, min(255,tmp*255*2));
		ObjRender_SetColor(objImg, tmp_c, tmp_c, tmp_c);
		wait(1);
	}
	ascent(t in 0 .. 45)
	{
		if (Obj_IsDeleted(objEnemy)) { break; }
		let tmp = (t+1)/45;
		let tmp_c = 96 + (255-96)*tmp;
		ObjRender_SetColor(objImg, tmp_c, tmp_c, tmp_c);
		wait(1);
	}
	Obj_SetRenderPriorityI(objImg, priorityZako);
	SetEnemyVisible(objEnemy, true);
}

// ç≈èâÇÃódê∏
task S1_SetEnemyF01(iniX, iniY, iniSpeed, iniAngle, iniValue, iniWait)
{
	if (flgStopSetZako) { return; }
	
	let e_type = iniValue%2;
	let eSize = ENEMY_S;
	let eColor = EFF_RED;
	let emnImage = imgZakoFairyRed;
	
	let objEnemy = MakeEnemy(-64, -64, 10, eSize);
	SetEnemyDropItem_Extra(objEnemy, 5);
	DrawFairy(objEnemy, emnImage, FAIRY_SMALL);
	TAct();
	WaitForKilled(objEnemy);
	ZakoFinalize(objEnemy, eColor);
	
	task TAct()
	{
		let timer = phaseExEnemy(4);
		MoveWithBackS01(objEnemy, iniX, iniY, timer);
		FairyFadeIN_S01(objEnemy, timer);
		waitObj(objEnemy, timer);

		TShot();

		let moveAngle = atan2(iniY-0, iniX-CenX);
		Enemy_SetPatternA2(objEnemy, 0, 0, moveAngle, iniSpeed/300, 0, iniSpeed);
		TCheckDispINOut(objEnemy, 16);
	}
	
	// ÉVÉáÉbÉg
	task TShot()
	{
		let wt = [15, 30, 15][DifficultEx()];
		let shot_delay = 0;
		let timer = [120, 60, 120][DifficultEx()] + shot_delay;
		
		let speed = [2, 2, 2][DifficultEx()];
		let speed_max = [6, 2, 6][DifficultEx()];
		let way = 1;
		let way_angle = 45;
		let graphic = BGW_BALL_S_RED;
		
		let t = shot_delay;
		waitObj(objEnemy, shot_delay);
		while(CanShotBullet(objEnemy) && t < timer)
		{
			let sa = GetAngleToPlayer(objEnemy);
			let ss = speed + (speed_max-speed)*(t/timer);
			CreateShotWayA2(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy),
				0, sa, ss/15, ss, graphic, 15, way, way_angle, 0);
			CallSound(sndShot2);
			waitObj(objEnemy, wt);
			t += wt;
		}
	}
}

// è„Ç©ÇÁóàÇƒãAÇ¡ÇƒÇ¢Ç≠ódê∏
task S1_SetEnemyF02(iniX, iniY, iniSpeed, iniAngle, iniValue, iniWait)
{
	if (flgStopSetZako) { return; }
	
	let e_type = iniValue%2;
	let eSize = ENEMY_L;
	let eColor = EFF_RED;
	let emnImage = imgZakoFairyRed;
	
	let objEnemy = MakeEnemy(iniX, iniY, 275, eSize);
	SetEnemyDropItem_Extra(objEnemy, 30);
	DrawFairy(objEnemy, emnImage, FAIRY_LARGE);
	TAct();
	WaitForKilled(objEnemy);
	ZakoFinalize(objEnemy, eColor);
	
	task TAct()
	{
		let timer = phaseExEnemy(4);
		MoveWithBackS01(objEnemy, iniX, iniY, timer);
		FairyFadeIN_S01(objEnemy, timer);
		waitObj(objEnemy, timer);

		waitObj(objEnemy, 30);
		TShot();
		TMove();
	}
	
	// à⁄ìÆ
	task TMove()
	{
		waitObj(objEnemy, phaseExEnemy(4*2));
		Enemy_SetPatternA2(objEnemy, 0, 0, 270, iniSpeed/120, 0, iniSpeed);
		TCheckDispINOut(objEnemy, 16);
	}
	
	// ÉVÉáÉbÉg
	task TShot()
	{
		let iniMuki = [1, -1][iniX < CenX];
		
		ascent(i in 0 .. 1)
		{
			if (!CanShotBullet(objEnemy)) { break; }
			TShot_sub(GetAngleToPlayer(objEnemy)+180, [iniMuki, -iniMuki][i%2], [BGW_SCALE_RED,BGB_SCALE_RED][i%2]);
			waitObj(objEnemy, phaseExEnemy(4));
		}
		ascent(i in 1 .. 7)
		{
			if (!CanShotBullet(objEnemy)) { break; }
			TShot_sub(GetAngleToPlayer(objEnemy)+180, [iniMuki, -iniMuki][i%2], [BGW_SCALE_RED,BGB_SCALE_RED][i%2]);
			waitObj(objEnemy, phaseExEnemy(2));
		}
		
		task TShot_sub(base_angle, muki, graphic)
		{
			let speed = [2.25, 1.75, 2.25][DifficultEx()];
			let srate = [0.1, 0.05, 0.1][DifficultEx()];
			let way = [7, 5, 7][DifficultEx()];
			let way_angle = [18.75, 25, 18.75][DifficultEx()];

			let count = [20, 14, 20][DifficultEx()];
			let wt = [5, 5, 5][DifficultEx()];
			
			if (iniValue)
			{
				/*
				speed = 2.25;
				srate = 0.1;
				way = 7;
				way_angle = 18.75;
				*/
			}
			
			ascent(t in 0 .. count)
			{
				if (!CanShotBullet(objEnemy)) { break; }

				let ba = base_angle + t/count*360*muki;
				ascent(i in 0 .. way)
				{
					let sr = 0 + (way-i)*2;
					let sa = ba - (i-(way-1)/2)*way_angle*muki;
					let sx = ObjMove_GetX(objEnemy) + cos(sa)*sr;
					let sy = ObjMove_GetY(objEnemy) + sin(sa)*sr;
					let ss = speed * (1+i*srate);
					
					My_CreateShotA2(sx, sy, 0, sa, ss/15, ss, graphic, 15);
				}
				waitObj(objEnemy, wt);
			}
		}
	}
}

// óxÇÈâAózíe
task S1_SetEnemyI01(iniX, iniY, iniSpeed, iniAngle, iniValue, iniWait)
{
	if (flgStopSetZako) { return; }
	
	let iniMuki = [1, -1][cos(iniAngle) > 0];
	let rorate_angle = 0;

	let e_type = iniValue%2;
	let eSize = ENEMY_M;
	let eColor = EFF_RED;
	let emnImage = imgZakoFairyRed;
	
	let objEnemy = MakeEnemy(iniX, iniY, 165, eSize);
	SetEnemyDropItem_Extra(objEnemy, 15);
	DrawOnmyou( objEnemy, EFF_RED );
	TAct();
	WaitForKilled(objEnemy);
	ZakoFinalize(objEnemy, eColor);
	
	task TAct()
	{
		TShot();
		TMove();
	}
	
	// à⁄ìÆ
	task TMove()
	{
		TCheckDispINOut(objEnemy, 16);

		rorate_angle = iniAngle + 180 + iniValue;
		let add_a = 3 * iniMuki;
		
		let bx = ObjMove_GetX(objEnemy);
		let by = ObjMove_GetY(objEnemy);
		let vx = iniSpeed*cos(iniAngle);
		let vy = iniSpeed*sin(iniAngle);
		
		let t = 0;
		while(CanShotBullet(objEnemy))
		{
			let tmp_s = 0.33;
			if (t < 180) { tmp_s = 1 - t/180*0.67; }
			else if (t > 180) { tmp_s = 0.33 + min(1,(t-180)/180)*0.67; }
			let er = 64*tmp_s;
			let ex = bx + cos(rorate_angle)*er;
			let ey = by + sin(rorate_angle)*er;
			ObjMove_SetDestAtFrame(objEnemy, ex, ey, 1);
			bx += vx*tmp_s; by += vy*tmp_s;
			rorate_angle += add_a;
			t++;
			waitObj(objEnemy, 1);
		}
	}
	
	// ÉVÉáÉbÉg
	task TShot()
	{
		waitObj(objEnemy, 30);

		let wt = 1;
		let timer = [300, 180, 300][DifficultEx()];
		
		let speed = [2.5, 2, 2.5][DifficultEx()];
		let way = [1, 1, 1][DifficultEx()];
		let move_angle = [30, 30, 30][DifficultEx()];
		let graphic = BGW_RICE_S_RED;
		let shot_ct = [3, 3, 3][DifficultEx()];
		let shot_span = [10, 18, 10][DifficultEx()];
		
		let st = 0;
		let t = 0;
		while(CanShotBullet(objEnemy) && t < timer)
		{
			if (st%shot_span < shot_ct)
			{
				let ba = -90 + cos(rorate_angle)*move_angle;
				ascent(i in 0 .. way)
				{
					let sa = -90 + cos(rorate_angle)*move_angle*(1+i*0.1);
					let sr = 12 + i*4;
					let sx = ObjMove_GetX(objEnemy) + sr*cos(sa);
					let sy = ObjMove_GetY(objEnemy) + sr*sin(sa);
					let ss = speed * (1 + i*0.1);
					My_CreateShotB2(sx, sy, ss*cos(sa), ss*sin(sa), 0, ss/60, 99, ss, graphic, 15);
				}
				if (st%shot_span == 0) { CallSound(sndShot2); }
			}
			waitObj(objEnemy, wt);
			t += wt;
			st++;
		}
	}
}

// îwåiÇ…ó¨ÇÍÇÈódê∏
task S1_SetEnemyF03(iniX, iniY, iniSpeed, iniAngle, iniValue, iniWait)
{
	if (flgStopSetZako) { return; }
	
	let e_type = iniValue%2;
	let eSize = ENEMY_S;
	let eColor = EFF_RED;
	let emnImage = imgZakoFairyRed;
	
	let objEnemy = MakeEnemy(iniX, iniY, 10, eSize);
	SetEnemyDropItem_Extra(objEnemy, 5);
	DrawFairy(objEnemy, emnImage, FAIRY_SMALL);
	TAct();
	WaitForKilled(objEnemy);
	ZakoFinalize(objEnemy, eColor);
	
	task TAct()
	{
		let timer = phaseExEnemy(4);
		let moveAngle = MoveWithBackS01(objEnemy, iniX, iniY, timer);
		FairyFadeIN_S01(objEnemy, timer);
		waitObj(objEnemy, timer);
		TShot();

		let speed = iniSpeed;
		let a = iniAngle;
	//	if (e_type) { a = moveAngle; }
		Enemy_SetPatternA2(objEnemy, 0, 0, a, speed/240, 0, speed);
		TCheckDispINOut(objEnemy, 16);
	}
	
	// ÉVÉáÉbÉg
	task TShot()
	{
		// é©ã@ë_Ç¢
		let wt = 1;
		let shot_delay = 5;
		let count = 1;
		
		let speed = [2, 1.5, 2][DifficultEx()];
		let way = [5, 3, 5][DifficultEx()];
		let way_angle = [5, 2, 5][DifficultEx()];
		let graphic = BGW_BALL_BS_RED;
		
		let st = 0;
		waitObj(objEnemy, shot_delay);
		while(CanShotBullet(objEnemy) && st < count)
		{
			let sa = GetAngleToPlayer(objEnemy);
			let ss = speed * (1+st/10);
			CreateShotWayA2(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy),
				0, sa, ss/60, ss, graphic, 15, way, way_angle, 0);
			CallSound(sndShot2);
			waitObj(objEnemy, wt);
			st++;
		}
	}
}


// îwåiÇ…ó¨ÇÍÇÈódê∏ÇªÇÃÇQ
task S1_SetEnemyF04(iniX, iniY, iniSpeed, iniAngle, iniValue, iniWait)
{
	if (flgStopSetZako) { return; }
	
	let e_type = iniValue%2;
	let eSize = ENEMY_M;
	let eColor = EFF_RED;
	let emnImage = imgZakoFairyRed;
	
	let objEnemy = MakeEnemy(iniX, MinY-16, 200, eSize);
	SetEnemyDropItem_Extra(objEnemy, 20);
	DrawFairy(objEnemy, emnImage, FAIRY_MIDDLE);
	TAct();
	WaitForKilled(objEnemy);
	ZakoFinalize(objEnemy, eColor);
	
	task TAct()
	{
		// égÇ¢ñÇîrèo
		let iway = 5;
		let ba = atan2(MinY-iniY, CenX-iniX) - 15*iniValue;
		ascent(i in 0 .. iway)
		{
			S1_SetEnemyI02(objEnemy, iniX, iniY, 1, 90, ba+i*360/iway, 0, iniValue);
		}

		MoveToSlowdown(objEnemy, iniX, iniY, 120);
		waitObj(objEnemy, 120);
		TMove();
	}
	
	// à⁄ìÆ
	task TMove()
	{
		let speed = 2;
		let a = GetAngleToPlayer(objEnemy);
		Enemy_SetPatternA2(objEnemy, 0, 0, iniAngle, speed/240, 0, speed);
		TCheckDispINOut(objEnemy, 16);
	}
}


// óxÇÈâAózíeÇªÇÃÇQ
task S1_SetEnemyI02(parent, iniX, iniY, iniSpeed, iniAngle, iniValue, iniWait, iniMuki)
{
	if (flgStopSetZako) { return; }

	let e_type = iniValue%2;
	let eSize = ENEMY_M;
	let eColor = EFF_RED;
	let emnImage = imgZakoFairyRed;
	
	let objEnemy = MakeEnemy(iniX, iniY, 50, eSize);
	SetEnemyDropItem_Extra(objEnemy, 10);
	DrawOnmyou( objEnemy, EFF_RED );
	TAct();
	WaitForKilled(objEnemy);
	ZakoFinalize(objEnemy, eColor);
	
	task TAct()
	{
		TShot();
		TMove();
	}
	
	// à⁄ìÆ
	task TMove()
	{

		let add_a = 3 * iniMuki;
		
		let bx = ObjMove_GetX(objEnemy);
		let by = ObjMove_GetY(objEnemy);
		let vx = iniSpeed*cos(iniAngle);
		let vy = iniSpeed*sin(iniAngle);
		let ba = iniValue;
		
		let t = 0;
		
		ZakoEnterEffect_Onmyou(objEnemy, 120);
		while(CanShotBullet(objEnemy) && t <= 120)
		{
			let tmp = min((1-t/120)*4, 1);
			let br = sin((t+1)/120*90)*64;
			if (!Obj_IsDeleted(parent))
			{
				bx = ObjMove_GetX(parent);
				by = ObjMove_GetY(parent);
			}
			ObjMove_SetPosition(objEnemy, bx+cos(ba)*br, by+sin(ba)*br);
			ba += add_a*tmp;
			t++;
			waitObj(objEnemy, 1);
		}
		if (CanShotBullet(objEnemy))
		{
			Enemy_SetPatternA2(objEnemy, 0, 0, ba+90*iniMuki, 4/240, iniMuki, 8);
			TCheckDispINOut(objEnemy, 16);
		}
	}
	
	// ÉVÉáÉbÉg
	task TShot()
	{
		waitObj(objEnemy, 180);

		let wt = 2;
		let timer = [150, 90, 150][DifficultEx()];
		
		let speed = [1.5, 1.5, 1.5][DifficultEx()];
		let way = [2, 2, 2][DifficultEx()];
		let graphic = BGW_ICE_RED;
		let shot_span = [10, 10, 10][DifficultEx()];
		let shot_count = [6, 3, 6][DifficultEx()];
		
		let st = 0;
		let t = 0;
		while(CanShotBullet(objEnemy) && t < timer)
		{
			if (st%shot_span < shot_count)
			{
				let ss = speed * (1 + st*0.015);
				let sa = Enemy_GetAngle(objEnemy) + 180*iniMuki;
				CreateShotWayA2(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy),
					0, sa, ss/60, ss, graphic, 15, way, 3, 0);
			}
			waitObj(objEnemy, wt);
			t += wt;
			st++;
		}
	}
}
