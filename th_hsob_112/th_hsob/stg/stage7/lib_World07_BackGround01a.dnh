// ----------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------
//　ex新規追加分
//　遷移はﾎﾛｳﾁｬﾝｽ→陶磁器の墓場→無明釜→無明の炉

//　陶磁器の墓場
task SetWorld07a()
{
	let IDX = 5;
	let world07_path = LoadingImageFile_StgWorld(7);
	let baseZ	= 0;
	let ZSpeed	= 1.25;

	let objScene 	= GetEnemyBossSceneObjectID();
	let OnSpell	= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);

	// フォグなしのやつ
	let obj		= [
		CreateTexture01( world07_path[0] ),
		CreateTexture01( world07_path[1] ),
		CreateTexture01( world07_path[1] ),
	];
	// フォグを透明度に反映するやつ
	let objMask		= [
		CreateTexture01( world07_path[0] ),
		CreateTexture01( world07_path[0] ),
	];
	// 現フレームを描画するオブジェクト
	let objImg = [
		ObjPrim_Create(OBJ_SPRITE_2D),
		ObjPrim_Create(OBJ_SPRITE_2D),
	];
	
	//レンダリングターゲットに使用するテクスチャ
	let renderTexture = "RT_STG07a";
	let renderMask = "RT_STG07amask";
	CreateRenderTarget( renderTexture );
	CreateRenderTarget( renderMask );
	
	let frame	= 0;
	let move1	= 0;
	let moveA	= 0;
	let ctr		= 0;
	let sLayer	= [ world_layer, world_layer+1 ];
	
	// 3Dクリップ変更（終点2000→4096）
	SetCameraPerspectiveClip( 10, 4096 );
	

	// ---- こっちは描画するやつ
	//　霧用のダミー
	ObjRender_SetPosition( obj[0], -2048, 0, 0 );
	ObjRender_SetScaleXYZ( obj[0], 2, 2, 0 );
	ObjSprite3D_SetBillboard( obj[0], true );
	Obj_SetRenderPriorityI( obj[0], world_layer+1 );
	ObjRender_SetFogEnable( obj[0], false );
	
	//　草（上
	ObjRender_SetPosition( obj[1], -512, -128 - 8, 0 );
	ObjRender_SetAngleXYZ( obj[1], 90, 0, 90 );
	ObjRender_SetColor( obj[1], 192, 192, 192 );
	Obj_SetRenderPriorityI( obj[1], world_layer+1 );
	ObjRender_SetFogEnable( obj[1], false );

	//　草（上
	ObjRender_SetPosition( obj[2], -512, -128, 0 );
	ObjRender_SetAngleXYZ( obj[2], 90, 180, 90 );
	ObjRender_SetAlpha( obj[2], 128 );
	Obj_SetRenderPriorityI( obj[2], world_layer+2 );
	ObjRender_SetFogEnable( obj[2], false );

	
	// ---- こっちはマスク
	//　霧用のダミー
	ObjRender_SetPosition( objMask[0], -2048, 0, 0 );
	ObjRender_SetScaleXYZ( objMask[0], 2, 2, 0 );
	ObjSprite3D_SetBillboard( objMask[0], true );
	Obj_SetRenderPriorityI( objMask[0], world_layer );

	//　草（下
	ObjRender_SetPosition( objMask[1], -512, -128, 0 );
	ObjRender_SetAngleXYZ( objMask[1], 90, 0, 90 );
	Obj_SetRenderPriorityI( objMask[1], world_layer );
	
	// ---- 現フレームを描画するオブジェクト
	Obj_SetRenderPriorityI(objImg[0], world_layer+4);
	ObjRender_SetPosition(objImg[0], 0, 0, 0);
	
	Obj_SetRenderPriorityI(objImg[1], world_layer+3);
	ObjPrim_SetTexture(objImg[1], world07_path[0]);
	ObjSprite2D_SetDestRect(objImg[1], 0, 0, 512, 512);
	ObjSprite2D_SetSourceRect(objImg[1], 0, 0, 512, 512);
	ObjRender_SetColor(objImg[1], 0, 0, 0);

	// ---- シェーダ作成、反映
	// このシェーダについては強制反映（代用えへくととかめどいです、死んでしまいます）
	let objShader = ObjShader_Create();
	ObjShader_SetShaderF(objShader, hlslMask3);
	ObjShader_SetTexture(objShader, "textureMask_", renderMask);
	ObjShader_SetFloatArray(objShader, "posFrame_", [0, 0, 1024, 512]);
	ObjShader_SetFloatArray(objShader, "fogColor_", [32/255,64/255,96/255,255/255]);
	ObjShader_SetTechnique(objShader, "TecMask");
	ObjShader_SetShaderO(objImg[0], objShader);
	

	while(IsEndBG(IDX))
	{
		objScene 	= GetEnemyBossSceneObjectID();
		OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);

		move1 = 1 * sin( moveA );
		
		SetFogParam( 700, 1200, 255, 0, 0 );
		SetCameraFocusXYZ( 0, 0, 0 );
		SetCameraRadius( 64 );
		SetCameraAzimuthAngle( 0 + 0 * cos(frame/8) );
		SetCameraElevationAngle( 8 + 0 * sin(frame/4) );
		
		ObjSprite3D_SetSourceDestRect( obj[1], 0, 0 + baseZ, 1024, 1024 + baseZ );
		ObjSprite3D_SetSourceDestRect( obj[2], 0, 0 - baseZ, 1024, 1024 - baseZ );
		
		if( frame%90 == 0 ){
			//　木
			let r1 = randEffect(0,72);
			let r2 = randEffect(0,64);
			if( ctr%2 == 0 ){
				World07Object03( 0, [-1024,192-r1,128-r2], [ZSpeed,0.02,-0.1], 780, [-1,1,1] );
				World07Object03( 1, [-1024,192-r1,128-r2], [ZSpeed,0.02,-0.1], 780, [-1,1,1] );
			}
			else{
				World07Object03( 0, [-1024,192-r1,-192-r2], [ZSpeed,0.02,0], 780, [1,1,1] );
				World07Object03( 1, [-1024,192-r1,-192-r2], [ZSpeed,0.02,0], 780, [1,1,1] );
			}
			ctr++;
		}
		
		if( frame%15 == 0 ){
			World07Object02( [-1024,-128-randEffect(2,6),0+randEffect(-256,256)], [ZSpeed,0,0], 780, [randEffect(0,360),randEffect(0,360),0], randEffect(0.1,0.4) );
		}
		
		if (!OnSpell)
		{
			// 雲はスペカ終わってから配置でいいや
			if( frame%4 == 0 ){
				CreateCloud_(
					[randEffect(-768,0),-256-randEffect(2,6),0+randEffect(-256,256)],
					[ZSpeed,0,randEffect(-0.6,0.6)],
					randEffect(1.2,1.6), randEffect(60,120), [128,144,160], randEffect(16,64)
				);
			}

			// オブジェクトをテクスチャに描画
			RenderToTextureA1(renderTexture, world_layer+1, world_layer+2, true);
			// マスクをテクスチャに描画
			RenderToTextureA1(renderMask, world_layer, world_layer, true);
			
			//現フレーム描画用オブジェクトを設定
			ObjPrim_SetTexture(objImg[0], renderTexture);
			ObjShader_SetTexture(objShader, "textureMask_", renderMask);
			ObjSprite2D_SetSourceRect(objImg[0], 0, 0, 512, 512);
			ObjSprite2D_SetDestRect(objImg[0], 0, 0, 512, 512);

			ascent( i in 0..length(obj) ){
				Obj_SetVisible( obj[i], true );
			}
			ascent( i in 0..length(objMask) ){
				Obj_SetVisible( objMask[i], true );
			}
			ascent( i in 0..length(objImg) ){
				Obj_SetVisible( objImg[i], true );
			}
		}
		else
		{
			ascent( i in 0..length(obj) ){
				Obj_SetVisible( obj[i], false );
			}
			ascent( i in 0..length(objMask) ){
				Obj_SetVisible( objMask[i], false );
			}
			ascent( i in 0..length(objImg) ){
				Obj_SetVisible( objImg[i], false );
			}
		}
		
		frame++;
		if( move1 < 1 ){ moveA += 1; }
		
		baseZ += ZSpeed;
		yield;
	}
	let timer = GetAreaCommonData(CAREA_STAGE, "STG7R_BG7A", 1);
	// 穴
	World07Object04( [-512-timer*ZSpeed*1.5,-128,-64], [ZSpeed,0,0], 60*600, [0,0,0],[90,90,0], [2,2,2] );
	// 暗転
	W07_Blackout(timer-30, 30, 30, 180, world_layer+4);

	ascent(endT in 0 .. timer)
	{
		let tmp = endT/timer;
		let tmp2 = GetCurve_ad(max(0,tmp-3/4)*4);
		let tmp3 = GetCurve_ad(max(0,tmp-1/2)*2);
		
		move1 = 1 * sin( moveA );
		
		SetFogParam( 700, 1200, 255, 0, 0 );
		SetCameraFocusXYZ( 0, tmp2*128, 0 );
		SetCameraRadius( 64 );
		SetCameraAzimuthAngle( 0 + 0 * cos(frame/8) );
		SetCameraElevationAngle( 8 + 0 * sin(frame/4) + tmp2*24 );
		
		ObjSprite3D_SetSourceDestRect( obj[1], 0, 0 + baseZ, 1024, 1024 + baseZ );
		ObjSprite3D_SetSourceDestRect( obj[2], 0, 0 - baseZ, 1024, 1024 - baseZ );
		
		if( frame%4 == 0 && endT <= timer-120 ){
			CreateCloud_(
				[randEffect(-768,0),-256-randEffect(2,6),0+randEffect(-256,256)],
				[ZSpeed,0,randEffect(-0.6,0.6)],
				randEffect(1.2,1.6), randEffect(60,120), [128,144,160], randEffect(16,64)
			);
		}
		
		// オブジェクトをテクスチャに描画
		RenderToTextureA1(renderTexture, world_layer+1, world_layer+2, true);
		// マスクをテクスチャに描画
		RenderToTextureA1(renderMask, world_layer, world_layer, true);
		
		//現フレーム描画用オブジェクトを設定
		ObjPrim_SetTexture(objImg[0], renderTexture);
		ObjShader_SetTexture(objShader, "textureMask_", renderMask);
		ObjSprite2D_SetSourceRect(objImg[0], 0, 0, 512, 512);
		ObjSprite2D_SetDestRect(objImg[0], 0, 0, 512, 512);
		
		frame++;
		if( move1 < 1 ){ moveA += 1; }
		
		ZSpeed = 1.25*(1-tmp) + tmp3*5;
		baseZ += ZSpeed;
		yield;
	}

	ascent( i in 0..length(obj) ){
		Obj_Delete( obj[i] );
	}
	ascent( i in 0..length(objMask) ){
		Obj_Delete( objMask[i] );
	}
	ascent( i in 0..length(objImg) ){
		Obj_Delete( objImg[i] );
	}
	Obj_Delete(objShader);
	DEL_FLG[IDX] = true;
	
	// 暗転中に次の背景
	SetWorld07b();
	
	//　壺
	task World07Object02( m_pos, add_pos, m_kill, angle, scale ){
		let frame = 0;
		
		//　モデル初期化
		let obj		= ObjMesh_Create();
		ObjMesh_Load( obj, world07_path[6] );
		Obj_SetRenderPriorityI( obj, world_layer+1 );
		ObjRender_SetBlendType( obj, BLEND_ALPHA );
		ObjRender_SetAngleXYZ( obj, angle[0], angle[1], angle[2] );
		ObjRender_SetScaleXYZ( obj, scale, scale, scale );
		ObjRender_SetFogEnable( obj, false );
		
		while( true && frame < m_kill && !DEL_FLG[IDX] ){
			ObjRender_SetPosition( obj, m_pos[0], m_pos[1], m_pos[2] );
			Obj_SetVisible( obj, !OnSpell );
			
			frame++;
			m_pos[0] = m_pos[0] + ZSpeed;
			m_pos[1] = m_pos[1] + add_pos[1];
			m_pos[2] = m_pos[2] + add_pos[2];
			
			yield;
		}
		Obj_Delete( obj );
	}
	
	//　木
	task World07Object03( m_type, m_pos, add_pos, m_kill, scale ){
		let frame = 0;
		let m_index = [3, 9][m_type];
		
		//　モデル初期化
		let obj		= ObjMesh_Create();
		ObjMesh_Load( obj, world07_path[m_index] );
		ObjRender_SetBlendType( obj, BLEND_ALPHA );
		ObjRender_SetAngleY( obj, 90 );
		ObjRender_SetScaleXYZ( obj, scale[0], scale[1], scale[2] );
		if (m_type)
		{
			Obj_SetRenderPriorityI( obj, world_layer );

			while( frame < m_kill && !DEL_FLG[IDX] ){
				if (frame < 240)
				{
					let al = (frame+1)/240 * 255;
					ObjMesh_SetAlpha( obj, al );
				}
				ObjRender_SetPosition( obj, m_pos[0], m_pos[1], m_pos[2] );
				Obj_SetVisible( obj, !OnSpell );
				
				frame++;
				m_pos[0] = m_pos[0] + ZSpeed;
				m_pos[1] = m_pos[1] + add_pos[1];
				m_pos[2] = m_pos[2] + add_pos[2];
				
				yield;
			}
		}
		else
		{
			ObjRender_SetFogEnable( obj, false );
			Obj_SetRenderPriorityI( obj, world_layer+1 );

			while( frame < m_kill && !DEL_FLG[IDX] ){
				ObjRender_SetPosition( obj, m_pos[0], m_pos[1], m_pos[2] );
				Obj_SetVisible( obj, !OnSpell );
				
				frame++;
				m_pos[0] = m_pos[0] + ZSpeed;
				m_pos[1] = m_pos[1] + add_pos[1];
				m_pos[2] = m_pos[2] + add_pos[2];
				
				yield;
			}
		}
		
		Obj_Delete( obj );
	}
	//　森にも穴はあるんだよなぁ…
	task World07Object04( m_pos, add_pos, m_kill, color, angle, scale ){
		let frame = 0;
		
		let obj		= [
			ObjPrim_Create(OBJ_SPRITE_3D),
			CreateTexture01( world07_path[4] )
		];
		
		ObjPrim_SetTexture( obj[0], world07_path[10] );
		ObjRender_SetBlendType( obj[0], BLEND_ALPHA );
		Obj_SetRenderPriorityI( obj[0], world_layer );
		ObjSprite3D_SetSourceDestRect( obj[0], 0, 0, 512, 512 );
		ObjRender_SetAngleXYZ( obj[0], angle[0], angle[1], angle[2] );
		ObjRender_SetScaleXYZ( obj[0], scale[0], scale[1], scale[2] );
		ObjRender_SetColor( obj[0], color[0], color[1], color[2] );
		
		//　Ｎ角形 + 1 * 2が頂点の数になる
		let kaku	= 32;
		let ten		= ( kaku + 1 ) * 2;
		//　円形
		Obj_SetRenderPriorityI( obj[1], world_layer+3 );
		ObjRender_SetAngleXYZ( obj[1], angle[0], angle[1], angle[2] );
		ObjPrim_SetPrimitiveType( obj[1], PRIMITIVE_TRIANGLESTRIP );
		ObjPrim_SetVertexCount( obj[1], ten );
		ascent( i in 0 .. ten/2 ){
			let pc = 180 + i*180/kaku;
			ObjPrim_SetVertexPosition( obj[1], i*2+0, 512 * cos(pc), 512 * sin(pc), 0 );
			ObjPrim_SetVertexPosition( obj[1], i*2+1, 512 * cos(pc), 512 * sin(pc), 1200 );
			ObjPrim_SetVertexUVT( obj[1], i*2+0, i/2*4096/kaku, 0 );
			ObjPrim_SetVertexUVT( obj[1], i*2+1, i/2*4096/kaku, 1024 );
			ObjPrim_SetVertexColor( obj[1], i*2+0, 0, 0, 0 );
			ObjPrim_SetVertexColor( obj[1], i*2+1, 255, 128, 128 );
		}
		ObjRender_SetFogEnable(obj[1], false);
		
		while( frame < m_kill && !DEL_FLG[IDX] ){
			ObjRender_SetPosition( obj[0], m_pos[0], m_pos[1], m_pos[2] );
			ObjRender_SetPosition( obj[1], m_pos[0], m_pos[1], m_pos[2] );
			
			/*
			let al = (1+sin(frame*24)/8+sin(frame*15)/15)*255;
			if (frame < 120) { al *= (frame+1)/120; }
			ObjRender_SetAlpha( obj[1], al );
			*/
			
			frame++;
			m_pos[0] = m_pos[0] + ZSpeed;
			m_pos[1] = m_pos[1] + add_pos[1];
			m_pos[2] = m_pos[2] + add_pos[2];
			
			yield;
		}
		ascent(i in 0 .. length(obj)) { Obj_Delete( obj[i] ); }
	}
	//　流れる雲
	task CreateCloud_( pos, movep, sca, long, rgb_array, alpha ){
		let ID			= ObjPrim_Create(OBJ_SPRITE_3D);
		let objScene 	= GetEnemyBossSceneObjectID();
		let OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
		let move		= [0,0,0];
		let frame		= 0;
		let move1		= 0;
		let moveA		= 0;
		
		ObjRender_SetPosition(ID, pos[0], pos[1], pos[2] );
		ObjPrim_SetTexture(ID, effect_path[1] );
		ObjRender_SetBlendType(ID, BLEND_ALPHA );
		Obj_SetRenderPriorityI(ID, world_layer+4 );
		ObjRender_SetScaleXYZ(ID, sca, sca, 0 );
		ObjRender_SetAngleZ(ID, randEffect(0,360) );
		ObjRender_SetColor(ID, rgb_array[0], rgb_array[1], rgb_array[2] );
		ObjSprite3D_SetSourceDestRect(ID, 0, 0, 256, 256 );
		ObjSprite3D_SetBillboard(ID, true );
		ObjRender_SetFogEnable(ID, false);
		
		while( move1 < 1 && !DEL_FLG[IDX] ){
			objScene 	= GetEnemyBossSceneObjectID();
			OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
			
			move1 = 1 * sin( moveA );
			
			ObjRender_SetPosition(ID, pos[0]+move[0], pos[1]+move[1], pos[2]+move[2] );
			ObjRender_SetAlpha(ID, move1*alpha );
			
			if( !OnSpell ){
				frame++;
				moveA += 1;
				move[0] = move[0] + movep[0];
				move[1] = move[1] + movep[1];
				move[2] = move[2] + movep[2];
			}
			else{ break; }
			
			yield;
		}
		move1 = 0;
		moveA = 0;
		while( frame < long && !DEL_FLG[IDX] ){
			objScene 	= GetEnemyBossSceneObjectID();
			OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
			
			ObjRender_SetPosition(ID, pos[0]+move[0], pos[1]+move[1], pos[2]+move[2] );
			
			if( !OnSpell ){
				frame++;
				move[0] = move[0] + movep[0];
				move[1] = move[1] + movep[1];
				move[2] = move[2] + movep[2];
			}
			else{ break; }
			
			yield;
		}
		while( move1 < 1 && !DEL_FLG[IDX] ){
			objScene 	= GetEnemyBossSceneObjectID();
			OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
			
			move1 = 1 * sin( moveA );
			
			ObjRender_SetPosition(ID, pos[0]+move[0], pos[1]+move[1], pos[2]+move[2] );
			ObjRender_SetAlpha(ID, alpha - move1*alpha );
			
			if( !OnSpell ){
				frame++;
				moveA += 1;
				move[0] = move[0] + movep[0];
				move[1] = move[1] + movep[1];
				move[2] = move[2] + movep[2];
			}
			else{ break; }
			
			yield;
		}
		Obj_Delete( ID );
	}
}

//　無明窯
task SetWorld07b(){
	let world07_path = LoadingImageFile_StgWorld( 7 );
	let IDX		= 6;
	let baseZ	= 0;
	let ZSpeed	= 1;
	let obj		= [
		ObjPrim_Create(OBJ_SPRITE_2D),
		CreateTexture01( world07_path[4] ),
	];
	let frame	= 0;
	let move1	= 0;
	let moveA	= 0;
	let ctr		= 0;
	let sLayer	= [ world_layer, world_layer + 1 ];
	
	//　Ｎ角形 + 1 * 2が頂点の数になる
	let kaku	= 32;
	let ten		= ( kaku + 1 ) * 2;
	//　サイズ / 頂点数
	let _rect		= [ 512 / kaku, 512 / kaku ];
	let i = 0;
	let j = 1;
	let pc = 0;
	
	// 3Dクリップ変更（終点2000→4096）
	SetCameraPerspectiveClip( 10, 4096 );
	
	//　霧用のダミー
	Obj_SetRenderPriorityI(obj[0], world_layer);
	ObjPrim_SetTexture(obj[0], world07_path[0]);
	ObjSprite2D_SetDestRect(obj[0], 0, 0, 512, 512);
	ObjSprite2D_SetSourceRect(obj[0], 0, 0, 512, 512);
	ObjRender_SetColor(obj[0], 32, 8, 0);
	Obj_SetRenderPriorityI( obj[0], world_layer+1 );
	
	//　円形
	ObjRender_SetPosition( obj[1], 0, 0, -64 );
	ObjRender_SetAngleXYZ( obj[1], 0, 90, 0 );
	ObjPrim_SetPrimitiveType( obj[1], PRIMITIVE_TRIANGLESTRIP );
	ObjPrim_SetVertexCount( obj[1], ten );
	Obj_SetRenderPriorityI( obj[1], world_layer+1 );
	
	while(IsEndBG(IDX))
	{
		move1 = 1 * sin( moveA );
		
		SetFogParam( 0, 1024 + move1*512, 32, 8, 0 );
		SetCameraFocusXYZ( 0, 0, 0 );
		SetCameraRadius( 128 + 32 * sin(frame/2) );
		SetCameraAzimuthAngle( 0 + 2 * cos(frame) );
		SetCameraElevationAngle( -64 + move1*32 - 16 * sin(frame/4) );
		
		loop( ten / 2 ){
			ObjPrim_SetVertexPosition( obj[1], i, 512 * cos(pc), 512 * sin(pc), 256 );
			ObjPrim_SetVertexPosition( obj[1], j, 512 * cos(pc), 512 * sin(pc), -2048 );
			ObjPrim_SetVertexUVT( obj[1], i, 0 + (i/2) * (4096/kaku), 0 + frame*2 );
			ObjPrim_SetVertexUVT( obj[1], j, 0 + (i/2) * (4096/kaku), 2048 + frame*2 );
			i += 2;
			j += 2;
			pc += 360 / kaku;
		}
		i = 0;
		j = 1;
		pc = 0;
		
		//　火の粉
		if( frame%2 == 0 ){
			CreateSparks( [-1024,randEffect(-512,512),randEffect(-512,512)], [randEffect(1,8),0,0], randEffect(0.1,0.2), randEffect(60,120), [255,128,0], 255 );
		}
		
		//　プリミティブのせいでパース合ってないので速度で位置調整
		//　そもそもメッシュのUVスクロールできれば楽なのにHLSL側からしか操作できないのマジ噛み合ってない
		if( frame%150 == 0 ){
			let ag = randEffect(0,360);
			World07Object01( [-1024-1024,512*cos(ag),512*sin(ag)], [3.1,0,0], ag, 900, 1 );
		}
		
		frame++;
		if( move1 < 1 ){ moveA += 1; }
		
		yield;
	}

	SetAreaCommonData(CAREA_STAGE, "STG7R_BG7C", frame);
	DEL_FLG[IDX] = true;

	SetWorld07c();
	
	let timer = 120;
	ascent(endT in 0 .. timer)
	{
		let tmp = endT/timer;
		let tmp2 = max(0,tmp-7/8)*8;

		loop( ten / 2 ){
			ObjPrim_SetVertexPosition( obj[1], i, 512 * cos(pc), 512 * sin(pc), 256 );
			ObjPrim_SetVertexPosition( obj[1], j, 512 * cos(pc), 512 * sin(pc), -2048 );
			ObjPrim_SetVertexUVT( obj[1], i, 0 + (i/2) * (4096/kaku), 0 + frame*2 );
			ObjPrim_SetVertexUVT( obj[1], j, 0 + (i/2) * (4096/kaku), 2048 + frame*2 );
			i += 2;
			j += 2;
			pc += 360 / kaku;
		}
		ObjRender_SetColor(obj[0], 32*tmp, 8*tmp, 0);
		ObjRender_SetAlpha(obj[0], (1-tmp2)*255);
		ObjRender_SetAlpha(obj[1], (1-tmp)*255);
		i = 0;
		j = 1;
		pc = 0;
		
		frame++;
		yield;
	}

	ascent( i in 0..length(obj) ){
		Obj_Delete( obj[i] );
	}
	
	//　なんか
	task World07Object01( m_pos, add_pos, angle, m_kill, scale ){
		let frame = 0;
		let offset_pos = 0;
		
		//　モデル初期化
		let obj		= ObjMesh_Create();
		ObjMesh_Load( obj, world07_path[5] );
		Obj_SetRenderPriorityI( obj, world_layer+1 );
		ObjRender_SetBlendType( obj, BLEND_ALPHA );
		ObjRender_SetScaleXYZ( obj, scale, -scale, scale );
		
		while( frame < m_kill && !DEL_FLG[IDX] ){
			ObjRender_SetPosition( obj, m_pos[0], m_pos[1], m_pos[2] );
			ObjRender_SetAngleXYZ( obj, angle - 135, 0, 90 );
			
			frame++;
			m_pos[0] = m_pos[0] + add_pos[0];
			m_pos[1] = m_pos[1] + add_pos[1];
			m_pos[2] = m_pos[2] + add_pos[2];
			
			yield;
		}
		if ( frame < m_kill )
		{
			let alpha = 255;
			while( frame < m_kill && alpha > 0 ){
				ObjRender_SetPosition( obj, m_pos[0], m_pos[1], m_pos[2] );
				ObjRender_SetAngleXYZ( obj, angle - 135, 0, 90 );
				ObjMesh_SetAlpha( obj, alpha );
				
				frame++;
				m_pos[0] = m_pos[0] + add_pos[0];
				m_pos[1] = m_pos[1] + add_pos[1];
				m_pos[2] = m_pos[2] + add_pos[2];
				alpha -= 15;
				
				yield;
			}
		}
		Obj_Delete( obj );
	}
}

//　無明の炉
task SetWorld07c(){
	let world07_path = LoadingImageFile_StgWorld( 7 );
	let IDX		= 7;
	let baseZ	= 0;
	let ZSpeed	= 1;
	let frame	= 0;
	let move1	= 0;
	let moveA	= 0;
	let ctr		= 0;
	let sLayer	= [ world_layer, world_layer + 1 ];
	let frame07b	= GetAreaCommonData(CAREA_STAGE, "STG7R_BG7C", 0);
	
	// 3Dクリップ変更（終点2000→4096）
	SetCameraPerspectiveClip( 10, 4096 );
	
	let msh = ObjMesh_Create();
	ObjRender_SetPosition( msh, 0, -32, 0 );
	ObjMesh_Load( msh, world07_path[7] );
	Obj_SetRenderPriorityI( msh, world_layer );
	ObjRender_SetBlendType( msh, BLEND_ALPHA );
	
	while(IsEndBG(IDX))
	{
		move1 = 1 * sin( moveA );
		
		if (move1 < 1)
		{
			SetFogParam( 0-512*move1, 1536-1024*move1, 32-32*move1, 8-8*move1, 0 );
			SetCameraFocusXYZ( 0, 0, 0 );
			SetCameraRadius( 128 + 32 * sin(frame07b/2) * (1-move1) );
			SetCameraAzimuthAngle( 2*cos(frame07b)*(1-move1) + frame/32*move1 );
			SetCameraElevationAngle( (-32-16*sin(frame07b/4)) * (1-move1) - 4*move1 );

			ObjRender_SetPosition( msh, -128*(1-move1)^2, -32 - 128*(1-move1), 0 );
			ObjRender_SetAngleXYZ( msh, 0, 0, -90*(1-move1) );
			
			let cl = min(1,max(0,move1-0.5)/0.5)*255;
			let al = [0, 255][cl > 0];
			ObjMesh_SetColor( msh, cl, cl, cl );
			ObjMesh_SetAlpha( msh, al );
			frame07b++;
		} else {
			SetFogParam( -512, 512, 0, 0, 0 );
			SetCameraFocusXYZ( 0, 0, 0 );
			SetCameraRadius( 128 );
			SetCameraAzimuthAngle( frame/32 );
			SetCameraElevationAngle( -4 );
		}

		if( frame%8 == 0 ){
			//　火の粉
			CreateSparks(
				[randEffect(-16,16),-32,randEffect(-16,16)],
				[0,randEffect(0.2,0.4),0], randEffect(0.02,0.08),
				randEffect(60,180), [255,128,0], 255
			);
			//　炎
			CreateCloud_(
				[randEffect(-16,16),-32,randEffect(-16,16)],
				[randEffect(-0.1,0.1),randEffect(0,0.1),randEffect(-0.1,0.1)],
				randEffect(0.2,0.4), randEffect(60,120), [255,randEffect(0,128),0], randEffect(32,64)
			);
		}
		
		if( frame%16 == 0 ){
			//　煙
			CreateCloud(
				[randEffect(-64,64),-64,randEffect(-64,64)],
				[randEffect(-0.2,0.2),0,randEffect(-0.2,0.2)],
				randEffect(0.4,0.6), randEffect(60,120), [255,255,255], randEffect(32,64)
			);
		}
		
		frame++;
		if( move1 < 1 ){ moveA += 0.2; }
		
		yield;
	}
	Obj_Delete( msh );
	
	//　流れる雲（加算ver
	task CreateCloud_( pos, movep, sca, long, rgb_array, alpha ){
		let ID			= ObjPrim_Create(OBJ_SPRITE_3D);
		let objScene 	= GetEnemyBossSceneObjectID();
		let OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
		let move		= [0,0,0];
		let frame		= 0;
		let move1		= 0;
		let moveA		= 0;
		
		ObjRender_SetPosition(ID, pos[0], pos[1], pos[2] );
		ObjPrim_SetTexture(ID, effect_path[1] );
		ObjRender_SetBlendType(ID, BLEND_ADD_ARGB );
		Obj_SetRenderPriorityI(ID, world_layer );
		ObjRender_SetScaleXYZ(ID, sca, sca, 0 );
		ObjRender_SetAngleZ(ID, randEffect(0,360) );
		ObjRender_SetColor(ID, rgb_array[0], rgb_array[1], rgb_array[2] );
		ObjSprite3D_SetSourceDestRect(ID, 0, 0, 256, 256 );
		ObjSprite3D_SetBillboard(ID, true );
		
		while( move1 < 1 ){
			objScene 	= GetEnemyBossSceneObjectID();
			OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
			
			move1 = 1 * sin( moveA );
			
			ObjRender_SetPosition(ID, pos[0]+move[0], pos[1]+move[1], pos[2]+move[2] );
			ObjRender_SetAlpha(ID, move1*alpha );
			
			if( !OnSpell ){
				frame++;
				moveA += 1;
				move[0] = move[0] + movep[0];
				move[1] = move[1] + movep[1];
				move[2] = move[2] + movep[2];
			}
			else{ break; }
			
			yield;
		}
		move1 = 0;
		moveA = 0;
		while( frame < long ){
			objScene 	= GetEnemyBossSceneObjectID();
			OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
			
			ObjRender_SetPosition(ID, pos[0]+move[0], pos[1]+move[1], pos[2]+move[2] );
			
			if( !OnSpell ){
				frame++;
				move[0] = move[0] + movep[0];
				move[1] = move[1] + movep[1];
				move[2] = move[2] + movep[2];
			}
			else{ break; }
			
			yield;
		}
		while( move1 < 1 ){
			objScene 	= GetEnemyBossSceneObjectID();
			OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
			
			move1 = 1 * sin( moveA );
			
			ObjRender_SetPosition(ID, pos[0]+move[0], pos[1]+move[1], pos[2]+move[2] );
			ObjRender_SetAlpha(ID, alpha - move1*alpha );
			
			if( !OnSpell ){
				frame++;
				moveA += 1;
				move[0] = move[0] + movep[0];
				move[1] = move[1] + movep[1];
				move[2] = move[2] + movep[2];
			}
			else{ break; }
			
			yield;
		}
		Obj_Delete( ID );
	}
}

// 暗転
task W07_Blackout(delay, timer, stay, timer2, priI)
{
	wait(delay);

	let world07_path = LoadingImageFile_StgWorld(7);
	let objImg = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(objImg, priI);
	ObjPrim_SetTexture(objImg, world07_path[0]);
	ObjSprite2D_SetDestRect(objImg, 0, 0, 512, 512);
	ObjSprite2D_SetSourceRect(objImg, 0, 0, 512, 512);
	ObjRender_SetColor(objImg, 0, 0, 0);

	ascent(t in 0 .. timer)
	{
		let tmp = GetCurve_d((t+1)/timer);
		ObjRender_SetAlpha(objImg, tmp*255);
		yield;
	}
	wait(stay);
	descent(t in 0 .. timer2)
	{
		let tmp = GetCurve_d((t+1)/timer2);
		ObjRender_SetAlpha(objImg, tmp*255);
		yield;
	}
	Obj_Delete(objImg);
}