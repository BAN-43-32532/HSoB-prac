// -------------- 敵配置 -------------- //

task S7_F01(pos, mpos, speed, angle, count, wt_phase)
{
	ascent(i in 0 .. count)
	{
		let tmp = i-(count-1)/2;
		let ex = pos[0] + mpos[0]*tmp;
		let ey = pos[1] + mpos[1]*tmp;
		S7_SetEnemyF01(ex, ey, speed, angle, 0, phaseEx(2));
		WaitRoad(phaseEx(wt_phase));
	}
}

task S7_I01(way, muki)
{
	ascent(i in 0 .. way)
	{
		S7_SetEnemyI01(CenX, MaxY+64, 0.75, 270, i/way*360, 0.375*muki, 0);
	}
}


task S7_H01(pos, way, r, wt_phase)
{
	let ba = atan2(pos[1]-(CenY+128),pos[0]-CenX);
	let muki = [1, -1][pos[0] < CenX];
	ascent(i in 0 .. way)
	{
		let ea = ba+180 + i*3*360/way*muki;
		let ex = pos[0] + r*cos(ea);
		let ey = pos[1] + r/3*sin(ea) - r/3*cos(ea)*muki;
		S7_SetEnemyH01(ex, ey, 2, 270+sin(ea)*45*muki, 0, phaseEx(2));
		WaitRoad(phaseEx(wt_phase));
	}
}
task S7_H01b(pos, way, way_angle, r, wt_phase)
{
	let ba = atan2(pos[1]-(CenY),pos[0]-CenX);
	let muki = [1, -1][pos[0] < CenX];
	ascent(i in 0 .. way)
	{
		let ea = ba+180 + i*way_angle/way*muki;
		let ex = pos[0] + r*cos(ea);
		let ey = pos[1] + r/4*sin(ea);
		S7_SetEnemyH01(ex, ey, 2, 270+sin(ea)*45*muki, 0, phaseEx(2));
		WaitRoad(phaseEx(wt_phase));
	}
}

// ------------------------------------------------------------------ //
//                            敵単体の処理                            //
// ------------------------------------------------------------------ //


// 最初の妖精
task S7_SetEnemyF01(iniX, iniY, iniSpeed, iniAngle, iniValue, iniWait)
{
	if (flgStopSetZako) { return; }
	
	let e_type = iniValue%2;
	let eSize = ENEMY_M;
	let eColor = EFF_RED;
	let emnImage = imgZakoFairyDark;
	
	let objEnemy = MakeEnemy(iniX, iniY, 80, eSize);
	SetEnemyDropItem_Extra(objEnemy, 10);
	DrawFairy(objEnemy, emnImage, FAIRY_MIDDLE);
	TAct();
	WaitForKilled(objEnemy);
	ZakoFinalize(objEnemy, eColor);
	
	task TAct()
	{
		TCheckDispINOut(objEnemy, 16);

		let timer = iniWait;
		MoveToSlowdown(objEnemy, iniX+84*cos(iniAngle), iniY+84*sin(iniAngle), timer);
		waitObj(objEnemy, timer);

		TShot();

		let moveAngle = GetAngleToPlayer(objEnemy);
		Enemy_SetPatternA2(objEnemy, 0, 0, moveAngle, iniSpeed/180, 0, iniSpeed);
	}
	
	// ショット
	task TShot()
	{
		if (!CanShotBullet(objEnemy)) { return; }
		local
		{
			let speed = [1, 1, 1][DifficultEx()];
			let way = [8, 6, 8][DifficultEx()];
			let way_angle = [15, 15, 15][DifficultEx()];
			let graphic = BGW_FIRE_RED;
			
			let ba = atan2(ObjMove_GetY(objEnemy)-MinY, ObjMove_GetX(objEnemy)-CenX);
			let ss = speed;
			ascent(i in 0 .. way)
			{
				let sa = ba + (i-(way-1)/2)*way_angle;
				let obj = My_CreateShotA1(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy),
					speed, sa, graphic, 15);
				ObjMove_AddPatternB2(obj, 0, NO_CHANGE, NO_CHANGE, 0, -0.01, 99, -99);
			}
			CallSound(sndShot2);
		}
		waitObj(objEnemy, phaseExEnemy(4));
		if (!CanShotBullet(objEnemy)) { return; }
		
		local
		{
			let wt = [15, 15, 15][DifficultEx()];
			let timer = [180, 120, 180][DifficultEx()];
			
			let speed = [2, 1.5, 2][DifficultEx()];
			let way = [3, 1, 3][DifficultEx()];
			let way_angle = [10, 10, 10][DifficultEx()];
			let graphic = ADD_BGW_BALL_BS_RED;
			
			let t = 0;
			while(CanShotBullet(objEnemy) && t < timer)
			{
				let ba = GetAngleToPlayer(objEnemy);
				let ss = speed;
				ascent(i in 0 .. way)
				{
					let sa = ba + (i-(way-1)/2)*way_angle;
					let obj = My_CreateShotA2(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy),
						0, sa, ss/60, ss, graphic, 15);
					Obj_SetRenderPriorityI(obj, GetShotRenderPriorityI+1);
				}
				CallSound(sndShot2);
				waitObj(objEnemy, wt);
				t += wt;
			}
		}
	}
}

task S7_SetEnemyF02(iniX, iniY, iniSpeed, iniAngle, iniValue, iniWait)
{
	if (flgStopSetZako) { return; }
	
	let e_type = iniValue%2;
	let eSize = ENEMY_L;
	let eColor = EFF_RED;
	let emnImage = imgZakoFairyDark;
	
	let objEnemy = MakeEnemy(iniX, iniY, 120, eSize);
	SetEnemyDropItem_Extra(objEnemy, 30);
	DrawFairy(objEnemy, emnImage, FAIRY_LARGE);
	TAct();
	WaitForKilled(objEnemy);
	ZakoFinalize(objEnemy, eColor);
	
	task TAct()
	{
		TCheckDispINOut(objEnemy, 16);

		let timer = iniWait;
		MoveToSlowdown(objEnemy, iniX+84*cos(iniAngle), iniY+84*sin(iniAngle), timer);
		waitObj(objEnemy, timer);

		TShot();

		let moveAngle = GetAngleToPlayer(objEnemy);
		Enemy_SetPatternA2(objEnemy, 0, 0, moveAngle, iniSpeed/180, 0, iniSpeed);
	}
	
	// ショット
	task TShot()
	{
		let ba = atan2(ObjMove_GetY(objEnemy)-MinY, ObjMove_GetX(objEnemy)-CenX);
		let muki = [1, -1][iniX>CenX];
		
		ascent(t in 0 .. 16)
		{
			if (!CanShotBullet(objEnemy)) { return; }

			let speed = 1 + t/16;
			let way = [6, 3, 6][DifficultEx()];
			let way_angle = [15, 15, 15][DifficultEx()];
			let graphic = BGW_FIRE_RED;
			
			let ss = speed;
			ascent(i in 0 .. way)
			{
				let sa = ba + (i-(way-1)/2)*way_angle + (t/16*120-60)*muki;
				let obj = My_CreateShotA1(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy),
					speed, sa, graphic, 15);
				ObjMove_AddPatternB2(obj, 0, NO_CHANGE, NO_CHANGE, 0, -0.02, 99, -speed);
			}
			CallSound(sndShot2);
			waitObj(objEnemy, phaseExEnemy(1/8));
		}
	}
}


task S7_SetEnemyH01(iniX, iniY, iniSpeed, iniAngle, iniValue, iniWait)
{
	if (flgStopSetZako) { return; }
	
	let e_type = iniValue%2;
	let eSize = ENEMY_S;
	let eColor = EFF_RED;
	
	let objEnemy = MakeEnemy(iniX-108*cos(iniAngle), iniY-108*sin(iniAngle), 20, eSize);
	SetEnemyDropItem_Extra(objEnemy, 3);
	DrawHitodama( objEnemy, eColor );
	TAct();
	WaitForKilled(objEnemy);
	if (CheckKillType(objEnemy) == 2)
	{
		// 撃ち返し
		TUchikaeshi();
	}
	ZakoFinalize(objEnemy, eColor);
	
	task TAct()
	{
		TCheckDispINOut(objEnemy, 16);

		let timer = iniWait;
		MoveToSlowdown(objEnemy, iniX, iniY, timer);
		waitObj(objEnemy, timer);

		TShot();

		let moveAngle = GetAngleToPlayer(objEnemy);
		Enemy_SetPatternA2(objEnemy, 0, 0, moveAngle, iniSpeed/60/2, 0, iniSpeed);
		Enemy_SetPatternA2(objEnemy, 60, NO_CHANGE, NO_CHANGE, iniSpeed/240, 0, iniSpeed);
		TCheckDispINOut(objEnemy, 16);
	}
	
	// ショット
	task TShot()
	{
		waitObj(objEnemy, phaseExEnemy(8));
		
		let speed = [1.5, 1.5, 1.5][DifficultEx()];
		let graphic = BGB_BALL_S_RED;
		let count = [3, 0, 3][DifficultEx()];
		
		loop(count)
		{
			if (!CanShotBullet(objEnemy)) { return; }
			let sa = GetAngleToPlayer(objEnemy);
			let ss = speed;
			My_CreateShotA2Ex(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy),
				0, sa, ss/60, ss, graphic, 15, DELAY_ADD);
			CallSound(sndShot5);
			waitObj(objEnemy, phaseExEnemy(1/4));
		}
	}

	task TUchikaeshi()
	{
		if (!CheckUchikaeshi(objEnemy, 96)) { return; }
		
		let speed = [1.5, 1.5, 1.5][DifficultEx()];
		let ba = GetAngleToPlayer(objEnemy);
		My_CreateShotA2(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy),
			-speed/2, ba, speed/60, speed, BGW_BALL_M_RED, 30);
		CallSound(sndShot5);
	}
}

// 最初の妖精
task S7_SetEnemyI01(iniX, iniY, iniSpeed, iniAngle, iniValue, iniValue2, iniWait)
{
	if (flgStopSetZako) { return; }
	
	let is_front = false;
	let baseAngle = 0;
	
	let e_type = iniValue%2;
	let eSize = ENEMY_M;
	let eColor = EFF_RED;
	let emnImage = imgZakoFairyDark;
	
	let objEnemy = MakeEnemy(iniX, iniY, 50, eSize);
	SetEnemyDropItem_Extra(objEnemy, 7);
	DrawOnmyou( objEnemy, EFF_RED );
	TAct();
	WaitForKilled(objEnemy);
	if (CheckKillType(objEnemy) == 2)
	{
		// 撃ち返し
		TUchikaeshi();
	}
	ZakoFinalize(objEnemy, eColor);
	
	task TAct()
	{
		TMove();
		TShot();
	}
	
	task TMove()
	{
		let objImg = GetEnemyImageIDEx(objEnemy);	//画像ID
		let cols = [[96,48,48], [255,255,255]];

		let bx = iniX;
		let by = iniY;
		let ba = iniValue;
		let add_a = iniValue2;
		
		let t = 0;
		while(CanShotBullet(objEnemy) && (t < 360 || CheckDispINEx(bx, by, 0) || CheckDispIN(objEnemy, 32)))
		{
			let tmp = 1;
			if (t < 120) { tmp = GetCurve_d(t/120); }
			
			let br = 270;
			let bry = br * (1-t/600)*0.5;
			let ex = bx + br * cos(ba);
			let ey = by + bry * sin(ba) + bry*(1-tmp);
			is_front = (sin(ba) > 0);
			let col = cols[is_front];
			let pri = [priorityZakoBack, priorityZako][is_front];
			let vis = (is_front && CheckDispIN(objEnemy, 16));
			baseAngle = ba;
			//baseAngle = atan2(by-ey, bx-ex);
			
			ObjMove_SetPosition(objEnemy, ex, ey);
			ascent(i in 0 .. length(objImg))
			{
				ObjRender_SetAlpha(objImg[i], tmp*255);
				ObjRender_SetColor(objImg[i], col[0], col[1], col[2]);
				Obj_SetRenderPriorityI(objImg[i], pri);
			}
			SetEnemyVisible(objEnemy, vis);
			
			bx += iniSpeed*cos(iniAngle);
			by += iniSpeed*sin(iniAngle);
			ba += add_a;
			t++;
			waitObj(objEnemy, 1);
		}
		EraseEnemy(objEnemy);
	}
	
	// ショット
	task TShot()
	{
		let wt = 7;
		let timer = 60*15;
		
		let speed = 4;
		let way = 1;
		let way_angle = 15;
		let graphic = BGW_CHRYSTAL_M_RED;
		
		let st = 0;
		let t = 0;
		while(CanShotBullet(objEnemy) && t < timer)
		{
			if (is_front && CheckDispIN(objEnemy, 0))
			{
//				let sa = iniAngle + (st%3.5-1.25)*way_angle*iniValue2;
			//	let sa = 90 - (st%3.5-1.25)*10*iniValue2;
				let sa = 90 - cos(baseAngle)*24;
				let ss = speed;
				CreateShotWayA2(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy),
					0, sa, ss/240, ss, graphic, 15, way, way_angle, 0);
				CallSound(sndShot2);
			}
			waitObj(objEnemy, wt);
			st++;
			t += wt;
		}
	}

	task TUchikaeshi()
	{
		if (!CheckUchikaeshi(objEnemy, 64) || ObjMove_GetY(objEnemy) < GetPlayerY) { return; }
		
		let speed = 1;
		let way = [8, 0, 8][DifficultEx()];
		let ba = GetAngleToPlayer(objEnemy);
		CreateShotCircleA2(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy),
			-speed/2, ba, speed/120, speed, ADD_BGW_FIRE_RED, 30, way, 0);
		if (way > 0) { CallSound(sndShot5); }
	}
}
