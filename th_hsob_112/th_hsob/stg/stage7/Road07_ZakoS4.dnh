// -------------- 敵配置 -------------- //

task S4_F01(xpos, wt_phase)
{
	ascent(i in 0 .. length(xpos))
	{
		S4_SetEnemyF01(xpos[i], GetClipMinY()+96, 1.5, 270, 0, phaseEx(4));
		WaitRoad(phaseEx(wt_phase));
	}
}


let VD = -1;

function ValueDirection{
	VD = -VD;
	return VD;
}

// ------------------------------------------------------------------ //
//                            敵単体の処理                            //
// ------------------------------------------------------------------ //
// オープニング用妖精（小）
task S4_SetEnemyF01(iniX, iniY, iniSpeed, iniAngle, iniValue, iniWait)
{
	if (flgStopSetZako) { return; }
	
	let e_type = iniValue%2;
	let eSize = ENEMY_S;
	let eColor = EFF_PURPLE;
	let emnImage = imgZakoFairyEx;
	let wC = trunc(iniWait*3/4);
	
	let objEnemy = MakeEnemy(iniX, GetClipMinY()-32, 35, eSize);
	SetEnemyDropItem_Extra(objEnemy, 8);
	DrawFairy(objEnemy, emnImage, FAIRY_SMALL);
	let objEImg = Obj_GetValueD(objEnemy, "IMAGE_ID", -1);
	TAct();
	WaitForKilled(objEnemy);
	ZakoFinalize(objEnemy, eColor);
	
	task TAct()
	{
		SetEnemyVisible(objEnemy, false);
		ascent(t in 0 .. wC){
			let rate = (1-cos(90*(t+1)/wC));
			let sc = 0.3+0.9*rate;
			let cl = 63+96*rate;
			ObjMove_SetY(objEnemy, GetClipMinY()-32+120*cos(90*(t+1)/wC));
			ObjRender_SetScaleXYZ(objEImg, sc, sc, sc);
			ObjRender_SetColor(objEImg, cl, cl, cl);
			waitObj(objEnemy, 1);
		}
		waitObj(objEnemy, iniWait-wC);
		ObjRender_SetScaleXYZ(objEImg, 1, 1, 1);
		ObjRender_SetColor(objEImg, 255, 255, 255);
		SetEnemyVisible(objEnemy, true);
		// 時間停止演出
//		FairyFadeIN_TimeStop(objEnemy, 120);
//		MoveWithBackS01(objEnemy);
		SetMovePositionBraking01(objEnemy, iniX, iniY, 45);
		ReafScatter(iniX, GetClipMinY());
		waitObj(objEnemy, 45);
		TShot();

		let moveAngle = GetAngleToPlayer(objEnemy);
		Enemy_SetPatternA2(objEnemy, 0, 0, moveAngle, iniSpeed/300, 0, iniSpeed);
		TCheckDispINOut(objEnemy, 16);
	}
	// ショット
	task TShot()
	{
		let wt = phaseEx(1);
		let timer = phaseEx(1);
		
		let speed = [2.5, 1,5, 2.5][DifficultEx()];
		let way = [2, 1, 2][DifficultEx()];
		let way_angle = [2, 2, 2][DifficultEx()];
		let graphic = BGW_ICE_PURPLE;
		
		let t = 0;
		waitObj(objEnemy, 0);
		while(CanShotBullet(objEnemy) && t < timer)
		{
			let sa = GetAngleToPlayer(objEnemy);
			CallSound(sndShot2);
			ascent(i in 0 .. 4){
				Shot(sa+90*i, speed, graphic, way, way_angle);
			}
			waitObj(objEnemy, wt);
			t += wt;
		}

		task Shot(ang, speed, graphic, way, way_ang){
			ascent(iQ in 0 .. 5){
				if(!CanShotBullet(objEnemy)){return;}
				CreateShotWay(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy),
					speed, ang, graphic, 15, way, way_angle, 0);
				waitObj(objEnemy, 3);
			}
		}
	}
}

// ばら撒き妖精（大）
task S4_SetEnemyF02(iniX, iniY, iniSpeed, iniAngle, iniValue, iniWait){
	if (flgStopSetZako) { return; }
	
	let e_type = iniValue%2;
	let eSize = ENEMY_L;
	let eColor = EFF_PURPLE;
	let emnImage = imgZakoFairyEx;
	
	let objEnemy = MakeEnemy(iniX+400*cos(iniAngle), iniY+400*sin(iniAngle), 250, eSize);
	SetEnemyDropItem_Extra(objEnemy, 75);
	DrawFairy(objEnemy, emnImage, FAIRY_LARGE);
	let objEImg = Obj_GetValueD(objEnemy, "IMAGE_ID", -1);
	TAct();
	WaitForKilled(objEnemy);
	ZakoFinalize(objEnemy, eColor);
	
	task TAct()
	{
		SetEnemyVisible(objEnemy, false);
		// 時間停止演出
//		FairyFadeIN_TimeStop(objEnemy, 120);
//		MoveWithBackS01(objEnemy);
		SetMovePositionBraking01(objEnemy, iniX, iniY, iniWait);
		
		ascent(t in 0 .. iniWait){
			let rate = 0.3+0.7*(1-cos(90*(t+1)/iniWait));
			let cl = 127;
			let rate2 = 1-sin(90*(t+1)/iniWait);
			let L = 400*(rate2);
			ObjMove_SetPosition(objEnemy, iniX+L*cos(iniAngle), iniY+L*sin(iniAngle)+80*(rate2));
			ObjRender_SetScaleXYZ(objEImg, rate, rate, rate);
			ObjRender_SetColor(objEImg, cl, cl, cl);
			waitObj(objEnemy, 1);
		}
		ObjRender_SetColor(objEImg, 255, 255, 255);
		Enemy_SetPatternA2(objEnemy, 0, 0, iniAngle, iniSpeed/120, 0, iniSpeed);
		SetEnemyVisible(objEnemy, true);
		TShot(objEnemy, iniWait*2);
		
		TCheckDispINOut(objEnemy, 16);
	}
	// ショット
	task TShot(objEnemy, timer){
		let arc = [15, 24, 15][DifficultEx()];
		let arc_add = [0.96, 0.57, 0.96][DifficultEx()];
		let wt = arc/4;
		let way2 = [2, 2, 2][DifficultEx()];
		let way = [6, 4, 6][DifficultEx()];
		let graphic = BGW_RICE_S_PURPLE;
		let speed = [1.5, 1.5, 1.5][DifficultEx()];
		let sMax = [3.0, 1.5, 3.0][DifficultEx()];
		let D = -cos(iniAngle);
		if(D != 0){D = D/absolute(D);}
		let t = 0;
		let total = 0;
		let ang = iniAngle;
		let W1 = (way-1)/2;
		let acce = (sMax-speed)/timer;
		while(CanShotBullet(objEnemy) && t < timer){
			let s = speed+acce*t;
			let r = 20;
			ascent(iW2 in 0 .. way2){
				let a = ang+360*iW2/way2;
				Shot(objEnemy, way, wt, r, s, acce*wt, a, -arc*0.04*D);
			}
			ang += arc*arc_add*D;
			t += wt;
			total += wt;
			let wt2 = trunc(total);
			total -= wt2;
			waitObj(objEnemy, wt2);
		}

		task Shot(objEnemy, quant, wt, r, spd, acce, ang, ang_spd){
			ascent(i in 0 .. quant){
				if(!CanShotBullet(objEnemy)){return;}
				let s = spd+acce*i;
				My_CreateShotA1(ObjMove_GetX(objEnemy)+r*cos(ang), ObjMove_GetY(objEnemy)+r*sin(ang), s, ang, graphic, 10);
				ang += ang_spd;
				waitObj(objEnemy, wt);
			}
		}
	}
}

// 撃ち返し妖精（中）
task S4_SetEnemyF03(iniX, iniY, iniSpeed, iniAngle, iniValue, iniWait){
	if (flgStopSetZako) { return; }
	
	let e_type = iniValue%2;
	let eSize = ENEMY_M;
	let eColor = EFF_PURPLE;
	let emnImage = imgZakoFairyEx;
	
	let objEnemy = MakeEnemy(iniX, iniY, 150, eSize);
	SetEnemyDropItem_Extra(objEnemy, 50);
	DrawFairy(objEnemy, emnImage, FAIRY_MIDDLE_RIBBON);
	let objEImg = Obj_GetValueD(objEnemy, "IMAGE_ID", -1);
	TAct();
	WaitForKilled(objEnemy);
	ZakoFinalize(objEnemy, eColor);
	
	task TAct()
	{
		SetEnemyVisible(objEnemy, false);
		TShot(objEnemy);
		Enemy_SetPatternA2(objEnemy, 0, iniSpeed, iniAngle, 0, iniValue, iniSpeed);
		ascent(t in 0 .. iniWait){
			let rate = (1-cos(90*(t+1)/iniWait));
			let sc = 0.3+0.7*rate;
			let cl = 127;
			ObjRender_SetScaleXYZ(objEImg, sc, sc, sc);
			ObjRender_SetColor(objEImg, cl, cl, cl);
			waitObj(objEnemy, 1);
		}
		SetEnemyVisible(objEnemy, true);
		ObjRender_SetColor(objEImg, 255, 255, 255);
		Enemy_SetPatternA2(objEnemy, 0, iniSpeed, NO_CHANGE, -(iniSpeed-0.8)/(iniWait/2), 0, 0.8);
		Move(objEnemy, 0.8);
		TShot2(objEnemy);
		TCheckDispINOut(objEnemy, 16);
	}
	task Move(obj, homingPower){
		ascent(t in 0 .. iniWait*4){
			if (!CanShotBullet(objEnemy)) { return; }
			Enemy_SetAngle(obj, GetHormingAngle(ObjMove_GetX(obj), ObjMove_GetY(obj), Enemy_GetAngle(obj), homingPower));
			waitObj(objEnemy, 1);
		}
	}

	task TShot2(obj){
		ascent(t in 0 .. iniWait){
			if (!CanShotBullet(objEnemy)) { return; }
			My_CreateShotA2(ObjMove_GetX(obj), ObjMove_GetY(obj), 0.2, Enemy_GetAngle(obj)+180+rand(-15, 15), 3.5/120, 3.7, BGW_ICE_GREEN, 10);
			waitObj(objEnemy, 4);
		}
	}
	// ショット
	
	task TShot(objEnemy){
		let way = [36, 24, 36][DifficultEx()];
		let way2 = [1, 1, 1][DifficultEx()];
		let way_angle = [180, 180, 180][DifficultEx()];
		let way3 = [3, 2, 3][DifficultEx()];
		let graphic = [BGW_CHRYSTAL_M_PURPLE, BGW_CHRYSTAL_S_PURPLE];
		let r = [30, 30, 30][DifficultEx()];
		let rMax = [60, 60, 60][DifficultEx()];
		let speed = [1.33, 1.25, 1.33][DifficultEx()];
		let ANG = GetAngleToPlayer(objEnemy);
		let t = 0;
		let ang = ANG;
		ascent(i in  0 .. way){
			let rate = 1.00-0.25*(i%2);
			Shot(objEnemy, r*rate, rMax*rate, iniWait, ang+360*i/way, 1.0, speed*rate, way2, way_angle, way3, 1.5);
		}
		loop(phaseEx(16)){
			ANG = GetAngleToPlayer(objEnemy);
			waitObj(objEnemy, 1);
		}

		task Shot(objEnemy, r, rMax, iniWait, ang, aAcce, spd, way, way_ang, way2, arc){
			let objS = My_CreateShotA1(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 0, ang, graphic[0], 0);
			ObjShot_SetAutoDelete(objS, false);
			ObjShot_SetIntersectionEnable(objS, false);
			ObjShot_SetSpellResist(objS, true);
			let time = phaseEx(4);
			ascent(t in 0 .. time){
				let rate = (1-cos(90*(t+1)/time));
				let R = r*rate;
				ang += aAcce;
				ang %= 360;
				let c = 255*rate;
				ObjRender_SetColor(objS, c, c, c);
				let sc =rate;
				ObjRender_SetScaleXYZ(objS, sc, sc, 1);
				ObjMove_SetPosition(objS, ObjMove_GetX(objEnemy)+R*cos(ang), ObjMove_GetY(objEnemy)+R*sin(ang));
				ObjMove_SetAngle(objS, ang);
				waitObj(objEnemy, 1);
			}
			ObjShot_SetAutoDelete(objS, true);
			ObjShot_SetIntersectionEnable(objS, true);
			ObjShot_SetSpellResist(objS, false);
			ObjRender_SetColor(objS, 255, 255, 255);
			ObjRender_SetScaleXYZ(objS, 1, 1, 1);
			time = phaseEx(16);
			ascent(t in 0 .. time){
				if(Obj_IsDeleted(objEnemy)){break;}
				ang += aAcce;
				ang %= 360;
				let R = r+(rMax-r)*t/time;
				ObjMove_SetPosition(objS, ObjMove_GetX(objEnemy)+R*cos(ang), ObjMove_GetY(objEnemy)+R*sin(ang));
				ObjMove_SetAngle(objS, ang);
				waitObj(objEnemy, 1);
			}
			if(Obj_IsDeleted(objS)){return;}
			CallSound(sndShot2);
			let ang2 = 2*ANG-ang;
			let W2 = (way2-1)/2;
			ascent(iW in 0 .. way){
				let a_bace = ang2+360*iW/way+way_angle;
				let s = spd;
				ascent(iW2 in 0 .. way2){
					let a = a_bace+arc*(iW2-W2);
					My_CreateShotA2(ObjMove_GetX(objS), ObjMove_GetY(objS), 2*s, a, -s/60, s, graphic[1], 10);
				}
			}
			Obj_Delete(objS);
		}
	}
}


// 人魂置き妖精（大）
task S4_SetEnemyF04(iniX, iniY, iniSpeed, iniAngle, iniValue, iniWait){
	if (flgStopSetZako) { return; }
	
	let e_type = iniValue%2;
	let eSize = ENEMY_L;
	let eColor = EFF_PURPLE;
	let emnImage = imgZakoFairyEx;
	
	let objEnemy = MakeEnemy(iniX+400*cos(iniAngle), iniY+400*sin(iniAngle), 225, eSize);
	SetEnemyDropItem_Extra(objEnemy, 50);
	DrawFairy(objEnemy, emnImage, FAIRY_LARGE);
	let objEImg = Obj_GetValueD(objEnemy, "IMAGE_ID", -1);
	

	TAct();
	WaitForKilled(objEnemy);
	ZakoFinalize(objEnemy, eColor);
	
	task TAct()
	{
		SetEnemyVisible(objEnemy, false);
		SetMovePositionBraking01(objEnemy, iniX, iniY, phaseEx(4));
		let TotalTime = iniWait*3;
		let time = phaseEx(4);
		ascent(t in 0 .. time){
			let rate = 0.3+0.4*(1-cos(90*(t+1)/time));
			let cl = 95+64*(1-cos(90*(t+1)/time));
			let rate2 = 1-sin(90*(t+1)/time);
			let L = 400*(rate2);
			ObjMove_SetPosition(objEnemy, iniX+L*cos(iniAngle), iniY+L*sin(iniAngle)+80*(rate2));
			ObjRender_SetScaleXYZ(objEImg, rate, rate, rate);
			ObjRender_SetColor(objEImg, cl, cl, cl);
			waitObj(objEnemy, 1);
		}
		time = phaseEx(8);
		THitodama(objEnemy, phaseEx(8), 0, phaseEx(2));
		ascent(t in 0 .. time){
			let rate = 0.7;
			let cl = 159;
			let rate2 = (1-cos(180*(t+1)/time))/2;
			let L = iniValue*(rate2);
			ObjMove_SetPosition(objEnemy, iniX+L*cos(iniAngle), iniY+L*sin(iniAngle));
			ObjRender_SetScaleXYZ(objEImg, rate, rate, rate);
			ObjRender_SetColor(objEImg, cl, cl, cl);
			waitObj(objEnemy, 1);
		}
		time = phaseEx(1);
		let D = cos(iniAngle);
		D = D/absolute(D);
		Enemy_SetPatternA2(objEnemy, 0, 0, -90-60*D, iniSpeed/120, 0, iniSpeed);
		ascent(t in 0 .. time){
			let rate = 0.7+0.3*(1-cos(90*(t+1)/time));
			let cl = 159;
			let rate2 = 1-cos(180*(t+1)/time);
			let L = iniValue*(rate2);
			ObjRender_SetScaleXYZ(objEImg, rate, rate, rate);
			ObjRender_SetColor(objEImg, cl, cl, cl);
			waitObj(objEnemy, 1);
		}
		ObjRender_SetColor(objEImg, 255, 255, 255);
		SetEnemyVisible(objEnemy, true);
		TCheckDispINOut(objEnemy, 16);
		TShot(objEnemy, phaseEx(12));
	}

	task THitodama(obj, maxTime, iniValue, iniWait){
		let count = 0;
		ascent(it in 0 .. maxTime){
			if (!CanShotBullet(obj)) { return; }
			if(it >= maxTime*count/8){
				let angle = 90;
				if(GetPlayerY() < ObjMove_GetY(obj)){angle = 270;}
				S4_SetEnemyH01(ObjMove_GetX(obj), ObjMove_GetY(obj), 0.8, angle, iniValue, iniWait);
				count++;
			}
			waitObj(objEnemy, 1);
		}
	}
	
	// ショット
	task TShot(objEnemy, timer)
	{
		timer *= [1, 0, 1][DifficultEx()];
		let arc = [15, 15, 15][DifficultEx()];
		let wt = arc/4;
		let way2 = [2, 2, 2][DifficultEx()];
		let way = [6, 6, 6][DifficultEx()];
		let graphic = BGW_RICE_S_GREEN;
		let speed = [1.5, 1.5, 1.5][DifficultEx()];
		let sMax = [3.0, 3.0, 3.0][DifficultEx()];
		let D = cos(iniAngle);
		if(D != 0){D = D/absolute(D);}
		let t = 0;
		let total = 0;
		let ang = iniAngle;
		let W1 = (way-1)/2;
		let acce = (sMax-speed)/timer;
		while(CanShotBullet(objEnemy) && t < timer){
			let s = speed+acce*t;
			let r = 20;
			ascent(iW2 in 0 .. way2){
				let a = ang+360*iW2/way2;
				Shot(objEnemy, way, wt, r, s, acce*wt, a, -arc*0.04*D);
			}
			ang += arc*0.96*D;
			t += wt;
			total += wt;
			let wt2 = trunc(total);
			total -= wt2;
			waitObj(objEnemy, wt2);
		}

		task Shot(objEnemy, quant, wt, r, spd, acce, ang, ang_spd){
			ascent(i in 0 .. quant){
				if(!CanShotBullet(objEnemy)){return;}
				let s = spd+acce*i;
				My_CreateShotA1(ObjMove_GetX(objEnemy)+r*cos(ang), ObjMove_GetY(objEnemy)+r*sin(ang), s, ang, graphic, 10);
				ang += ang_spd;
				waitObj(objEnemy, wt);
			}
		}
	}
	
	//人魂
	task S4_SetEnemyH01(iniX, iniY, iniSpeed, iniAngle, iniValue, iniWait)
	{
		if (flgStopSetZako) { return; }
		
		let muki = -ValueDirection;
		
		let e_type = iniValue%2;
		let eSize = ENEMY_M;
		let eColor = EFF_PURPLE;
		
		let objEnemy = MakeEnemy(iniX, iniY, 30, eSize);
		SetEnemyDropItem_Extra(objEnemy, 10);
		DrawHitodama( objEnemy, eColor );
		TAct();
		WaitForKilled(objEnemy);
		ZakoFinalize(objEnemy, eColor);
		
		task TAct()
		{
			SetHitodamaVisible(objEnemy, iniWait);
			TCheckDispINOut(objEnemy, 16);
			TShot();
			
			let bx = iniX;
			let by = iniY;
			
			let t = 0;
			loop(iniWait){
				bx -= iniSpeed*cos(iniAngle)/2;
				by -= iniSpeed*sin(iniAngle)/2;
				let RPos = Rotate2D_XY(0, 20*sin(t*2.5)*muki, iniAngle);
				ObjMove_SetPosition(objEnemy, bx+RPos[0], by+RPos[1]);
				t++;
				waitObj(objEnemy, 1);
			}
			while(CanShotBullet(objEnemy))
			{
				bx += iniSpeed*cos(iniAngle);
				by += iniSpeed*sin(iniAngle);
				let RPos = Rotate2D_XY(0, 20*sin(t*1.5)*muki, iniAngle);
				ObjMove_SetPosition(objEnemy, bx+RPos[0], by+RPos[1]);
				t++;
				waitObj(objEnemy, 1);
			}
		}
		
		// ショット
		task TShot()
		{
			waitObj(objEnemy, iniWait);
			if (!CanShotBullet(objEnemy)) { return; }

			let timer =	iniWait*4;
			
			
			let t = 0;
			while(CanShotBullet(objEnemy) && t < timer)
			{
				if (CheckKillType(objEnemy) == 2){
					// 撃ち返し
					TCounterShot();
				}
				waitObj(objEnemy, 1);
				t++;
			}
			if(CanShotBullet(objEnemy)){
				let way =	[8, 8, 8][DifficultEx()];
				let speed =	[1.0, 0.75, 1.0][DifficultEx()];
				let angle = rand(0, 360);
				let graphic = BGW_BALL_M_PURPLE;
				CallSound(sndShot1);
				CallSound(sndShot2);
				ascent(iW in 0 .. way){
					let objS = My_CreateShotA2(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 3.0*speed, angle+360*     iW /way, -1.0*speed/30, 1.0*speed, graphic, 10);
					ObjMove_AddPatternA2(objS, 60, NO_CHANGE, NO_CHANGE, 1.0*speed/120, 0, 3.0*speed);
				//	let objS2 = My_CreateShotA2(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 2.0*speed, angle+360*(iW+0.5)/way, -0.7*speed/30, 0.7*speed, graphic, 10);
				//	ObjMove_AddPatternA2(objS2, 60, NO_CHANGE, NO_CHANGE, 0.7*speed/120, 0, 2.1*speed);
				}
				ZakoFinalize(objEnemy, eColor);
			}
			
			task TCounterShot(){
				let way =	[8, 8, 8][DifficultEx()];
				let speed =	[1.0, 0.75, 1.0][DifficultEx()];
				let angle = GetAngleToPlayer(objEnemy);
				let graphic = BGB_BALL_S_PURPLE;
				CallSound(sndShot2);
				ascent(iW in 0 .. way){
					let objS = My_CreateShotA2(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 3.0*speed, angle+360*     iW /way, -1.0*speed/30, 1.0*speed, graphic, 10);
					ObjMove_AddPatternA2(objS, 60, NO_CHANGE, NO_CHANGE, 1.0*speed/120, 0, 3.0*speed);
				//	let objS2 = My_CreateShotA2(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 2.0*speed, angle+360*(iW+0.5)/way, -0.7*speed/30, 0.7*speed, graphic, 10);
				//	ObjMove_AddPatternA2(objS2, 60, NO_CHANGE, NO_CHANGE, 0.7*speed/120, 0, 2.1*speed);
				}
			}
		}
	}
}

task ReafScatter(x, y){
	CallSound(sndShot3);
	let way = [6, 3, 6][DifficultEx()];
	let arc = [35, 60, 35][DifficultEx()];
	let spd = [2.25, 2, 2.25][DifficultEx()];
	let arc2 = [0.75, 0.75, 0.75][DifficultEx()];
	let way2 = [4, 4, 4][DifficultEx()];
	ascent(iW in 0 .. way){
		let ang = 90+arc*(iW-(way-1)/2);
		ascent(iQ in 0 .. way2){
			let s = spd*(1.0-0.02*iQ);
			Shot(x, y, s, ang+arc2*(iQ+0.5));
			Shot(x, y, s, ang-arc2*(iQ+0.5));
		}
	}
	task Shot(x, y, spd, ang){
		let objS = My_CreateShotA2(x, y, spd*2, ang, -spd/30, spd, BGW_RICE_S_GREEN, 10);
/*		wait(30);
		if(Obj_IsDeleted(objS)){return;}
		let sx = spd*cos(ang);
		let sy = spd*sin(ang);
		My_CreateShotB2(ObjMove_GetX(objS), ObjMove_GetY(objS), sx, sy, -sx/120, 0.0075, sx/2, 10, BGW_RICE_S_GREEN, 0);
		Obj_Delete(objS);*/
	}
}
