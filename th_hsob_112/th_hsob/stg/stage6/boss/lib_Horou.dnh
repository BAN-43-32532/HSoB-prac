#include"./lib_HorouEffect.dnh"
#include"./../lib_World06_BackGround01a.dnh"

// オプション用
let objHorouEffect;

task InitHorou()
{
	LoadWingShotData();
}

// ﾎﾛｳﾁｬﾝ用曲レーザー
function CreateHorouLaser(x, y, speed, angle, l_len, l_wid, graphic, delay)
{
	return(CreateHorouLaserEx(x, y, speed, angle, l_len, l_wid, graphic, delay, sndLaser1));
}
function CreateHorouLaserEx(x, y, speed, angle, l_len, l_wid, graphic, delay, idSound)
{
	// 移動経路用のダミー弾
	let obj = CreateShotA1(x, y, speed, angle, graphic, 0);
	SetShotDisabled(obj);
	Obj_SetVisible(obj, false);
	_CreateHorouLaser(obj);
	if (idSound >= 0) { CallSoundDelay(idSound, delay, obj); }
	return(obj);
	
	// 経路追跡用
	task _CreateHorouLaser(parent)
	{
		let col_id = BULLET_EFFECT[graphic%8];
		let col = GetEffectColor(col_id);
		let ecol = [col[0]*0.75+96, col[1]*0.75+96, col[2]*0.75+96];

		let before_lx = ObjMove_GetX(parent);
		let before_ly = ObjMove_GetY(parent);
		wait(1);
		
		while(!Obj_IsDeleted(parent))
		{
			let lx = ObjMove_GetX(parent);
			let ly = ObjMove_GetY(parent);
			if (CheckDispIN(parent, 16))
			{
				let ll = ((lx-before_lx)^2 + (ly-before_ly)^2)^0.5;
				let la = atan2(ly-before_ly, lx-before_lx);
				_CreateHorouLaserSingle(lx-ll*cos(la)*2, ly-ll*sin(la)*2, la, ll*4, l_wid, graphic, delay, l_len, ecol);
			}
			before_lx = lx;
			before_ly = ly;
			wait(1);
		}
	}

	// レーザー単発
	task _CreateHorouLaserSingle(x, y, angle, l_len, l_wid, graphic, delay, timer, color)
	{
		let disabl_timer = max(5, timer-5);
		
		let objL = CreateStraightLaserA1(x, y, angle, l_len, 3, delay+timer, graphic, 0);
		ObjStLaser_SetSource(objL, false);
		ObjLaser_SetGrazeInvalidFrame(objL, 9999);
		ObjShot_SetIntersectionEnable(objL, false);
		ObjRender_SetColor(objL, color[0], color[1], color[2]);
		ObjShot_SetItemChange(objL, false);
		ascent(t in 0 .. delay)
		{
			if (Obj_IsDeleted(objL)) { return; }
			ObjLaser_SetRenderWidth(objL, (t%6+1)*0.75);
			wait(1);
		}
		ObjShot_SetIntersectionEnable(objL, true);
		ObjShot_SetItemChange(objL, true);
		ascent(t in 0 .. timer)
		{
			if (Obj_IsDeleted(objL)) { return; }
			let tmp = 1 - (t+1)/timer;
			let lw = l_wid*tmp;
			ObjLaser_SetRenderWidth(objL, lw);
			if (t > disabl_timer) { ObjShot_SetIntersectionEnable(objL, false); }
			ObjLaser_SetIntersectionWidth(objL, lw/3);
			wait(1);
		}
		let es = rand(0, 6);
		let ea = angle + rand(-180,180);
		ObjLaser_SetLength(objL, 6);
		ObjLaser_SetRenderWidth(objL, 2);
		ObjStLaser_SetAngle(objL, ea);
		ObjMove_AddPatternA2(objL, 0, 0, ea, es/15, 0, es);
		ObjShot_SetItemChange(objL, false);
	}
}

// こっちは直線レーザー（射出タイプ、角度と原点だけは実行後にも弄れるよ！）
function CreateHorouStraightLaser(x, y, speed, angle, l_len, l_wid, max_len, graphic, delay)
{
	// 移動経路用のダミー弾
	let obj = CreateStraightLaserA1(x, y, angle, 0, 0, delay+9999, graphic, 0);
	SetShotDisabled(obj);
	Obj_SetVisible(obj, false);
	_CreateHorouLaser(obj);
	return(obj);
	
	// 経路追跡用
	task _CreateHorouLaser(parent)
	{
		let col_id = BULLET_EFFECT[graphic%8];
		let col = GetEffectColor(col_id);
		let ecol = [col[0]*0.5+96, col[1]*0.5+96, col[2]*0.5+96];

		wait(1);
		
		let lr = 0;
		let t = 1;
		while(!Obj_IsDeleted(parent) && lr < max_len)
		{
			lr = t*speed;
			_CreateHorouLaserSingle(parent, lr-speed*2, speed*5, l_wid, graphic, delay, l_len, ecol);
			t++;
			wait(1);
		}
		wait(delay+l_len);
		Obj_Delete(parent);
	}

	// レーザー単発
	task _CreateHorouLaserSingle(parent, offset_r, l_len, l_wid, graphic, delay, timer, color)
	{
		let sa = ObjStLaser_GetAngle(parent);
		let sx = ObjMove_GetX(parent) + offset_r*cos(sa);
		let sy = ObjMove_GetY(parent) + offset_r*sin(sa);
		let objL = CreateStraightLaserA1(sx, sy, sa, l_len, 3, delay+timer, graphic, 0);
		ObjStLaser_SetSource(objL, false);
		ObjLaser_SetGrazeInvalidFrame(objL, 9999);
		ObjShot_SetIntersectionEnable(objL, false);
		ObjRender_SetColor(objL, color[0], color[1], color[2]);
		ascent(t in 0 .. delay)
		{
			if (Obj_IsDeleted(parent)) { break; }
			if (Obj_IsDeleted(objL)) { return; }
			let sa = ObjStLaser_GetAngle(parent);
			let sx = ObjMove_GetX(parent) + offset_r*cos(sa);
			let sy = ObjMove_GetY(parent) + offset_r*sin(sa);
			ObjMove_SetPosition(objL, sx, sy);
			ObjStLaser_SetAngle(objL, sa);
			ObjLaser_SetRenderWidth(objL, (t%6+1)*0.75);
			wait(1);
		}
		ObjShot_SetIntersectionEnable(objL, true);
		ascent(t in 0 .. timer)
		{
			if (Obj_IsDeleted(parent)) { break; }
			if (Obj_IsDeleted(objL)) { return; }
			let tmp = 1 - (t+1)/timer;
			let lw = l_wid*tmp;
			ObjLaser_SetRenderWidth(objL, lw);
			ObjLaser_SetIntersectionWidth(objL, lw/3);
			let sa = ObjStLaser_GetAngle(parent);
			let sx = ObjMove_GetX(parent) + offset_r*cos(sa);
			let sy = ObjMove_GetY(parent) + offset_r*sin(sa);
			ObjMove_SetPosition(objL, sx, sy);
			ObjStLaser_SetAngle(objL, sa);
			wait(1);
		}
		let es = rand(0, 6);
		let ea = angle + rand(-180,180);
		ObjShot_FadeDelete(objL);
		ObjLaser_SetLength(objL, 6);
		ObjLaser_SetRenderWidth(objL, 2);
		ObjStLaser_SetAngle(objL, ea);
		ObjMove_AddPatternA2(objL, 0, 0, ea, es/15, 0, es);
	}
}

// タブレット起動！（もしくはしまう）
let objHorouTablet = -1;
function SwitchHorouBook(timer)
{
	let val = Obj_GetValueD(objEnemy, "HOROU_BOOK", 1);
	TEnemy(val);
	TAnime(val);
	 
	task TEnemy(val)
	{
		if (val) {
			wait(timer);
			if (!eAlive) { return; }
			objHorouTablet = MakeEnemyFamilier(ObjMove_GetX(objEnemy)-24, ObjMove_GetY(objEnemy)-58, 999999, ENEMY_SS);
			MoveToSlowdown(objHorouTablet, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy)-96, 30);
			SetEnemyVisible(objHorouTablet, false);
			DrawHorouTablet(objHorouTablet);
			CheckTabletAlive(objHorouTablet);
		} else 	{
			if (!Obj_IsDeleted(objHorouTablet)) { Obj_Delete(objHorouTablet); }
		}
	}
	
	task TAnime(val)
	{
		if (val) {
			SetAction(objEnemy, ACT_SHOT2, timer);
			wait(timer+1);
			if (!eAlive) { return; }
			Obj_SetValue(objEnemy, "HOROU_BOOK", 0);
		} else {
			Obj_SetValue(objEnemy, "HOROU_BOOK", 1);
			SetAction(objEnemy, ACT_SHOT3, timer);
		}
	}
}

task CheckTabletAlive(obj)
{
	while(eAlive && !Obj_IsDeleted(obj))
	{
		yield;
	}
	Obj_SetValue(obj, "ANIME_STOP", 1);
	
	let t = 0;
	while(!Obj_IsDeleted(obj))
	{
		let eObj = GetEnemyBossObjectID();
		if (length(eObj) > 0)
		{
			if (!Obj_IsDeleted(eObj[0]))
			{
				let tmp = GetCurve_a(min(1, (t+1)/60));
				ObjMove_SetPosition(obj,
					ObjMove_GetX(obj)*(1-tmp)+ObjMove_GetX(eObj[0])*tmp,
					ObjMove_GetY(obj)*(1-tmp)+ObjMove_GetY(eObj[0])*tmp);
				t++;
			}
		}
		yield;
	}
	if (!Obj_IsDeleted(obj)) { Obj_Delete(obj); }
}

task DrawHorouTablet(objBase)
{
	let sc = 0.75;
	let isDrawShadow = (IsDrawEffect() > 1);
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(obj, priorityBoss);
	ObjPrim_SetTexture(obj, imgCharaHorou[0] );
	ObjRender_SetBlendType(obj, BLEND_ALPHA );
	ObjSprite2D_SetDestRect(obj, -118/2, -128/2, 118/2, 128/2);
	ObjRender_SetPosition(obj, ObjMove_GetX(objBase), ObjMove_GetY(objBase), 0 );
	
	let anime = 0;
	let t = 0;
	while(!Obj_IsDeleted(objBase) && !Obj_GetValueD(objBase, "ANIME_STOP", 0))
	{
		let a = trunc(anime)%8;
		if (t < 30) {
			let tmp = GetCurve_a((t+1)/30);
			ObjRender_SetScaleXYZ(obj, sc*(3-tmp*2), sc*tmp, 1);
		} else {
			anime += min((t-30)/120, 1)/6;
			if (isDrawShadow && t%6 < 3)
			{
				TabletShadow(ObjMove_GetX(objBase), ObjMove_GetY(objBase), a, t/3);
			}
		}
		ObjSprite2D_SetSourceRect(obj, 0+118*a, 1536, 0+118*(a+1), 1536+128);
		ObjRender_SetPosition(obj, round(ObjMove_GetX(objBase)), round(ObjMove_GetY(objBase)), 0 );
		t++;
		yield;
	}
	ascent(i in 0 .. 30)
	{
		let tmp = GetCurve_a((i+1)/30);
		anime += min((t-30)/120, 1)/6;
		let a = trunc(anime)%8;
		ObjSprite2D_SetSourceRect(obj, 0+118*a, 1536, 0+118*(a+1), 1536+128);
		ObjRender_SetScaleXYZ(obj, 1-tmp, 1-tmp, 1);
		if (!Obj_IsDeleted(objBase)) { ObjRender_SetPosition(obj, round(ObjMove_GetX(objBase)), round(ObjMove_GetY(objBase)), 0 ); }
		t++;
		yield;
	}
	Obj_Delete(obj);
	
	task TabletShadow(x, y, anime, color_h)
	{
		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		Obj_SetRenderPriorityI(obj, priorityBoss-1);
		ObjPrim_SetTexture(obj, imgCharaHorou[0] );
		ObjRender_SetBlendType(obj, BLEND_ADD_ARGB );
		ObjSprite2D_SetDestRect(obj, -118/2, -128/2, 118/2, 128/2);
		ObjSprite2D_SetSourceRect(obj, 0+118*anime, 1536, 0+118*(anime+1), 1536+128);
		ObjRender_SetPosition(obj, x, y, 0 );
		ObjRender_SetColorHSV(obj, color_h, 192, 64);
		
		let vx = randEffect(-2,2);
		let vy = -1.5;
		ascent(i in 0 .. 30)
		{
			let tmp = (i+1)/30;
			let tmp_s = 1 + tmp*1.5;
			ObjRender_SetAlpha(obj, (1-tmp)*255);
			ObjRender_SetScaleXYZ(obj, tmp_s, tmp_s, 1);
			ObjRender_SetPosition(obj, x, y, 0 );
			t++;
			x += tmp*vx; y += tmp*vy;
			yield;
		}
		Obj_Delete(obj);
	}
}


// 霊撃共鳴
function GetHorouReigekiSynchroFlag(REIGEKI_COLOR)
{
	let P_COLOR = GetPlayerWeapon();
	// スペプラ or 7色以外はサヨナラ
	if (GetPlayMode() == GAME_SPELL || !(P_COLOR >= WEAPON_RED && P_COLOR <= WEAPON_ORANGE)) { return(false); }
	else { return(true); }
}
function HorouReigekiSynchro(REIGEKI_COLOR, TIME)
{
	let P_COLOR = GetPlayerWeapon();
	// スペプラ or 7色以外はサヨナラ
	if (!GetHorouReigekiSynchroFlag(REIGEKI_COLOR)) { return(false); }
	
	let pos = [CenX, CenY-64+24];

	// ボムショット禁止（バグの応急処置）
	SetForbidPlayerShot(true);
	SetForbidPlayerSpell(true);
	// 文字
	SY_EFF_TEXT(pos[0], pos[1], TIME);
	// わっかえへくと
	SY_CIRCLE(objEnemy, REIGEKI_COLOR, false);
	// あくしょん
	SetAction(objEnemy, ACT_SHOT1, min(TIME,180));
	// さうんど
	CallSound(sndPower2);
	wait(30);
	// チェンジ
	if (P_COLOR != REIGEKI_COLOR)
	{
		SY_EFF_COL(pos[0], pos[1]+40, TIME-30, [P_COLOR,REIGEKI_COLOR]);
		
		// 霊撃チェンジ
		SetAreaCommonData(CAREA_SYSTEM, "PlayerType", REIGEKI_COLOR);
	}
	// わっかえへくと
	SY_CIRCLE(objPlayer, REIGEKI_COLOR, true);
	wait(90);
	// さうんど
	CallSound(sndPower5);
	// ボムショット禁止解除（バグの応急処置）
	SetForbidPlayerShot(false);
	SetForbidPlayerSpell(false);
	wait(TIME-150);
	return(true);

	task SY_EFF_TEXT(x, y, timer)
	{
		let scale = 0.75;

		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		Obj_SetRenderPriorityI(obj, 80);
		ObjPrim_SetTexture(obj, imgCharaHorou[15] );
		ObjSprite2D_SetDestRect(obj, -256/2*scale, -32/2*scale, 256/2*scale, 32/2*scale);
		ObjSprite2D_SetSourceRect(obj, 0, 0, 512, 64);
		ObjRender_SetPosition(obj, x, y, 0 );
		
		let r = 0;
		let alpha = 0;
		ascent(t in 0 .. timer)
		{
			if (t < 30) { alpha = (t+1)/30*255; }
			if (t > timer-60) { alpha = (timer-t)/60*255; }
			
			if (t < 45) { r = (1-(t+1)/45)*6; }
			
			ObjRender_SetAlpha(obj, alpha);
			ObjRender_SetPosition(obj, x+randEffect(-r,r), y+randEffect(-r,r)/2, 0 );
			yield;
		}
		Obj_Delete(obj);
	}
	
	task SY_EFF_COL(x, y, timer, COL)
	{
		let timer1 = trunc(timer*0.25);
		let timer2 = timer - timer1;
		let scale = 1.5;
		
		let obj = [ObjPrim_Create(OBJ_SPRITE_2D), ObjPrim_Create(OBJ_SPRITE_2D)];
		
		ascent(i in 0 .. 2)
		{
			Obj_SetRenderPriorityI(obj[i], 80);
			ObjPrim_SetTexture(obj[i], imgCharaHorou[15] );
			ObjSprite2D_SetDestRect(obj[i], -24/2*scale, -32/2*scale, 24/2*scale, 32/2*scale);
			if (COL[i] < 0) { ObjSprite2D_SetSourceRect(obj[i], 0+48*9, 64, 48+48*9, 128); }
			else { ObjSprite2D_SetSourceRect(obj[i], 0+48*COL[i], 64, 48+48*COL[i], 128); }
			ObjRender_SetPosition(obj[i], x, y, 0 );
			ObjRender_SetScaleXYZ(obj[i], 0, 0, 0);
		}
		
		ascent(t in 0 .. timer1-15)
		{
			if (t < 15)
			{
				let tmp = GetCurve_d((t+1)/15);
				ObjRender_SetAlpha(obj[0], tmp*255);
				ObjRender_SetScaleXYZ(obj[0], 3-(tmp^2)*2, tmp, 1);
			}
			yield;
		}
		ascent(t in 0 .. 30)
		{
			let tmp = GetCurve_ad((t+1)/30);

			ObjRender_SetScaleXYZ(obj[0], 1, 1-tmp, 1);
			ObjRender_SetY(obj[0], y+16*scale*tmp);
			
			ObjRender_SetScaleXYZ(obj[1], 1, tmp, 1);
			ObjRender_SetY(obj[1], y-16*scale*(1-tmp));

			yield;
		}
		ObjRender_SetAlpha(obj[0], 0);
		
		ascent(t in 15 .. timer2)
		{
			if (t > timer2-60)
			{
				let tmp = GetCurve_d((timer2-t)/60);
				ObjRender_SetAlpha(obj[1], tmp*255);
			}
			yield;
		}
		ascent(i in 0 .. 2) { Obj_Delete(obj[i]); }
	}
	
	task SY_CIRCLE(objBase, COLOR, rev)
	{
		let col;
		alternative(COLOR)
		case(WEAPON_RED) { col = [255, 64, 64]; }
		case(WEAPON_PURPLE) { col = [255, 64, 255]; }
		case(WEAPON_BLUE) { col = [64, 64, 255]; }
		case(WEAPON_SKY) { col = [64, 255, 255]; }
		case(WEAPON_GREEN) { col = [64, 255, 64]; }
		case(WEAPON_YELLOW) { col = [255, 255, 64]; }
		case(WEAPON_ORANGE) { col = [255, 160, 64]; }
		others { col = [255, 255, 255]; }
		
		ascent(i in 0 .. 15)
		{
			if (Obj_IsDeleted(objBase)) { break; }
			SY_CIRCLE_Single(objBase, col, rev);
			waitEx(trunc(i/2)+1);
		}
		
		task SY_CIRCLE_Single(objBase, col, rev)
		{
			let obj = RingEffect_INI(80);
			ObjRender_SetColor(obj, col[0], col[1], col[2]);
			ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
			ObjRender_SetAlpha(obj, 192);
			
			ascent(t in 0 .. 60)
			{
				if (Obj_IsDeleted(objBase)) { break; }
				let tmp = GetCurve_d((t+1)/60);
				if (rev) { tmp = 1-GetCurve_a((t+1)/60); }
				CircleEffect_SetScareToRadius(obj, tmp*512);
				ObjRender_SetPosition(obj, ObjMove_GetX(objBase), ObjMove_GetY(objBase), 0);
				yield;
			}
			Obj_Delete(obj);
		}
	}
	
}

// StandByタイマー無効付き
task StandBy_TimeStop(objEnemy, xIni, yIni, wIni)
{
	let wr = ((ObjMove_GetY(objEnemy)-yIni)^2+(ObjMove_GetX(objEnemy)-xIni)^2)^0.5;
	if (wIni > 5 && wr > 16) { SetAction(objEnemy, ACT_MOVE, 600); }
	if (wr > 1) { ObjMove_SetDestAtWeightSpeedUp(objEnemy, xIni, yIni, 10, 4, 0.1, 12); }
	
	//移動中は判定を消す
	SetEnemyVisible(objEnemy, false);
	// タイマー停止
	ObjEnemyBossScene_SetSpellTimer(objScene, -1);

	waitObj(objEnemy, wIni);

	SetEnemyVisible(objEnemy, true);
	// タイマー開始
	ObjEnemyBossScene_SetSpellTimer(objScene, ObjEnemyBossScene_GetInfo(objScene, INFO_ORGTIMERF));
}

task SetDummyHitbox(offset_pos, hit_size)
{
	let dRate = 0.66;
	if (GetPlayerType() == PLAYER_REIMU_A) { dRate = 1; }
	
	let objFamilier = MakeEnemyFamilier(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 999999, ENEMY_S);
	SetEffectResist(objFamilier, 1);	// 状態異常耐性
	SetTimeResist(objFamilier, 1);		// 停止耐性
	CheckLinkLife_Familier(objEnemy, objFamilier, dRate);	// ボスと体力連動
	TAct();
	WaitForKilledFamilier(objFamilier, hit_size, 0);
	
	task TAct()
	{
		while(!Obj_IsDeleted(objFamilier))
		{
			ObjMove_SetPosition(objFamilier, ObjMove_GetX(objEnemy)+offset_pos[0], ObjMove_GetY(objEnemy)+offset_pos[1]);
			SetEnemyVisible(objFamilier, GetEnemyVisible(objEnemy));
			yield;
		}
	}
}
