//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
//　機械翼根元
task SetMachineBases(v_obj){
	ObjPrim_SetPrimitiveType(v_obj, PRIMITIVE_TRIANGLESTRIP);
	ObjPrim_SetVertexCount(v_obj, 4);
	ObjPrim_SetVertexPosition(v_obj, 0, -64, -128, 0);
	ObjPrim_SetVertexPosition(v_obj, 1, -64, 128, 0);
	ObjPrim_SetVertexPosition(v_obj, 2, 64, -128, 0);
	ObjPrim_SetVertexPosition(v_obj, 3, 64, 128, 0);
	ObjPrim_SetVertexUVT(v_obj, 0, 512, 256);
	ObjPrim_SetVertexUVT(v_obj, 1, 512, 512);
	ObjPrim_SetVertexUVT(v_obj, 2, 640, 256);
	ObjPrim_SetVertexUVT(v_obj, 3, 640, 512);
}

//　機械翼
task SetMachineWings(v_enm, v_objParent, v_obj, v_scaleArray, v_distArray, v_angle){
	let dAngle	= v_angle*4;
	let move1	= 0;
	let moveA	= 0;
	let move2	= 0;
	let moveB	= 0;
	
	ObjPrim_SetPrimitiveType(v_obj, PRIMITIVE_TRIANGLESTRIP);
	ObjPrim_SetVertexCount(v_obj, 4);
	ObjPrim_SetVertexPosition(v_obj, 0, 0, -32, 0);
	ObjPrim_SetVertexPosition(v_obj, 1, 0, 32, 0);
	ObjPrim_SetVertexPosition(v_obj, 2, 256, -32, 0);
	ObjPrim_SetVertexPosition(v_obj, 3, 256, 32, 0);
	ObjPrim_SetVertexUVT(v_obj, 0, 256, 256);
	ObjPrim_SetVertexUVT(v_obj, 1, 256, 320);
	ObjPrim_SetVertexUVT(v_obj, 2, 512, 256);
	ObjPrim_SetVertexUVT(v_obj, 3, 512, 320);
	
	while( !Obj_IsDeleted(v_objParent) && move2 < 1 && Obj_GetValueD(v_enm, "E6_OPENING", 1) ){
		let frame = trunc(GetAreaCommonData(CAREA_STAGE, "HOROU_OPT_FR", 0)/4)*4;
		move1 = 1 * sin( moveA );
		move2 = 1 * sin( moveB );
		let angle = v_angle + 4 * sin( dAngle + frame*8 );
		let pos = [
			ObjRender_GetX(v_objParent) + move1*v_distArray[0] * cos( move2*angle ),
			ObjRender_GetY(v_objParent) + move1*v_distArray[1] * sin( move2*angle ),
		];
		ObjRender_SetPosition(v_obj, pos[0], pos[1], 0);
		ObjRender_SetAngleXYZ(v_obj, 0, 0, move2*angle);
		ObjRender_SetScaleXYZ(v_obj, v_scaleArray[0], v_scaleArray[1] + v_scaleArray[1]/2 * sin( v_angle + frame*8 ), 0);
		
		if( move1 < 1 ){ moveA += 2; }
		else{ moveB += 2; }
		
		yield;
	}
	while( !Obj_IsDeleted(v_objParent) ){
		let frame = trunc(GetAreaCommonData(CAREA_STAGE, "HOROU_OPT_FR", 0)/4)*4;
		let angle = v_angle + 4 * sin( dAngle + frame*8 );
		let pos = [
			ObjRender_GetX(v_objParent) + v_distArray[0] * cos( angle ),
			ObjRender_GetY(v_objParent) + v_distArray[1] * sin( angle ),
		];
		ObjRender_SetPosition(v_obj, pos[0], pos[1], 0);
		ObjRender_SetScaleXYZ(v_obj, v_scaleArray[0], v_scaleArray[1] + v_scaleArray[1]/2 * sin( v_angle + frame*8 ), 0);
		ObjRender_SetAngleXYZ(v_obj, 0, 0, angle);
		
		yield;
	}
	Obj_Delete( v_obj );
}
