#東方弾幕風[Single]
#ScriptVersion[3]
#Title["ﾎﾛｳﾁｬﾝラスワ"]
#Text["ﾎﾛｳﾁｬﾝラスワ"]
#Background[""]
#System["./../../../system/System.dnh"]

//---------------------------------------------------------------------

// 関数取り込み
#include"./../../../lib/lib_boss.dnh"
#include"./lib_Horou.dnh"

let MOVE_TYPE = 0;
let BOSS_RANGE = 0;
let BOSS_RANGE_W = 108;

@Event {
	alternative(GetEventType())
	case(EV_REQUEST_LIFE)		{ SetScriptResult(77777);	}
	case(EV_REQUEST_TIMER)		{ SetScriptResult(99);		}
	BossEvent();
}

@Initialize {
	let SPELL_ID = 1007;
	let SPELL_NAME = 19;
	let CUTIN_TYPE = CUTMOTION_NONE;
	if (!(GetPlayMode() == GAME_MAIN || GetPlayMode() == GAME_PRACTICE)) { CUTIN_TYPE = CUTMOTION_NORMAL; }

	// アイテム数
	bossDropItem = 0;
	//ダメージ透過率
	dIni_Shot = 777*1.66;
	// 停止無効
	bossResistTime = 1;

	//初期設定
	Boss_Init();

	objEnemy = CreateBoss(BOSS_ID_HOROU);	//ボスセット

	//スペカデータ・セット
	SetSpellCardData(GetSpellCardID(SPELL_ID), SPELL_NAME, 
			GetCurrentScriptDirectory()~"06b_Background.dnh",
			GetBossTexture(objEnemy, I_CUTIN), 0.6, CUTIN_TYPE);

	InitHorou();

	// 使い魔と体力連動
	CheckLinkLife_Boss(objEnemy);

	// チャプター開始
	ChapterStartBoss(GetBossID(objEnemy), SPELL_NAME, CHAPTER_SPELL);

	Task_Main();
}

@MainLoop {
	yield;
}

// メインタスク
task Task_Main
{
	ObjMove_SetPosition(objEnemy, CenX, 170);
	LWMotion02([64, 64, 64], -12);
	
	yield;
	
	SetEffect06_Opt(objEnemy, 0, 1);
	objHorouEffect = SetEffect06(objEnemy);
	
	TCheckRange();
	TShot01();
	TEffect();
	CallSound(sndPower2);

	SwitchHorouBook(60);
	wait(60);

//	TMove();
	TShot_Laser();
}

task TCheckRange()
{
	while(eAlive)
	{
		BOSS_RANGE = ((GetPlayerX-ObjMove_GetX(objEnemy))^2+(GetPlayerY-(ObjMove_GetY(objEnemy)-48))^2)^0.5;
		yield;
	}
}

task TEffect()
{
	if (IsDrawEffect() < 2) { return; }

	let t = 0;
	while(eAlive)
	{
		EffectExplodeCloud_Ex01(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy)-48, 1/64, randEffect(0,360), 30);
		t++;
		waitEx(1);
	}
}

task TMove()
{
	while(eAlive)
	{
		if (MOVE_TYPE == 1)
		{
			_EnemyRandomMove02(objEnemy, CenX, MinY+150, GetClipWidth*0.6, 64, 16, 32, 0.75, 60);
			waitObj(objEnemy, 45);
		}
		else
		{
			waitObj(objEnemy, 1);
		}
	}
}

task TShot_Laser()
{
	WaitLaser(240);
	while(eAlive)
	{
		Laser01();
		WaitLaser(180);
		if (!eAlive) { return; }
		Laser02();
		WaitLaser(420);
		if (!eAlive) { return; }
		Laser03();
		WaitLaser(450);
		if (!eAlive) { return; }
		Laser04();
		WaitLaser(270);
		if (!eAlive) { return; }
		Laser05();
		WaitLaser(120);
		if (!eAlive) { return; }
		Laser06();
		WaitLaser(270);
		if (!eAlive) { return; }
		Laser07();
		WaitLaser(120);
	}

	function WaitLaser(delay)
	{
		waitObj(objHorouTablet, delay-90);
		if (!eAlive) { return; }
		EffectConcentrationPoint(ObjMove_GetX(objHorouTablet), ObjMove_GetY(objHorouTablet), objHorouTablet, [96,96,96], 15, 90);
		SetAction(objEnemy, ACT_SHOT2, 90);
		CallSound(sndPower3);
		waitObj(objHorouTablet, 90);
		if (!eAlive) { return; }
		SetAction(objEnemy, ACT_SHOT1, 120);
	}
}

task TShot01()
{
	let NOW_PHASE = 0;
	
	MOVE_TYPE = 0;
	ModeChangeEffect(WEAPON_RAINBOW);
	waitObj(objEnemy, 30);

	let muki = rand_dir();
	
	let base_angle = GetAngleToPlayer(objEnemy) + 0*muki;
	Shot01(base_angle, muki);
	Shot01(base_angle, -muki);
	
	
	task Shot01(base_angle, muki)
	{
		let speed = [0.5, 0.5, 0.5, 0.65][Difficult];
		let way = [3, 3, 3, 3][Difficult];
		let way_max = [5, 5, 5, 5][Difficult];
		let wt = [4, 3, 2, 2][Difficult];
		let way_angle = 45*muki;

		let add_a = [7.77/4*muki, 7.77/3*muki, 7.77/2*muki, 7.77/2*muki][Difficult];
		
		let t = 0;
		let st = 0;
		while(eAlive)
		{
			if (t%wt == 0)
			{
				let bx = ObjMove_GetX(objEnemy);
				let by = ObjMove_GetY(objEnemy) - 48;
				let tmp_way = way + trunc((way_max-way+1)*(1-GetBossLifeRate(objEnemy)));
				ascent(i in 0 .. tmp_way)
				{
					let aa = i*way_angle + t*add_a;
					let ba = base_angle + aa;
					let pos = Rotate2D_XY(cos(ba)/2, sin(ba), 90);
					let sx = bx;
					let sy = by;
					let ss = 16 * ((pos[0])^2+(pos[1])^2)^0.5;
					let sa = atan2(pos[1], pos[0]);
					HiddenWingShot(sx, sy, speed, sa, -5*muki, BGW_BALL_S_WHITE, ss);
				}
				if (t%(wt*2)==0) { CallSound(sndShot2); }
				st++;
			}
			t++;
			waitObj(objEnemy, 1);
		}
	}
	
	task HiddenWingShot(x, y, speed, angle, add_a, graphic, ss)
	{
		let obj = CreateShotA1(x, y, ss, angle, graphic, 0);
		ObjMove_AddPatternA2(obj, 0, NO_CHANGE, NO_CHANGE, ss, add_a, ss);
		ObjMove_AddPatternA2(obj, 30, NO_CHANGE, NO_CHANGE, ss, 0, ss);
		ObjShot_SetDeleteFrame(obj, 120);
		SetShotDisabled(obj);
		Obj_SetVisible(obj, false);
		
		while(!Obj_IsDeleted(obj))
		{
			let r = ((ObjMove_GetX(obj)-ObjMove_GetX(objEnemy))^2+(ObjMove_GetY(obj)-(ObjMove_GetY(objEnemy)-48))^2)^0.5;
			if (r-BOSS_RANGE > -BOSS_RANGE_W)
			{
				let tmp_a = atan2(ObjMove_GetY(obj)-(ObjMove_GetY(objEnemy)-48), ObjMove_GetX(obj)-ObjMove_GetX(objEnemy));
				tmp_a -= ObjMove_GetAngle(obj);
				if (cos(tmp_a) > 0)
				{
					if (CheckDispIN(obj, -16))
					{
						ObjMove_SetSpeed(obj, speed);
						RainbowWingShotEffect(obj, speed);
					}
					Obj_Delete(obj);
					break;
				}
			}
			yield;
		}
	}
	task RainbowWingShotEffect(objBase, speed)
	{
		let obj = My_CreateShotA1(ObjMove_GetX(objBase), ObjMove_GetY(objBase), speed, ObjMove_GetAngle(objBase), ADD_BGW_FUGU_WHITE, 0);
		ObjMove_SetAcceleration(obj, speed/10);
		ObjShot_SetSpellResist(obj, true);

		Obj_Delete(objBase);
		
		let objEff = [ObjPrim_Create(OBJ_SPRITE_2D), ObjPrim_Create(OBJ_SPRITE_2D)];
		ascent(i in 0 .. 2)
		{
			Obj_SetRenderPriorityI(objEff[i], GetShotRenderPriorityI());
			ObjPrim_SetTexture(objEff[i], imgEffectWingShot);
			ObjSprite2D_SetDestRect(objEff[i], -8, -40, 8, 40);
			ObjRender_SetBlendType(objEff[i], BLEND_ALPHA);
		}

		let alpha = 1;
		let color_s = 192;
		let t = 0;
		while(!Obj_IsDeleted(obj) && alpha > 0)
		{
			let x = ObjMove_GetX(obj);
			let y = ObjMove_GetY(obj);
			let a = ObjMove_GetAngle(obj);
			let r = ((ObjMove_GetX(obj)-ObjMove_GetX(objEnemy))^2+(ObjMove_GetY(obj)-(ObjMove_GetY(objEnemy)-48))^2)^0.5;
			let r2 = r-BOSS_RANGE;
			let col = max(0, min(300, (BOSS_RANGE-r+16)/(BOSS_RANGE_W+16)*360));
			
			if (r2 < 0) { alpha = min(255,alpha+15); }
			else if (r2 > 16) { break; }
			
			if (r2 < -BOSS_RANGE_W) { ObjMove_SetMaxSpeed(obj, 12); }
			else { ObjMove_SetMaxSpeed(obj, min(speed*3, speed*(1+t/30))); }

			if (t%4 == 0)
			{
				let anim = trunc(t/4);
				ascent(i in 0 .. 2)
				{
					let ix = 0+16*(trunc(anim/4)%2)+32*i;
					let iy = 0+80*(anim%4);
					ObjSprite2D_SetSourceRect(objEff[i], ix, iy, ix+16, iy+80);
				}
			}
			ascent(i in 0 .. 2)
			{
				ObjRender_SetPosition(objEff[i], x, y, 0);
				ObjRender_SetAngleZ(objEff[i], a+90);
				ObjRender_SetAlpha(objEff[i], alpha);
			}
			ObjRender_SetAlpha(obj, alpha);
			ObjRender_SetColorHSV(obj, col, color_s, 255);
			ObjRender_SetColorHSV(objEff[1], col, 255, 255);
			t++;
			yield;
		}
		ObjShot_SetIntersectionEnable(obj, false);
		ObjMove_SetMaxSpeed(obj, 12);
		ObjMove_SetAcceleration(obj, speed/5);
		while(!Obj_IsDeleted(obj) && alpha > 0)
		{
			let x = ObjMove_GetX(obj);
			let y = ObjMove_GetY(obj);
			let a = ObjMove_GetAngle(obj);
			let col = 0;
			alpha -= 15;

			if (t%4 == 0)
			{
				let anim = trunc(t/4);
				ascent(i in 0 .. 2)
				{
					let ix = 0+16*(trunc(anim/4)%2)+32*i;
					let iy = 0+80*(anim%4);
					ObjSprite2D_SetSourceRect(objEff[i], ix, iy, ix+16, iy+80);
				}
			}
			ascent(i in 0 .. 2)
			{
				ObjRender_SetPosition(objEff[i], x, y, 0);
				ObjRender_SetAngleZ(objEff[i], a+90);
				ObjRender_SetAlpha(objEff[i], alpha);
			}
			ObjRender_SetAlpha(obj, alpha);
			ObjRender_SetColorHSV(obj, col, color_s, 255);
			ObjRender_SetColorHSV(objEff[1], col, 255, 255);
			t++;
			yield;
		}
		Obj_Delete(obj);
		ascent(i in 0 .. 2) { Obj_Delete(objEff[i]); }
	}
}

task Laser01()
{
	let ba = 180;
	let way = [6, 3, 3, 3][Difficult];
	let way2 = [2, 4, 5, 5][Difficult];
	let way2_span = [1, 1, 2, 2][Difficult];
	let wt = [25, 10, 10, 10][Difficult];
	let way_angle = [0, 0, 5, 7.5][Difficult];
	let laser_delay = 45;
	let speed = 16;

	let offset_angle = GetAngleToPlayer(objHorouTablet);

	ascent(j in 0 .. way2)
	{
		if (!eAlive) { return; }
		ascent(i in 0 .. way)
		{
			let sx = ObjMove_GetX(objHorouTablet);
			let sy = ObjMove_GetY(objHorouTablet);
			let sa = ba+(i+j*way2_span/way2+0.5)*360/way;
			let stimer = 90 + j*wt;
			let horming_offset = (i-(way-1)/2)*way_angle;
			HorouLaserA01(sx, sy, speed, sa, 20, 48, BGW_CHRYSTAL_M_WHITE, laser_delay, stimer, offset_angle, horming_offset);
		}
		waitObj(objHorouTablet, 5);
	}

	task HorouLaserA01(x, y, speed, angle, l_len, l_wid, graphic, delay, timer, offset_angle, horming_offset)
	{
		CallSound(sndBulletBreak);
		
		let vpos = Rotate2D_XY(speed*cos(angle)/2, speed*sin(angle), offset_angle);
		let vs = ((vpos[0])^2+(vpos[1])^2)^0.5;
		let va = atan2(vpos[1], vpos[0]);
		
		let obj = CreateHorouLaser(x, y, vs, va, l_len, l_wid, graphic, delay);
		ObjMove_AddPatternA2(obj, 0, vs/2, NO_CHANGE, -vs*7/8/75, 0, vs/8);
		if (timer-30 > 75) { ObjMove_AddPatternA2(obj, 75, NO_CHANGE, NO_CHANGE, -vs/600, 0, vs/16); }
		ObjMove_AddPatternA2(obj, timer-15, NO_CHANGE, NO_CHANGE, speed/30, 0, speed);
		MoveHorming_A01(obj, 6, horming_offset, timer-15, timer);
		CallSoundDelay(sndShot4, timer-15, obj);
	}

	task MoveHorming_A01(obj, horming_power, offset_angle, f_timer, timer)
	{
		let t = 0;
		while(!Obj_IsDeleted(obj) && t < timer)
		{
			let hp = horming_power;
			if (t < f_timer) { hp *= (t+1)/f_timer; }
			else { hp *= (timer-t)/(timer-f_timer); }
			let to_a = GetAngleToPlayer(obj) + offset_angle;
			ObjMove_SetAngle(obj, GetHormingAngleEx2(ObjMove_GetX(obj), ObjMove_GetY(obj),
				ObjMove_GetAngle(obj), hp, to_a));
			t++;
			waitObj(obj, 1);
		}
	}
}

task Laser02()
{
	let muki = rand_dir();
	let count = [3, 4, 5, 5][Difficult];
	let wt = [105, 80, 60, 60][Difficult];
	
	loop(count)
	{
		if (!eAlive) { return; }
		_Laser02(muki);
		muki = -muki;
		waitObj(objHorouTablet, wt);
	}
	
	task _Laser02(muki)
	{
		let ba = rand(0, 360);
		let way = [2, 2, 2, 2][Difficult];
		let way2 = [4, 4, 4, 5][Difficult];
		let way2_span = [1, 1, 1, 1][Difficult];
		let laser_delay = [90, 75, 45, 45][Difficult];
		let speed = 8;

		let offset_angle = GetAngleToPlayer(objHorouTablet) - 15*muki;
		let add_angle = 2*muki;
	
		ascent(j in 0 .. way2)
		{
			if (!eAlive) { return; }
			ascent(i in 0 .. way)
			{
				let sx = ObjMove_GetX(objHorouTablet);
				let sy = ObjMove_GetY(objHorouTablet);
				let sa = ba+(i+j*way2_span/way2*muki)*360/way;
				HorouLaserA02(sx, sy, speed, sa, 20, 48, BGW_CHRYSTAL_M_WHITE, laser_delay, 105, offset_angle, add_angle);
			}
			waitObj(objHorouTablet, 5);
		}
	}

	task HorouLaserA02(x, y, speed, angle, l_len, l_wid, graphic, delay, timer, offset_angle, add_angle)
	{
		CallSound(sndBulletBreak);
		let obj = CreateHorouLaser(x, y, 0, 0, l_len, l_wid, graphic, delay);
		ObjShot_SetDeleteFrame(obj, timer);
		ObjShot_SetAutoDelete(obj, false);
		
		let a = angle;
		let r = 0;
		while(!Obj_IsDeleted(obj))
		{
			let vpos = Rotate2D_XY(r*cos(a)/2, r*sin(a), offset_angle);
			ObjMove_SetPosition(obj, x+vpos[0], y+vpos[1]);
			r += speed;
			a += add_angle;
			yield;
		}
	}
}

task Laser03()
{
	let muki = rand_dir();

	if (Difficult == D_EASY)
	{
		_Laser03(muki, 4, 5, 5);
		waitObj(objHorouTablet, 150);
		if (!eAlive) { return; }
		_Laser03(-muki, 4, 5, 5);
	}
	else if (Difficult == D_NORM)
	{
		_Laser03(muki, 3, 5, 5);
		waitObj(objHorouTablet, 30);
		if (!eAlive) { return; }
		_Laser03(-muki, 3, 5, 5);
		waitObj(objHorouTablet, 180);
		if (!eAlive) { return; }
		_Laser03(muki, 3, 10, 10);
		_Laser03(-muki, 3, 10, 10);
	}
	else if (Difficult == D_HARD)
	{
		_Laser03(muki, 4, 5, 5);
		waitObj(objHorouTablet, 60);
		if (!eAlive) { return; }
		_Laser03(-muki, 4, 5, 5);
		waitObj(objHorouTablet, 150);
		if (!eAlive) { return; }
		_Laser03(muki, 3, 10, 20);
		_Laser03(-muki, 3, 10, 20);
	}
	else
	{
		_Laser03(muki, 5, 5, 5);
		waitObj(objHorouTablet, 60);
		if (!eAlive) { return; }
		_Laser03(-muki, 5, 5, 5);
		waitObj(objHorouTablet, 150);
		if (!eAlive) { return; }
		_Laser03(muki, 5, 10, 10);
		_Laser03(-muki, 5, 10, 10);
	}

	task _Laser03(muki, way, wt, wt2)
	{
		let ba = 90;
		let speed = 8;
		let laser_delay = 45;

		let add_angle = 2*muki;
	
		ascent(i in 0 .. way)
		{
			if (!eAlive) { return; }
			let sx = ObjMove_GetX(objHorouTablet);
			let sy = ObjMove_GetY(objHorouTablet);
			let sa = ba + 105*muki - 15*(way-i-1)*muki;
			let fs = 6 - (way-i-1)*1;
			let ftimer = 45 + i*wt2;
			HorouLaserA03(sx, sy, speed, sa, 20, 48, BGW_CHRYSTAL_M_WHITE, laser_delay, fs, ftimer);
			waitObj(objHorouTablet, wt);
		}
	}

	task HorouLaserA03(x, y, speed, angle, l_len, l_wid, graphic, delay, fs, timer)
	{
		CallSound(sndBulletBreak);
		
		let obj = CreateHorouLaser(x, y, fs, angle, l_len, l_wid, graphic, delay);
		ObjMove_AddPatternA2(obj, 0, NO_CHANGE, NO_CHANGE, -fs/timer, 0, 0);
		ObjShot_SetDeleteFrame(obj, timer+45);
		wait(timer);
		if (Obj_IsDeleted(obj)) { return; }
		CallSound(sndBulletBreak);
		MoveToSlowdown(obj, GetPlayerX, GetPlayerY, 45);
		wait(45);
		if (Obj_IsDeleted(obj)) { return; }
		SplashSquare(ObjMove_GetX(obj), ObjMove_GetY(obj), ObjMove_GetAngle(obj), delay);
	}

	// □着弾時爆発□
	task SplashSquare(x, y, angle, splash_delay)
	{
		let speed = [2.5, 2.5, 2.5, 2.5][Difficult];
		let way = 10;
		
		// えへくと
		SquareEffectSet(x, y, speed, angle, 45);
		wait(splash_delay);
		// 弾
		if (!eAlive) { return; }
		_SplashSquare(x, y, speed, angle, way);
		CallSound(sndShot4);
		
		task _SplashSquare(x, y, speed, angle, way)
		{
			ascent(i in 0 .. 4)
			{
				let sx1 = cos(angle+i*90)*speed;
				let sy1 = sin(angle+i*90)*speed;
				let sx2 = cos(angle+(i+1)*90)*speed;
				let sy2 = sin(angle+(i+1)*90)*speed;
				ascent(j in 0 .. way)
				{
					let tmp = j/way;
					let sx = sx1*(1-tmp) + sx2*tmp;
					let sy = sy1*(1-tmp) + sy2*tmp;
					let ss = (sx^2+sy^2)^0.5;
					let sa = atan2(sy,sx);
					
					SplashSquare_single(x, y, ss, sa, ADD_BGW_CHRYSTAL_S_WHITE, 0);
				}
			}
			
			task SplashSquare_single(x, y, speed, angle, graphic, delay)
			{
				let objS = My_CreateShotA2(x, y, speed, angle, -speed/45, 0, graphic, delay);
				Obj_SetRenderPriorityI(objS, GetShotRenderPriorityI+1);
				wait(45);
				if (Obj_IsDeleted(objS)) { return; }
				ObjShot_FadeDelete(objS);
			}
		}
		
		task SquareEffectSet(x, y, speed, angle, timer)
		{
			ascent(i in 0 .. 5)
			{
				if (!eAlive) { break; }
				SquareEffect(x, y, speed, angle, timer);
				wait((i+1)*3);
			}
		}
		
		task SquareEffect(x, y, speed, angle, timer)
		{
			let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
			Obj_SetRenderPriorityI( obj, 60 );
			ObjPrim_SetPrimitiveType( obj, PRIMITIVE_LINELIST );
			ObjPrim_SetVertexCount( obj, 8 );
			ObjRender_SetBlendType( obj, BLEND_ADD_ARGB );
			ObjRender_SetColor( obj, 108, 108, 108 );
			ObjRender_SetPosition( obj, x, y, 0 );
			ObjRender_SetAngleZ( obj, angle+45 );
			
			let r = 0;
			ascent(t in 0 .. timer)
			{
				if (!eAlive) { break; }
				
				r += speed*(timer-t)/timer * 0.707;
				
				ascent(i in 0 .. 2)
				{
					ObjPrim_SetVertexPosition(obj, (7+i)%8, r, r, 0);
					ObjPrim_SetVertexPosition(obj, (1+i)%8, r, -r, 0);
					ObjPrim_SetVertexPosition(obj, (3+i)%8, -r, -r, 0);
					ObjPrim_SetVertexPosition(obj, (5+i)%8, -r, r, 0);
				}
				yield;
			}
			Obj_Delete(obj);
		}
	}
}


task Laser04()
{
	let muki = rand_dir();
	let count = [2, 3, 3, 4][Difficult];
	let wt = [90, 60, 60, 50][Difficult];
	
	loop(count)
	{
		if (!eAlive) { return; }
		_Laser04(muki);
		muki = -muki;
		waitObj(objHorouTablet, wt);
	}
	
	task _Laser04(muki)
	{
		let ba = rand(0, 360);
		let way = [3, 3, 4, 4][Difficult];
		let way2 = [3, 3, 3, 3][Difficult];
		let way2_span = [2, 2, 2, 2][Difficult];
		let way_angle = [10, 10, 10, 15][Difficult];
		let laser_delay = [75, 60, 45, 45][Difficult];
		let speed = 16;

		let offset_angle = 90 + way_angle*muki;
		let add_angle = 2*muki;
	
		ascent(j in 0 .. way2)
		{
			if (!eAlive) { return; }
			ascent(i in 0 .. way)
			{
				let sx = ObjMove_GetX(objHorouTablet);
				let sy = ObjMove_GetY(objHorouTablet);
				let sa = ba+(i+j*way2_span/way2*muki)*360/way;
				let stimer = 30;
				HorouLaserA04(sx, sy, speed, sa, 20, 48, BGW_CHRYSTAL_M_WHITE, laser_delay, stimer, offset_angle);
			}
			waitObj(objHorouTablet, 5);
		}
	}

	task HorouLaserA04(x, y, speed, angle, l_len, l_wid, graphic, delay, timer, offset_angle)
	{
		CallSound(sndBulletBreak);

		let vpos = Rotate2D_XY(speed*(cos(angle)/2-0.5), speed*sin(angle), offset_angle);
		let vs = ((vpos[0])^2+(vpos[1])^2)^0.5;
		let va = atan2(vpos[1], vpos[0]);
		let mpos = Rotate2D_XY(speed, 0, offset_angle);

		let obj = CreateHorouLaser(x, y, vs, va, l_len, l_wid, graphic, delay);
		ObjMove_AddPatternA2(obj, 0, vs/2, NO_CHANGE, -vs/2/timer, 0, vs/8);
		ObjMove_AddPatternB2(obj, timer, NO_CHANGE, NO_CHANGE, 0, speed/60, 99, speed);
		CallSoundDelay(sndBulletBreak, timer, obj);
	}
}
task Laser05()
{
	local
	{
		if (!eAlive) { return; }
		_Laser05();
		waitObj(objHorouTablet, 120);
	}
	
	task _Laser05()
	{
		let ba = GetAngleToPlayer(objHorouTablet);
		let way = [7, 7, 7, 7][Difficult];
		let way2 = [4, 5, 6, 7][Difficult];
		let speed = 16;
		let laser_delay = 90;

		ascent(j in 0 .. way2)
		{
			if (!eAlive) { return; }
			ascent(i in 0 .. way)
			{
				let sx = ObjMove_GetX(objHorouTablet);
				let sy = ObjMove_GetY(objHorouTablet);
				let sa = ba+i*360/way;
				let oa = j*3;
				HorouLaserA05(sx, sy, speed, sa+oa, 20, 48, BGW_CHRYSTAL_M_WHITE, laser_delay);
				if (oa > 0) { HorouLaserA05(sx, sy, speed, sa-oa, 20, 48, BGW_CHRYSTAL_M_WHITE, laser_delay); }
			}
			waitObj(objHorouTablet, 5);
		}
	}

	task HorouLaserA05(x, y, speed, angle, l_len, l_wid, graphic, delay)
	{
		CallSound(sndBulletBreak);
		let obj = CreateHorouLaser(x, y, speed, angle, l_len, l_wid, graphic, delay);
		wait(delay);
		if (!eAlive) { return; }
		CallSound(sndLaser1);
	}
}
task Laser06()
{
	let muki = rand_dir();
	
	if (Difficult <= D_NORM)
	{
		if (!eAlive) { return; }
		waitObj(objHorouTablet, 60);
		_Laser06(muki);
	}
	else
	{
		_Laser06(muki);
		waitObj(objHorouTablet, 120);
		if (!eAlive) { return; }
		_Laser06(-muki);
		waitObj(objHorouTablet, 150);
	}
	/*
	if (!eAlive) { return; }
	_Laser06(muki);
	waitObj(objHorouTablet, 60);
	if (!eAlive) { return; }
	_Laser06(-muki);
	*/
	
	task _Laser06(muki)
	{
		let angle = rand(0, 360);
		let way = 3;
		let laser_delay = [90, 75, 75, 60][Difficult];
		
		ascent(i in 0 .. way)
		{
			HorouLaserA06(5, angle+i*360/way, 20, 48, BGW_CHRYSTAL_M_WHITE, laser_delay, muki);
		}
	}

	task HorouLaserA06(speed, angle, l_len, l_wid, graphic, delay, muki)
	{
		let baseX = GetPlayerX;
		let baseY = GetPlayerY;
		let r = 480;
		let add_a = speed;

		let sx = baseX + r*cos(angle);
		let sy = baseY + r*sin(angle);
		let obj = CreateHorouLaserEx(sx, sy, 0, 0, l_len, l_wid, graphic, delay, -1);
		ObjShot_SetAutoDelete(obj, false);

		let t = 0;
		while(!Obj_IsDeleted(obj))
		{
			if (t < 45)
			{
				let tmp = GetCurve_d((t+1)/45);
				r = 480 - 360*tmp;
			}
			else if (t < 75)
			{
				let tmp = GetCurve_d((t+1-45)/30);
				let tmp2 = GetCurve_ad((t+1-45)/30);
				add_a = speed * (1-tmp)^2;
				r = 120 + 90*tmp2;
			}
			else
			{
				let to_speed = 16;
				let to_angle = GetAngleToPlayer(obj);
				ObjMove_AddPatternA2(obj, 0, 0, to_angle, to_speed/30, 0, to_speed);
				CallSound(sndShot4);
				wait(30);
				ObjShot_SetAutoDelete(obj, true);
				break;
			}
			if (t%15 == 0)
			{
				let sx = baseX + r*cos(angle);
				let sy = baseY + r*sin(angle);
				MoveTo(obj, sx, sy, 15);
				angle += 90*muki;
			}
			if (t%5 == 0) { CallSound(sndBulletBreak); }
			baseX = baseX*0.9 + GetPlayerX*0.1;
			baseY = baseY*0.9 + GetPlayerY*0.1;
			t++;
			wait(1);
		}
	}
}

task Laser07()
{
	_Laser07();
	
	task _Laser07()
	{
		let ba = rand(0,360);
		let way = [34, 40, 48, 56][Difficult];
		let speed = 16;

		ascent(i in 0 .. way)
		{
			let sx = ObjMove_GetX(objHorouTablet);
			let sy = ObjMove_GetY(objHorouTablet);
			let sa = ba+i*360/way;
			HorouLaserA07(sx, sy, speed, sa, 20, 48, BGW_CHRYSTAL_M_WHITE, 90);
		}
	}

	task HorouLaserA07(x, y, speed, angle, l_len, l_wid, graphic, delay)
	{
		CallSound(sndBulletBreak);
		let obj = CreateHorouLaser(x, y, speed, angle, l_len, l_wid, graphic, delay);
		wait(delay);
		if (!eAlive) { return; }
		CallSound(sndLaser1);
	}
}

// ラスワ開幕モーション
function LWMotion02(eff_color, cutin_id)
{
	ObjEnemyBossScene_SetSpellTimer(objScene, -1);	// タイマー停止
	
	SetEnemyVisible(objEnemy, false);
	BossEffect_DisableMagicCircle(objEnemy);
	Obj_SetVisible(GetBossImageID(objEnemy), false);	//画像非表示

	EffectConcentrationPointRainbowEx(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), objEnemy, 30, 2, 180, 75);
	CallSound(sndPower1);
	wait(90);
	RaiseBoss();
	EffectExplodeCloudSet(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 15, eff_color, 60, 10);
	
	// カットイン
	SetAreaCommonData(CAREA_SYSTEM, "PACKAGE_CUTIN", true );
	SetAreaCommonData(CAREA_SYSTEM, "PACKAGE_CUTIN_ID", cutin_id );
	// 効果音
	CallSound(sndCallSpellCard);
	// タイマー開始
	ObjEnemyBossScene_SetSpellTimer(objScene, ObjEnemyBossScene_GetInfo(objScene, INFO_ORGTIMERF));
	//スペカ起動
	CallSpellCard(true);
	
	function RaiseBoss()
	{
		BossEffect_EnableMagicCircle(objEnemy);
		Obj_SetVisible(GetBossImageID(objEnemy), true);	//画像表示
		ascent(t in 0 .. 30)
		{
			let tmp_a = (t+1)/30*255;
			ObjRender_SetAlpha(GetBossImageID(objEnemy), tmp_a);
			yield;
		}
		SetEnemyVisible(objEnemy, true);
	}
}

task ModeChangeEffect(color)
{
	if (!eAlive) { return; }
	SY_CIRCLE(objEnemy, color, false);
	CallSound(sndBoon);
	
	task SY_CIRCLE(objBase, COLOR, rev)
	{
		let col;
		alternative(COLOR)
		case(WEAPON_RED) { col = [255, 64, 64]; }
		case(WEAPON_PURPLE) { col = [255, 64, 255]; }
		case(WEAPON_BLUE) { col = [64, 64, 255]; }
		case(WEAPON_SKY) { col = [64, 255, 255]; }
		case(WEAPON_GREEN) { col = [64, 255, 64]; }
		case(WEAPON_YELLOW) { col = [255, 255, 64]; }
		case(WEAPON_ORANGE) { col = [255, 160, 64]; }
		others { col = [255, 255, 255]; }
		
		if (COLOR == WEAPON_RAINBOW)
		{
			ascent(i in 0 .. 30)
			{
				if (Obj_IsDeleted(objBase)) { break; }
				let col;
				alternative(i%7)
				case(WEAPON_RED) { col = [255, 64, 64]; }
				case(WEAPON_PURPLE) { col = [255, 64, 255]; }
				case(WEAPON_BLUE) { col = [64, 64, 255]; }
				case(WEAPON_SKY) { col = [64, 255, 255]; }
				case(WEAPON_GREEN) { col = [64, 255, 64]; }
				case(WEAPON_YELLOW) { col = [255, 255, 64]; }
				case(WEAPON_ORANGE) { col = [255, 160, 64]; }
				others { col = [255, 255, 255]; }
				
				SY_CIRCLE_Single(objBase, col, rev);
				waitEx(trunc(i/8)+1);
			}
		}
		else
		{
			ascent(i in 0 .. 15)
			{
				if (Obj_IsDeleted(objBase)) { break; }
				SY_CIRCLE_Single(objBase, col, rev);
				waitEx(trunc(i/2)+1);
			}
		}
		
		task SY_CIRCLE_Single(objBase, col, rev)
		{
			let obj = RingEffect_INI(80);
			ObjRender_SetColor(obj, col[0], col[1], col[2]);
			ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
			ObjRender_SetAlpha(obj, 192);
			
			ascent(t in 0 .. 60)
			{
				if (Obj_IsDeleted(objBase)) { break; }
				let tmp = GetCurve_d((t+1)/60);
				if (rev) { tmp = 1-GetCurve_a((t+1)/60); }
				CircleEffect_SetScareToRadius(obj, tmp*512);
				ObjRender_SetPosition(obj, ObjMove_GetX(objBase), ObjMove_GetY(objBase), 0);
				yield;
			}
			Obj_Delete(obj);
		}
	}
}

task EffectConcentrationPointRainbowEx(x, y, objTarget, count, wt, size, timer)
{
	if (IsDrawEffect() < 1) { return; }
	
	ascent(i in 0 .. count)
	{
		if (Obj_IsDeleted(objTarget)) { break; }
		let tmp = i/(count-1);
		let tmp_of = (tmp*6)%1;
		
		let r = 0; let g = 0; let b = 0;
		if (tmp*6 < 1) { r = 255; g = tmp_of*255; b = 0; }
		else if (tmp*6 < 2) { r = 255-tmp_of*255; g = 255; b = 0; }
		else if (tmp*6 < 3) { r = 0; g = 255; b = tmp_of*255; }
		else if (tmp*6 < 4) { r = 0; g = 255-tmp_of*255; b = 255; }
		else if (tmp*6 < 5) { r = tmp_of*255; g = 0; b = 255; }
		else { r = 255; g = 0; b = 255-tmp_of*255; }
		
		_EffectConcentrationPoint(x, y, objTarget, [r/2+64,g/2+64,b/2+64], size*(1+tmp), timer);
		waitEx(wt);
	}
}

task EffectExplodeCloud_Ex01(x, y, scale, color, timer)
{
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(obj, priorityEffect);
	ObjPrim_SetTexture(obj, imgEffectExplode3);
	ObjSprite2D_SetSourceRect(obj, 0, 0, 256, 256);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
	ObjRender_SetColorHSV(obj, color, 192, 64);
	ObjRender_SetPosition(obj, x, y, 0);
	ObjRender_SetAngleZ(obj, randEffect(0,360));
	
	ascent(t in 0 .. timer)
	{
		let tmp = GetCurve((t+1)/timer);
		let sc = tmp*scale*(BOSS_RANGE-BOSS_RANGE_W+32)/2;
		ObjRender_SetScaleXYZ(obj, sc, sc, 1);
		ObjRender_SetAlpha(obj, 255*tmp*(10-tmp*10));
		yield;
	}
	Obj_Delete(obj);
}
