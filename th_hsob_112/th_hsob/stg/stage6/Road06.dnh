#東方弾幕風[Stage]
#ScriptVersion[3]
#Title["Stage6道中"]
#Text["Stage6道中"]
#System["./../../system/System.dnh"]

#include "./../../lib/lib_Common.dnh"
#include "./../../lib/lib_Stage.dnh"
#include "./../../lib/lib_Zako.dnh"

#include "./Road06_Zako.dnh"

#include "./lib_World06_BackGround01a.dnh"

@Initialize
{
	STAGE_ID = 6;		//ステージID記録
	NEXT_STAGE_ID = -1;	//次のステージIDを記録
	StageInit();
	TStage();
}

@Event()
{
	StageEvent();
}

@Loading
{
}

@MainLoop
{
	yield;
}



task TStage
{
	// 保険
	yield;
	
	let dir = GetCurrentScriptDirectory();
	let pathBG	= dir ~ "BackgroundWorld06.dnh";	//背景
	let pathMBoss	= dir ~ "boss/06a_plural.dnh";	//中ボス
	let pathBoss	= dir ~ "boss/06b_plural.dnh";	//ボス
	
	// BGM
	// 道中曲 : 1拍19.125fくらい 7拍子
	//　ボスロード
	StartScriptInThread(pathMBoss);
	StartScriptInThread(pathBoss);

	//  背景配置
	SetStageBackGround(pathBG);

	wait(90+60);
	PlayMusicWithName( 12, 30, 30 );
	wait(30);
//	Package_PlayMusic( 0, 0, 0 );

	CHAPTER_1();
	WaitRoad(60*44-10-180);
	CheckPlayerPosition01();
	WaitRoad(180);
	CHAPTER_2();
	WaitRoad(60*16+10+15-180);
	CheckPlayerPosition02();
	WaitRoad(180);
	CHAPTER_3();
	WaitRoad(60*20+15);
	CHAPTER_4();
	WaitRoad(60*44);
	CHAPTER_5();
	WaitRoad(60*13);
	CHAPTER_6();
	WaitForNextStageScene();
	
	
	// 会話さん
	CallBoss();
	//　ボスロード

	WaitForBossKilled();
	NextStageScene();	// シーン移行
	wait(240);

	// ボスさん
	CallBoss2();
	
	// 終わるまで待ってね
	WaitForBossKilled();
	
	// チャプターリセット
	ChapterReset();
	
	//　日の出（＾ｏ＾）ﾍﾟｶｰ
	SetBackGroundBase( 1, 5 );
	
	//　日の出演出分540Fを足しています
	wait(240 + 270);

	// エンディング
	if (IsReplay())
	{
		StageEND();

		CloseMine(0);	//終了
	}
	else if (GetPlayMode() == GAME_MAIN)
	{
		let idScript = LoadScriptInThread(GetStageX_BossScript());

		StageEND();

		StartScript(idScript);
		
		// エンディング終了まで待機
		while(!IsCloseScript(idScript)) { yield; }
		CloseMine(0);
	}
	else
	{
		StageEND();

		CloseMine(0);
	}

	// エンディング
	function GetStageX_BossScript()
	{
		let flgBadEnding = false;	// グッド,バッド分岐
		
		if (GetAreaCommonData(CAREA_SYSTEM, "FlgBadEnding", false) || GetContinueCount() > 0)
		{
			flgBadEnding = true;
		}
		SetAreaCommonData(CAREA_TITLE, "FlgBadEnding", flgBadEnding);	// フラグリセット
		
		let dir = GetCurrentScriptDirectory();
		if (!flgBadEnding)
		{
			alternative(GetPlayerTypeEx())
			case(PLAYER_REIMU_A)
					{ return(dir~"boss/ED_Talk01a.dnh"); }
			case(PLAYER_MARISA_A)
					{ return(dir~"boss/ED_Talk01b.dnh"); }
			case(PLAYER_SAKUYA_A)
					{ return(dir~"boss/ED_Talk01c.dnh"); }
			case(PLAYER_KAGUYA_A)
					{ return(dir~"boss/ED_Talk01d.dnh"); }
		}
		else
		{
			alternative(GetPlayerType())
			case(PLAYER_REIMU_A)
					{ return(dir~"boss/ED_Talk02a.dnh"); }
			case(PLAYER_MARISA_A)
					{ return(dir~"boss/ED_Talk02b.dnh"); }
			case(PLAYER_SAKUYA_A)
					{ return(dir~"boss/ED_Talk02c.dnh"); }
			case(PLAYER_KAGUYA_A)
					{ return(dir~"boss/ED_Talk02d.dnh"); }
		}
		return("");
	}

	task CHAPTER_1()
	{
		DisplayStage(STAGE_ID, 0);	// タイトル表示
		WaitRoad(400-2-15);

		ChapterStart(STAGE_ID, 0, CHAPTER_ROAD);

		F01([0,30], 20, 7, 19, EFF_RED);
		WaitRoad(19*7);
		F01([180,180-30], -20, 7, 19, EFF_RED);
		WaitRoad(19*7);
		F01([0-120,45-120], 30, 7, 19*2, EFF_RED);
		WaitRoad(19);
		F01([180+120,180-45+120], -30, 7, 19*2, EFF_RED);
		WaitRoad(19*7*2-19*3);
		WaitRoad(19*7+19*3);
		I02([CenX, MinY+128], [CenX, 90], 270, 120, EFF_RED);
		WaitRoad(19*7*2);
		I02([MinX, MinY+64], [CenX-48, 70], 90+30, 120, EFF_RED);
		WaitRoad(19*7*2);
		I02([MinX, MinY+64], [CenX+72, 100], 90-45, 120, EFF_RED);
		WaitRoad(19*7*2);
		I02([MinX, MinY+64], [CenX, 70], 90, 120, EFF_RED);
		WaitRoad(19*7+19*2);
		F03([0, 5], 0, 160, 7, 19, EFF_ORANGE);
		WaitRoad(7*19);
		F03([180, 180-5], 0, -160, 7, 19, EFF_ORANGE);
		WaitRoad(19*7+19*3-7*19);
		F03([30,25], 0, 80, 7, 19, EFF_ORANGE);
		WaitRoad(8*10);
		SetEnemyF04(CenX, BPOS[1], 4, 0, 80, 1, EFF_ORANGE);
		F03([180-30,180-25], 0, 80, 8, 10, EFF_ORANGE);
		WaitRoad(8*10);
	}

	task CHAPTER_2()
	{
		let route = GetAreaCommonData(CAREA_STAGE, "STG6R_ROUTE1", 0);

		if (route == 0) { CHAPTER_2a(); }
		else { CHAPTER_2b(); }

		task CHAPTER_2a()
		{
			ChapterStart(STAGE_ID, 1, CHAPTER_ROAD);

			I05([MinX, MinY+80], [CenX-72, 40], 90-45, 128, 0, EFF_YELLOW);
			WaitRoad(19*7+19*3);
			I05([MinX, MinY], [CenX+80, 60], -(270-30), 128, 0, EFF_YELLOW);
			WaitRoad(19*7-19*3);
			F01b([20, 45], 7.5, 7, 19, EFF_YELLOW);
			WaitRoad(19*7);
			F01b([180-20, 180-45], -7.5, 7, 19, EFF_YELLOW);
			WaitRoad(19*7);
			I05(BPOS, [CenX-64, 120], -(270+24), 96, 0, EFF_YELLOW);
			F01b([270+45], 10, 4, 38, EFF_YELLOW);
			WaitRoad(19);
			F01b([270-45], -10, 4, 38, EFF_YELLOW);
			WaitRoad(19*7-19);
			I05(BPOS, [CenX+64, 70], (90+18), 96, 0, EFF_YELLOW);
		}
		task CHAPTER_2b()
		{
			ChapterStart(STAGE_ID, 2, CHAPTER_ROAD);

			I05([MaxX, MinY+80], [CenX+72, 40], 90+45, 128, 1, EFF_YELLOW);
			WaitRoad(19*7+19*3);
			I05([MaxX, MinY], [CenX-80, 60], -(270+45), 128, 1, EFF_YELLOW);
			WaitRoad(19*7-19*3);
			F01b([20, 45], 7.5, 7, 19, EFF_YELLOW);
			WaitRoad(19*7);
			F01b([180-20, 180-45], -7.5, 7, 19, EFF_YELLOW);
			WaitRoad(19*7);
			I05(BPOS, [CenX+64, 120], -(270-24), 96, 1, EFF_YELLOW);
			F01b([270+45], 10, 4, 38, EFF_YELLOW);
			WaitRoad(19);
			F01b([270-45], -10, 4, 38, EFF_YELLOW);
			WaitRoad(19*7-19);
			I05(BPOS, [CenX-64, 70], (90-18), 96, 1, EFF_YELLOW);
		}
	}
	task CHAPTER_3()
	{
		let route = GetAreaCommonData(CAREA_STAGE, "STG6R_ROUTE1", 0);
		let route2 = GetAreaCommonData(CAREA_STAGE, "STG6R_ROUTE2", 0);

		if (route2 == 1) { CHAPTER_3c(); }
		else if (route == 0) { CHAPTER_3a(); }
		else { CHAPTER_3b(); }
		
		task CHAPTER_3a()
		{
			ChapterStart(STAGE_ID, 3, CHAPTER_ROAD);

			ascent(t in 0 .. 7*7)
			{
				if (t >= 7 && t < 7*6)
				{
					let ct = 8 + trunc(t/7);
					if (t%14 == 0+3) { Sc01([MaxX-80, MinY+96], [0, -8], ct, 9, EFF_GREEN); }
					if (t%14 == 7+3) { Sc01([MinX+80, MinY+96], [0, -8], ct, 9, EFF_GREEN); }
				}
				if (t%7 == 0)
				{
					SetEnemyF06(BPOS[0], BPOS[1], 1.5, 90-20, t*60, trunc(t/7), 30, EFF_RED, [MinX, MinY+96]);
					SetEnemyF06(BPOS[0], BPOS[1], 1.5, 90+20, t*60, trunc(t/7), 30, EFF_RED, [MaxX, MinY+96]);
				}
				WaitRoad(19);
			}
		}
		task CHAPTER_3b()
		{
			ChapterStart(STAGE_ID, 4, CHAPTER_ROAD);
			
			SetEnemyI06_Base(BPOS[0], BPOS[1], 1, 0, 0, 1, 30, EFF_GREEN, [CenX-128, MinY, 90]);
			WaitRoad(19*7);
			SetEnemyI06_Base(BPOS[0], BPOS[1], 1, 0, 0, -1, 30, EFF_GREEN, [CenX+128, MinY, 90]);
			WaitRoad(19*7);
			SetEnemyI06_Base(BPOS[0], BPOS[1], 1, 0, 0, 1, 30, EFF_GREEN, [CenX-160, MinY+24, 90-15]);
			WaitRoad(19*7);
			SetEnemyI06_Base(BPOS[0], BPOS[1], 1, 0, 0, -1, 30, EFF_GREEN, [CenX+160, MinY+24, 90+15]);
			WaitRoad(19*7);
			SetEnemyI06_Base(BPOS[0], BPOS[1], 1, 0, 0, 1, 30, EFF_GREEN, [CenX-192, MinY+72, 90-40]);
			WaitRoad(19*7);
			SetEnemyI06_Base(BPOS[0], BPOS[1], 1, 0, 0, -1, 30, EFF_GREEN, [CenX+192, MinY+72, 90+40]);
			WaitRoad(19*7+19*4);
			SetEnemyI06_Base(BPOS[0], BPOS[1], 1, 0, 0, 1, 30, EFF_GREEN, [CenX-160, MinY, 90]);
			SetEnemyI06_Base(BPOS[0], BPOS[1], 1, 180, 0, -1, 30, EFF_GREEN, [CenX+160, MinY, 90]);

		}
		task CHAPTER_3c()
		{
			ChapterStart(STAGE_ID, 5, CHAPTER_ROAD);

			if (route == 0)
			{
				Sc03([MaxX+32, MinY+128], [MinX+144, MinY+140], [0, -12], 12, 4, EFF_GREEN);
				WaitRoad(19*2);
				Sc03([MaxX+32, MinY+128], [MaxX-144, MinY+260], [0, -12], 12, 4, EFF_GREEN);
				WaitRoad(19*2);
			}
			else
			{
				Sc03([MinX-32, MinY+128], [MaxX-144, MinY+140], [0, -12], 12, 4, EFF_GREEN);
				WaitRoad(19*2);
				Sc03([MinX-32, MinY+128], [MinX+144, MinY+260], [0, -12], 12, 4, EFF_GREEN);
				WaitRoad(19*2);
			}
			WaitRoad(19*6);

			Sc03b([CenX-108, CenY-108], [0, -12], 8, 9, EFF_GREEN);
			WaitRoad(19*4);
			Sc03b([CenX+108, CenY+180], [0, -12], 8, 9, EFF_GREEN);
			WaitRoad(19*4);
			Sc03b([CenX-108, CenY+180], [0, -12], 8, 9, EFF_GREEN);
			WaitRoad(19*4);
			Sc03b([CenX+108, CenY-108], [0, -12], 8, 9, EFF_GREEN);
			WaitRoad(19*6);

			Sc04(90+25, 7, 9, EFF_GREEN);
			WaitRoad(19*3);
			Sc04(90-25, 7, 9, EFF_GREEN);
			WaitRoad(19*3);
			Sc04(90, 7, 9, EFF_GREEN);
			WaitRoad(19*3);
			Sc04(90-15, 7, 9, EFF_GREEN);
			WaitRoad(19*3);
			Sc04(90+15, 7, 9, EFF_GREEN);
			WaitRoad(19*3);
			Sc04(90+25, 7, 9, EFF_GREEN);
			Sc04(90-25, 7, 9, EFF_GREEN);
			WaitRoad(19*4);
			Sc04(90, 7, 9, EFF_GREEN);
			WaitRoad(19*4);
		}
	}

	task CHAPTER_4()
	{
		let route = GetAreaCommonData(CAREA_STAGE, "STG6R_ROUTE1", 0);
		let route2 = GetAreaCommonData(CAREA_STAGE, "STG6R_ROUTE2", 0);
		let I05_type = [0, 1][route==1];

		ChapterStart(STAGE_ID, 6, CHAPTER_ROAD);

		if (route2 == 1)
		{
			H01([CenX,MinY+64], [CenX-128,MinY+24], [32, 0], 7, 9, 225, EFF_SKY);
			WaitRoad(19*3);
			H01([CenX,MinY+64], [CenX-48,MinY+128], [32, 0], 7, 9, 225-20*3, EFF_SKY);
			WaitRoad(19*4+19*7);
			H01([CenX,MinY], [CenX+128,MinY+24], [-32, 0], 7, 9, 225, EFF_SKY);
			WaitRoad(19*3);
			H01([CenX,MinY], [CenX+48,MinY+128], [-32, 0], 7, 9, 225-20*3, EFF_SKY);
			WaitRoad(19*4+19*7+15);
		}
		else if (route == 0)
		{
			H01([MaxX+96,MinY+192], [CenX-128,MinY+24], [32, 0], 7, 9, 225, EFF_SKY);
			WaitRoad(19*3);
			H01([MaxX+96,MinY+192], [CenX-48,MinY+128], [32, 0], 7, 9, 225-20*3, EFF_SKY);
			WaitRoad(19*4+19*7);
			H01([MinX-96,MinY+192], [CenX+128,MinY+24], [-32, 0], 7, 9, 225, EFF_SKY);
			WaitRoad(19*3);
			H01([MinX-96,MinY+192], [CenX+48,MinY+128], [-32, 0], 7, 9, 225-20*3, EFF_SKY);
			WaitRoad(19*4+19*7+15);
		}
		else
		{
			H01([MinX-96,MinY+192], [CenX+128,MinY+24], [-32, 0], 7, 9, 225, EFF_SKY);
			WaitRoad(19*3);
			H01([MinX-96,MinY+192], [CenX+48,MinY+128], [-32, 0], 7, 9, 225-20*3, EFF_SKY);
			WaitRoad(19*4+19*7);
			H01([MaxX+96,MinY+192], [CenX-128,MinY+24], [32, 0], 7, 9, 225, EFF_SKY);
			WaitRoad(19*3);
			H01([MaxX+96,MinY+192], [CenX-48,MinY+128], [32, 0], 7, 9, 225-20*3, EFF_SKY);
			WaitRoad(19*4+19*7+15);
		}

		F07([MaxX-64,MinY+64], [MinX+32,MinY+64], [(GetClipWidth-64)/4, 0], 0.75, 5, 3, 90, EFF_SKY);
		WaitRoad(19*7*2);
		F07([MaxX-64,MinY+96], [MinX+32,MinY+64], [(GetClipWidth-64)/6, 0], 0.85, 7, 3, 90, EFF_SKY);
		WaitRoad(19*7*2);
		F07([MaxX-64,MinY+128], [MinX+32+(GetClipWidth-64)/6/2,MinY+64], [(GetClipWidth-64)/6, 0], 0.95, 6, 3, 90, EFF_SKY);
		WaitRoad(19*7*2);
		F07([MinX+96,MinY+108], [MinX+32,MinY+64], [(GetClipWidth-64)/6, 0], 1, 7, 3, 90, EFF_SKY);
		WaitRoad(19*7*2-30);

		Sc02(90-20, 7, 9, EFF_BLUE);
		WaitRoad(19*3);
		Sc02(90+5, 7, 9, EFF_BLUE);
		WaitRoad(19*2);
		I05(BPOS, [CenX-128, 120], -(270+60), 96, I05_type, EFF_BLUE);
		WaitRoad(19*2);

		Sc02(90+25, 7, 9, EFF_BLUE);
		WaitRoad(19*3);
		Sc02(90, 7, 9, EFF_BLUE);
		WaitRoad(19*4);
		Sc02(90-20, 7, 9, EFF_BLUE);
		WaitRoad(19*3);
		Sc02(90+5, 7, 9, EFF_BLUE);
		WaitRoad(19*2);
		I05(BPOS, [CenX+128, 130], (90+45), 96, I05_type, EFF_BLUE);
		WaitRoad(19*2);

		Sc02(90+25, 7, 9, EFF_BLUE);
		WaitRoad(19*3);
		Sc02(90, 7, 9, EFF_BLUE);
		WaitRoad(19*4);
		
		F08(90+75, 7, 9, EFF_PURPLE);
		WaitRoad(19*4);
		F08(90-75, 7, 19, EFF_PURPLE);
		WaitRoad(19*3);
		F08(90+45, 7, 9, EFF_PURPLE);
		WaitRoad(9);
		F08(90-45, 7, 19, EFF_PURPLE);
	}

	task CHAPTER_5()
	{
		ChapterStart(STAGE_ID, 7, CHAPTER_ROAD);

		F09Set();
		
		task F09Set()
		{
			let timer = 60*12;
			let wt = 30;
			let wt_min = 4;
			let ea_base = -90;
			
			let t = 0;
			let st = 0;
			let wt_next = 0;
			while(t < timer)
			{
				let ex = CenX+96;
				let ey = CenY-128;
				let es = 1.25;
				let ea = atan2(CenY-ey, CenX-ex);
				let flg_uchi = (st>10 && st%3==0);
				SetEnemyF09(ex, ey, es, ea, ea_base, flg_uchi, 0, EFF_PURPLE);
				
				wt = (wt-wt_min)*0.925 + wt_min;
				ea_base += (17.7+180);
				st++;
				
				t += trunc(wt);
				WaitRoad(trunc(wt));
			}
		}
	}


	task CHAPTER_6()
	{
		IWA_SET();
		
		SHAKE_POWER = 2;
		DisplayShake_S06();	// ゆれゆれる
		
		WaitRoad(120);
		
		ChapterStart(STAGE_ID, 8, CHAPTER_ROAD);
		WaitRoad(60);
		
		SetEnemyMBoss(BPOS[0], BPOS[1], 1, 90, 0, 30, [CenX, CenY-24]);
		WaitRoad(1140);
		SHAKE_POWER = 6;
		BlackOut_Stg06();
		
		task IWA_SET()
		{
			let t = 0;
			let st = 0;
			let wt = 60;
			
			while(t < 1530)
			{
				if (t < 90) { wt = 30; }
				else if (t > 1150) { wt = 8; }
				else if (t > 1000) { wt = 15; }
				else { wt = 75; }
				
				let rnd = sin((1+(t/10)^2)*314.15926535);
				let sx = CenX + rnd*128;
				let sy = MinY - 64;
				let sz = [32, 16, 16][st%3];
				SetEnemyIwa01(sx, sy, 1, 90-45*rnd, sz);
				st++;
				t += wt;
				WaitRoad(wt);
			}
		}
	}
}

task F01(angles, add_angle, count, wt, color)
{
	ascent(i in 0 .. count)
	{
		let ea = angles[i%length(angles)] + add_angle*i;
		SetEnemyF01(BPOS[0], BPOS[1], 4, ea, 0, 0, color);
		WaitRoad(wt);
	}
}
task F01b(angles, add_angle, count, wt, color)
{
	ascent(i in 0 .. count)
	{
		let ea = angles[i%length(angles)] + add_angle*i;
		SetEnemyF01(BPOS[0], BPOS[1], 4, ea, 1, 0, color);
		WaitRoad(wt);
	}
}
task I02(pos, to_pos, angle, delay, color)
{
	ascent(i in 0 .. 3)
	{
		let r = 96;
		let ea = angle;
		let ex = to_pos[0] + cos(angle+i*360/3)*r/2;
		let ey = to_pos[1] + sin(angle+i*360/3)*r/2;
		_I02(pos, ea, r, 3, delay-19*i, [ex, ey]);
		wait(19);
	}
	task _I02(pos, angle, max_r, count, delay, to_pos)
	{
		ascent(i in 0 .. count)
		{
			let val = (i-(count-1)/2)/(count/2);
			let ea = angle + i*360/count;
			let speed = 4;
			SetEnemyI02(pos[0], pos[1], speed, ea, max_r, delay, color, to_pos);
		}
	}
}
task F03(angles, add_angle, offset_x, count, wt, color)
{
	ascent(i in 0 .. count)
	{
		let ea = angles[i%length(angles)] + add_angle*i;
		SetEnemyF03(BPOS[0], BPOS[1], 4, ea, offset_x, 1, i*wt, color);
		WaitRoad(wt);
	}
}
task I05(pos, to_pos, angle, r, type, color)
{
	let count = 3;
	let delay = 180;
	let objs = [];
	ascent(i in 0 .. count)
	{
		let val = (i-(count-1)/2)/(count/2);
		let ea = angle + i*360/count;
		let speed = 2;
		let tmp_obj = SetEnemyI05(pos[0], pos[1], speed, ea, r, type, delay, color, [to_pos[0], to_pos[1], angle]);
		objs = objs ~ [tmp_obj];
	}
	// 三角形ショット
	I05_PyramidShot(objs, type, color);
}
task Sc01(pos, add_pos, count, wt, color)
{
	ascent(i in 0 .. count)
	{
		let ex = pos[0] + add_pos[0]*i + rand(-80,80);
		let ey = pos[1] + add_pos[1]*i;
		SetEnemySc01(BPOS[0], BPOS[1], 3, 90, 0, 60, color, [ex, ey]);
		WaitRoad(wt);
	}
}
task Sc02(angle, count, wt, color)
{
	ascent(i in 0 .. count)
	{
		SetEnemySc02(BPOS[0], BPOS[1], 3, angle+rand(-5,5), 0, 0, color);
		WaitRoad(wt);
	}
}
task H01(bpos, pos, add_pos, count, wt, timer, color)
{
	ascent(i in 0 .. count)
	{
		let ex = pos[0] + add_pos[0]*i;
		let ey = pos[1] + add_pos[1]*i+rand(-32,32);
		SetEnemyH01(bpos[0], bpos[1]+rand(-64,64), 0.75, 90, rand(0,360), timer, color, [ex, ey]);
		WaitRoad(wt);
	}
}
task F07(bpos, pos, add_pos, top_way, count, wt, timer, color)
{
	ascent(i in 0 .. count)
	{
		let ex = pos[0] + add_pos[0]*i;
		let ey = pos[1] + add_pos[1]*i;
		SetEnemyF07(bpos[0], bpos[1], 3, 90, top_way, timer-wt*i, color, [ex, ey]);
		WaitRoad(wt);
	}
}
task F08(angle, count, wt, color)
{
	ascent(i in 0 .. count)
	{
		SetEnemyF08(CenX+rand(-16,16), MinY+32, 3, angle+rand(-15,15), 0, 0, color);
		WaitRoad(wt);
	}
}

task Sc03(bpos, pos, add_pos, count, wt, color)
{
	ascent(i in 0 .. count)
	{
		let ex = pos[0] + add_pos[0]*i + rand(-80,80);
		let ey = pos[1] + add_pos[1]*i;
		SetEnemySc03(bpos[0], bpos[1], 3, 90, 0, 30, color, [ex, ey]);
		WaitRoad(wt);
	}
}
task Sc03b(pos, add_pos, count, wt, color)
{
	ascent(i in 0 .. count)
	{
		let ex = pos[0] + add_pos[0]*i + rand(-80,80);
		let ey = pos[1] + add_pos[1]*i;
		SetEnemySc03(BPOS[0], BPOS[1], 3, 90, 1, 60, color, [ex, ey]);
		WaitRoad(wt);
	}
}
task Sc04(angle, count, wt, color)
{
	ascent(i in 0 .. count)
	{
		SetEnemySc04(BPOS[0], BPOS[1], 4.5, angle+rand(-5,5), 0, i*5, color);
		WaitRoad(wt);
	}
}

let SHAKE_POWER = 0;
task DisplayShake_S06()
{
	let flg = GetAreaCommonData(CAREA_STAGE, "StageScene", 0);

	let kx = Get2DCameraX();
	let ky = Get2DCameraY();
	let power = 0;
	
	let t = 0;
	while(flg == GetAreaCommonData(CAREA_STAGE, "StageScene", 0))
	{
		Set2DCameraFocusX(kx + rand(-power, power));
		Set2DCameraFocusY(ky + rand(-power, power));
		power = power + (SHAKE_POWER-power)*0.025;
		t++;
		waitEx(1);
	}
	Reset2DCamera();
}

//　ゲーム中用
task Package_PlayMusic( int_play_num, int_fade_out, int_delay )
{
	let musicDir = GetCurrentScriptDirectory() ~ "../../music/";
	let ID		= ObjSound_Create();
	let play	= false;
	let vol1	= 0;
	let volA	= 0;
	let path	= musicDir ~ "hsob_6road.ogg";
	let sample	= [0,0];
	
	ObjSound_Load(ID, path );
	ObjSound_SetSoundDivision(ID, SOUND_BGM );
	ObjSound_SetLoopEnable(ID, true );
	ObjSound_SetRestartEnable(ID, true );
	ObjSound_SetLoopSampleCount(ID, 684194, 4671886 );
	
	//プレイ中のBGMに登録
	let objMusic = ID;
	
	loop( int_delay ){ yield; }
	
	ObjSound_Play(ID);
	
	let flgStop = GetAreaCommonData(CAREA_TITLE, "Music_Stop", false);
	while(!Obj_IsDeleted(ID) && !Obj_GetValueD(ID, "MusicEnd", false) ){
		
		// 毎フレームチェックする
		ObjSound_SetVolumeRate(ID, GetMusicVolume() );
		let stop	= GetAreaCommonData(CAREA_TITLE, "Music_Stop", false);
		if( flgStop != stop )
		{
			if (stop) { ObjSound_Stop(ID); }
			else { ObjSound_Play(ID); }
			flgStop = stop;
		}
		yield;
	}
	if (int_fade_out > 0 && !flgStop)
	{
		while( volA < 90 ){
			let volume	= GetMusicVolume();
			
			vol1 = 1 * sin( volA );
			
			ObjSound_SetVolumeRate(ID, volume - vol1*volume );
			
			volA += 90/int_fade_out;
			
			yield;
		}
	}
	Obj_Delete(ID);
}

// 6面用暗転えへくと
// 無敵付き
task BlackOut_Stg06()
{
	let timer = 450;
	let timer2 = 300;
	let flg = GetAreaCommonData(CAREA_STAGE, "StageScene", 0);
	
	let ID			= ObjPrim_Create(OBJ_SPRITE_2D);
	
	ObjRender_SetPosition( ID, MinX, MinY, 0 );
	ObjRender_SetBlendType( ID, BLEND_ALPHA );
	Obj_SetRenderPriorityI( ID, 79 );
	ObjRender_SetColor( ID, 0, 0, 0 );
	ObjSprite2D_SetDestRect( ID, 0, 0, GetClipWidth, GetClipHeight );
	
	ObjRender_SetAlpha( ID, 0 );
	ascent(t in 0 .. timer)
	{
		let tmp = (t+1)/timer;
		ObjRender_SetAlpha( ID, tmp*255 );
		SetMusicVolumeMultiply(1-tmp);	// 曲フェードアウト
		if (t > timer-240)
		{
			// 無敵＆自動回収
			ResetPlayerInvincibility(180);
			SetItemCollectFlag(true);
		}
		if (t == timer-30)
		{
			// シーン移行フラグ
			NextStageScene();
		}
		yield;
	}
	// 更新
	flg = GetAreaCommonData(CAREA_STAGE, "StageScene", 0);
	// 色々消す
	DeleteAllEnemy();
	SetForbidPlayerShot(true);
	SetForbidPlayerSpell(true);
	yield;
	SetItemCollectFlag(false);
	DeleteShotAll_Effect(CenX, CenY);
	// BGM停止
	PlayMusic(-1, 0, 0);
	
	// 会話終了まで待機
	while(flg == GetAreaCommonData(CAREA_STAGE, "StageScene", 0))
	{
		ResetPlayerInvincibility(180);
		yield;
	}
//	SetForbidPlayerShot(false);
//	SetForbidPlayerSpell(false);

	// BGM再開
	PlayMusic( 77, 30, 30 );
	
	descent(t in 0 .. timer2)
	{
		let tmp = sin((t+1)/timer2*90);
		SetMusicVolumeMultiply(min(1,(1-tmp)*2));	// 曲フェードイン
		ObjRender_SetAlpha( ID, tmp*255 );
		yield;
	}
	SetMusicVolumeMultiply(1);
	Obj_Delete( ID );
}

function WaitForNextStageScene()
{
	let flg = GetAreaCommonData(CAREA_STAGE, "StageScene", 0);
	while(flg == GetAreaCommonData(CAREA_STAGE, "StageScene", 0))
	{
		yield;
	}
}


task CheckPlayerPosition01()
{
	let timer = 120;
	let cp = CenX;
	let to_route = 0;
	ascent(t in 0 .. 120)
	{
		if (GetPlayerX < cp) { to_route = max(-1, to_route-1/120); }
		if (GetPlayerX > cp) { to_route = min(1, to_route+1/120); }
		yield;
	}
	if (to_route <= 0) { SetAreaCommonData(CAREA_STAGE, "STG6R_ROUTE1", 0); }
	else { SetAreaCommonData(CAREA_STAGE, "STG6R_ROUTE1", 1); }
}
task CheckPlayerPosition02()
{
	let route = GetAreaCommonData(CAREA_STAGE, "STG6R_ROUTE1", 0);
	
	let timer = 120;
	let cp = CenX + [-96, 96][route==0];
	let to_route = 0;
	ascent(t in 0 .. 120)
	{
		if (GetPlayerX < cp) { to_route = max(-1, to_route-1/120); }
		if (GetPlayerX > cp) { to_route = min(1, to_route+1/120); }
		yield;
	}
	if ((route==0 && to_route<=0) || (route==1 && to_route>=0)) { SetAreaCommonData(CAREA_STAGE, "STG6R_ROUTE2", 0); }
	else { SetAreaCommonData(CAREA_STAGE, "STG6R_ROUTE2", 1); }
}
