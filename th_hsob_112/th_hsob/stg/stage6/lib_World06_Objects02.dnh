
//　地形配置
// オブジェクトがm_kill個配置されたら消える
task World06Object01b( m_pos, m_angle, m_index, m_kill, scale ){
	BG_POSITION++;
	let kill = m_kill + BG_POSITION;
	
	//　モデル初期化
	let obj		= ObjMesh_Create();
	ObjMesh_Load( obj, world06_path[m_index+6] );
	Obj_SetRenderPriorityI( obj, world_layer );
	ObjRender_SetBlendType( obj, BLEND_ALPHA );
	ObjRender_SetAngleXYZ( obj, m_angle[0], m_angle[1]+90, m_angle[2] );
	ObjRender_SetScaleXYZ( obj, scale, 1, 1 );
	ObjRender_SetPosition( obj, m_pos[0], m_pos[1], m_pos[2] );
	
	while( BG_POSITION < kill ){
		if (GetStageScene() >= BGChange_StageScene) { break; }
		yield;
	}
	Obj_Delete( obj );
}

// きら☆きら☆
task World06Object01b_p( m_pos, m_speed, m_angle, m_add, m_blink, m_kill, scale ){
	let ang = m_angle;
	let x = m_pos[0];
	let y = m_pos[1];
	let vx = m_speed*cos(m_angle);
	let vy = m_speed*sin(m_angle);

	let obj = CreateParticleEffect(m_pos, scale, 2);
	Obj_SetRenderPriorityI(obj, world_layer+1);
	ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
	
	ascent(t in 0 .. m_kill)
	{
		let tmp = (t+1)/m_kill * min(1, (m_kill-t)/10);
		let tmpa = tmp*(48+sin(t*m_blink)*48);
		ObjRender_SetPosition(obj, x, y, 0);
		ObjRender_SetAlpha(obj, tmpa);
		ObjRender_SetScaleXYZ(obj, tmp, tmp, tmp);
		ObjRender_SetAngleZ(obj, ang);
		x += vx; y += vy;
		ang += tmp*m_add;
		yield;
	}
	Obj_Delete(obj);
}
// おきりさん
task World06Object01b_m( pos, frame_x, frame_y, color, blend_type ){
	let obj		= ObjPrim_Create(OBJ_PRIMITIVE_2D);
	let cut		= 24;
	let size	= 512;
	let frame	= 0;
	
	ObjRender_SetPosition( obj, pos[0], pos[1], 0 );
	ObjPrim_SetTexture( obj, world06_path[16] );
	Obj_SetRenderPriorityI( obj, world_layer+1 );
	ObjPrim_SetVertexCount( obj, (cut+1)*2 );
	ObjPrim_SetPrimitiveType( obj, PRIMITIVE_TRIANGLESTRIP );
	ObjRender_SetBlendType(obj, blend_type);
	ObjRender_SetColor(obj, color[0], color[1], color[2] );
	
	ascent(i in 0 .. cut+1)
	{
		let tmp = i/cut;
		let px = cos(tmp*180);
		let tmp_a =  sin(tmp*180) * 255;
		ObjPrim_SetVertexUV( obj, i*2+0, 0, tmp*3 );
		ObjPrim_SetVertexUV( obj, i*2+1, 3, tmp*3 );
		ObjPrim_SetVertexPosition( obj, i*2+0, px*size/2, -size/2, 0 );
		ObjPrim_SetVertexPosition( obj, i*2+1, px*size/2,  size/2, 0 );
		ObjPrim_SetVertexAlpha( obj, i*2+0, tmp_a );
		ObjPrim_SetVertexAlpha( obj, i*2+1, tmp_a );
	}
	
	while( !Obj_IsDeleted(obj) ){
		if (GetStageScene() >= BGChange_StageScene) { break; }
		if (frame < 300)
		{
			let alpha = (frame+1)/300;
			ascent(i in 0 .. cut+1)
			{
				let tmp = i/cut;
				let tmp_a =  sin(tmp*180) * 255 * alpha;
				ObjPrim_SetVertexAlpha( obj, i*2+0, tmp_a );
				ObjPrim_SetVertexAlpha( obj, i*2+1, tmp_a );
			}
		}
		ascent(i in 0 .. cut+1)
		{
			let tmp = i/cut + frame/frame_x + GetCameraAzimuthAngle/180;
			let tmp2 = frame/frame_y + GetCameraElevationAngle/180;
			let px = cos(tmp*180);
			ObjPrim_SetVertexUV( obj, i*2+0, 0+tmp2, tmp*1 );
			ObjPrim_SetVertexUV( obj, i*2+1, 2+tmp2, tmp*1 );
		}
		frame++;
		yield;
	}
	Obj_Delete( obj );
}


// p1-(p2)-(p3)-p4のベジェ曲線
// xの値からyを返す
function GetBezierCompletion(p1, p2, p3, p4, x)
{
	let a = -p1[0]+3*p2[0]-3*p3[0]+p4[0];
	let b = 3*p1[0]-6*p2[0]+3*p3[0];
	let c = -3*p1[0]+3*p2[0];
	let d = p1[0]-x;

	let eq = GetCubicEquation(a, b, c, d);
	descent(i in 0 .. length(eq))
	{
		if (eq[i] < 0 || eq[i] > 1.00000001) { eq = erase(eq, i); }
	//	※計算精度の関係か下だと上手いこと動かない
	//	if (eq[i] < 0 || eq[i] > 1) { eq = erase(eq, i); }
	}
	if (length(eq) <= 0) { return(0); }
	else
	{
		let t = eq[0];
		let y = p1[1]*(1-t)^3 + 3*p2[1]*t*(1-t)^2 + 3*p3[1]*t^2*(1-t) + p4[1]*t^3;
		return(y);
	}
}

// 三次方程式の実数解のみを返す
function GetCubicEquation(a, b, c, d)
{
	if (a == 0)
	{
		if (b == 0)
		{
			if (c == 0)
			{
				// 解なし
				return([]);
			}
			// 一次解
			return([-c/d]);
		}
		// 二次解
		let q = c^2-4*b*d;
		if (q >= 0) { return([(-c+q^0.5)/(2*b), (-c-q^0.5)/(2*b)]); }
		else { return([]); }
	}
	
	b /= a; c /= a; d /= a;
	
	let p = (3*c-b^2)/3;
	let p3 = p/3;
	let q = (2*b^3-9*b*c+27*d)/27;
	let q2 = q/2;
	let dis = q2^2+p3^3;

	// 実数解3個
	if (dis < 0)
	{
		let r = ((-p3)^3)^0.5;
		let t = -q/(2*r);
		let phi = 0;
		if (t < -1) { phi = acos(-1); }
		else if (t > 1) { phi = acos(1); }
		else { phi = acos(t); }
   		let t2   = 2*CubeRoot(r);
   		
   		let r1 = t2 * cos(phi/3) - b/3;
   		let r2 = t2 * cos(phi/3+120) - b/3;
   		let r3 = t2 * cos(phi/3+240) - b/3;
   		// 雑にソート
   		let tmp = 0;
   		if (r3 > r2) { tmp = r2; r2 = r3; r3 = tmp; }
   		if (r2 > r1) { tmp = r1; r1 = r2; r2 = tmp; }
    		if (r3 > r2) { tmp = r2; r2 = r3; r3 = tmp; }
  		return([r1, r2, r3]);
	}
	// 実数解3個、重複あり
	else if (dis == 0) {
		let u1 = 0;
		if (q2 < 0) { u1 = CubeRoot(-q2); }
		else { u1 = -CubeRoot(q2); }

    		let r1 = 2*u1-b/3;
    		let r2 = -u1-b/3;
    		if (r1 > r2) { return([r1, r2]); }
    		else { return([r2, r1]) }
	}
	// 実数解1個
	else {
		let sd = dis^0.5;
		let u1 = CubeRoot(sd-q2);
		let v1 = CubeRoot(sd+q2);
		
		let r1 = u1-v1-b/3;
		return([r1]);
	}

	// 三乗根
	function CubeRoot(n)
	{
		if (n < 0) { return(-(-n)^(1/3)); }
		else { return(n^(1/3)); }
	}
}
