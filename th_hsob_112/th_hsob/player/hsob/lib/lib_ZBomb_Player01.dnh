//------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------
//　禁呪返し
//　「博麗幻想奥義・夢幻祈祷」
//------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------


//　封印
task Player01ZBomb(){

//	let objManage	= GetSpellManageObject();
	let spell		= ObjSpell_Create();
	let se			= ObjSound_Create();
//	let allEnm		= GetAllEnemyID();
	let frame		= 0;
	let bombTm		= 60 * 3.5;	// 480F
//	let lpmax		= [ length(allEnm), 2 ];
	let waitTime	= 2;
//	let callTime	= waitTime * ( lpmax[0] * lpmax[1] );	// 320F
	let pang = GetPlayerAngle();

	//　無敵
	ResetPlayerInvincibility( bombTm + 240 );
	// Zボム開始通知
	SetAreaCommonData(CAREA_SYSTEM, "ZBOMB_ACTIVE", true );
	// カットイン
	if (!IsRainbow())
	{
		SetAreaCommonData(CAREA_SYSTEM, "PACKAGE_CUTIN", true );
		SetAreaCommonData(CAREA_SYSTEM, "PACKAGE_CUTIN_ID", 0 );
	}
	// 効果音
	ObjSound_Play( PlayerEnviron_SE[8] );

	// 1f待機
	yield;
	
	ZBombArea( bombTm+60 );
	
	ObjSound_Play( PlayerEnviron_SE[4] );
	ObjSound_Play( PlayerEnviron_SE[9] );
	
	//　ダメージはここね
	ObjSpell_SetDamage( spell, GetZSpellDamage() );
	ObjSpell_Regist( spell );
	
	/*
	ascent( let i in 0..lpmax[0] ){
		let spos = [ ObjMove_GetX(allEnm[i]), ObjMove_GetY(allEnm[i]) ];
		let sang = randEffect( 0, 360 );
		if( Obj_IsDeleted(allEnm[i]) ){ spos = [ randEffect(0,GetStgFrameWidth()), randEffect(0,GetStgFrameHeight()) ]; }
		ascent( let j in 0..lpmax[1] ){
			Zbomb01_Effect01( spos, sang, j );
		}
		loop( waitTime ){ yield; }
	}
	*/
	
	let effFlg = 0;
	while( IsPermitPlayerSpell() && frame < bombTm ){
		
		if (effFlg <= 0 && bombTm-frame > 60)
		{
			let allEnm		= GetIntersectionRegistedEnemyID();
			
			if (length(allEnm) > 0)
			{
				let enm = trunc(rand(0, length(allEnm)));
				let spos = [ ObjMove_GetX(allEnm[enm]), ObjMove_GetY(allEnm[enm]) ];
				let sang = rand( 0, 360 );
				if( Obj_IsDeleted(allEnm[enm]) ){ spos = [ rand(0,GetStgFrameWidth()), rand(0,GetStgFrameHeight()) ]; }
				if (frame < 60)
				{
					ascent( let j in 0..2 ){
						Zbomb01_Effect01( spos, sang, j, bombTm-frame-90+trunc(frame/2) );
					}
					effFlg = 3;
				}
				else
				{
					ascent( let j in 0..2 ){
						Zbomb01_Effect01( spos, sang, 1, bombTm-frame-90+trunc(frame/2) );
					}
					effFlg = 9;
				}
			}
			else if (frame < 60)
			{
				let spos = [ rand(MinX+64,MaxX-64), rand(MinY+64,MaxY-192) ];
				let sang = rand( 0, 360 );
				ascent( let j in 0..2 ){
					Zbomb01_Effect01( spos, sang, j, bombTm-frame-90+trunc(frame/2) );
				}
				effFlg = 3;
			}
		}

		// 霊撃位置を記録
		SetAreaCommonData(CAREA_SYSTEM, "PLAYER_SPELL_POS", [CenX, CenY]);
		SetAreaCommonData(CAREA_SYSTEM, "PLAYER_SPELL_SIZE", 384);
		SetAreaCommonData(CAREA_SYSTEM, "PLAYER_SPELL_LV", GetZSpellLevel());

		//　ダメージ
		if (frame < bombTm-30) { ObjSpell_SetDamage( spell, GetZSpellDamage()/5 ); }
		else { ObjSpell_SetDamage( spell, GetZSpellDamage()*7.5 ); }
		
		// アイテム化
		DeleteShotAll_ToZItem(CenX, CenY, 384);
		
		// 攻撃範囲
		ObjSpell_SetIntersectionCircle( spell, CenX, CenY, 384 );
		
		frame++;
		effFlg--;
		yield;
	}
	// 初期化
	SetAreaCommonData(CAREA_SYSTEM, "PLAYER_SPELL_SIZE", 0);
	SetAreaCommonData(CAREA_SYSTEM, "PLAYER_SPELL_LV", 0);

	Set2DCameraFocusX( GetStgFrameWidth()/2 );
	Set2DCameraFocusY( GetStgFrameHeight()/2 );
	DeleteShotInCircle( TYPE_SHOT, TYPE_ITEM, GetPlayerX(), GetPlayerY(), 512 );
	ObjSound_Play( PlayerEnviron_SE[3] );
//	Obj_Delete( objManage );
	Obj_Delete( spell );
	Obj_Delete( se );

	// Zボム終了通知
	SetAreaCommonData(CAREA_SYSTEM, "ZBOMB_ACTIVE", false );
}


//　針
task Zbomb01_Effect01( v_gpos, v_angle, v_count, v_time ){

	let ang		= v_angle + rand( -32, 32 );
	let baseSca	= [ rand(0.2,0.4), 0.25 ];

//	if (IsDrawEffect() > 1 || (IsDrawEffect() > 0 && v_count == 0))
	// なんか自信ないから常時描画にしとく
	local
	{
		let obj		= ObjPrim_Create(OBJ_SPRITE_2D);
		let path	= imgPlZbomb1a;
		let move1	= 0;
		let moveA	= 0;
		
		ObjRender_SetPosition( obj, v_gpos[0], v_gpos[1], 0 );
		ObjPrim_SetTexture( obj, path );
		Obj_SetRenderPriorityI( obj, 31 );
		ObjRender_SetBlendType( obj, BLEND_ALPHA );
		ObjRender_SetAngleZ( obj, ang );
		ObjSprite2D_SetSourceRect( obj, 0, 0, 512, 32 );
		ObjSprite2D_SetDestCenter( obj );
		
		
		while( move1 < 1 ){
			move1 = 1 * sin( moveA );
			
			ObjRender_SetScaleXYZ( obj, baseSca[0]*8 - move1*baseSca[0]*7, move1*baseSca[1], 0 );
			ObjRender_SetAlpha( obj, move1*255 );
			
			moveA += 10;
			yield;
		}
		loop( 30 ){
			if (!IsPermitPlayerSpell()) { break; }
			yield;
		}
		move1 = 0;
		moveA = 0;
		ObjRender_SetColor( obj, 255, 0, 0 );
		while( move1 < 1 ){
			move1 = 1 * sin( moveA );
			
			ObjRender_SetScaleXYZ( obj, baseSca[0] + move1*4, baseSca[1] + move1*0.6, 0 );
			ObjRender_SetAlpha( obj, 255 - move1*255 );
			
			moveA += 10;
			yield;
		}
		Obj_Delete( obj );
	}

	if( IsPermitPlayerSpell() && v_count == 0 ){
		Zbomb01_Effect02( v_gpos, ang, v_time );
	}
}


//　結界糸
task Zbomb01_Effect02( v_gpos, v_angle, v_time ){
	let obj		= ObjPrim_Create(OBJ_SPRITE_2D);
	let path	= imgPlZbomb1a;
	let move1	= 0;
	let moveA	= 0;
	let ang		= v_angle;
	let baseSca	= [ 1, 0.2 ];
	let frame	= 0;
	let alpha	= 64;
	let vpx = v_gpos[0];
	let vpy = v_gpos[1];
	let va = rand(0,360);
	let vs = rand(0,1);
	let vx = vs*cos(va);
	let vy = vs*sin(va);
	
	ObjRender_SetPosition( obj, vpx, vpy, 0 );
	ObjPrim_SetTexture( obj, path );
	Obj_SetRenderPriorityI( obj, 31 );
	ObjRender_SetBlendType( obj, BLEND_ADD_ARGB );
	ObjRender_SetAngleZ( obj, ang );
	ObjSprite2D_SetSourceRect( obj, 0, 32, 2048, 64 );
	ObjSprite2D_SetDestCenter( obj );
	
	
	while( move1 < 1 ){
		move1 = 1 * sin( moveA );
		
		ObjRender_SetPosition( obj, vpx, vpy, 0 );
		ObjSprite2D_SetSourceRect( obj, 0 + frame*16, 32, 1024 + frame*16, 64 );
		ObjRender_SetScaleXYZ( obj, baseSca[0], move1*baseSca[1], 0 );
		ObjRender_SetAlpha( obj, move1*alpha );
		
		frame++;
		moveA += 15;
		vpx += vx; vpy += vy;
		
		yield;
	}
	loop( v_time ){
		if (!IsPermitPlayerSpell()) { break; }
		ObjRender_SetPosition( obj, vpx, vpy, 0 );
		ObjSprite2D_SetSourceRect( obj, 0 + frame*16, 32, 1024 + frame*16, 64 );
		ObjRender_SetAngleZ( obj, ang + frame/2 );
		vpx += vx; vpy += vy;
		frame++;
		yield;
	}
	Zbomb01_Effect03( [vpx, vpy], 0.6 );
	move1 = 0;
	moveA = 0;
	ObjRender_SetBlendType( obj, BLEND_ADD_ARGB );
	while( move1 < 1 ){
		move1 = 1 * sin( moveA );
		
		ObjSprite2D_SetSourceRect( obj, 0 + frame*16, 32, 1024 + frame*16, 64 );
		ObjRender_SetScaleXYZ( obj, baseSca[0] + move1*4, baseSca[1] + move1*4, 0 );
		ObjRender_SetAlpha( obj, alpha - move1*alpha );
		
		frame++;
		moveA += 10;
		
		yield;
	}
	Obj_Delete( obj );
}



task Zbomb01_Effect03( v_gpos, v_scale ){
	let sht		= CreateShotA2( v_gpos[0], v_gpos[1], 0, 0, 0, 0, 1, 0 );
	
	ObjShot_SetAutoDelete( sht, false );
	ObjShot_SetSpellResist( sht, true );
	ObjShot_SetDamage( sht, 50 );
	ObjShot_SetPenetration( sht, 1 );
	SpellCard01_Draw( sht, v_scale );
	
	//　抜けたら削除　念の為に削除済みで無かったら削除
	if( !Obj_IsDeleted(sht) ){
		Obj_Delete(sht);
	}
}

//　ﾃｸｽﾁｬ描画
task SpellCard01_Draw( CallID, v_scale ){
	let ID		= [
		ObjPrim_Create(OBJ_SPRITE_2D),
		ObjPrim_Create(OBJ_SPRITE_2D),
		ObjPrim_Create(OBJ_SPRITE_2D),
	];
	let path	= [
		imgPlLight,
		imgPlLight,
		imgPlLight,
	];
	let rgb		= [
		[ 255, 0, 0 ],
		[ 0, 255, 0 ],
		[ 0, 0, 255 ],
	];
	let rang	= [ rand(0,360), rand(0,360), rand(0,360) ];
	let gpos	= [ ObjMove_GetX(CallID), ObjMove_GetY(CallID) ];
	let move1	= 0;
	let moveA	= 0;
	let chsca	= 0.04;
	let count	= 0;
	let alpha	= 255;
	let scabase	= v_scale;
	
	ascent( let i in 0..length(ID) ){
		ObjRender_SetPosition( ID[i], gpos[0], gpos[1], 0 );
		ObjPrim_SetTexture( ID[i], path[i] );
		Obj_SetRenderPriorityI( ID[i], 31 );
		ObjRender_SetBlendType( ID[i], BLEND_ADD_ARGB );
		ObjRender_SetColor( ID[i], rgb[i][0], rgb[i][1], rgb[i][2] );
		ObjSprite2D_SetSourceRect( ID[i], 0, 0, 256, 256 );
		ObjSprite2D_SetDestCenter( ID[i] );
	}
	
	while( IsPermitPlayerSpell() && !Obj_IsDeleted(CallID) ){
		gpos = [ ObjMove_GetX(CallID), ObjMove_GetY(CallID) ];
		
		move1 = 1 * sin( moveA );
		
		//　弾消し範囲
		DeleteShotInCircle( TYPE_SHOT, TYPE_ITEM, gpos[0], gpos[1], 64 );
		
		//　拡縮等
		ascent( i in 0..length(ID) ){
			let scale = move1*scabase + chsca * sin(count);
			ObjRender_SetPosition( ID[i], gpos[0] + rand(-8,8), gpos[1] + rand(-8,8), 0 );
			ObjRender_SetScaleXYZ( ID[i], scale, scale, 0 );
			ObjRender_SetAngleXYZ( ID[i], 0, 0, rang[i] + count*16 );
			ObjRender_SetAlpha( ID[i], move1*alpha );
		}
		
		count++;
		if( move1 < 1 ){ moveA += 2; }
		
		yield;
	}
	//　消滅時ﾊﾟｰﾃｨｸﾙ　画面範囲内であれば生成
	if( gpos[0] > 0 && gpos[0] < 384 && gpos[1] > 0 && gpos[1] < 448 ){
		SpellEffect( gpos, scabase, rgb, alpha/2 );
		ObjSound_Play( Player_SE[1] );
	}
	move1 = 0;
	moveA = 0;
	while( move1 < 1 ){
		move1 = 1 * sin( moveA );
		
		if (IsPermitPlayerSpell())
		{
			Set2DCameraFocusX( GetStgFrameWidth()/2 + randEffect(-4,4) );
			Set2DCameraFocusY( GetStgFrameHeight()/2 + randEffect(-4,4) );
		}
		
		ascent( i in 0..length(ID) ){
			let scale = scabase + move1*(scabase*3);
			ObjRender_SetScaleXYZ( ID[i], scale, scale, 0 );
			ObjRender_SetAngleXYZ( ID[i], 0, 0, rang[i] + count*16 );
			ObjRender_SetAlpha( ID[i], alpha - move1*alpha );
		}
		
		count++;
		moveA += 5;
		
		yield;
	}
	ascent( i in 0..length(ID) ){
		Obj_Delete( ID[i] );
	}
	Set2DCameraFocusX( GetStgFrameWidth()/2 );
	Set2DCameraFocusY( GetStgFrameHeight()/2 );
}

//　消滅時ﾊﾟｰﾃｨｸﾙ
task SpellEffect( gpos, scabase, rgb_array, alpha ){

	if (IsDrawEffect() < 2) { return; }

	let ID		= [
		ObjPrim_Create(OBJ_SPRITE_2D),
		ObjPrim_Create(OBJ_SPRITE_2D),
		ObjPrim_Create(OBJ_SPRITE_2D),
	];
	let rgb		= [
		rgb_array[0],
		rgb_array[1],
		rgb_array[2],
	];
	let rang	= [ randEffect(0,360), randEffect(0,360), randEffect(0,360) ];
	let rdist	= [];
	let move1	= 0;
	let moveA	= 0;
	let count	= 0;
	
	ascent( let i in 0..length(ID) ){
		ObjPrim_SetTexture( ID[i], imgPlLight );
		Obj_SetRenderPriorityI( ID[i], 61 );
		ObjRender_SetBlendType( ID[i], BLEND_ADD_ARGB );
		ObjRender_SetAlpha( ID[i], alpha );
		ObjRender_SetColor( ID[i], rgb[i][0], rgb[i][1], rgb[i][2] );
		ObjSprite2D_SetSourceRect( ID[i], 0, 0, 256, 256 );
		ObjSprite2D_SetDestCenter( ID[i] );
		rdist = rdist ~ [ randEffect(64,128) ];
	}
	
	while( move1 < 1 ){
		move1 = 1 * sin( moveA );
		
		let scale = scabase - move1*scabase;
		ascent( i in 0..length(ID) ){
			ObjRender_SetPosition( ID[i], gpos[0] + move1*rdist[i] * cos(rang[i]), gpos[1] + move1*rdist[i] * sin(rang[i]), 0 );
			ObjRender_SetAngleXYZ( ID[i], 0, 0, rang[i] + count*16 );
			ObjRender_SetScaleXYZ( ID[i], scale, scale, 0 );
		}
		
		count++;
		moveA += 2;
		
		yield;
	}
	ascent( i in 0..length(ID) ){
		Obj_Delete( ID[i] );
	}
}
