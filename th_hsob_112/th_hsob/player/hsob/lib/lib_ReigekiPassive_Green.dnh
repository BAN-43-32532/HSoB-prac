//------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------
//　真珠島　霊撃・翠
//------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------

// 初期設定
function InitGreen( v_obj, v_playerNo )
{
	GreenBuffPassive( v_obj, v_playerNo );
}

//　高速移動等
task GreenBuffPassive( v_obj, v_playerNo ){
	let stgArea = [ MinX(), MinY(), MaxX(), MaxY() ];
	let spd = [ PlayerSpeed[v_playerNo][0], PlayerSpeed[v_playerNo][1] ];
	let col = PlayerCollision[v_playerNo];
	let timer = 0;
	let v_color = GetPlayerWeapon();
	let pX = GetPlayerX;
	let pY = GetPlayerY;
	
	//　判定縮小、びみょーーにグレイズ拡大
	ResetPlayerCollision( [PlayerCollision[v_playerNo][0]/2, PlayerCollision[v_playerNo][1]*1.15] );
	
	// 通常ショット倍率をちょっとだけ上げる
	MainShotAmount = GreenShotAmount;

	while( !Obj_IsDeleted(v_obj) && v_color == GetPlayerWeapon() ){
		let setSpeed = [ 0, 0 ];
		
		//　段階速度変化
		if( timer == 60 || timer == 180 ){
			//　SPDupエフェクト
			ascent( let i in 0..4 ){
				GreenWaveEffect( v_obj, [ (1+i)*0.4, (1+i)*0.4 ], 128, i*3 );
			}
			ObjSound_Play( PlayerEnviron_SE[11] );
		}
		if( timer >= 0 && timer < 60 ){
			setSpeed = [ spd[0], spd[1] ];
			NormalShotFrame = 6;	// 通常ショット間隔
		}
		else if( timer >= 60 && timer < 180 ){
			setSpeed = [ spd[0] + 2, spd[1] ];
			if( (pX != GetPlayerX || pY != GetPlayerY) && timer%3 == 0 ){ GreenMoveEffect( v_obj, [ 1, 0.4 ], 64 ); }
			NormalShotFrame = 4;	// 通常ショット間隔
		}
		else if( timer >= 180 ){
			setSpeed = [ spd[0] + 4, spd[1] ];
			if( (pX != GetPlayerX || pY != GetPlayerY) && timer%1 == 0 ){ GreenMoveEffect( v_obj, [ 1, 0.4 ], 64 ); }
			NormalShotFrame = 3;	// 通常ショット間隔
		}
		SetAreaCommonData(CAREA_SYSTEM, "PlayerSpeed", setSpeed);
		ChangePlayerSpeed(-1, -1);
		
		if( GetPlayerState() == STATE_NORMAL &&
			GetVirtualKeyState(VK_SLOWMOVE) == KEY_FREE && IsPermitPlayerShot ){ timer++; }
		else{ timer = 0; }
		
		pX = GetPlayerX;
		pY = GetPlayerY;
		
		yield;
	}
	local
	{
		// もとに戻す
		let setSpeed = [ spd[0], spd[1] ];
		NormalShotFrame = 6;	// 通常ショット間隔
		MainShotAmount = 1;	// 通常ショット倍率
		ResetPlayerCollision( col );
		SetAreaCommonData(CAREA_SYSTEM, "PlayerSpeed", spd);
		ChangePlayerSpeed(-1, -1);
	}
}

//　速度upエフェクト描画
task GreenWaveEffect( v_obj, v_scale, v_alpha, v_wait ){
	let obj			= ObjPrim_Create(OBJ_SPRITE_2D);
	let move1		= 0;
	let moveA		= 0;
	let rect		= [ 1, 0 ];
	
	loop( v_wait ){ yield; }
	
	ObjPrim_SetTexture( obj, imgPlEffectDefault );
	Obj_SetRenderPriorityI( obj, 49 );
	ObjRender_SetBlendType( obj, BLEND_ADD_ARGB );
	ObjSprite2D_SetSourceRect( obj, 0 + rect[0]*64, 0 + rect[1]*64, 64 + rect[0]*64, 64 + rect[1]*64 );
	ObjSprite2D_SetDestCenter( obj );
	
	while( !Obj_IsDeleted(v_obj) && move1 < 1 ){
		move1 = 1 * sin( moveA );
		
		ObjRender_SetPosition( obj, GetPlayerX(), GetPlayerY(), 0 );
		ObjRender_SetScaleXYZ( obj, v_scale[0]*2 - move1*v_scale[0], v_scale[1]*2 - move1*v_scale[1], 0 );
		ObjRender_SetAlpha( obj, move1*v_alpha );
		
		moveA += 15;
		
		yield;
	}
	
	while( !Obj_IsDeleted(v_obj) && move1 > 0 ){
		move1 = 1 * sin( moveA );
		
		ObjRender_SetPosition( obj, GetPlayerX(), GetPlayerY(), 0 );
		ObjRender_SetScaleXYZ( obj, move1*v_scale[0], move1*v_scale[1], 0 );
		ObjRender_SetAlpha( obj, move1*v_alpha );
		
		moveA += 5;
		
		yield;
	}

	Obj_Delete( obj );
}

//　移動エフェクト描画
task GreenMoveEffect( v_obj, v_scale, v_alpha ){
	if( IsDrawEffect() < 1 || GetPlayerState() != STATE_NORMAL ){ return; }
	
	let obj			= ObjPrim_Create(OBJ_SPRITE_2D);
	let frame		= 0;
	let move1		= 0;
	let moveA		= 0;
	let angle		= [ randEffect(8,16), randEffect(8,16), randEffect(8,16) ];
	let spd			= randEffect(0,1);
	let animCtr		= 0;
	let anim		= 0;
	
	ObjRender_SetPosition( obj, GetPlayerX(), GetPlayerY(), 0 );
	ObjPrim_SetTexture( obj, imgPlAura01f );
	Obj_SetRenderPriorityI( obj, 31 );
	ObjRender_SetBlendType( obj, BLEND_ADD_ARGB );
	ObjSprite2D_SetSourceRect( obj, 0 + anim*64, 0, 64 + anim*64, 128 );
	ObjSprite2D_SetDestCenter( obj );
	ObjRender_SetAngleXYZ( obj, angle[0]*360, angle[1]*360, angle[2]*360 );
	ObjRender_SetColor( obj, 192, 255, 192 );
	
	while( !Obj_IsDeleted(v_obj) && move1 < 1 ){
		move1 = 1 * sin( moveA );
		
		let spos = [
			ObjRender_GetX(obj) + spd * cos( angle[2]*360 ),
			ObjRender_GetY(obj) + spd * sin( angle[2]*360 ),
		];
		
		ObjRender_SetPosition( obj, spos[0], spos[1], 0 );
		ObjRender_SetScaleXYZ( obj, v_scale[0]*2 - move1*v_scale[0], v_scale[1]*2 - move1*v_scale[1], 0 );
		ObjRender_SetAngleXYZ( obj, angle[0]*360 + frame*4, angle[1]*360 + frame*4, angle[2]*360 + frame*4 );
		ObjRender_SetAlpha( obj, move1*(v_alpha/1) + (v_alpha/2)*sin(frame*64) );
		ObjSprite2D_SetSourceRect( obj, 0 + anim*64, 0, 64 + anim*64, 128 );
		
		if( animCtr > 0 && animCtr%8 == 0 && anim < 3 ){ anim++; }
		moveA += 15;
		frame++;
		animCtr++;
		
		yield;
	}
	
	while( !Obj_IsDeleted(v_obj) && move1 > 0 ){
		move1 = 1 * sin( moveA );
		
		let spos = [
			ObjRender_GetX(obj) + spd * cos( angle[2]*360 ),
			ObjRender_GetY(obj) + spd * sin( angle[2]*360 ),
		];
		
		ObjRender_SetPosition( obj, spos[0], spos[1], 0 );
		ObjRender_SetScaleXYZ( obj, move1*v_scale[0], move1*v_scale[1], 0 );
		ObjRender_SetAngleXYZ( obj, angle[0]*360 + frame*4, angle[1]*360 + frame*4, angle[2]*360 + frame*4 );
		ObjRender_SetAlpha( obj, move1*(v_alpha/1) + (v_alpha/2)*sin(frame*64) );
		ObjSprite2D_SetSourceRect( obj, 0 + anim*64, 0, 64 + anim*64, 128 );
		
		if( animCtr > 0 && animCtr%8 == 0 && anim < 3 ){ anim++; }
		moveA += 2;
		frame++;
		animCtr++;
		
		yield;
	}

	Obj_Delete( obj );
}