//------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------
//　自機共通のエフェクト
//------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------




let csd		= GetCurrentScriptDirectory();

#include "./lib_Load.dnh"
#include "./lib_AllSound.dnh"
#include "./fx_function.dnh"
#include "./lib_ReigekiPassive.dnh"
#include "./lib_PlayerDisplay.dnh"

// 共通してincludeするやつ
#include "./../../../lib/lib_SystemAll.dnh"
#include "./../../../lib/lib_File.dnh"
#include "./../../../lib/lib_String.dnh"
#include "./../../../lib/lib_Item.dnh"

//　自機のオプション配置データ
//　[ 高速時自機からの距離, 低速時自機からの距離, 高速時自機からの角度, 低速時自機からの角度 ]
let formationData = [
	[
		//　霊夢
		[ 48, 64, 270-24, 270-8 ],
		[ 48, 64, 270+24, 270+8 ],
		[ 64, 32, 270-48, 270-64 ],
		[ 64, 32, 270+48, 270+64 ],
	],
	[
		//　魔理沙
		[ 48, 48, 90-90, 90-45 ],
		[ 48, 48, 90+90, 90+45 ],
	],
	[
		//　咲夜
		[ 48, 48, 0, 270-32 ],
		[ 48, 48, 180, 270+32 ],
		[ 48, 48, 90-32, 90-96 ],
		[ 48, 48, 90+32, 90+96 ],
	],
	[
		//　輝夜
		[ 48, 64, 270, 270 ],
		[ 48, 64, 342, 270+32 ],
		[ 48, 64, 414, 270+64 ],
		[ 48, 64, 486, 270-64 ],
		[ 48, 64, 558, 270-32 ],
	],
];

//　共通の初期化
task PlayerInitialize( v_playerNo ){
	let objPlayer = GetPlayerObjectID();
	let path = [ imgPlImg01, imgPlImg02, imgPlImg03, imgPlImg04 ];

	//　ダミーショットデータ
	LoadPlayerShotData( csd ~ "./Dummy_ShotData.dnh" );
	//　効果音
	LoadSE();

	//　デフォパラメータをセット
	SetPlayerPower( 400 );
	ResetPlayerRebirthFrame( 0 );
	SetPlayerDownStateFrame( 60 );
	SetAreaCommonData(CAREA_SYSTEM, "PlayerSpeed", PlayerSpeed[v_playerNo]);
	SetAreaCommonData(CAREA_SYSTEM, "PlayerSpeedMul", [1, 1]);
	SetAreaCommonData(CAREA_STAGE, "FirstMessage", true);

	SetAreaCommonData(CAREA_SYSTEM, "PLAYER_SPELL_POS", [0, 0]);
	SetAreaCommonData(CAREA_SYSTEM, "PLAYER_SPELL_SIZE", 0);
	SetAreaCommonData(CAREA_SYSTEM, "PLAYER_SPELL_LV", 0);
	SetAreaCommonData(CAREA_SYSTEM, "COLLECT_FLG", false );
	SetAreaCommonData(CAREA_SYSTEM, "ZBOMB_ACTIVE", false );
	SetAreaCommonData(CAREA_SYSTEM, "PLAYER_ANGLE", 0 );

	//　低速エフェクト　アイテム収集範囲エフェクト
	SlowEffect();
	ItemCollectEffect( PlayerCollectItemRange[v_playerNo] );

	//　自機テクスチャ表示
	PlayerDisplay( v_playerNo, path[v_playerNo], PlayerRenderPosition[v_playerNo] );

	//　移動範囲制限→システム側で設定
//	SetPlayerClip( 0+6, 0+24, 384-6, 448-16 );

	//　自機当たり判定
	ResetPlayerCollision( PlayerCollision[v_playerNo] );

	//　Zボム発動準備
	TCallZBomb(v_playerNo);

	// 初期位置
	InitPlayerPosition(false);

	//　オプション設定
	SetPlayerOption( objPlayer, v_playerNo, GetPlayerWeapon() );
}

task SetPlayerOption( objPlayer, v_playerNo, v_color )
{
	// プレイヤー停止中は待機
	while(GetAreaCommonData(CAREA_SYSTEM, "PlayerDisabled", false)) { yield; }
	// メッセージ表示
	SetReigekiMessage( v_color );
	// 色々リセット
	SetAreaCommonData(CAREA_SYSTEM, "PLAYER_BARRIER", 0);
	ChangePlayerSpeed(1, 1);

	//　オプション設定
	let opt = [];
	ascent( let i in 0..length(formationData[v_playerNo]) ){
		opt = opt ~ [ CreateOption( v_playerNo, formationData[v_playerNo][i][0], formationData[v_playerNo][i][1], formationData[v_playerNo][i][2], formationData[v_playerNo][i][3], i ) ];
	}
	//　魔理沙のときだけ追加オプション召喚
	let exOpt = [];
	if( v_playerNo == 1 ){
		let lpc = 3;
		ascent( i in 0..lpc ){
			exOpt = exOpt ~ [ CreateOptionPl02Ex( 48, 270, [ 24, 8 ], 270 + i*(360/lpc), 8 ) ];
		}
	}

	//　ショット関連の何某
	PlayerShotManager( v_playerNo, opt, exOpt, v_color );
	//　霊撃passive
	SetReigekiPassive( objPlayer, v_playerNo, v_color );

	// 待機
	while( v_color == GetPlayerWeapon() ){
		yield;
	}
	yield;
	// 装備変更の際に再呼び出し
	SetPlayerOption( objPlayer, v_playerNo, GetPlayerWeapon() );
}


//　低速エフェクト
task SlowEffect(){
	let obj			= [
		ObjPrim_Create(OBJ_SPRITE_2D),
		ObjPrim_Create(OBJ_SPRITE_2D),
		ObjPrim_Create(OBJ_SPRITE_2D),
	];
	let alpha		= 0;
	let slowFlag	= false;
	let spin		= 0;
	let move1		= 90;
	let moveA		= 0;
	let i			= 0;
	
	ascent( i in 0..length(obj) ){
		ObjPrim_SetTexture( obj[i], imgPlEffectDefault );
		Obj_SetRenderPriorityI( obj[i], 49 );
		ObjRender_SetBlendType( obj[i], BLEND_ALPHA );
		ObjRender_SetAngleXYZ( obj[i], 0, 0, 0 );
		ObjRender_SetScaleXYZ( obj[i], 1, 1, 0 );
		ObjSprite2D_SetSourceRect( obj[i], 0, 128, 64, 192 );
		ObjSprite2D_SetDestCenter( obj[i] );
	}
	
	Obj_SetRenderPriorityI( obj[2], 69 );
	ObjRender_SetBlendType( obj[2], BLEND_ALPHA );
	ObjSprite2D_SetSourceRect( obj[2], 27, 155, 37, 165 );
	ObjSprite2D_SetDestCenter( obj[2] );
	
	loop{
		if( GetVirtualKeyState(VK_SLOWMOVE) == KEY_HOLD ){ slowFlag = true; }
		if( GetVirtualKeyState(VK_SLOWMOVE) == KEY_PULL ){ slowFlag = false; }
		
		ascent( i in 0..length(obj) ){
			ObjRender_SetPosition( obj[i], GetPlayerX(), GetPlayerY(), 0 );
		}
		
		if( GetPlayerState() == STATE_DOWN || GetPlayerState() == STATE_END ){
			ascent( i in 0..length(obj) ){
				ObjRender_SetAlpha( obj[i], 0 );
			}
		}
		else{
			ObjRender_SetAlpha( obj[0], alpha*1.5 );
			ObjRender_SetAlpha( obj[1], alpha*1.5 );
			ObjRender_SetAlpha( obj[2], alpha*2 );
		}
		
		if( slowFlag ){
			move1 = 1 * sin( moveA );
			
			ObjRender_SetAngleXYZ( obj[0], 0, 0, 20 + spin + move1*270 );
			ObjRender_SetAngleXYZ( obj[1], 0, 0, 20 - spin - move1*270 );
			ObjRender_SetAngleXYZ( obj[2], 0, 0, 20 - spin );
			
			ascent( i in 0..length(obj) ){
				ObjRender_SetScaleXYZ( obj[i], 2-move1, 2-move1, 0 );
			}
			
			if( move1 < 1 ){ moveA += 5; }
			else{ spin++; }
		}
		else{
			move1 = 0;
			moveA = 0;
			spin = 0;
		}
		if( slowFlag && alpha < 100 ){ alpha += 100/10; }
		if( !slowFlag && alpha > 0 ){ alpha -= 100/3; }
		
		yield;
	}
	ascent( i in 0..length(obj) ){
		Obj_Delete( obj[i] );
	}
}

//　グレイズエフェクト
task GrazeEffect( v_angle, v_disD, v_speed, v_acc, v_mx, v_rgb_array, v_alpha ){

	if (IsDrawEffect() < 2) { return; }

	let obj		= ObjPrim_Create(OBJ_SPRITE_2D);
	let gp		= [ GetPlayerX(), GetPlayerY() ];
	let path	= imgPlParticle01a;
	let dis		= 0;
	let move1	= 0;
	let moveA	= 0;
	let frame	= 0;
	let sca		= randEffect( 0.05, 0.1 );
	let spin	= randEffect( 0, 360 );
	let spinp	= randEffect( -4, 4 );
	let count	= 0;
	let anime	= 0;
	
	while( spinp == 0 ){
		spinp = randEffect( -8, 8 );
	}
	
	ObjRender_SetBlendType( obj, BLEND_ADD_ARGB );
	ObjPrim_SetTexture( obj, path );
	Obj_SetRenderPriorityI( obj, 32 );
	ObjRender_SetColor( obj, v_rgb_array[0], v_rgb_array[1], v_rgb_array[2] );
	ObjSprite2D_SetSourceRect( obj, 0, 0, 128, 128 );
	ObjSprite2D_SetDestCenter( obj );
	
	//　自機からの距離
	let pl_dis	= GetObjectDistance( GetPlayerObjectID(), obj );
	
	while( !Obj_IsDeleted(obj) && move1 < 1 ){
		move1	= 1 * sin( moveA );
		
		ObjRender_SetPosition( obj, gp[0] + move1*v_disD * cos(v_angle), gp[1] + move1*v_disD * sin(v_angle), 0 );
		ObjRender_SetAngleXYZ( obj, 0, 0, spin + spinp );
		ObjRender_SetScaleXYZ( obj, sca*2 - move1*sca, sca*2 - move1*sca, 0 );
		ObjRender_SetAlpha( obj, move1*v_alpha );
		
		spin += spinp;
		if( move1 < 1 ){ moveA += 10; }
		
		yield;
	}
	moveA = 0;
	while( !Obj_IsDeleted(obj) && pl_dis > 16 ){
		pl_dis	= GetObjectDistance( GetPlayerObjectID(), obj );
		v_angle	= atan2( GetPlayerY() - ObjRender_GetY(obj), GetPlayerX() - ObjRender_GetX(obj) );
		move1	= 1 * sin( moveA );
		
		let scale = sca + 0.05 * sin( count*64 );
		ObjRender_SetPosition( obj, ObjRender_GetX(obj) + dis * cos(v_angle), ObjRender_GetY(obj) + dis * sin(v_angle), 0 );
		ObjRender_SetAngleXYZ( obj, 0, 0, spin + spinp );
		ObjRender_SetScaleXYZ( obj, scale, scale, 0 );
		ObjSprite2D_SetSourceRect( obj, 0 + anime*128, 0, 128 + anime*128, 128 );
		
		dis = 0;
		
		spin += spinp;
		dis += v_speed;
		if( v_speed < v_mx ){ v_speed += v_acc; }
		if( move1 < 1 ){ moveA += 10; }
		if( count > 0 && count%4 == 0 && anime < 3 ){ anime++; }
		count++;
		
		yield;
	}
	Obj_Delete( obj );
}

//　被弾エフェクト
task PlayerHitEffect(){
	let pos	= [ GetPlayerX(), GetPlayerY() ];
	PlayerHitEffect_th14( pos, 48, 0, BLEND_INV_DESTRGB, 60 );
	PlayerHitEffect_th14( pos, 48, 90, BLEND_INV_DESTRGB, 60 );
	PlayerHitEffect_th14( pos, 48, 180, BLEND_INV_DESTRGB, 60 );
	PlayerHitEffect_th14( pos, 48, 270, BLEND_INV_DESTRGB, 60 );
	loop(12){ yield; }
	PlayerHitEffect_th14( pos, 0, 0, BLEND_INV_DESTRGB, 60 );
	loop(32){ yield; }
	PlayerHitEffect_th14( pos, 0, 0, BLEND_INV_DESTRGB, 60-32 );
}

task PlayerHitEffect_th14( v_pos, v_dis, v_angle, v_blend, v_long ){
	let obj		= ObjPrim_Create(OBJ_SPRITE_2D);
	let pos		= [ v_pos[0]+v_dis*cos(v_angle), v_pos[1]+v_dis*sin(v_angle) ];
	let scale	= 0.025;
	let move1	= 0;
	let moveA	= 0;
	let sca1	= 0;
	let scaA	= 0;
	
	ObjPrim_SetTexture( obj, imgPlCircle );
	Obj_SetRenderPriorityI( obj, 41 );
	ObjRender_SetBlendType( obj, v_blend );
	ObjSprite2D_SetSourceRect( obj, 0, 0, 512, 512 );
	ObjSprite2D_SetDestCenter( obj );
	
	while( !Obj_IsDeleted(obj) && move1 < 1 ){
		move1 = 1 * sin( moveA );
		pos = [
			v_pos[0] + move1*v_dis * cos(v_angle),
			v_pos[1] + move1*v_dis * sin(v_angle),
		];
		ObjRender_SetPosition( obj, pos[0], pos[1], 0 );
		ObjRender_SetScaleXYZ( obj, move1*scale, move1*scale, 0 );
		moveA += 10;
		yield;
	}
	while( !Obj_IsDeleted(obj) && sca1 < 1 ){
		ObjRender_SetPosition( obj, pos[0], pos[1], 0 );
		ObjRender_SetScaleXYZ( obj, scale + sca1*4.8, scale + sca1*4.8, 0 );
		
		if( sca1 < 1 ){ sca1 += scaA; }
		if( scaA < 1 ){ scaA += 0.0008; }
		
		yield;
	}
	loop(v_long){
		if( Obj_IsDeleted(obj) ){ break; }
		yield;
	}
	Obj_Delete( obj );
}

//　アイテム収集範囲エフェクト
task ItemCollectEffect( collect_max )
{
	let collect_min = 16;
	let max_r = collect_max+collect_min;
	
	let alpha = 0;
	let collect_r = 0;
	let slowFlag = false;

	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI( obj, 31 );
	ObjPrim_SetTexture( obj, imgPlItemCircle );
	ObjRender_SetBlendType( obj, BLEND_ADD_ARGB );
	ObjSprite2D_SetSourceRect( obj, 0, 0, 512, 512 );
	ObjSprite2D_SetDestCenter( obj );

	let t = 0;
	loop
	{
		if( GetVirtualKeyState(VK_SLOWMOVE) == KEY_HOLD ){ slowFlag = true; }
		if( GetVirtualKeyState(VK_SLOWMOVE) == KEY_PULL ){ slowFlag = false; }
		
		let tmp_max = collect_max;
		if (GetPlayerWeapon() == WEAPON_GREEN) { tmp_max *= 1.5; }
		
		// 回収サイズ変化
		if (slowFlag)
		{
			collect_r = collect_r + (tmp_max-collect_r)*0.1;
			if (collect_r > tmp_max) { collect_r = tmp_max; }
			alpha = (collect_r/tmp_max)^0.75 * 128;
		}
		else
		{
			collect_r = collect_r*0.9 - tmp_max/60;
			if (collect_r < 0) { collect_r = 0; }
			alpha = (collect_r/tmp_max)^0.75 * 128;
		}

		let sz = collect_min+collect_r;
		let sc = sz/256;
		SetAreaCommonData(CAREA_SYSTEM, "PLAYER_COLLECT_R", sz );		//　回収範囲

		ObjRender_SetPosition(obj, GetPlayerX, GetPlayerY, 0);
		ObjRender_SetAlpha(obj, alpha);
		ObjRender_SetScaleXYZ(obj, sc, sc, 1);
		ObjRender_SetAngleZ(obj, t*4);
		t++;
		yield;
	}
}

//　Zボム起動管理
task TCallZBomb(v_playerNo)
{
	let cooling_time = 0;
	let equip_id = 0;
	
	// 初期装備
	if (IsRainbow()) { ChangeRainbowEquip(0); }
	
	/*
	loop
	{
		if (cooling_time <= 0 && GetPlayerState == STATE_NORMAL && GetVirtualKeyState(VK_USER1) == KEY_PUSH)
		{
			if (IsRainbow())
			{
				// 虹装備の時は装備切り替えキーになる
				ObjSound_Play( PlayerEnviron_SE[3] );
				ChangeRainbowEquip(1);
				cooling_time = 30;
			}
			else if (IsPermitPlayerSpell() && GetZSpellItem() >= GetZSpellItemMax())
			{
				SetZSpellItem(0);
				ResetPlayerRebirthFrame( 1 );	// 喰らいボム再設定＆受付延長

				alternative(v_playerNo)
				case(0) { Player01ZBomb(); }
				case(1) { Player02ZBomb(); }
				case(2) { Player03ZBomb(); }
				case(3) { Player04ZBomb(); }
			}
		}
		cooling_time--;
		yield;
	}
	*/
	if (IsRainbow())
	{
		// プレイヤー停止中は待機
		while(GetAreaCommonData(CAREA_SYSTEM, "PlayerDisabled", false)) { yield; }
	
		// 虹装備の時は装備切り替えキーになる
		loop
		{
			if (cooling_time <= 0 && GetPlayerState == STATE_NORMAL)
			{
				if (GetVirtualKeyState(VK_USER1) == KEY_PUSH)
				{
					ObjSound_Play( PlayerEnviron_SE[3] );
					ChangeRainbowEquip(1);
					cooling_time = 30;
				} else if (GetVirtualKeyState(VK_USER2) == KEY_PUSH) {
					ObjSound_Play( PlayerEnviron_SE[3] );
					ChangeRainbowEquip(-1);
					cooling_time = 30;
				}
			}
			cooling_time--;
			yield;
		}
	}
	else
	{
		loop
		{
			if (cooling_time <= 0 && GetPlayerState == STATE_NORMAL && GetVirtualKeyState(VK_USER1) == KEY_PUSH)
			{
				if (IsPermitPlayerSpell() && GetZSpellItem() >= GetZSpellItemMax())
				{
					SetZSpellItem(0);
					ResetPlayerRebirthFrame( 1 );	// 喰らいボム再設定＆受付延長

					alternative(v_playerNo)
					case(0) { Player01ZBomb(); }
					case(1) { Player02ZBomb(); }
					case(2) { Player03ZBomb(); }
					case(3) { Player04ZBomb(); }
				}
			}
			cooling_time--;
			yield;
		}
	}
	
	function ChangeRainbowEquip(add_type)
	{
		let eq = WEAPON_RED;
		let rect = [0, 0];
		let all_eq = GetAllPlayerSubWeapon();
		let eq_ct = length(all_eq);
		if (eq_ct > 0)
		{
			equip_id = (equip_id+eq_ct+add_type)%eq_ct;
			eq = all_eq[equip_id%eq_ct];
		}
		SetAreaCommonData(CAREA_SYSTEM, "PlayerType", eq);
		
		alternative(eq)
		case( WEAPON_RED )	{ rect = [ 0, 0 ]; }
		case( WEAPON_PURPLE )	{ rect = [ 0, 1 ]; }
		case( WEAPON_BLUE )	{ rect = [ 2, 0 ]; }
		case( WEAPON_SKY )	{ rect = [ 1, 1 ]; }
		case( WEAPON_GREEN )	{ rect = [ 1, 0 ]; }
		case( WEAPON_YELLOW )	{ rect = [ 3, 0 ]; }
		case( WEAPON_ORANGE )	{ rect = [ 2, 1 ]; }
		others			{ rect = [ 3, 1 ]; }
		
		//　エフェクト
		ascent( let i in 0..3 ){
			EquipChangeEffect( GetPlayerObjectID(), [ (1+i)*1, (1+i)*1 ], 128-i*32, i*3, rect, 0 );
		}
		EquipChangeEffect( GetPlayerObjectID(), [ 2, 2 ], 128, 15, rect, 1 );
	}

	//　装備ﾁｪﾝｼﾞエフェクト描画
	task EquipChangeEffect( v_obj, v_scale, v_alpha, v_wait, v_rect, v_reverse ){
		let obj			= ObjPrim_Create(OBJ_SPRITE_2D);
		let move1		= 0;
		let moveA		= 0;
		let rect		= v_rect;
		
		loop( v_wait ){ yield; }
		
		ObjPrim_SetTexture( obj, imgPlEffectDefault );
		Obj_SetRenderPriorityI( obj, 49 );
		ObjRender_SetBlendType( obj, BLEND_ADD_ARGB );
		ObjSprite2D_SetSourceRect( obj, 0 + rect[0]*64, 0 + rect[1]*64, 64 + rect[0]*64, 64 + rect[1]*64 );
		ObjSprite2D_SetDestCenter( obj );
		
		while( !Obj_IsDeleted(v_obj) && move1 < 1 ){
			move1 = 1 * sin( moveA );
			
			ObjRender_SetPosition( obj, GetPlayerX(), GetPlayerY(), 0 );
			if (v_reverse) { ObjRender_SetScaleXYZ( obj, move1*v_scale[0], move1*v_scale[1], 0 ); }
			else { ObjRender_SetScaleXYZ( obj, v_scale[0]*2 - move1*v_scale[0], v_scale[1]*2 - move1*v_scale[1], 0 ); }
			ObjRender_SetAlpha( obj, move1*v_alpha );
			
			moveA += 15;
			
			yield;
		}
		
		while( !Obj_IsDeleted(v_obj) && move1 > 0 ){
			move1 = 1 * sin( moveA );
			
			ObjRender_SetPosition( obj, GetPlayerX(), GetPlayerY(), 0 );
			if (v_reverse) { ObjRender_SetScaleXYZ( obj, v_scale[0]*2 - move1*v_scale[0], v_scale[1]*2 - move1*v_scale[1], 0 ); }
			else { ObjRender_SetScaleXYZ( obj, move1*v_scale[0], move1*v_scale[1], 0 ); }
			
			ObjRender_SetAlpha( obj, move1*v_alpha );
			moveA += 5;
			
			yield;
		}

		Obj_Delete( obj );
	}
}

//------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------
//　ユーティリティ

//　プレイヤー周囲、"v_delSize"範囲の弾削除
task ShotDelete( v_delSize ){
	let m_move1	= 0;
	let m_moveA	= 0;
	while( m_move1 < 1 ){
		m_move1 = 1 * sin( m_moveA );
		DeleteShotInCircle( TYPE_SHOT, TYPE_FADE, GetPlayerX(), GetPlayerY(), m_move1*v_delSize );
		m_moveA += 3;
		yield;
	}
}

//　m_count桁目の数値を返す
function GetDigitNum( m_num, m_count ){
	if( m_count == 0 ){
		return trunc( m_num%10 );
	}
	else if( m_count < 0 ){
		return trunc( ( m_num*( 10 ^ ((m_count-1)*-1) ) ) % 10 );
	}
	else if( m_count > 0 ){
		return trunc( ( m_num%( 10 ^ (m_count+1) ) ) / (10 ^ m_count) );
	}
}

// 初期位置に戻る
function InitPlayerPosition(isReset)
{
	if (isReset)
	{
		ObjMove_SetPosition(GetPlayerObjectID(), CenX, MaxY-32);
	}
	else
	{
		let pos = GetAreaCommonData(CAREA_SYSTEM, "PlayerPosition", [CenX, MaxY-32]);
		ObjMove_SetPosition(GetPlayerObjectID(), pos[0], pos[1]);
	}
}

//状態異常の耐性(0〜1、1で完全耐性)
function GetEffectResist(obj) { return(Obj_GetValueD(obj, "RESIST_EFFECT", 0)); }

//時間停止耐性(0〜1、1で完全耐性)
function GetTimeResist(obj) { return(Obj_GetValueD(obj, "RESIST_TIME", 0)); }

/*
//　2点間の距離を取得
function GetDistance( pos1, pos2 ){
	return ( (pos2[1]-pos1[1])^2 + (pos2[0]-pos1[0])^2 ) ^ 0.5;
}

//　pos1 から見た pos2 への角度を取得
function GetGapAngle( pos1, pos2 ){
	return atan2( pos2[1]-pos1[1], pos2[0]-pos1[0] );
}
*/

// プレイヤー速度管理
// 0未満だと変化なし
function ChangePlayerSpeed(mul_fast, mul_slow)
{
	let spd = GetAreaCommonData(CAREA_SYSTEM, "PlayerSpeed", [0, 0]);
	let mul = GetAreaCommonData(CAREA_SYSTEM, "PlayerSpeedMul", [mul_fast, mul_slow]);
	if (mul_fast < 0) { mul_fast = mul[0]; }
	if (mul_slow < 0) { mul_slow = mul[1]; }
	SetPlayerSpeed( spd[0]*mul_fast, spd[1]*mul_slow );
	
	SetAreaCommonData(CAREA_SYSTEM, "PlayerSpeedMul", [mul_fast, mul_slow]);
}

// プレイヤー当たり判定管理
// []を入れるとデフォ値に戻す
task ResetPlayerCollision(col)
{
	if (length(col) <= 0)
	{
		let col = GetAreaCommonData(CAREA_SYSTEM, "PlayerCollision", [0, 0]);
		ObjPlayer_ClearIntersection( GetPlayerObjectID );
		ObjPlayer_AddIntersectionCircleA1( GetPlayerObjectID, 0, 0, col[0], col[1] );
	}
	else
	{
		SetAreaCommonData(CAREA_SYSTEM, "PlayerCollision", col);
		ObjPlayer_ClearIntersection( GetPlayerObjectID );
		ObjPlayer_AddIntersectionCircleA1( GetPlayerObjectID, 0, 0, col[0], col[1] );
	}
}
task ResetPlayerInvincibility(frame)
{
	let col = GetAreaCommonData(CAREA_SYSTEM, "PlayerCollision", [0, 0]);
	let inv = GetAreaCommonData(CAREA_SYSTEM, "PlayerInvincibility", 0);
	if (inv > frame) { return; }
	
	ObjPlayer_ClearIntersection( GetPlayerObjectID );
	ObjPlayer_AddIntersectionCircleA2( GetPlayerObjectID, 0, 0, col[0]+col[1] );

	while(frame > 0)
	{
		if (GetAreaCommonData(CAREA_SYSTEM, "PlayerInvincibility", 0) > frame) { return; }
		frame--;
		SetAreaCommonData(CAREA_SYSTEM, "PlayerInvincibility", frame);
		yield;
	}
	ResetPlayerCollision([]);
}

// 弾を色付きアイテムに変化
function DeleteShotAll_ToZItem(x, y, r)
{
	let objs = GetShotIdInCircleA2(x, y, r, TARGET_ENEMY);
	ascent(i in 0 .. length(objs))
	{
		let tmp_obj = objs[i];
		if (!ObjShot_IsSpellResist(tmp_obj))
		{
			SetItemEx(ObjMove_GetX(tmp_obj), ObjMove_GetY(tmp_obj), rand(1,3), rand(0,360), MY_ITEM_TIME_COLOR, ITEM_SIZE_MINI);
			DeleteBulletEffect(tmp_obj);
		}
	}
}

// 定数取得：追加ダメージ率
function GetAddDamageRate()
{
	return(PlayerAddDamageRate[PlayerNumber]);
}

// 喰らいボム再設定
function ResetPlayerRebirthFrame(flg_add)
{
	let frame = GetAreaCommonData(CAREA_SYSTEM, "PlayerRebirthFrame", PlayerRebirthFrame[PlayerNumber]);
	let frame_min = PlayerRebirthFrame[PlayerNumber];
	let frame_max = frame_min + 2 * PlayerRebirthAddFrame[PlayerNumber];

	frame += flg_add * PlayerRebirthAddFrame[PlayerNumber];
	frame = trunc(max(frame_min, min(frame_max, frame)));
	
	if (GetPlayerWeapon() == WEAPON_BLACK) { frame = frame_min; }

	// スぺプラでは無効
	if (GetPlayMode == GAME_SPELL)
	{
		frame = 0;
	}

	SetPlayerRebirthFrame( frame );
	SetPlayerRebirthLossFrame( 0 );
	SetAreaCommonData(CAREA_SYSTEM, "PlayerRebirthFrame", frame);
}
