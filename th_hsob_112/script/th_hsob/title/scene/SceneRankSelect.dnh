// 難易度選択画面
function SceneRankSelect(selectedDefault)
{
	let playMode = GetAreaCommonData(CAREA_TITLE, "PlayMode", GAME_NONE );

	//自動選択
	/*
	let tmpMemory = CheckAutoSelectMemory();
	if (tmpMemory >= 0)
	{
		ShotKeyEvent(tmpMemory);
		return;
	}
	*/
	
	let flgEXTRA = (selectedDefault == D_EXTRA);
	let imgValue = [0, 1, 2, 3];

	//選択記憶
	if (!flgEXTRA) {
		selectedDefault = LoadMenuMemory("Menu_Rank", selectedDefault);
	} else {
		selectedDefault = LoadMenuMemory("Menu_Rank_Ex", selectedDefault);
		imgValue = [0, 1];
		
		// ZLabel解禁状態（現在無効）
		if (false && GetAreaCommonData(CAREA_SAVE, "EXTRA_ZLABEL", false))
		{
			imgValue = imgValue ~ [2];
		}
	}
	
	let selectMax = length(imgValue);
	let resultIndex = -1;
	let animeTimer = 20;
	
	selectedDefault = selectedDefault%selectMax;
	
	let objParent = ObjText_Create();	//適当なオブジェクトを生成（データのやり取り用）
	Obj_SetValue(objParent, "VALUE", selectedDefault);
	
	//メニュー配置
	local
	{
		let mx = GetScreenWidth/2;
		let my = 240;
		if (flgEXTRA)
		{
			my += 108;
			TMenuItemText(objParent, [64, 124], imgTtExtra01, [0, 0, 512, 256]);
			ascent(i in 0 .. selectMax)
			{
				TMenuItemRank(objParent, i, mx, my, imgValue[i]);
			}
		}
		else
		{
			ascent(i in 0 .. selectMax)
			{
				TMenuItemRank(objParent, i, mx, my, imgValue[i]);
			}
		}
		// タイトル
		MenuPartsFace(objParent, 1);
	}
	wait(5);
	//キー状態がリセットされるまで待機
	WaitForResetKeyEx([VK_OK, VK_CANCEL]);

	loop
	{
		//キー入力待ち
		let downKey = CheckKey_MenuEx(30, 6, [VK_UP, VK_DOWN, VK_LEFT, VK_RIGHT, VK_OK, VK_CANCEL]);
		
		alternative (downKey)
		case (VK_UP, VK_LEFT)
		{
			CallSoundPackage(sndTtSelect);
			if (flgEXTRA && downKey == VK_UP) { Menu_AddValue2(objParent, "VALUE", 0, selectMax); }
			else { Menu_AddValue2(objParent, "VALUE", -1, selectMax); }
		}
		case (VK_DOWN, VK_RIGHT)
		{
			CallSoundPackage(sndTtSelect);
			if (flgEXTRA && downKey == VK_DOWN) { Menu_AddValue2(objParent, "VALUE", 0, selectMax); }
			else { Menu_AddValue2(objParent, "VALUE", 1, selectMax); }
		}
		case (VK_OK)
		{
			if (GetIgnoreMenuIndex(objParent, Obj_GetValueD(objParent, "VALUE", -1)))
			{
				CallSoundPackage(sndTtCancel);
			}
			else
			{
				resultIndex = Obj_GetValueD(objParent, "VALUE", selectedDefault);
				baseMenuFlag++;
				MenuEnter(objParent);
				break;
			}
		}
		case (VK_CANCEL)
		{
			CallSoundPackage(sndTtCancel);
			baseMenuFlag--;
			break;
		}
		wait(2);	//適当に固定ディレイ
	}
	
	//選択記憶
	if (!flgEXTRA) {
		SetMenuMemory("Menu_Rank", Obj_GetValueD(objParent, "VALUE", 0));
	} else {
		SetMenuMemory("Menu_Rank_Ex", Obj_GetValueD(objParent, "VALUE", 0));
	}
	Obj_Delete(objParent);

//	if (resultIndex >= 0 && flgEXTRA) { resultIndex = D_EXTRA; }

	// 値をセット
	if (!flgEXTRA) {
		SetAreaCommonData(CAREA_TITLE, "GameRank", resultIndex );
	} else {
		SetAreaCommonData(CAREA_TITLE, "GameRank", D_EXTRA );
		SetAreaCommonData(CAREA_TITLE, "GameRankEx", resultIndex );
	}
	return(resultIndex);
	
	// メニュー選択時モーション
	function MenuEnter(parent)
	{
		CallSoundPackage(sndTtDecide);
		Obj_SetValue(parent, "FLASH", 1);
		wait(15);
	}
	// メニューパーツ
	task TMenuItemRank(parent, index, base_x, base_y, img_index)
	{
		// 選択可否フラグ
		let flg = true;
		if (playMode == GAME_PRACTICE)
		{
			flg = CDM_GetPracticeStageFlag_Rank(img_index);
		}
		
		let base_ix = 0;
		let base_iy = img_index*256;
		let offset_x = 256;
		let offset_y = 72;
		let add_scale = 0;
		let scale = 1;
		let base_color = 255;
		if (flgEXTRA)
		{
			offset_x = 240;
			offset_y = 0;
			add_scale = -0.5;
		}
		
		let objText = ObjPrim_Create(OBJ_SPRITE_2D);
		Obj_SetRenderPriorityI(objText, 20);
		ObjPrim_SetTexture(objText, [imgTtSelectRank, imgTtSelectRankEx][flgEXTRA]);
		ObjSprite2D_SetDestRect(objText, -256, -128, 256, 128);
		ObjRender_SetPosition(objText, base_x, base_y, 0);
		
		// 選択拒否
		if (!flg)
		{
			SetIgnoreMenuIndex(parent, index);
			base_color = 128;
		}
		// クリアマーク
		let objClear = -1;
		let clear_flg = false;
		if (flgEXTRA) {
			if (index == 0) { clear_flg = (playMode == GAME_MAIN && flgEXTRA && CDM_GetAllClearFlagRank(10)); }
			if (index == 1) { clear_flg = (playMode == GAME_MAIN && flgEXTRA && CDM_GetAllClearFlagRank(11)); }	// Ex-Easy

		} else {
			clear_flg = (playMode == GAME_MAIN && CDM_GetAllClearFlagRank(index));
		}
		
		let t = 0;
		let before_index = -99999;
		let selected_index = -1;
		while(!Obj_IsDeleted(parent))
		{
			selected_index = Obj_GetValueD(parent, "VALUE", -1);
			let now_index = index-selected_index;
			
			// 開幕アニメ
			if (t < animeTimer)
			{
				let tmp = sin((t+1)/animeTimer*90);
				let tmp_index = now_index*tmp;
				let bx = base_x + tmp_index*offset_x;
				let by = base_y + tmp_index*offset_y;
				let bs = 1 + add_scale*absolute(tmp_index);
				ObjRender_SetAlpha(objText, tmp*255);
				ObjRender_SetPosition(objText, bx, by, 0);
				ObjRender_SetScaleXYZ(objText, bs, bs, bs);
			}
			// 選択決定
			if (Obj_GetValueD(parent, "FLASH", 0))
			{
				// クリアマーク削除
				if (!Obj_IsDeleted(objClear)) { Obj_SetValue(objClear, "DEL_FLG", true); }

				if (selected_index == index) {
					descent(t in 0 .. 20)
					{
						let alpha = 255 - ((trunc(t/3)+1)%2)*128;
						ObjRender_SetAlpha(objText, alpha);
						yield;
					}
					// 決定済みの文字を移動
					TMenuItemRank_Selected(base_x, base_y, GetScreenWidth/2+192+42, GetScreenHeight-64+36, base_ix, base_iy);
				} else {
					descent(t in 0 .. 20)
					{
						let alpha = 255*((t+1)/20);
						ObjRender_SetAlpha(objText, alpha);
						yield;
					}
				}
				break;
			}
			
			if (before_index != now_index)
			{
				let timer = 10;
				if (before_index == -99999) { before_index = now_index; timer = 1; }
				
				// 画像せっつ
				if (index == selected_index) {
					ObjSprite2D_SetSourceRect(objText, base_ix, base_iy, base_ix+512, base_iy+256);
					// クリアマークセット
					if (clear_flg) { objClear = CreateClearLogo(base_x-108, base_y-48, objText); }
				} else {
					ObjSprite2D_SetSourceRect(objText, base_ix+512, base_iy, base_ix+1024, base_iy+256);
					// クリアマーク削除
					if (!Obj_IsDeleted(objClear)) { Obj_SetValue(objClear, "DEL_FLG", true); }
				}
				ascent(t in 0 .. timer)
				{
					let tmp_index = (timer-t-1)/timer*before_index + (t+1)/timer*now_index;
					let bx = base_x + tmp_index*offset_x;
					let by = base_y + tmp_index*offset_y;
					let bs = 1 + add_scale*absolute(tmp_index);
					ObjRender_SetPosition(objText, bx, by, 0);
					ObjRender_SetScaleXYZ(objText, bs, bs, bs);
					yield;
				}
				before_index = now_index;
				local
				{
					let bx = base_x + now_index*offset_x;
					let by = base_y + now_index*offset_y;
					let bs = 1 + add_scale*absolute(now_index);
					ObjRender_SetPosition(objText, bx, by, 0);
					ObjRender_SetScaleXYZ(objText, bs, bs, bs);
				}
				// 振動
				if (timer > 1 && index == selected_index) { ShakeImage(objText, [-256,-128,256,128], 8, 6); }
			}
			// 明滅
			if (flg && selected_index == index) {
				let tmp_c = base_color - (sin(t*10)+0.75)*32;
				ObjRender_SetColor(objText, tmp_c, tmp_c, tmp_c);
			} else {
				ObjRender_SetColor(objText, base_color, base_color, base_color);
			}
			t++;
			yield;
		}
		Obj_Delete(objText);
	}

	// 選択後画面に残る奴
	task TMenuItemRank_Selected(base_x, base_y, to_x, to_y, base_ix, base_iy)
	{
		let yCut = 96;	// 画像説明部分をカット
		let timer = 20;
		let objText = ObjPrim_Create(OBJ_SPRITE_2D);
		Obj_SetRenderPriorityI(objText, 23);
		ObjPrim_SetTexture(objText, [imgTtSelectRank, imgTtSelectRankEx][flgEXTRA]);
		ObjSprite2D_SetDestRect(objText, -256, -128, 256, 128-yCut);
		ObjRender_SetPosition(objText, base_x, base_y, 0);
		ObjSprite2D_SetSourceRect(objText, base_ix, base_iy, base_ix+512, base_iy+256-yCut);
		
		let tmpFlag = baseMenuFlag;
		ascent(t in 0 .. timer)
		{
			let tmp = sin((t+1)/timer*90);
			let tmp_s = 1 - tmp/2;
			ObjRender_SetPosition(objText, base_x*(1-tmp)+to_x*tmp, base_y*(1-tmp)+to_y*tmp, 0);
			ObjRender_SetScaleXYZ(objText, tmp_s, tmp_s, tmp_s);
			yield;
		}
		while(tmpFlag <= baseMenuFlag)
		{
			yield;
		}
		descent(t in 0 .. 15)
		{
			let alpha = 255*((t+1)/15);
			ObjRender_SetAlpha(objText, alpha);
			yield;
		}
		Obj_Delete(objText);
	}

	// メニューパーツ
	task TMenuItemText(parent, pos, imgFile, rect)
	{
		let objText = ObjPrim_Create(OBJ_SPRITE_2D);
		Obj_SetRenderPriorityI(objText, 20);
		ObjPrim_SetTexture(objText, imgFile);
		ObjSprite2D_SetDestRect(objText, 0, 0, rect[2]-rect[0], rect[3]-rect[1]);
		ObjSprite2D_SetSourceRect(objText, rect[0], rect[1], rect[2], rect[3]);
		ObjRender_SetPosition(objText, pos[0], pos[1], 0);
		
		let t = 0;
		while(!Obj_IsDeleted(parent))
		{
			if (t < 30)
			{
				let tmp = (t+1)/30;
				ObjRender_SetAlpha(objText, tmp*255);
			}
			t++;
			yield;
		}
		Obj_Delete(objText);
	}
}



