#東方弾幕風[Single]
#ScriptVersion[3]
#Title["ひかり子道中スペカ1"]
#Text["ひかり子道中スペカ1"]
#Background[""]
#System["./../../../system/System.dnh"]

//---------------------------------------------------------------------

// 関数取り込み
#include"./../../../lib/lib_boss.dnh"
#include"./lib_Hikariko.dnh"

@Event {
	alternative(GetEventType())
	case(EV_REQUEST_LIFE)		{ SetScriptResult(200);	}
	case(EV_REQUEST_TIMER)		{ SetScriptResult(30);		}
	BossEvent();
}

@Initialize {
	let SPELL_ID = 21;
	let SPELL_NAME = 0;

	//ダメージ透過率
	dIni_Shot = 10;
	// アイテム数
	bossDropItem = 100;
	// ふえーる残機
	bossDropItemSpecial = [MY_ITEM_LIFE];
	
	//初期設定
	Boss_Init();
	
	objEnemy = CreateBoss(BOSS_ID_HIKARIKO);	//ボスセット

	//スペカデータ・セット
	SetSpellCardData(GetSpellCardID(SPELL_ID), SPELL_NAME, 
			GetCurrentScriptDirectory()~"03a_Background.dnh",
			GetBossTexture(objEnemy, I_CUTIN), 0.65, CUTMOTION_NORMAL);

	// チャプター開始
	ChapterStartBoss(GetBossID(objEnemy), SPELL_NAME, CHAPTER_SPELL);

	// 使い魔と体力連動
	CheckLinkLife_Boss(objEnemy);

	Task_Main();
}

@MainLoop {
	yield;
}

// メインタスク
task Task_Main
{
	standBy(objEnemy, CenX, 170, 60);
	waitObj(objEnemy, 60);
	CallSpellCard(true);	//スペカ起動
	
	let way = 5;
	let wt = 240;
	let muki = rand_dir();
	
	SetAction(objEnemy, ACT_SHOT2, 240);
	BossCharge(objEnemy);
	waitObj(objEnemy, 60);
	TShot_sub();
	
	waitObj(objEnemy, 60);
	
	let t = 0;
	while(eAlive)
	{
		if (t > 0) { SetAction(objEnemy, ACT_SHOT1, 75); }
		ascent(i in 0 .. way)
		{
			if (!eAlive) { return; }
			let sa = -90-(i-(way-1)/2)*15*muki+45*muki;
			let add_a = (0.5+0.025*i)*muki;
			let timer = 120;
			SetFamilier01(ObjMove_GetX(objEnemy)+32*cos(sa), ObjMove_GetY(objEnemy)+32*sin(sa),
				4, sa, add_a, timer);
			CallSound(sndShot2);
			waitObj(objEnemy, 15);
		}
		if (!eAlive) { return; }
		EnemyRandomMove(objEnemy, 160, 32);
		waitObj(objEnemy, wt-15*way);
		muki = -muki;
		t++;
	}
}

task TShot_sub()
{
	let speed = [1, 1.25, 1.5, 1.5][Difficult];
	let count = [1, 2, 3, 3][Difficult];
	let graphic = ADD_BGW_LIGHT_L_BLUE;
	
	while(eAlive)
	{
		loop(count)
		{
			let sx = rand(MinX,MaxX);
			let sy = MinY+32*speed;
			let ss = rand(0.5, 1) * speed;
			let sa = 90 + rand(-5, 5);
			let obj = My_CreateShotA2(sx, sy, -ss*3, sa, ss/10, ss, graphic, 15);
			ObjRender_SetColor(obj, 128, 192, 255);
		}
		waitObj(objEnemy, 10);
	}
}


// 鳥ショット
task SetFamilier01(iniX, iniY, iniSpeed, iniAngle, iniValue, iniTimer)
{
	let iniMuki = [1, -1][iniValue < 0];
	
	let eSize = ENEMY_M;
	let eColor = EFF_BLUE;
	let baseAngle = iniAngle;
	
	let objFamilier = MakeEnemyFamilier(iniX, iniY, 100, eSize);
	CheckLinkLife_Familier(objEnemy, objFamilier, 0.8);	// ボスと体力連動
	DrawBirdOption(objFamilier, EFF_BLUE, iniAngle, 1);
	TAct();
	WaitForKilledFamilier(objFamilier, 8, 0);
	ZakoFinalize(objFamilier, eColor);
	
	task TAct()
	{
		TMove;
		TShot;
	}
	
	task TMove()
	{
		let add_a = iniValue;

		Enemy_SetPatternA2(objFamilier, 0, iniSpeed, iniAngle, -iniSpeed/(iniTimer-60), add_a, iniSpeed/4);
		Enemy_SetPatternA2(objFamilier, iniTimer-30, NO_CHANGE, NO_CHANGE, iniSpeed/120, add_a, iniSpeed);
		
		ascent(t in 0 .. iniTimer)
		{
			if (Obj_IsDeleted(objFamilier)) { return; }
			let tmp = GetCurve_z((t+1)/iniTimer);
			Enemy_SetAngle(objFamilier, Enemy_GetAngle(objFamilier)+(tmp*1.5)*iniMuki);
			waitObj(objFamilier, 1);
		}
		TCheckDispINOut(objFamilier, 32);
	}
	
	task TShot()
	{
		waitObj(objFamilier, 60);
		
		let speed = [2, 2, 2.5, 2.5][Difficult];
		let way = [1, 1, 2, 3][Difficult];
		let way2 = [1, 1, 1, 3][Difficult];
		let way_angle = [1, 1, 12, 30][Difficult];
		let graphic = BGW_FIRE_BLUE;
		
		let st = 0;
		while(CanShotBullet(objFamilier))
		{
			let tmp_obj = GetShotIdInCircleA2(ObjMove_GetX(objFamilier), ObjMove_GetY(objFamilier), 32, TARGET_ENEMY);
			ascent(i in 0 .. length(tmp_obj))
			{
				if (ObjShot_GetImageID(tmp_obj[i]) == ADD_BGW_LIGHT_L_BLUE)
				{
					let tmp_way = [way, way2][st%2];
					CreateShotWayA2(ObjMove_GetX(tmp_obj[i]), ObjMove_GetY(tmp_obj[i]),
						0, GetAngleToPlayer(tmp_obj[i]), speed/120, speed, graphic, 30, tmp_way, way_angle, 0);
					DeleteBulletEffect(tmp_obj[i]);
					CallSound(sndBulletBreak);
					st++;
				}
			}
			waitObj(objFamilier, 3);
		}
	}
}
