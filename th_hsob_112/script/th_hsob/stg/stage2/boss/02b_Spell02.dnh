#東方弾幕風[Single]
#ScriptVersion[3]
#Title["ちぃスペカ2"]
#Text["ちぃスペカ2"]
#Background[""]
#System["./../../../system/System.dnh"]

//---------------------------------------------------------------------

// 関数取り込み
#include"./../../../lib/lib_boss.dnh"
#include"./lib_Chii.dnh"

let CHII_COUNT = 0;
let CHII_MAX = 0;
let ALL_CHII = 0;
let REMAIND_CHII = 0;

@Event {
	alternative(GetEventType())
	case(EV_REQUEST_LIFE)		{ SetScriptResult(300);	}
	case(EV_REQUEST_TIMER)		{ SetScriptResult(50);		}
	BossEvent();
}

@Initialize {
	let SPELL_ID = 12;
	let SPELL_NAME = [3, 3, 4, 5][Difficult];
	// アイテム数
	bossDropItem = 100;

	//ダメージ透過率
	dIni_Shot = 10;

	//初期設定
	Boss_Init();

	objEnemy = CreateBoss(BOSS_ID_CHII);	//ボスセット

	//スペカデータ・セット
	SetSpellCardData(GetSpellCardID(SPELL_ID), SPELL_NAME, 
			GetCurrentScriptDirectory()~"02a_Background.dnh",
			GetBossTexture(objEnemy, I_CUTIN), 0.75, CUTMOTION_NORMAL);

	// チャプター開始
	ChapterStartBoss(GetBossID(objEnemy), SPELL_NAME, CHAPTER_SPELL);

	// 使い魔と体力連動
	CheckLinkLife_Boss(objEnemy);

	Task_Main();
}

@MainLoop {
	yield;
}

// メインタスク
task Task_Main
{
	ObjMove_SetDestAtWeightSpeedUp(objEnemy, CenX, MinY+140, 10, 4, 0.1, 12);
	SetAction(objEnemy, ACT_MOVE, 600);
	SetEnemyVisible(objEnemy, false);
	BossEffect_DisableMagicCircle(objEnemy);
	waitObj(objEnemy, 60);
	
	let objImg = GetBossImageID(objEnemy);
	
//	BossCharge(objEnemy);
	SetAction(objEnemy, ACT_SHOT1, 240);
	CallSound(sndPower3);
	ascent(t in 0 .. 20)
	{
		SetEnemyChii01(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), rand(2,5), rand(0,360), t*3);
	}
	Obj_SetVisible(objImg, false);
	waitObj(objEnemy, 60);
	CallSound(sndPower2);
	TChii();
	waitObj(objEnemy, 60);

	CallSpellCard(true);	//スペカ起動
}

task TChii()
{
	// 最大出現数
	CHII_MAX = [6, 6, 10, 4][Difficult];;
	// こんだけ倒したら終わり
	ALL_CHII = [8, 8, 10, 8][Difficult];
	
	REMAIND_CHII = ALL_CHII;
	TumaEffect(MaxX-10, MaxY-16, ALL_CHII);
	
	let way = 8;
	let chii_span = [5, 5, 5, 7][Difficult];
	let wt = [12, 12, 10, 5][Difficult];

	let t = 3;
	let next = 0;
	while(eAlive)
	{
		if (CHII_COUNT < CHII_MAX && next <= 0)
		{
			let tmp = t%(way*4);
			let sx = 0;
			let sy = 0;

			if (tmp < way)
			{
				sx = MinX-64 + (GetClipWidth+128)*((t%way)/way);
				sy = MinY-64;
			}
			else if (tmp < way*2)
			{
				sx = MaxX+64;
				sy = MinY-64 + (GetClipHeight+128)*((t%way)/way);
			}
			else if (tmp < way*3)
			{
				sx = MaxX+64 - (GetClipWidth+128)*((t%way)/way);
				sy = MaxY+64;
			}
			else
			{
				sx = MinX-64;
				sy = MaxY+64 - (GetClipHeight+128)*((t%way)/way);
			}

			SetEnemyChii02(sx, sy, 0, 0, 0);
			next = chii_span+CHII_COUNT;
		}
		next--;
		t++;
		wait(wt);
	}
}

// 開幕ちぃちぃ
task SetEnemyChii01(iniX, iniY, iniSpeed, iniAngle, iniValue)
{
	let e_type = iniValue%2;
	let eSize = ENEMY_S;
	let eColor = EFF_BLUE;
	
	let objFamilier = MakeEnemy(iniX, iniY, 200, eSize);
	Boss_SetIDtoObj(objFamilier, BOSS_ID_CHII);
	Boss_SetAnimeTimer(objFamilier);
	BossAnime_Initialize(objFamilier);
	SetEnemyVisible(objFamilier, false);
	TAct();
	WaitForKilledFamilier(objFamilier, 0, 0);
	ZakoFinalize(objFamilier, eColor);
	
	task TAct()
	{
		let timer = 30+iniValue;
		Enemy_SetPatternA2(objFamilier, 0, iniSpeed, iniAngle, -iniSpeed/timer, 0, 0);
		Enemy_SetPatternA2(objFamilier, timer, NO_CHANGE, NO_CHANGE, 6/60, 0, 6);
		SetAction(objFamilier, [ACT_MOVE_L,ACT_MOVE_R][cos(iniAngle)>0], 99999);
		TCheckDispINOut(objFamilier, 64);
		
		let objImg = GetBossImageID(objFamilier);
		ascent(t in 0 .. timer)
		{
			let alpha = min(255, t/timer*2*255);
			let sc = 1-t/timer/3;
			ObjRender_SetAlpha(objImg, alpha);
			ObjRender_SetScaleXYZ(objImg, sc, sc, sc);
			waitObj(objFamilier, 1);
		}
	}
	
}



// いっぱいちぃちぃ
task SetEnemyChii02(iniX, iniY, iniSpeed, iniAngle, iniValue)
{
	CHII_COUNT++;
	
	let e_type = iniValue%2;
	let eSize = ENEMY_S;
	let eColor = EFF_BLUE;
	let eLife = [200, 200, 150, 200][Difficult];
	let eScale = [0.75, 0.75, 0.7, 0.75][Difficult];
	
	let objFamilier = MakeEnemy(iniX, iniY, eLife, eSize);
	Boss_SetIDtoObj(objFamilier, BOSS_ID_CHII);
	Boss_SetAnimeTimer(objFamilier);
	BossAnime_Initialize(objFamilier);
	Obj_SetValue(objFamilier, "ANIME_SC", eScale);
	FamilierEffect_LifeCircle(objFamilier, 48);
//	SetEnemyVisible(objFamilier, false);
	TAct();
	WaitForKilledFamilier(objFamilier, 24, 8);
	if (CheckKillType(objFamilier) == 2)
	{
		// 撃ち返し
		TUchikaeshi();
		// 本体への反映→なんか途中で死ぬ事があるので最後に一気にダメージを与える
		REMAIND_CHII--;
		if (REMAIND_CHII <= 0)
		{
			let dmg = ObjEnemyBossScene_GetInfo(objScene, INFO_ACTIVE_STEP_TOTAL_MAX_LIFE) + 1;
			ObjEnemy_AddLife(objEnemy, -dmg);
		}
	}
	ZakoFinalize(objFamilier, eColor);
	
	CHII_COUNT--;
	
	task TAct()
	{
		TMove();
	}
	
	task TMove()
	{
		waitObj(objFamilier, 60);

		let move_r = 64;
		let move_angle = GetAngleToPlayer(objFamilier);
		
		let t = 0;
		while(!Obj_IsDeleted(objFamilier) && t < 6)
		{
			let to_angle = GetAngleToPlayer(objFamilier);
			let add_a = to_angle-move_angle;
			if (add_a > 180) { add_a -= 360; }
			move_angle += absolute(add_a/180*0.75)^0.5 * add_a;
			
			let to_x = ObjMove_GetX(objFamilier) + move_r*cos(move_angle);
			let to_y = ObjMove_GetY(objFamilier) + move_r*sin(move_angle);
			MoveTo(objFamilier, to_x, to_y, 120);
			SetAction(objFamilier, [ACT_MOVE_L,ACT_MOVE_R][cos(move_angle)>0], 120);
			if (t > 1) { TShot(move_angle); }
			waitObj(objFamilier, 120);
			t++;
		}
		if (!Obj_IsDeleted(objFamilier))
		{
			let to_angle = GetAngleToPlayer(objFamilier);
			let add_a = to_angle-move_angle;
			if (add_a > 180) { add_a -= 360; }
			move_angle += absolute(add_a/180*0.85)^0.5 * add_a;

			Enemy_SetPatternA2(objFamilier, 0, 0, move_angle, 3/240, 0, 3);
			SetAction(objFamilier, [ACT_MOVE_L,ACT_MOVE_R][cos(move_angle)>0], 99999);
			TCheckDispINOut(objFamilier, 64);
		}
	}
	
	task TShot(angle)
	{
		if (Difficult >= D_LUNA)
		{
			let speed = 16;
			let way =	[1, 1, 1, 4][Difficult];
			let angles = [40, -40, 75, -75];

			let ba = GetAngleToPlayer(objFamilier);
			ascent(iW in 0 .. way){
				if (!CanShotBullet(objFamilier)) { break; }
				TumaLaser(ObjMove_GetX(objFamilier), ObjMove_GetY(objFamilier),
					4.5, ba+angles[iW%4], 80, speed);
				waitObj(objFamilier, 6);
				CallSound(sndShot2);
			}
		}
		else
		{
			let speed = 1.25;
			let way =	[4, 7, 5, 4][Difficult];
			let way2 =	[1, 1, 3, 6][Difficult];
			let way_angle =	way*18;
			let pos = [
				[1, 0],
				[cos(way_angle/2), sin(way_angle/2)]
				];

			ascent(iW in 0 .. way){
				if (!CanShotBullet(objFamilier)) { break; }
				let tmp = iW/(way-0.5);
				let ox = pos[0][0]*(1-tmp) + pos[1][0]*tmp;
				let oy = pos[0][1]*(1-tmp) + pos[1][1]*tmp;
				let add_a = atan2(oy,ox);
				let fs = 2 * ((ox^2+oy^2)^0.5);

				ascent(iW2 in 0 .. way2){
					let a = angle+360*iW2/way2;
					TumaShot(ObjMove_GetX(objFamilier), ObjMove_GetY(objFamilier),
						fs, a+add_a, BGW_STICK_YELLOW, 30, speed, a, BGW_STICK_RED, 60);
					if (add_a > 0)
					{
						TumaShot(ObjMove_GetX(objFamilier), ObjMove_GetY(objFamilier),
							fs, a-add_a, BGW_STICK_YELLOW, 30, speed, a, BGW_STICK_RED, 60);
					}
					CallSound(sndShot3);
				}
				waitObj(objFamilier, 2);
			}
		}
	}
	
	task TUchikaeshi()
	{
		let sx = ObjMove_GetX(objFamilier);
		let sy = ObjMove_GetY(objFamilier);
		let obj = NuclearShot(sx, sy, [255,255,255], 48, 30);
		ObjShot_SetDeleteFrame(obj, 45);
		EffectExplodeCloudSet(sx, sy, 10, [16,32,96], 60, 10);
		CallSound(sndFlare);
	}
	
	task TumaLaser(x, y, speed, angle, l_len, to_speed)
	{
		let obj = My_CreateSimpleLaserA1(x, y, angle, 0, 12, 6000, BGW_STICK_YELLOW, 0);
		ObjShot_SetSpellResist(obj, false);
		ObjShot_SetAutoDelete(obj, true);
		ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
		ObjShot_SetIntersectionEnable(obj, false);
		ObjRender_SetColor(obj, 255, 255, 0);
		ObjRender_SetAlpha(obj, 192);
		let sa = angle;
		ascent(t in 0 .. 60)
		{
			if (Obj_IsDeleted(obj)) { return; }
			let tmp = GetCurve((t+1)/60);
			x -= (1-tmp)*speed*cos(angle);
			y -= (1-tmp)*speed*sin(angle);
			
			let to_x = GetPlayerX;
			let to_y = GetPlayerY;
			let to_a = atan2(to_y-y, to_x-x);
			let add_a = (to_a-sa)%360;
			if (add_a > 180) { add_a -= 360; }
			sa += add_a*tmp*(1-tmp);
			
			ObjStLaser_SetAngle(obj, sa);
			ObjMove_SetPosition(obj, x, y);
			ObjLaser_SetLength(obj, tmp*l_len);
			wait(1);
		}
		if (Obj_IsDeleted(obj)) { return; }
		ObjMove_AddPatternA2(obj, 0, 0, sa, to_speed/30, 0, to_speed/120);
		ObjMove_AddPatternA2(obj, 45, 0, sa, to_speed/60, 0, to_speed);
		wait(30);
		if (Obj_IsDeleted(obj)) { return; }
		LaserEffect(ObjMove_GetX(obj)+72*cos(sa), ObjMove_GetY(obj)+72*sin(sa), sa, 800, EFF_WHITE, 5);
		TumaLaserSubShot(ObjMove_GetX(obj)-0*cos(sa), ObjMove_GetY(obj)-0*sin(sa), sa+180);
		CallSound(sndShot4);
		wait(15);
		if (Obj_IsDeleted(obj)) { return; }
		ObjShot_SetIntersectionEnable(obj, true);
		ObjRender_SetColor(obj, 255, 255, 255);
		ObjRender_SetAlpha(obj, 255);
		// えへくと
		let wt = 1;
		while(!Obj_IsDeleted(obj) && wt < 10)
		{
			TumaLaserEffect(ObjMove_GetX(obj), ObjMove_GetY(obj), sa+180+rand(-30,30));
			wait(trunc(wt));
			wt *= 1.1;
		}
	}

	task TumaLaserEffect(x, y, angle)
	{
		let obj = My_CreateSimpleLaserA1(x, y, angle, 16, 3, 6000, BGW_STICK_YELLOW, 0);
		ObjMove_AddPatternA2(obj, 0, 3, angle, -3/60, 0, 0);
		ObjRender_SetColor(obj, 255, 255, 0);
		SetShotDisabled(obj);
		ObjShot_FadeDelete(obj);
	}
	
	task TumaLaserSubShot(x, y, angle)
	{
		let way = 5;
		let way2 = 3;
		
		ascent(k in 0 .. way2)
		{
			let tmp_way = way-k;
			ascent(i in 0 .. tmp_way)
			{
				ascent(j in 0 .. 3)
				{
					let sa = angle + (i-(tmp_way-1)/2)*30 + (j-1)*1;
					let ss = (1 - absolute(j-1)*0.05) * (2 + k/2);
					My_CreateShotA2Ex(x, y, ss*3, sa, -ss/15, ss, BGW_ICE_YELLOW, 15, DELAY_ADD);
				}
			}
		}
	}
}

task TumaEffect(x, y, count)
{
	ascent(i in 0 .. count)
	{
		_TumaEffect(x-i*8, y, i+1);
		wait(3);
	}
	
	task _TumaEffect(x, y, count)
	{
		let obj = [CreateShotA1(x, y, 0, 120, BGW_STICK_YELLOW, 0),
			CreateShotA1(x, y, 0, 120, BGW_STICK_YELLOW, 0)];
		
		ascent(i in 0 .. 2)
		{
			SetShotDisabled(obj[i]);
			ObjShot_SetAutoDelete(obj[i], false);
			Obj_SetRenderPriorityI(obj[i], 70+i);
		}
		ObjRender_SetBlendType(obj[0], BLEND_SUBTRACT);
		ObjRender_SetBlendType(obj[1], BLEND_ADD_ARGB);
		ObjRender_SetScaleXYZ(obj[0], 2, 1.25, 1);
		
		let alpha = 255;
		ascent(t in 0 .. 60)
		{
			if (!eAlive) { break; }
			let tmp = GetCurve((t+1)/60);
			ascent(i in 0 .. 2)
			{
				ObjRender_SetAlpha(obj[i], tmp*255);
				ObjRender_SetX(obj[i], x-(1-tmp)*255);
			}
			yield;
		}
		while(eAlive)
		{
			if (GetPlayerY > y-24) { alpha = max(64,alpha-15); }
			else { alpha = min(255,alpha+15); }
			ascent(i in 0 .. 2)
			{
				ObjRender_SetAlpha(obj[i], alpha);
			}

			if (REMAIND_CHII < count)
			{
				let va = -90+rand(-45,45);
				let vx = cos(va)*2;
				let vy = sin(va)*2;
				ascent(i in 0 .. 2)
				{
					ObjMove_AddPatternB2(obj[i], 0, vx, vy, 0, 0.05, vx, 99);
				}
				ascent(t in 0 .. 60)
				{
					if (!eAlive) { break; }
					let tmp = GetCurve_a((t+1)/60);
					ascent(i in 0 .. 2)
					{
						ObjRender_SetAlpha(obj[i], (1-tmp)*255);
						ObjRender_SetAngleZ(obj[i], 120-va+60*tmp);
					}
					yield;
				}
				break;
			}
			yield;
		}
		ascent(i in 0 .. 2) { Obj_Delete(obj[i]); }
	}
}
