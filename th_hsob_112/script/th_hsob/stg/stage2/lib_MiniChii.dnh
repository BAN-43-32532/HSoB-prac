#include "./../../lib/loadlib/file_character.dnh"

// ---------------------- ボスのアニメーション動作ライブラリ

//関数の引数に使う方
let ACT_STAND	= "ACT_STAND";
let ACT_MOVE_L	= "ACT_MOVE_L";
let ACT_MOVE_R	= "ACT_MOVE_R";
let ACT_MOVE	= "ACT_MOVE";
let ACT_SHOT1	= "ACT_SHOT1";
let ACT_SHOT2	= "ACT_SHOT2";

//内部的な判別用
let _ACT_NONE	= 0;	//静止画
// ここからアクション用
let _ACT_MOVE	= 100;	//移動（自動判別）
let _ACT_MOVE_L_2	= 101;	//左移動 2コマ
let _ACT_MOVE_R_2	= 102;	//右移動 2コマ

let _ACT_SHOT_CHII	= 1011;	//ちぃ専用筆振り上げ
let _ACT_SHOT_CHII2	= 1012;	//ちぃ専用筆ぶん回し

task EnterMiniChii(objBoss, scale)
{
	let objShadow = GetBossImageObject(objBoss,
		ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), Boss_GetBossImage(objBoss));
	ObjRender_SetBlendType(objShadow, BLEND_SUBTRACT);
	ObjRender_SetColor(objShadow, 140, 96, 64);
	
	let timer = 60;
	let add_angle = rand_dir()*180;
	
	SetEnemyVisible(objBoss, false);
	ascent(t in 0 .. timer)
	{
		let tmp = sin((t+1)/timer*90);
		Obj_SetValue(objBoss, "ANIME_SC", tmp*scale);
		ObjRender_SetAngleXYZ(GetBossImageID(objBoss), 0, 0, (1-tmp)*add_angle);
		
		ObjRender_SetScaleXYZ(objShadow, (2-tmp)*scale, (2-tmp)*scale, (2-tmp)*scale);
		ObjRender_SetAngleXYZ(objShadow, 0, 0, -(1-tmp)*add_angle);
		ObjRender_SetAlpha(objShadow, 255*tmp);
		ObjRender_SetPosition(objShadow, ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 0);
		wait(1);
	}
	Obj_Delete(objShadow);
	SetEnemyVisible(objBoss, true);
}

//------------------------------------------------------------------------------
// ボスのアニメ設定
//------------------------------------------------------------------------------
function BossAnime_InitAnimation(obj)
{
	//画像設定
	Obj_SetValue(obj, "ANIME_SC", 1);		//拡大率
	Obj_SetValue(obj, "ANIME_W", 108);		//１コマの幅
	Obj_SetValue(obj, "ANIME_H", 144);		//１コマの高さ
//	Obj_SetValue(obj, "ANIME_FL", true);		//立ち絵をふわふわさせる？
	Obj_SetValue(obj, "ANIME_BL", 40);		//瞬き時の加算ID（0だと変化なし）
	Obj_SetValue(obj, "ANIME_X", -10);		//画像配置(Xpxずらす)
	Obj_SetValue(obj, "ANIME_Y", -20);		//画像配置(Ypxずらす)
	//アニメ設定
	Obj_SetValue(obj, ACT_STAND, _ACT_NONE);	//立ち
	Obj_SetValue(obj, ACT_MOVE_L, _ACT_MOVE_L_2);	//左移動
	Obj_SetValue(obj, ACT_MOVE_R, _ACT_MOVE_R_2);	//右移動
	Obj_SetValue(obj, ACT_MOVE, _ACT_MOVE);		//移動（自動判別）
	Obj_SetValue(obj, ACT_SHOT1, _ACT_SHOT_CHII);	//攻撃その１
	Obj_SetValue(obj, ACT_SHOT2, _ACT_SHOT_CHII2);
	
	Obj_SetValue(obj, "ANIME_CT", 10);		//横方向の画像並び数（固定！）
}

//------------------------------------------------------------------------------
//　アクション初期設定
//------------------------------------------------------------------------------
task BossAnime_Initialize(objBoss)
{
	//画像ファイルを取得
	let pathImg = Boss_GetBossImage(objBoss);
	//アニメ状態を設定
	BossAnime_InitAnimation(objBoss);
	Boss_AnimeTimer(objBoss);
	
	//エフェクトオブジェクトを作成
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(obj, priorityZako);
	ObjPrim_SetTexture(obj, pathImg);
	Obj_SetValue(objBoss, "IMAGE_ID", obj);	//IDを記録
	//描画タスク起動
	BossAnime_DrawTask(objBoss);

	while(!Obj_IsDeleted(objBoss))
	{
		SetAction( objBoss, ACT_STAND, 0 );	//デフォ状態のアクション
		while( Obj_GetValueD(objBoss, "ANIME_C", 0) < Obj_GetValueD(objBoss, "ANIME_MC", 0)
			&& !Obj_IsDeleted(objBoss) )
		{
			while( Obj_GetValueD(objBoss, "ANIME_STOP", false) ){ yield; }
			if (!IsTimeStopObj(objBoss))
			{
				Obj_SetValue(objBoss, "ANIME_C", Obj_GetValueD(objBoss, "ANIME_C", 0)+1);	//アニメカウンタ
			}
			yield;
		}
	}
	Obj_Delete(obj);
}

//------------------------------------------------------------------------------
// ボスドット絵のIDを返す
//------------------------------------------------------------------------------
function GetBossImageID(objBoss)
{
	return(Obj_GetValueD(objBoss, "IMAGE_ID", -1));
}

//------------------------------------------------------------------------------
//　ボス描画タスク
//------------------------------------------------------------------------------
task BossAnime_DrawTask(objBoss)
{
	yield;
	while(!Obj_IsDeleted(objBoss))
	{
		_DrawBoss( objBoss, ObjMove_GetX(objBoss), ObjMove_GetY(objBoss) );
		yield;
	}
}

//------------------------------------------------------------------------------
//　アクション指定
//　※指定フレーム数が経過すると基本アクションに移行する
//------------------------------------------------------------------------------
function SetAction(
	let objBoss,
	let newAction,		//　アクション定数
	let frame			//　アクション終了までのフレーム数
){
	let actID = Obj_GetValueD(objBoss, newAction, _ACT_NONE);
	if (actID < 100) { frame = 216000; }	// 立ちモーションはID2桁以下

	Obj_SetValue(objBoss, "ANIME_ACT", actID);
	Obj_SetValue(objBoss, "ANIME_C", 0);
	Obj_SetValue(objBoss, "ANIME_MC", frame);
}

//------------------------------------------------------------------------------
//　アニメ一時停止
//　※停止途中にすぐ再開したい場合は0以下のフレーム数を指定する
//------------------------------------------------------------------------------
task StopAnime(
	let objBoss,
	let frame		//　停止するフレーム数（経過後にアニメ再開）
){
	if( frame > 0 ){
		Obj_SetValue(objBoss, "ANIME_STOP", true);
		loop( frame ){
			if( !Obj_GetValueD(objBoss, "ANIME_STOP", false) ){ break; }
			waitObj(objBoss, 1);
		}
		Obj_SetValue(objBoss, "ANIME_STOP", false);
	}
	else{ Obj_SetValue(objBoss, "ANIME_STOP", false); }
}

//==============================================================================
//　描画関連関数
//==============================================================================
//　ボスアニメ描画（通常）
//------------------------------------------------------------------------------
function DrawBoss(
	let objBoss,		//ボスのオブジェクト
){
	_DrawBoss( objBoss, ObjMove_GetX(objBoss), ObjMove_GetY(objBoss) );
}

//------------------------------------------------------------------------------
//　ボスアニメ描画（座標指定）
//------------------------------------------------------------------------------
function _DrawBoss(
	let objBoss,		//ボスのオブジェクト
	let x,				//	中心x座標
	let y				//	中心y座標
){
	let rect = SetRect(objBoss);
	let ox = Obj_GetValueD(objBoss,"ANIME_X", 0);
	let oy = Obj_GetValueD(objBoss,"ANIME_Y", 0);
	//　描画 ---------------------------------------------------------
	let objImage = GetBossImageID(objBoss);
	let scale = Obj_GetValueD(objBoss, "ANIME_SC", 1) / 2;
	ObjSprite2D_SetSourceRect(objImage,
		rect[0], rect[1],
		rect[0]+rect[2], rect[1]+rect[3]);
	ObjSprite2D_SetDestRect(objImage,
		-(rect[2]-ox)*scale, -(rect[3]-oy)*scale,
		 (rect[2]+ox)*scale,  (rect[3]+oy)*scale);
	ObjRender_SetPosition(objImage, round(x), round(y), 0);
}

//------------------------------------------------------------------------------
//　ボス画像のエフェクトオブジェクトを作成
//  デフォだとボスオブジェクトの1つ下のレイヤーに配置する
//------------------------------------------------------------------------------
function GetBossImageObject(
	let objBoss,		//ボスのオブジェクト
	let x,				//	中心x座標
	let y,				//	中心y座標
	let imageFile,
){
	let rect = SetRect(objBoss);
	let ox = Obj_GetValueD(objBoss,"ANIME_X", 0);
	let oy = Obj_GetValueD(objBoss,"ANIME_Y", 0);
	//　作成 ---------------------------------------------------------
	let objImage = ObjPrim_Create(OBJ_SPRITE_2D);
	let scale = Obj_GetValueD(objBoss, "ANIME_SC", 1) / 2;
	Obj_SetRenderPriorityI(objImage, priorityZako-1);
	ObjPrim_SetTexture(objImage, imageFile);
	ObjSprite2D_SetSourceRect(objImage,
		rect[0], rect[1],
		rect[0]+rect[2], rect[1]+rect[3]);
	ObjSprite2D_SetDestRect(objImage,
		-(rect[2]-ox)*scale, -(rect[3]-oy)*scale,
		 (rect[2]+ox)*scale,  (rect[3]+oy)*scale);
	ObjRender_SetPosition(objImage, round(x), round(y), 0);
	return(objImage);
}

//------------------------------------------------------------------------------
//　画像の座標を取得
//------------------------------------------------------------------------------
function SetRect(objBoss)
{
	let img_id = 0;
	let action = Obj_GetValueD(objBoss, "ANIME_ACT", _ACT_NONE);
	let actionCount = Obj_GetValueD(objBoss, "ANIME_C", 0);
	let actionCountMax = Obj_GetValueD(objBoss, "ANIME_MC", 0);
	//画像の仕様チェック
	let iw = Obj_GetValueD(objBoss, "ANIME_W", 1);	//幅
	let ih = Obj_GetValueD(objBoss, "ANIME_H", 1);	//高さ
	let ict = Obj_GetValueD(objBoss, "ANIME_CT", 1);	//縦の並び数

	// 移動自動判定
	if ( action == _ACT_MOVE )
	{
		let ex = ObjMove_GetX(objBoss);
		let bx = Obj_GetValueD(objBoss, "ANIME_BX", 0);
		// 移動チェック
		if (bx > ex) { action = Obj_GetValueD(objBoss, ACT_MOVE_L, _ACT_MOVE_L_2); }
		else if (bx < ex) { action = Obj_GetValueD(objBoss, ACT_MOVE_R, _ACT_MOVE_R_2); }
		//速度が一定以下なら停止
		if (actionCount > 15 && absolute(bx-ex) < 0.25)
			{ Obj_SetValue(objBoss, "ANIME_C", max(actionCount, actionCountMax-12)); }
	}
	else
	{
	}
	Obj_SetValue(objBoss, "ANIME_BX", ObjMove_GetX(objBoss));
//	Obj_SetValue(objBoss, "ANIME_BY", ObjMove_GetY(objBoss));
	
	alternative( action )
	//　左移動（2コマ）---------------------------------
	case( _ACT_MOVE_L_2 ){
		let cutFrame = 8;
		let anime = trunc( actionCount/cutFrame );
		let anime_max = trunc( (actionCountMax-actionCount)/cutFrame );
		anime = min(min(anime, 1), anime_max);
		img_id = [ 12, 13 ][ anime ];
	}
	//　右移動（2コマ）---------------------------------
	case( _ACT_MOVE_R_2 ){
		let cutFrame = 8;
		let anime = trunc( actionCount/cutFrame );
		let anime_max = trunc( (actionCountMax-actionCount)/cutFrame );
		anime = min(min(anime, 1), anime_max);
		img_id = [ 10, 11 ][ anime ];
	}
	//　ちぃ専用---------------------------------
	case( _ACT_SHOT_CHII ){
		let cutFrame = 8;
		let anime = trunc( actionCount/cutFrame );
		let anime_max = trunc( (actionCountMax-actionCount)/cutFrame );
		if (anime_max < 2) { anime = 5-anime_max; }
		else { anime = min(anime, 3); }
		img_id = [ 20, 21, 22, 23, 37, 40 ][ anime ];
	}
	case( _ACT_SHOT_CHII2 ){
		let cutFrame = 6;
		let anime = trunc( actionCount/cutFrame );
		let anime_max = trunc( (actionCountMax-actionCount)/cutFrame );
		if (anime < 3) {
			img_id = [ 20, 21, 22 ][ anime ];
		} else if (anime_max < 2) {
			img_id = [ 37, 40 ][ 1-anime_max ];
		} else {
			let anime_max = trunc( (actionCountMax-actionCount-cutFrame*2)/2 );
			let anime = max(0, 13-anime_max);
			img_id = [ 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 36, 36 ][ anime ];
		}
	}
	//　1コマ（立ち状態） ----------------------------------------
	others{ img_id = 0; }
	
	
	//  まばたきチェック ----------------------------------------
	if (aTime(objBoss) % 180 > 170)
	{
		img_id += Obj_GetValueD(objBoss, "ANIME_BL", 0);
	}
	
	let cx = (img_id % ict) * iw;
	let cy = trunc(img_id / ict) * ih;
	return ( [cx, cy, iw, ih] );
}

// ボスのアニメ管理タスク
task Boss_AnimeTimer(obj)
{
	let t = 0;
	
	while(!Obj_IsDeleted(obj))
	{
		t++;
		Obj_SetValue(obj, "ATIME", t);
		waitObj(obj, 1);
	}
	// 撃破されたら記録
}
// アニメ管理の値ゲット
function aTime(obj)
{
	return(Obj_GetValueD(obj, "ATIME", 0));
}

// ボスのドット絵画像ファイル
function Boss_GetBossImage(obj)
{
	return(imgCharaChii[0]);
}
