// ‚ç‚ñ‚ç‚ñ‚¨‚Õ‚µ‚å‚ñ

let imgRanranFude = charaDir ~ "/ranran/fude.png";

task RanranActSet(objEnemy, delay1, delay2)
{
	SetAction(objEnemy, ACT_SHOT1, delay1+30);
	waitObj(objEnemy, delay1);
	if (!eAlive) { return; }
	SetAction(objEnemy, ACT_SHOT2, delay2);
}

task DrawRanranOption(objBase)
{
	let sc = 0.66;
	let isDrawShadow = (IsDrawEffect() > 1);
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	
	Obj_SetRenderPriorityI(obj, GetShotRenderPriorityI+2);
	ObjPrim_SetTexture(obj, imgRanranFude );
	ObjRender_SetBlendType(obj, BLEND_ALPHA );
	ObjSprite2D_SetSourceRect(obj, 0, 0, 64, 128);
	ObjSprite2D_SetDestRect(obj, -32, -64-40, 32, 64-40);
	ObjRender_SetPosition(obj, ObjMove_GetX(objBase), ObjMove_GetY(objBase), 0 );
	
	let before_x = ObjMove_GetX(objBase);
	let az = 0;
	let t = 0;
	while(!Obj_IsDeleted(objBase))
	{
		let cx = before_x-ObjMove_GetX(objBase);
		az += cx*1.5;
		az *= 0.9;
		before_x = ObjMove_GetX(objBase);

		if (t < 60)
		{
			let tmp = sin((t+1)/60*90);
			let tmp_s = sc*tmp;
			ObjRender_SetScaleXYZ(obj, tmp_s, tmp_s, tmp_s);
			ObjRender_SetAngleXYZ(obj, 0, -(1-tmp)*360, (1-tmp)*180+az);
			if (isDrawShadow) { _DrawRanranOption(ObjMove_GetX(objBase), ObjMove_GetY(objBase), tmp_s*(3-tmp*2), 0, -(1-tmp)*360, (1-tmp)*180+az, 255-128*tmp); }
		}
		else
		{
			ObjRender_SetAngleZ(obj, az);
			if (isDrawShadow) { _DrawRanranOption(ObjMove_GetX(objBase), ObjMove_GetY(objBase), sc*randEffect(0.5,1), 0, 0, az, 128); }
		}
		ObjRender_SetPosition(obj, ObjMove_GetX(objBase), ObjMove_GetY(objBase), 0 );
		t++;
		yield;
	}
	descent(t in 0 .. 45)
	{
		let tmp = sin((t+1)/45*90);
		let tmp_s = sc*tmp;
		ObjRender_SetScaleXYZ(obj, tmp_s, tmp_s, tmp_s);
		ObjRender_SetAngleXYZ(obj, 0, -(1-tmp)*360, (1-tmp)*180+az);
		if (isDrawShadow) { _DrawRanranOption(ObjRender_GetX(obj), ObjRender_GetY(obj), tmp_s, 0, -(1-tmp)*360, (1-tmp)*180+az, 255-128*tmp); }
		t++;
		yield;
	}
	Obj_Delete(obj);
	
	task _DrawRanranOption(x, y, sc, ax, ay, az, alpha)
	{
		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		Obj_SetRenderPriorityI(obj, GetShotRenderPriorityI+1);
		ObjPrim_SetTexture(obj, imgRanranFude );
		ObjRender_SetBlendType(obj, BLEND_ADD_ARGB );
		ObjSprite2D_SetSourceRect(obj, 64, 0, 128, 128);
		ObjSprite2D_SetDestRect(obj, -32, -64-40, 32, 64-40);
		ObjRender_SetPosition(obj, x, y, 0 );
		ObjRender_SetAngleXYZ(obj, ax, ay, az);
		ObjRender_SetColor(obj, 255, 0, 0);
		descent(t in 0 .. 15)
		{
			let tmp = (t+1)/15;
			let tmp_s = sc * (2-tmp);
			ObjRender_SetAlpha(obj, alpha*tmp^2);
			ObjRender_SetScaleXYZ(obj, tmp_s, tmp_s, tmp_s);
			yield;
		}
		Obj_Delete(obj);
	}
}
