#東方弾幕風[Stage]
#ScriptVersion[3]
#Title["Stage1道中"]
#Text["Stage1道中"]
#System["./../../system/System.dnh"]

#include "./../../lib/lib_Common.dnh"
#include "./../../lib/lib_Stage.dnh"
#include "./../../lib/lib_Zako.dnh"
#include "./Road01_Zako.dnh"


@Initialize
{
	STAGE_ID = 1;		//ステージID記録
	NEXT_STAGE_ID = 2;	//次のステージIDを記録
	StageInit();
	TStage();
}

@Event()
{
	StageEvent();
}

@Loading
{
}

@MainLoop
{
	yield;
}



task TStage
{
	// 保険
	yield;
	
	let dir = GetCurrentScriptDirectory();
	let pathBG	= dir ~ "BackgroundWorld01.dnh";	//背景
	let pathMBoss	= dir ~ "boss/01a_plural.dnh";	//中ボス
	let pathBoss	= dir ~ "boss/01b_plural.dnh";	//ボス
	
	// BGM
	// 道中曲 : 1拍24.25fくらい
	//　中ボスロード
	StartScriptInThread(pathMBoss);
	//  背景配置
	SetStageBackGround(pathBG);

	wait(60);
	PlayMusicWithName( 2, 30, 150 );
	wait(60);
	
// ------------------------ 前半
	CHAPTER_1();
	CHAPTER_2();

// ------------------------ 中ボス
	CHAPTER_MBOSS(pathBoss);
	
// ------------------------ 後半
	CHAPTER_3();
	CHAPTER_4();

// ------------------------ ボス
	KillAllEnemy();
	DeleteShotAll_Effect(CenX, CenY);
	SetItemCollect(120);
	
	CallBoss();

	// 待機とロード
	WaitForBossKilled();
	wait(45);

	StageEND();
}

function CHAPTER_1()
{
	ChapterStart(STAGE_ID, 0, CHAPTER_ROAD);

	F01([CenX-144, CenY-32], [32, -8, 8], [12, -32, 1]);
	WaitRoad(70);
	F01([CenX+160, CenY-32-64], [-32, -8, 8], [12, -32, 1]);
	WaitRoad(210-70);
	F01([CenX+144, CenY+16], [-32, -8, 8], [-12, -32, 1]);
	WaitRoad(70);
	F01([CenX-160, CenY+16-64], [32, -8, 8], [-12, -32, 1]);
	WaitRoad(140-70);
	SetEnemyF02(CenX, CenY-128, 1, 0, 0, 0);	// でか妖精
	WaitRoad(80);
	F01([CenX-48, CenY-64], [-32, -12, 3], [-8, -28, 2]);
	WaitRoad(140);
	F01([CenX+48, CenY-64], [32, -12, 3], [8, -28, 2]);
	WaitRoad(140);
	F01([CenX-64, CenY-32], [-32, -12, 3], [-8, -28, 2]);
	F01([CenX+64, CenY-32], [32, -12, 3], [8, -28, 2]);
	WaitRoad(420-140-140);
	DisplayStage(STAGE_ID, 0);	// タイトル表示
	WaitRoad(300);
}

function CHAPTER_2()
{
	ChapterStart(STAGE_ID, 1, CHAPTER_ROAD);
	
	task CHAPTER2_Fairy()
	{
		WaitRoad(5);
		F03c([CenX-128,CenY-64], 90+45);
		WaitRoad(45);
		F03c2([CenX+64,CenY-128], 90-24);
		WaitRoad(95-45);
		F03c([CenX,CenY-32], 90);
		WaitRoad(45);
		F03c2([CenX-64,CenY-96], 90+24);
		WaitRoad(95-45);
		F03c([CenX+128,CenY], 90-45);
		WaitRoad(95);
		F03([CenX-48,CenY-140], [-24, 12], 4, 15);
		F03([CenX+48,CenY-140], [24, 12], 4, 15);
		F03([CenX-64,CenY-100], [-24, 12], 4, 15);
		F03([CenX+64,CenY-100], [24, 12], 4, 15);
		WaitRoad(60-15);
		F03c([CenX,CenY-96], 90);
		WaitRoad(300-120-80-10);

		WaitRoad(120);
		F05(CenX, CenY-120, 6);
		WaitRoad(120);
		F05(CenX, CenY, 6);
		WaitRoad(120);
		F05(CenX, CenY+120, 6);
		WaitRoad(120);
		F05(CenX, CenY, 6);
		WaitRoad(120);
		F05(CenX, CenY-120, 6);
		WaitRoad(120);
		F05(CenX, CenY, 6);
		WaitRoad(120);
		F05(CenX, CenY+120, 6);
		WaitRoad(120);
		F05(CenX, CenY, 6);
		WaitRoad(120);
		F05(CenX, CenY-120, 6);
		WaitRoad(120);
		F05(CenX, CenY, 6);
	}
	
	CHAPTER2_Fairy();
	WaitRoad(480);
	SetEnemyI01(MinX-32, MinY+48, 2, 20, 0, 0);
	WaitRoad(405);
	SetEnemyI01(MaxX+64, MinY+32, 2, 180-10, 0, 0);
	WaitRoad(90);
	SetEnemyI01(MaxX+64, MinY+32, 2, 180-10, 60, 0);
	WaitRoad(300);
	SetEnemyI01(MinX-64, MinY+64, 2, 20, 0, 0);
	WaitRoad(690-300);
	SetEnemyI01(MinX-64, MinY+64, 2, 20, 0, 0);
	SetEnemyI01(MinX-64, MinY+64, 2, 20, 180, 0);
	WaitRoad(300);
}


task CHAPTER_MBOSS(pathBoss)
{
	// ボスがでたぞー
	CallBoss();
	flgStopSetZako = true;
	// 中ボスが消えてからボスをロード
	StartScriptInThreadWaitBoss(pathBoss);
	
	// ボス撃破待ち
	CheckBossKilled();
	WaitForMiddleBossKilled();
	
	flgStopSetZako = false;

	ChapterStart(STAGE_ID, 2, CHAPTER_ROAD);
}

function CHAPTER_3()
{
//	ChapterStart(STAGE_ID, 2, CHAPTER_ROAD);
	
	// 0.5秒ごとに敵出現判定（固定だとタイミングによっては敵出現間隔が広すぎる）
	
	local
	{
		let muki = 1;
		let wait_count = 0;
		ascent(t in 0 .. 34)
		{
			if (flgStopSetZako) { wait_count++; }
			else { break; }
			WaitRoad(30);
		}
		ascent(t in 0 .. 34-wait_count)
		{
			if (t%12 == 0)
				{ SetEnemyI01(MaxX+32, MinY+32, 2, 180-20, 0, 0); muki = 1; }
			else if (t%12 == 6)
				{ SetEnemyI01(MinX-32, MinY+48, 2, 20, 0, 0); muki = -1; }
			WaitRoad(30);
		}
		WaitRoad(90);

		if (muki > 0)
		{
			SetEnemyI01(MinX-32, MinY+48, 2, 20, 0, 0);
			WaitRoad(60);
			SetEnemyI01(MaxX+32, MinY+32, 2, 180-20, 0, 0); 
			WaitRoad(60);
			SetEnemyI01(MinX-64, MinY+48, 2, 20, 180, 0);
			WaitRoad(210);
		}
		else
		{
			SetEnemyI01(MaxX+32, MinY+48, 2, 180-20, 0, 0);
			WaitRoad(60);
			SetEnemyI01(MinX-32, MinY+32, 2, 20, 0, 0); 
			WaitRoad(60);
			SetEnemyI01(MaxX+64, MinY+48, 2, 180-20, 180, 0);
			WaitRoad(210);
		}
	}

	WaitForMiddleBossKilled();	// 中ボス撃破待ち

	task CHAPTER3_Fairy()
	{
		WaitRoad(180);
		F03d([CenX+136,CenY-32], [-32, 0], 9, 24);
		WaitRoad(24*9);
		F03d([CenX-136,CenY-32], [32, 0], 9, 24);
		WaitRoad(24*9);
		F03d([CenX+136,CenY-32], [-32, 0], 9, 24);
		WaitRoad(24*9);
		F03d([CenX-136,CenY-32], [32, 0], 9, 24);
		WaitRoad(24*9);
		F03d([CenX+136,CenY-32], [-32, 0], 9, 24);
		WaitRoad(24*9);
		F03d([CenX-136,CenY-32], [32, 0], 1, 24);
	}

	CHAPTER3_Fairy();
	F04Set(CenX, CenY-256, 1);
	WaitRoad(375);
	F04Set(CenX-96, CenY-256, -1);
	WaitRoad(375);
	F04Set(CenX+96, CenY-256, 1);
	WaitRoad(375);
	F04Set(CenX, CenY-256, -1);
	WaitRoad(420);
}

function CHAPTER_4()
{
	ChapterStart(STAGE_ID, 3, CHAPTER_ROAD);

	F01([CenX, CenY-32], [-32, 8, 5], [0, 0, 1]);
	WaitRoad(30);
	F01([CenX-18, CenY-32-32], [-32, 8, 5], [0, 0, 1]);
	WaitRoad(70-30);
	F01([CenX+32-18, CenY-64], [32, 8, 5], [0, 0, 1]);
	WaitRoad(30);
	F01([CenX+32, CenY-64-32], [32, 8, 5], [0, 0, 1]);
	WaitRoad(180-70);
	F01([CenX+16, CenY], [32, -8, 4], [0, 0, 1]);
	F01([CenX-16, CenY], [-32, -8, 4], [0, 0, 1]);
	WaitRoad(30);
	F01([CenX+16, CenY-32], [32, -8, 3], [0, 0, 1]);
	F01([CenX-16, CenY-32], [-32, -8, 3], [0, 0, 1]);
	WaitRoad(30);
	F01([CenX+16, CenY-64], [32, -8, 2], [0, 0, 1]);
	F01([CenX-16, CenY-64], [-32, -8, 2], [0, 0, 1]);
	WaitRoad(110-30);
	SetEnemyF02(CenX, CenY-128, 1, 0, 0, 0);	// でか妖精
	WaitRoad(160);
	F01([CenX-32, CenY-32], [-32, 8, 5], [0, 0, 1]);
	WaitRoad(30);
	F01([CenX-32-24, CenY-32-24], [-32, 8, 4], [0, 0, 1]);
	WaitRoad(30);
	F01([CenX-32-48, CenY-32-48], [-32, 8, 3], [0, 0, 1]);
	WaitRoad(90);
	F01([CenX+32, CenY-32], [32, 8, 5], [0, 0, 1]);
	WaitRoad(30);
	F01([CenX+32+24, CenY-32-24], [32, 8, 4], [0, 0, 1]);
	WaitRoad(30);
	F01([CenX+32+48, CenY-32-48], [32, 8, 3], [0, 0, 1]);
	WaitRoad(420);
}



// -------------------------- 敵配置用 -------------------------- //
task F01(pos, x_span, y_span)
{
	let ct = y_span[2];
	ascent(i in 0 .. ct)
	{
		let ex = pos[0] + y_span[0] * i;
		let ey = pos[1] + y_span[1] * i;
		_F01([ex, ey]);
		wait(20);
	}

	task _F01(bpos)
	{
		let ct = x_span[2];
		ascent(i in 0 .. ct)
		{
			let ex = bpos[0] + x_span[0] * i;
			let ey = bpos[1] + x_span[1] * i;
			SetEnemyF01(ex, ey, 3, 0, 0, 0);
			wait(5);
		}
	}
}

task F03(pos, mspan, count, wt)
{
	ascent(i in 0 .. count)
	{
		let ex = pos[0] + mspan[0]*i;
		let ey = pos[1] + mspan[1]*i;
		let es = 2;
		let ea = atan2(ey-(MinY-32), ex-CenX);
		SetEnemyF03(ex, ey, es, ea, 2, 0);
		wait(wt);
	}
}
task F03b(pos, mspan, count, wt)
{
	ascent(i in 0 .. count)
	{
		let ex = pos[0] + mspan[0]*i;
		let ey = pos[1] + mspan[1]*i;
		let es = 2;
		let ea = atan2(ey-(MinY-32), ex-CenX);
		if (i == 0) { SetEnemyF04(ex, ey, es, ea, 0, 0); }
		else { SetEnemyF03(ex, ey, es, ea, 0, 0); }
		wait(wt);
	}
}
task F03c(pos, angle)
{
	ascent(i in 0 .. 5)
	{
		let vx = ([0,1,2,1,0][i])*12;
		let vy = -(i-2)*18;
		let es = 2;
		let ea = angle - vx/8;
		SetEnemyF03(pos[0]+vx, pos[1]+vy, es, ea, 1, 0);
		if (i > 0 && i < 4)
		{
			vx = -vx;
			let ea = angle - vx/8;
			SetEnemyF03(pos[0]+vx, pos[1]+vy, es, ea, 1, 0);
		}
		wait(5);
	}
}
task F03c2(pos, angle)
{
	ascent(i in 0 .. 3)
	{
		let vx = ([0,1,0][i])*12;
		let vy = -(i-1)*18;
		let es = 2;
		let ea = angle - vx/8;
		SetEnemyF03(pos[0]+vx, pos[1]+vy, es, ea, 1, 0);
		if (i > 0 && i < 4)
		{
			vx = -vx;
			let ea = angle - vx/8;
			SetEnemyF03(pos[0]+vx, pos[1]+vy, es, ea, 1, 0);
		}
		wait(5);
	}
}
task F03d(pos, mspan, count, wt)
{
	ascent(i in 0 .. count)
	{
		let ex = pos[0] + mspan[0]*i;
		let ey = pos[1] + mspan[1]*i+sin(i/count*180)*48;
		let es = 2;
		let ea = atan2(ey-(MinY-32), ex-CenX);
		SetEnemyF03(ex, ey, es, ea, 0, 0);
		wait(wt);
	}
}
task F03Timer(timer)
{
	let wt = 24.33/2;

	let t = 0;
	let ewt = 0;
	let ect = 0;
	while(t < timer)
	{
		if (ewt >= 0)
		{
			let tmp = [-4,-3,-2,-1,0,1,2,3,4,3,2,1,0,-1,-2,-3][ect%16];
			let ex = CenX+72 + tmp*16;
			let ey = 80 + tmp*12;
			let es = 2;
			let ea = 120 - tmp/4*45;
			SetEnemyF03(ex, ey, es, ea, 0, 0);
			ewt -= wt;
			ect++;
		}
		ewt++;
		t++;
		WaitRoad(1);
	}
}
task F04Set(x, y, muki)
{
	let ba = atan2(CenY-y, CenX-x) - 30*muki;
	SetEnemyF04(x, y+150, 1, 90, muki, 0);
	wait(30);
	/*
	let iway = [3, 4, 5, 6][Difficult];
	ascent(i in 0 .. iway)
	{
		SetEnemyI02(x, y, 1, 90, ba+i*360/iway, 0, muki);
	}
	*/
}

task F05(x, y, count)
{
	ascent(i in 0 .. count)
	{
		let tmp = randStage(-1, 1)*i/count;
		let ex = x + tmp*64;
		let ey = y + tmp*64;
		SetEnemyF05(ex, ey, 4, 0, i, 0);
		wait(12);
	}
}









//　ゲーム中用
task Package_PlayMusic( int_play_num, int_fade_out, int_delay )
{
	let musicDir = GetCurrentScriptDirectory() ~ "../../music/";
	let ID		= ObjSound_Create();
	let play	= false;
	let vol1	= 0;
	let volA	= 0;
	let path	= musicDir ~ "1road.ogg";
	let sample	= [0,0];
	
	ObjSound_Load(ID, path );
	ObjSound_SetSoundDivision(ID, SOUND_BGM );
	ObjSound_SetLoopEnable(ID, true );
	ObjSound_SetRestartEnable(ID, true );
	ObjSound_SetLoopSampleCount(ID, sample[0], sample[1] );
	
	//プレイ中のBGMに登録
	let objMusic = ID;
	
	loop( int_delay ){ yield; }
	
	ObjSound_Play(ID);
	
	let flgStop = GetAreaCommonData(CAREA_TITLE, "Music_Stop", false);
	while(!Obj_IsDeleted(ID) && !Obj_GetValueD(ID, "MusicEnd", false) ){
		
		// 毎フレームチェックする
		ObjSound_SetVolumeRate(ID, GetMusicVolume() );
		let stop	= GetAreaCommonData(CAREA_TITLE, "Music_Stop", false);
		if( flgStop != stop )
		{
			if (stop) { ObjSound_Stop(ID); }
			else { ObjSound_Play(ID); }
			flgStop = stop;
		}
		yield;
	}
	if (int_fade_out > 0 && !flgStop)
	{
		while( volA < 90 ){
			let volume	= GetMusicVolume();
			
			vol1 = 1 * sin( volA );
			
			ObjSound_SetVolumeRate(ID, volume - vol1*volume );
			
			volA += 90/int_fade_out;
			
			yield;
		}
	}
	Obj_Delete(ID);
}

