let DEL_FLG = [false, false, false, false, false, false, false, false];

let ADD_BG_IMAGE = [
	GetCurrentScriptDirectory() ~ "./../../img/world/stg6img/world06k.png",
	GetCurrentScriptDirectory() ~ "./../../img/world/stg6img/world06l.png",
	GetCurrentScriptDirectory() ~ "./../../img/world/stg6img/world06m.png",
	GetCurrentScriptDirectory() ~ "./../../img/world/stg6img/world06n.png",
	GetCurrentScriptDirectory() ~ "./../../img/world/stg6img/world06o.png",
	GetCurrentScriptDirectory() ~ "./../../img/world/stg6img/world06p.png",
	GetCurrentScriptDirectory() ~ "./../../img/world/stg6img/world06q.png",
	GetCurrentScriptDirectory() ~ "./../../img/world/stg5img/world05a.png",
	GetCurrentScriptDirectory() ~ "./../../img/world/stg6img/world06r.png",
	GetCurrentScriptDirectory() ~ "./../../img/world/stg6img/world06s.png",
];

// ----------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------
// 各背景

task SetWorld01a()
{
	let IDX = 0;
	let world01_path = LoadingImageFile_StgWorld(1);
	
	let sLayer	= [ world_layer, world_layer+1 ];
	let frame	= 0;
	let baseZ	= 0;
	let ZSpeed	= 1;
	
	let ID = [
		CreateTexture01( world01_path[0] ),
		ObjMesh_Create(),
		ObjMesh_Create()
	];
	// ベース用
	ObjRender_SetPosition( ID[0], -512, 0, -1500 );
	ObjRender_SetScaleXYZ( ID[0], 8, 8, 0 );
	ObjSprite3D_SetBillboard( ID[0], true );
	// 地形
	ascent(i in 0 .. 2)
	{
		ObjMesh_Load(ID[i+1], world01_path[1]);
		Obj_SetRenderPriorityI(ID[i+1], world_layer+1);
	}
	
	SetCameraFocusX(-100);
	SetCameraFocusY(150);
	SetCameraFocusZ(0);
	SetCameraRadius(500);
	SetCameraAzimuthAngle(90);
	SetCameraElevationAngle(20);
	SetCameraYaw(-35);
	
	while(ZSpeed >= 0)
	{
		if (frame <= 360)
		{
			let tmp = 1-(frame+1)/360;
			let tmp_c = min(1, (frame+1)/180);
			SetFogParam(200-1200*tmp, 1200-1200*tmp, 180*tmp_c+255*(1-tmp_c), 120*tmp_c+255*(1-tmp_c), 110*tmp_c+255*(1-tmp_c));
		}

		ascent(i in 0 .. 2)
		{
			let bz = (baseZ+i*1150)%2300 - 1700;
			ObjRender_SetPosition(ID[i+1], 0, 0, bz);
		}
		baseZ += ZSpeed;
		frame++;
		
		if (!IsEndBG(IDX)) { ZSpeed -= 1/120; }
		
		yield;
	}
	
	// フェードアウト
	TTranslateBackground(sLayer);
	
	yield;
	
	SetWorld02a();
	
	ascent(i in 0 .. length(ID)) { Obj_Delete(ID[i]); }
	DEL_FLG[IDX] = true;
}
task SetWorld02a()
{
	let IDX = 1;
	let world02_path = LoadingImageFile_StgWorld(2);
	let baseZ	= 0;
	let ZSpeed	= 1.5;

	let obj		= [
		CreateTexture01( world02_path[0] ),
		CreateTexture01( world02_path[1] ),
		CreateTexture01( world02_path[2] ),
		CreateTexture01( world02_path[3] ),
	];
	let frame	= 0;
	let move1	= 0;
	let moveA	= 0;
	let ctr		= 0;
	let sLayer	= [ world_layer, world_layer+1 ];
	
	//　霧用のダミー
	ObjRender_SetPosition( obj[0], -1024-512, 0, 0 );
	ObjSprite3D_SetBillboard( obj[0], true );
	
	//　地面
	ObjRender_SetPosition( obj[1], -512, -128, 0 );
	ObjRender_SetAngleXYZ( obj[1], 90, 0, 90 );
	
	//　地面
	ObjRender_SetPosition( obj[2], -512, -128, 0 );
	ObjRender_SetAngleXYZ( obj[2], 90, 0, 90 );
	
	//　落ち葉
	ObjRender_SetPosition( obj[3], -512, -128 + 4, 0 );
	ObjRender_SetAngleXYZ( obj[3], 90, 0, 90 );
	
	SetCameraYaw(0);
	
	while(ZSpeed >= 0)
	{
		move1 = 1 * sin( moveA );
		
		SetFogParam( 0, 768, 64, 64, 96 );
		SetCameraFocusXYZ( 0, 0, 0 );
		SetCameraRadius( 64 );
		SetCameraAzimuthAngle( 0 + 8 * cos(frame/8) );
		SetCameraElevationAngle( 8 + 4 * sin(frame/4) );
		
		ObjSprite3D_SetSourceDestRect( obj[1], 0, 0 + baseZ, 1024, 1024 + baseZ );
		ObjSprite3D_SetSourceDestRect( obj[2], 0, 0 + baseZ, 256, 1024 + baseZ );
		ObjSprite3D_SetSourceDestRect( obj[3], 0, 0 + baseZ, 1024, 1024 + baseZ );
		
		if( frame%120 == 0 ){
			//　RIP
			alternative( round(randEffect(0,1)) )
			case( 0 ){ World02Object01( [-1024,-128,-196], [ZSpeed,0,0], 720, 1 ); }
			case( 1 ){ World02Object01( [-1024,-128,-196-128], [ZSpeed,0,0], 720, 1 ); }
		}
		
		if( frame%120 == 0 ){
			//　銀杏
			if( ctr%2 == 0 ){
				World02Object02( [-1024,192,128], [ZSpeed,-0.1,-0.1], 720, [-1,1,1] );
			}
			else{
				World02Object02( [-1024,192,-384], [ZSpeed,-0.1,0], 720, [1,1,1] );
			}
			ctr++;
		}
		
		if( frame%4 == 0 ){
			//　動いてるとき
			CreateFallLeaf( [randEffect(-256,-512),randEffect(-256,256),randEffect(-256,256)], [randEffect(ZSpeed,ZSpeed*2),randEffect(-0.5,-1),randEffect(-2,-2)], randEffect(0.2,0.4), 64, randEffect(0,120), [255,randEffect(192,255),128], true );
		}
		
		frame++;
		if( move1 < 1 ){ moveA += 1; }
		
		baseZ += ZSpeed;
		if (!IsEndBG(IDX)) { ZSpeed -= 1.5/120; }
		
		yield;
	}
	
	// フェードアウト
	TTranslateBackground(sLayer);
	
	yield;
	SetWorld03a();

	ascent( let i in 0..length(obj) ){
		Obj_Delete( obj[i] );
	}
	DEL_FLG[IDX] = true;


	//　RIP
	task World02Object01( m_pos, add_pos, m_kill, scale ){
		let frame = 0;
		
		//　モデル初期化
		let obj		= ObjMesh_Create();
		ObjMesh_Load( obj, world02_path[4] );
		Obj_SetRenderPriorityI( obj, world_layer );
		ObjRender_SetBlendType( obj, BLEND_ALPHA );
		ObjRender_SetAngleY( obj, trunc( randEffect(0,4) ) * 90 );
		ObjRender_SetScaleXYZ( obj, scale, scale, scale );
		
		while( true && frame < m_kill && !DEL_FLG[IDX] ){
			ObjRender_SetPosition( obj, m_pos[0], m_pos[1], m_pos[2] );
			
			frame++;
			m_pos[0] = m_pos[0] + ZSpeed;
			m_pos[1] = m_pos[1] + add_pos[1];
			m_pos[2] = m_pos[2] + add_pos[2];
			
			yield;
		}
		Obj_Delete( obj );
	}
	//　銀杏
	task World02Object02( m_pos, add_pos, m_kill, scale ){
		let frame = 0;
		
		//　モデル初期化
		let obj		= ObjMesh_Create();
		ObjMesh_Load( obj, world02_path[5] );
		Obj_SetRenderPriorityI( obj, world_layer );
		ObjRender_SetBlendType( obj, BLEND_ALPHA );
		ObjRender_SetAngleY( obj, 90 );
		ObjRender_SetScaleXYZ( obj, scale[0], scale[1], scale[2] );
		
		while( frame < m_kill && !DEL_FLG[IDX] ){
			ObjRender_SetPosition( obj, m_pos[0], m_pos[1], m_pos[2] );
			
			frame++;
			m_pos[0] = m_pos[0] + ZSpeed;
			m_pos[1] = m_pos[1] + add_pos[1];
			m_pos[2] = m_pos[2] + add_pos[2];
			
			yield;
		}
		Obj_Delete( obj );
	}
}




task SetWorld03a()
{
	let IDX = 2;
	let world03_path = LoadingImageFile_StgWorld(3);
	let baseZ	= 0;
	let ZSpeed	= 1.25;
	let sLayer	= [ world_layer, world_layer+1 ];

	let obj		= [
		CreateTexture01( world03_path[0] ),
		CreateTexture01( world03_path[1] ),
		CreateTexture01( world03_path[2] ),
		CreateTexture01( world03_path[3] ),
	];
	let frame	= 0;
	let move1	= 0;
	let moveA	= 0;
	let ctr		= 0;
	
	//　霧用のダミー
	ObjRender_SetPosition( obj[0], -1024-512, 0, 0 );
	ObjSprite3D_SetBillboard( obj[0], true );
	
	//　水底
	ObjRender_SetPosition( obj[1], -512, -128 - 64, 0 );
	ObjRender_SetAngleXYZ( obj[1], 90, 0, 90 );
	
	//　水面
	ObjRender_SetPosition( obj[2], -512, -128, 0 );
	ObjRender_SetAngleXYZ( obj[2], 90, 0, 90 );
	ObjRender_SetAlpha( obj[2], 192 );
	
	//　浮草
	ObjRender_SetPosition( obj[3], -512, -128, 0 );
	ObjRender_SetAngleXYZ( obj[3], 90, 0, 90 );
	
	//　今は無限です
	while(ZSpeed >= 0)
	{
		move1 = 1 * sin( moveA );
		
		SetFogParam( 0, 768, 64, 96, 128 );
		SetCameraFocusXYZ( 0, 0, 0 );
		SetCameraRadius( 64 );
		SetCameraAzimuthAngle( 0 + 0 * cos(frame/8) );
		SetCameraElevationAngle( 24 + 0 * sin(frame/4) );
		
		let ctr = 4 * sin(frame*2);
		ObjSprite3D_SetSourceDestRect( obj[1], 0, 0 + baseZ, 1024, 1024 + baseZ );
		ObjSprite3D_SetSourceDestRect( obj[2], 0, 0 + baseZ, 1024, 1024 + baseZ );
		ObjSprite3D_SetSourceDestRect( obj[3], 0 + ctr, 0 + baseZ, 1024 + ctr, 1024 + baseZ );
		
		if( frame%16 == 0 ){
			World03Object01( [-512,0,randEffect(-192,192)], [ZSpeed,0,0], [randEffect(0.1,0.8),1,0], [0,0,180+16], 120, [255,255,255], randEffect(128,255), world03_path[4] );
		}
		
		frame++;
		if( move1 < 1 ){ moveA += 1; }
		
		baseZ += ZSpeed;
		if (!IsEndBG(IDX)) { ZSpeed -= 1.25/120; }

		yield;
	}

	// フェードアウト
	TTranslateBackground(sLayer);
	
	yield;
	
	SetWorld06a();

	ascent( let i in 0..length(obj) ){
		Obj_Delete( obj[i] );
	}
	DEL_FLG[IDX] = true;


	//　はしご
	task World03Object01( pos, movep, sca, angle, long, rgb_array, alpha, path ){
		let obj			= ObjPrim_Create(OBJ_SPRITE_3D);
		let objScene 	= GetEnemyBossSceneObjectID();
		let OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
		let move		= [0,0,0];
		let frame		= 0;
		let move1		= 0;
		let moveA		= 0;
		
		ObjRender_SetPosition( obj, pos[0], pos[1], pos[2] );
		ObjPrim_SetTexture( obj, path );
		ObjRender_SetBlendType( obj, BLEND_ALPHA );
		Obj_SetRenderPriorityI( obj, world_layer );
		ObjRender_SetScaleXYZ( obj, sca[0], sca[1], sca[2] );
		ObjRender_SetColor( obj, rgb_array[0], rgb_array[1], rgb_array[2] );
		ObjSprite3D_SetSourceDestRect( obj, 0, 0, 256, 256 );
		ObjRender_SetAngleXYZ( obj, angle[0], angle[1], angle[2] );
		ObjSprite3D_SetBillboard( obj, true );
		
		while( move1 < 1 && !DEL_FLG[2] ){
			objScene 	= GetEnemyBossSceneObjectID();
			OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
			
			move1 = 1 * sin( moveA );
			
			ObjRender_SetPosition( obj, pos[0]+move[0], pos[1]+move[1], pos[2]+move[2] );
			ObjRender_SetAlpha( obj, move1*alpha );
			
			if( !OnSpell ){
				frame++;
				moveA += 1;
				move[0] = move[0] + movep[0];
				move[1] = move[1] + movep[1];
				move[2] = move[2] + movep[2];
			}
			else{ break; }
			
			yield;
		}
		move1 = 0;
		moveA = 0;
		while( frame < long && !DEL_FLG[2] ){
			objScene 	= GetEnemyBossSceneObjectID();
			OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
			
			ObjRender_SetPosition( obj, pos[0]+move[0], pos[1]+move[1], pos[2]+move[2] );
			
			if( !OnSpell ){
				frame++;
				move[0] = move[0] + movep[0];
				move[1] = move[1] + movep[1];
				move[2] = move[2] + movep[2];
			}
			else{ break; }
			
			yield;
		}
		while( move1 < 1 && !DEL_FLG[2] ){
			objScene 	= GetEnemyBossSceneObjectID();
			OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
			
			move1 = 1 * sin( moveA );
			
			ObjRender_SetPosition( obj, pos[0]+move[0], pos[1]+move[1], pos[2]+move[2] );
			ObjRender_SetAlpha( obj, alpha - move1*alpha );
			
			if( !OnSpell ){
				frame++;
				moveA += 2;
				move[0] = move[0] + movep[0];
				move[1] = move[1] + movep[1];
				move[2] = move[2] + movep[2];
			}
			else{ break; }
			
			yield;
		}
		Obj_Delete( obj );
	}
}


task SetWorld04a()
{
	let IDX = 4;
	let world04_path = LoadingImageFile_StgWorld(4);
	let baseZ	= 0;
	let ZSpeed	= 1.25;

	let obj		= [
		CreateTexture01( world04_path[0] ),
		CreateTexture01( world04_path[1] ),
		CreateTexture01( world04_path[1] ),
	];
	let frame	= 0;
	let move1	= 0;
	let moveA	= 0;
	let ctr		= 0;
	let sLayer	= [ world_layer, world_layer+1 ];
	
	//　霧用のダミー
	ObjRender_SetPosition( obj[0], -1024-512, 0, 0 );
	ObjSprite3D_SetBillboard( obj[0], true );
	
	//　草（下
	ObjRender_SetPosition( obj[1], -512, -128 - 8, 0 );
	ObjRender_SetAngleXYZ( obj[1], 90, 0, 90 );
	ObjRender_SetColor( obj[1], 192, 192, 192 );
	
	//　草（上
	ObjRender_SetPosition( obj[2], -512, -128, 0 );
	ObjRender_SetAngleXYZ( obj[2], 90, 180, 90 );
	ObjRender_SetAlpha( obj[2], 128 );
	Obj_SetRenderPriorityI( obj[2], world_layer+1 );
	
	//　今は無限です
	while(ZSpeed >= 0)
	{
		move1 = 1 * sin( moveA );
		
		SetFogParam( 0, 1024, 128, 64, 64 );
		SetCameraFocusXYZ( 0, 0, 0 );
		SetCameraRadius( 64 );
		SetCameraAzimuthAngle( 0 + 0 * cos(frame/8) );
		SetCameraElevationAngle( 8 + 0 * sin(frame/4) );
		
		ObjSprite3D_SetSourceDestRect( obj[1], 0, 0 + baseZ, 1024, 1024 + baseZ );
		ObjSprite3D_SetSourceDestRect( obj[2], 0, 0 - baseZ, 1024, 1024 - baseZ );
		
		if( frame%16 == 0 ){
			World04Object02( [-randEffect(0,512),0,randEffect(-192,192)], [ZSpeed,0,0], [randEffect(0.1,0.4),1,0], [0,0,180+8], 120, [255,192,128], randEffect(32,64) );
		}
		
		if( frame%90 == 0 ){
			World04Object01( [-1024,-128-randEffect(2,6),0+randEffect(-256,256)], [ZSpeed,0,0], 780, 1 );
			//　木
			if( ctr%2 == 0 ){
				World04Object03( [-1024,192-randEffect(0,72),128-randEffect(0,64)], [ZSpeed,0.02,-0.1], 780, [-1,1,1] );
			}
			else{
				World04Object03( [-1024,192-randEffect(0,72),-192-randEffect(0,64)], [ZSpeed,0.02,0], 780, [1,1,1] );
			}
			ctr++;
		}
		
		if( frame%4 == 0 ){
			//　動いてるとき
			CreateFallLeaf( [randEffect(-256,-768),randEffect(-256,256),randEffect(-256,256)], [randEffect(ZSpeed,ZSpeed*2),randEffect(-0.5,-1),randEffect(-0.5,-1)], randEffect(0.2,0.4), 64, randEffect(0,120), [255,randEffect(192,255),64], true );
		}
		
		frame++;
		if( move1 < 1 ){ moveA += 1; }
		
		baseZ += ZSpeed;
		if (!IsEndBG(IDX)) { ZSpeed -= 1.25/240; }

		yield;
	}
	// フェードアウト（いらない）
//	TTranslateBackground(sLayer);
	
	yield;
	
	SetWorld07a();

	ascent( let i in 0..length(obj) ){
		Obj_Delete( obj[i] );
	}
	DEL_FLG[IDX] = true;



	//　落ち葉
	task World04Object01( m_pos, add_pos, m_kill, scale ){
		let frame = 0;
		
		//　モデル初期化
		let obj		= ObjMesh_Create();
		ObjMesh_Load( obj, world04_path[2] );
		Obj_SetRenderPriorityI( obj, world_layer );
		ObjRender_SetBlendType( obj, BLEND_ALPHA );
		ObjRender_SetAngleY( obj, randEffect(0,360) );
		ObjRender_SetScaleXYZ( obj, scale, scale, scale );
		
		while( true && frame < m_kill && !DEL_FLG[IDX] ){
			ObjRender_SetPosition( obj, m_pos[0], m_pos[1], m_pos[2] );
			
			frame++;
			m_pos[0] = m_pos[0] + ZSpeed;
			m_pos[1] = m_pos[1] + add_pos[1];
			m_pos[2] = m_pos[2] + add_pos[2];
			
			yield;
		}
		Obj_Delete( obj );
	}


	//　はしご
	task World04Object02( pos, movep, sca, angle, long, rgb_array, alpha ){
		let obj			= ObjPrim_Create(OBJ_SPRITE_3D);
		let objScene 	= GetEnemyBossSceneObjectID();
		let OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
		let move		= [0,0,0];
		let frame		= 0;
		let move1		= 0;
		let moveA		= 0;
		
		ObjRender_SetPosition( obj, pos[0], pos[1], pos[2] );
		ObjPrim_SetTexture( obj, world04_path[4] );
		ObjRender_SetBlendType( obj, BLEND_ALPHA );
		Obj_SetRenderPriorityI( obj, world_layer+1 );
		ObjRender_SetScaleXYZ( obj, sca[0], sca[1], sca[2] );
		ObjRender_SetColor( obj, rgb_array[0], rgb_array[1], rgb_array[2] );
		ObjSprite3D_SetSourceDestRect( obj, 0, 0, 256, 256 );
		ObjRender_SetAngleXYZ( obj, angle[0], angle[1], angle[2] );
		ObjSprite3D_SetBillboard( obj, true );
		
		while( move1 < 1 && !DEL_FLG[IDX] ){
			objScene 	= GetEnemyBossSceneObjectID();
			OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
			
			move1 = 1 * sin( moveA );
			
			ObjRender_SetPosition( obj, pos[0]+move[0], pos[1]+move[1], pos[2]+move[2] );
			ObjRender_SetAlpha( obj, move1*alpha );
			
			if( !OnSpell ){
				frame++;
				moveA += 1;
				move[0] = move[0] + ZSpeed;
				move[1] = move[1] + movep[1];
				move[2] = move[2] + movep[2];
			}
			else{ break; }
			
			yield;
		}
		move1 = 0;
		moveA = 0;
		while( frame < long && !DEL_FLG[IDX] ){
			objScene 	= GetEnemyBossSceneObjectID();
			OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
			
			ObjRender_SetPosition( obj, pos[0]+move[0], pos[1]+move[1], pos[2]+move[2] );
			
			if( !OnSpell ){
				frame++;
				move[0] = move[0] + ZSpeed;
				move[1] = move[1] + movep[1];
				move[2] = move[2] + movep[2];
			}
			else{ break; }
			
			yield;
		}
		while( move1 < 1 && !DEL_FLG[IDX] ){
			objScene 	= GetEnemyBossSceneObjectID();
			OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
			
			move1 = 1 * sin( moveA );
			
			ObjRender_SetPosition( obj, pos[0]+move[0], pos[1]+move[1], pos[2]+move[2] );
			ObjRender_SetAlpha( obj, alpha - move1*alpha );
			
			if( !OnSpell ){
				frame++;
				moveA += 2;
				move[0] = move[0] + ZSpeed;
				move[1] = move[1] + movep[1];
				move[2] = move[2] + movep[2];
			}
			else{ break; }
			
			yield;
		}
		Obj_Delete( obj );
	}


	//　木
	task World04Object03( m_pos, add_pos, m_kill, scale ){
		let frame = 0;
		
		//　モデル初期化
		let obj		= ObjMesh_Create();
		ObjMesh_Load( obj, world04_path[3] );
		Obj_SetRenderPriorityI( obj, world_layer );
		ObjRender_SetBlendType( obj, BLEND_ALPHA );
		ObjRender_SetAngleY( obj, 90 );
		ObjRender_SetScaleXYZ( obj, scale[0], scale[1], scale[2] );
		
		while( true && frame < m_kill && !DEL_FLG[IDX] ){
			ObjRender_SetPosition( obj, m_pos[0], m_pos[1], m_pos[2] );
			
			frame++;
			m_pos[0] = m_pos[0] + ZSpeed;
			m_pos[1] = m_pos[1] + add_pos[1];
			m_pos[2] = m_pos[2] + add_pos[2];
			
			yield;
		}
		Obj_Delete( obj );
	}
}

task SetWorld06a()
{
	let IDX = 3;
//	let world03_path = LoadingImageFile_StgWorld(3);
	let baseZ	= 0;
	let ZSpeed	= 1;
	let sLayer	= [ world_layer, world_layer+1 ];

	let obj		= [
		CreateTexture01( ADD_BG_IMAGE[0] ),
		CreateTexture01( ADD_BG_IMAGE[7] ),
		CreateTexture01( ADD_BG_IMAGE[8] ),
	];
	let frame = 0;
	let move1 = 0;
	let moveA = 0;
	let move2 = 0;
	let moveB = 0;
	
	//　霧用のダミー
	ObjRender_SetPosition( obj[0], -1500, 0, 0 );
	ObjRender_SetScaleXYZ( obj[0], 2, 2, 0 );
	ObjRender_SetColor( obj[0], 0, 0, 0 );
	ObjSprite3D_SetBillboard( obj[0], true );
	
	//　砂漠
	ObjRender_SetColor( obj[1], 128, 128, 192 );
	ObjRender_SetAngleXYZ( obj[1], 90, 0, 270 );
	
	//　森
	ObjRender_SetColor( obj[2], 255, 255, 255 );
	ObjRender_SetAngleXYZ( obj[2], 90, 0, 270 );
	ObjRender_SetAlpha( obj[2], 0 );
	
	//　なんかあれば条件によって変えてください
	while(ZSpeed >= 0)
	{
		move1 = 1 * sin( moveA );
		move2 = 1 * sin( moveB );
		
		SetFogParam( 0, 1024, move1*224, move1*224, move1*255 );
		SetCameraFocusXYZ( 0, 0, 384/2 );
		SetCameraRadius( 256 );
		SetCameraAzimuthAngle( 0 );
		SetCameraElevationAngle( 16 );
		
		if( frame%4 == 0 ){
			LightParticle();
			CreateCloud( [randEffect(-512,-1024),-256,randEffect(-384,384)], [randEffect(2,4),randEffect(-1,-2),0], 1, 60, [128,255,255], move1*96 );
		}
		
		if( frame%1 == 0 ){
			CreateFlashLight( [randEffect(0,-1024),randEffect(-256,256),randEffect(-256,256)], [baseZ,randEffect(0.1,1),0], move2*0.1, randEffect(64,128), 60, [255,255,255] );
		}
		
		ObjRender_SetPosition( obj[1], -256, 128*cos(180), 128*sin(180) );
		ObjSprite3D_SetSourceDestRect( obj[1], 0, 0 - baseZ, 1024, 1024 - baseZ );
		
		ObjRender_SetPosition( obj[2], -256, 128*cos(180), 128*sin(180) );
		ObjSprite3D_SetSourceDestRect( obj[2], 0, 0 - baseZ, 1024, 1024 - baseZ );
		ObjRender_SetAlpha( obj[2], move2*255 );
		
		frame++;
		if( move1 < 1 ){ moveA += 1; }
		if( move2 < 1 ){ moveB += 0.1; }
		
		baseZ += ZSpeed;
		if (!IsEndBG(IDX)) { ZSpeed -= 1/120; }

		yield;
	}

	// フェードアウト
	TTranslateBackground(sLayer);

	yield;
	
	SetWorld04a();

	ascent( i in 0..length(obj) ){
		Obj_Delete( obj[i] );
	}
	DEL_FLG[IDX] = true;
	
	//　日の出パーティクル
	task LightParticle(){
		let _obj = CreateTexture01( ADD_BG_IMAGE[9] );
		let move1 = 0;
		let moveA = 0;
		let scale = randEffect(2,4);
		let angle = randEffect(-0.6,0.6);
		let alpha = randEffect(0,32);
		let rgb = [ 255, 255, 255 ];
		//　日の出
		ObjRender_SetPosition( _obj, -1024, 256, 0 );
		ObjRender_SetColor( _obj, rgb[0], rgb[1], rgb[2] );
		ObjRender_SetAngleXYZ( _obj, 0, 0, randEffect(0,360) );
		ObjSprite3D_SetBillboard( _obj, true );
		ObjSprite3D_SetSourceDestRect( _obj, 0, 0, 512, 512 );
		ObjRender_SetFogEnable( _obj, false );
		while( move1 < 1 && !DEL_FLG[IDX] ){
			move1 = 1 * sin( moveA );
			ObjRender_SetScaleXYZ( _obj, 1 + move1*scale, 1 + move1*scale, 0 );
			ObjRender_SetAngleXYZ( _obj, 0, 0, ObjRender_GetAngleZ(_obj) + angle );
			ObjRender_SetAlpha( _obj, move1*alpha );
			moveA += 2;
			yield;
		}
		while( move1 > 0 && !DEL_FLG[IDX] ){
			move1 = 1 * sin( moveA );
			ObjRender_SetScaleXYZ( _obj, 1 + move1*scale, 1 + move1*scale, 0 );
			ObjRender_SetAngleXYZ( _obj, 0, 0, ObjRender_GetAngleZ(_obj) + angle );
			ObjRender_SetAlpha( _obj, move1*alpha );
			moveA += 2;
			yield;
		}
		Obj_Delete( _obj );
	}

	//　流れる雲
	task CreateCloud( pos, movep, sca, long, rgb_array, alpha ){
		let ID			= ObjPrim_Create(OBJ_SPRITE_3D);
		let objScene 	= GetEnemyBossSceneObjectID();
		let OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
		let move		= [0,0,0];
		let frame		= 0;
		let move1		= 0;
		let moveA		= 0;
		
		ObjRender_SetPosition(ID, pos[0], pos[1], pos[2] );
		ObjPrim_SetTexture(ID, effect_path[1] );
		ObjRender_SetBlendType(ID, BLEND_ALPHA );
		Obj_SetRenderPriorityI(ID, world_layer );
		ObjRender_SetScaleXYZ(ID, sca, sca, 0 );
		ObjRender_SetAngleZ(ID, randEffect(0,360) );
		ObjRender_SetColor(ID, rgb_array[0], rgb_array[1], rgb_array[2] );
		ObjSprite3D_SetSourceDestRect(ID, 0, 0, 256, 256 );
		ObjSprite3D_SetBillboard(ID, true );
		
		while( move1 < 1 && !DEL_FLG[IDX] ){
			objScene 	= GetEnemyBossSceneObjectID();
			OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
			
			move1 = 1 * sin( moveA );
			
			ObjRender_SetPosition(ID, pos[0]+move[0], pos[1]+move[1], pos[2]+move[2] );
			ObjRender_SetAlpha(ID, move1*alpha );
			
			if( !OnSpell ){
				frame++;
				moveA += 1;
				move[0] = move[0] + movep[0];
				move[1] = move[1] + movep[1];
				move[2] = move[2] + movep[2];
			}
			else{ break; }
			
			yield;
		}
		move1 = 0;
		moveA = 0;
		while( frame < long && !DEL_FLG[IDX] ){
			objScene 	= GetEnemyBossSceneObjectID();
			OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
			
			ObjRender_SetPosition(ID, pos[0]+move[0], pos[1]+move[1], pos[2]+move[2] );
			
			if( !OnSpell ){
				frame++;
				move[0] = move[0] + movep[0];
				move[1] = move[1] + movep[1];
				move[2] = move[2] + movep[2];
			}
			else{ break; }
			
			yield;
		}
		while( move1 < 1 && !DEL_FLG[IDX] ){
			objScene 	= GetEnemyBossSceneObjectID();
			OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
			
			move1 = 1 * sin( moveA );
			
			ObjRender_SetPosition(ID, pos[0]+move[0], pos[1]+move[1], pos[2]+move[2] );
			ObjRender_SetAlpha(ID, alpha - move1*alpha );
			
			if( !OnSpell ){
				frame++;
				moveA += 1;
				move[0] = move[0] + movep[0];
				move[1] = move[1] + movep[1];
				move[2] = move[2] + movep[2];
			}
			else{ break; }
			
			yield;
		}
		Obj_Delete( ID );
	}
}




// ----------------------------------------------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------------------------------------------
// ユーティリティ


// カメラ部分だけ抜き出し
task TWorld03Camera()
{
	let IDX = 2;
	let ZSpeed	= 1.25;

	let frame	= 0;
	let move1	= 0;
	let moveA	= 0;
	let ctr		= 0;
	
	//　今は無限です
	while(ZSpeed >= 0)
	{
		move1 = 1 * sin( moveA );
		SetFogParam( 0, move1*768, 64, 96, 128 );
		SetCameraFocusXYZ( 0, 0, 0 );
		SetCameraRadius( 64 );
		SetCameraAzimuthAngle( 0 + 0 * cos(frame/8) );
		SetCameraElevationAngle( 24 + 0 * sin(frame/4) );
		frame++;
		if( move1 < 1 ){ moveA += 1; }
		if (!IsEndBG(IDX)) { ZSpeed -= 1.25/120; }
		yield;
	}
}

task TTranslateBackground(sLayer)
{
	let timer = 150;
	let rt	= CreateRenderTexture( "TranslateExStage", sLayer[0], sLayer[1], true );
	let tex	= CreateShaderTexture( rt, BLEND_ALPHA, sLayer[1]+1 );
	let shd	= CreateShaderObject( tex, 13 );
	
	if (CfgIsUseShader())
	{
		ascent(t in 0 .. timer)
		{
			let tmp = (t+1)/timer;
			ObjShader_SetFloat( shd, "m_frame", t );
			ObjShader_SetFloat( shd, "m_alpha", tmp );
			yield;
		}
	}
	else
	{
		descent(t in 0 .. timer)
		{
			let tmp = (t+1)/timer;
			ObjRender_SetAlpha(tex, tmp*255);
			yield;
		}
	}
	Obj_Delete( tex );
	Obj_Delete( shd );
}

function IsEndBG(index)
{
	return((GetStageScene() <= index) && !flagEnd);
}
