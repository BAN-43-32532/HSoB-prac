#東方弾幕風[Single]
#ScriptVersion[3]
#Title["通常2"]
#Text["通常2"]
#Background[""]
#System["./../../../system/System.dnh"]

//---------------------------------------------------------------------

// 関数取り込み
#include"./../../../lib/lib_boss.dnh"
#include"./lib_Mumei.dnh"

@Event {
	alternative(GetEventType())
	case(EV_REQUEST_LIFE)		{ SetScriptResult(3000);	}
	case(EV_REQUEST_TIMER)		{ SetScriptResult(60);		}
	BossEvent();
}

@Initialize {

	// アイテム数
	if (IsRainbow())	{ bossDropItem = 150; }
	else			{ bossDropItem = 50; }

	//防御率再計算
	SetMumeiDefence();

	Boss_Init();	//初期設定
	objEnemy = CreateBoss(BOSS_ID_MUMEI);	//ボスセット

	InitMumei();

	// チャプター開始
	ChapterStartBoss(GetBossID(objEnemy), 2, CHAPTER_BOSS);

	// 使い魔と体力連動
	CheckLinkLife_Boss(objEnemy);

	Task_Main();
}

@MainLoop {
	yield;
}



// メインタスク
task Task_Main
{
	SetMumeiEffect(objEnemy, false);
	standBy(objEnemy, CenX, 140, 60);
	waitObj(objEnemy, 60);

	BossCharge(objEnemy);
	waitObj(objEnemy, 60);
	Shot1();
	
	task Shot1()
	{
		let way = [12, 8, 12][DifficultEx()];
		let wt = 5;
		let D = -1;
		
		let count = 0;
		while(eAlive)
		{
			let base_angle = GetAngleToPlayer(objEnemy);
			SetAction(objEnemy, ACT_SHOT2, 180);
			CallSound(sndBoon);
			ascent(count in 0 .. way)
			{
				let ea = base_angle + count*360/way*1.85*D;
				let es = 1.5 - count/(way-1)*0.75;
				DishShotSet(es, ea, D);
				waitObj(objEnemy, wt);
			}
			waitObj(objEnemy, 15);
			if (!eAlive) { return; }
			EnemyRandomMove(objEnemy, 140, 64);
			waitObj(objEnemy, 90);
			if (!eAlive) { return; }
			EnemyRandomMove(objEnemy, 120, 64);
			waitObj(objEnemy, 90);
			D = -D;
			count++;
		}
	}
}

task DishShotSet(Dish_SpdMin, B_ThrowAng, Dirc)
{
	let Dish_Way = 1;
	let Dish_WayAngle = 30;
//	let Dish_SpdMin = 1;
	let B_ThrowR = 0;
//	let B_ThrowAng = AngleAdjustment(GetAngleToPlayer(objEnemy), 90);
	let B_ThrowSpd = 0;
	let B_DishCt = 0;
	let angAdd = 1;
	let throwFlag = false;
	ascent(i in 0 .. Dish_Way){
		DishShot(Dish_WayAngle*(i-(Dish_Way-1)/2));
	}
	ascent(i in 1 .. 61){
		B_ThrowR = 75*sin(90*i/60);
		angAdd += 4/60;
		B_ThrowAng += angAdd*Dirc;
		B_ThrowSpd = angAdd*3.14159265359/180*B_ThrowR;
		yield;
	}
	throwFlag = true;

	// お皿単品
	task DishShot(B_AngAdd)
	{
		let eSize = 28;
		let eLife = 80;
		let objS = PorcelainEnemy(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), PORCELAIN_DISH, eSize, 60, eLife, 0.8);
		let objImgAll = Obj_GetValueD(objS, "IMAGE_ID_ALL", []);
		B_DishCt++;
		TMain();
		
		task TMain()
		{
			TMove();
			TShot();
			while(!Obj_IsDeleted(objS)) { yield; }
			B_DishCt--;
		}
		task TMove()
		{
			let BX = ObjMove_GetX(objEnemy) + B_ThrowR*cos(B_ThrowAng+B_AngAdd);
			let BY = ObjMove_GetY(objEnemy) + B_ThrowR*sin(B_ThrowAng+B_AngAdd);
			let BAng = 0;
			while(!throwFlag && !Obj_IsDeleted(objS)){
				BX = ObjMove_GetX(objEnemy) + B_ThrowR*cos(B_ThrowAng+B_AngAdd);
				BY = ObjMove_GetY(objEnemy) + B_ThrowR*sin(B_ThrowAng+B_AngAdd);
				BAng += -13*Dirc;
				ObjMove_SetDestAtFrame(objS, BX, BY, 1);
				yield;
			}
			BX = ObjMove_GetX(objEnemy) + B_ThrowR*cos(B_ThrowAng+B_AngAdd);
			BY = ObjMove_GetY(objEnemy) + B_ThrowR*sin(B_ThrowAng+B_AngAdd);
			let a = B_ThrowAng + B_AngAdd + 90*Dirc;
			let s = B_ThrowSpd;
			let sMinus = (s-Dish_SpdMin)/30;
			while(!Obj_IsDeleted(objS)){
				s = max(s-sMinus, Dish_SpdMin);
				BX += s*cos(a);
				BY += s*sin(a);
				BAng += -13*Dirc;
				ObjMove_SetDestAtFrame(objS, BX, BY, 1);
				yield;
			}
		}
		task TShot()
		{
			while(!throwFlag && !Obj_IsDeleted(objS))
			{
				yield;
			}
			
			let speed = [1.5, 1.33, 1.5][DifficultEx()];
			let timer = [240, 240, 240][DifficultEx()];
			let way = [1, 1, 1][DifficultEx()];
			let sub_way = [2, 2, 2][DifficultEx()];
			let wt = [10, 18, 10][DifficultEx()];
			let quant = 2;
			let add_angle = Dirc*1;
			
			let t = 0;
			let st = 0;
			while(!Obj_IsDeleted(objS) && t < timer)
			{
				let base_angle = B_ThrowAng + B_AngAdd + t*add_angle;
			//	let base_angle = GetAngleToPlayer(objS);
				ascent(i in 0 .. sub_way)
				{
					let ss = speed;
					let sa = base_angle + (i-(sub_way-1)/2)*360/way;
					RhombusShotEx(objEnemy, quant, 8.0, 4.8, ObjMove_GetX(objS)+36*cos(sa), ObjMove_GetY(objS)+36*sin(sa),
						ss, sa, BGW_CHRYSTAL_S_WHITE, 10);
				}
				CallSound(sndShot5);
				t += wt;
				st++;
			//	sub_way = max(1, sub_way-1);
				wait(wt);
			}
		}
	}
}
