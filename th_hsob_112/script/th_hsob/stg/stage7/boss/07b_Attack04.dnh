#東方弾幕風[Single]
#ScriptVersion[3]
#Title["通常4"]
#Text["通常4"]
#Background[""]
#System["./../../../system/System.dnh"]

//---------------------------------------------------------------------

// 関数取り込み
#include"./../../../lib/lib_boss.dnh"
#include"./lib_Mumei.dnh"

@Event {
	alternative(GetEventType())
	case(EV_REQUEST_LIFE)		{ SetScriptResult(2900);	}
	case(EV_REQUEST_TIMER)		{ SetScriptResult(60);		}
	BossEvent();
}

@Initialize {

	// アイテム数
	if (IsRainbow())	{ bossDropItem = 150; }
	else			{ bossDropItem = 50; }

	//防御率再計算
	SetMumeiDefence();

	Boss_Init();	//初期設定
	objEnemy = CreateBoss(BOSS_ID_MUMEI);	//ボスセット

	InitMumei();

	// チャプター開始
	ChapterStartBoss(GetBossID(objEnemy), 4, CHAPTER_BOSS);

	// 使い魔と体力連動
	CheckLinkLife_Boss(objEnemy);

	Task_Main();
}

@MainLoop {
	yield;
}



// メインタスク
task Task_Main
{
	SetMumeiEffect(objEnemy, false);
	SetMumeiEffect_v2(objEnemy, false, 60);
	standBy(objEnemy, CenX, 140, 60);
	waitObj(objEnemy, 60);

	BossCharge(objEnemy);
	waitObj(objEnemy, 60);
	Shot1();
	
	task Shot1()
	{
		let way = 5;
		let wt = [60, 90, 60][DifficultEx()];
		let D = -1;
		
		let count = 0;
		while(eAlive)
		{
			let base_angle = GetAngleToPlayer(objEnemy);
			SetAction(objEnemy, ACT_SHOT2, 60);
			CallSound(sndBoon);
			ascent(count in 0 .. way)
			{
				let ea = base_angle + count*360/way*D;
				let es = 1.5 - count/(way-1)*0.75;
				DishShot(es, ea, D);
			}
			waitObj(objEnemy, wt);
			if (!eAlive) { return; }
			EnemyRandomMove(objEnemy, 140, 64);
			waitObj(objEnemy, wt);
			D = -D;
			count++;
		}
	}
}

task DishShot(Dish_SpdMin, B_ThrowAng, Dirc)
{
	let BX = ObjMove_GetX(objEnemy);
	let BY = ObjMove_GetY(objEnemy);
	let BR = 0;
	let BAng = B_ThrowAng;
	let BAddAngle = Dirc*64;
	let BAddR = 0.6;
	let BDelay = 60;
	
	let eSize = 28;
	let eLife = 80;
	let objS = PorcelainEnemy(BX, BY, PORCELAIN_DISH, eSize, BDelay, eLife, 0.8);
	let objImgAll = Obj_GetValueD(objS, "IMAGE_ID_ALL", []);
	TMain();
	
	task TMain()
	{
		TMove();
		TShot();
	}
	task TMove()
	{
		ascent(t in 0 .. BDelay)
		{
			if (Obj_IsDeleted(objS)) { return; }
			let tmp = GetCurve_d((t+1)/BDelay);
			ObjMove_SetDestAtFrame(objS, BX+BR*cos(BAng), BY+BR*sin(BAng), 1);
			BAng += (2-tmp*1)*BAddAngle/max(32,BR);
			BR += (5-tmp*4)*BAddR;
			waitObj(objS, 1);
		}
		while(!Obj_IsDeleted(objS)){
			ObjMove_SetDestAtFrame(objS, BX+BR*cos(BAng), BY+BR*sin(BAng), 1);
			BAng += BAddAngle/max(32,BR);
			BR += BAddR;
			waitObj(objS, 1);
		}
	}
	task TShot()
	{
		let speed = [1.5, 1.25, 1.5][DifficultEx()];
		let timer = 600;
		let way = 1;
		let sub_way = 2;
		let wt = [10, 16, 10][DifficultEx()];
		let quant = 2;
		let add_angle = Dirc*1;
		
		let t = 0;
		let st = 0;
		while(!Obj_IsDeleted(objS) && t < timer)
		{
			let base_angle = BAng + 120*Dirc;
			ascent(i in 0 .. sub_way)
			{
				let ss = speed;
				let sa = base_angle + (i-(sub_way-1)/2)*360/way;
				RhombusShotEx(objEnemy, quant, 8.0, 4.8, ObjMove_GetX(objS)+36*cos(sa), ObjMove_GetY(objS)+36*sin(sa),
					ss, sa, BGW_CHRYSTAL_S_WHITE, 10);
			}
			CallSound(sndShot5);
			t += wt;
			st++;
		//	sub_way = max(1, sub_way-1);
			wait(wt);
		}
	}
}
