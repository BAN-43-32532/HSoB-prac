#東方弾幕風[Single]
#ScriptVersion[3]
#Title["通常8"]
#Text["通常8"]
#Background[""]
#System["./../../../system/System.dnh"]

//---------------------------------------------------------------------

// 関数取り込み
#include"./../../../lib/lib_boss.dnh"
#include"./lib_Mumei.dnh"

// ｾﾄｻﾝを動かしたい時はこっち、objEnemyは基本的に弄らない
//（本体はこのオブジェクトに追従）
let objEnemySet = -1;
let flgRaiseSet = 0;

@Event {
	alternative(GetEventType())
	case(EV_REQUEST_LIFE)		{ SetScriptResult(3000);	}
	case(EV_REQUEST_TIMER)		{ SetScriptResult(60);		}
	BossEvent();
}

@Initialize {

	// アイテム数
	if (IsRainbow())	{ bossDropItem = 150; }
	else			{ bossDropItem = 50; }

	//防御率再計算
	SetMumeiDefence();

	Boss_Init();	//初期設定
	objEnemy = CreateBoss(BOSS_ID_MUMEI);	//ボスセット

	// 初期化前に背負いもの強制リセット
	MumeiEffect_SetContinue(0);

	InitMumei();

	// チャプター開始
	ChapterStartBoss(GetBossID(objEnemy), 8, CHAPTER_BOSS);

	// 使い魔と体力連動
	CheckLinkLife_Boss(objEnemy);

	// ｾﾄｻﾝ描画用
	objEnemySet = SETSET();

	Task_Main();
}

@MainLoop {
	yield;
}



// メインタスク
task Task_Main
{
	standBy(objEnemy, CenX, 160, 180);
	
	// --- モードチェンジえへくと群
	CallSound(sndExDown);
	local
	{
		let timer = 33;
		let size = 8;
		ascent (i in 0 .. 30)
		{
			let bx = ObjMove_GetX(objEnemy);
			let by = ObjMove_GetY(objEnemy);
			_BossFinalExplodeB(bx, by,
				randEffect(0,360), timer, randEffect(0,size^2)^0.5, randEffect(64,160), randEffect(64,160), randEffect(64,160));
			waitObj(objEnemy, 1);
		}
	}
	waitObj(objEnemy, 60);
	TTalk();
	SetAction(objEnemy, ACT_SHOT2, 60*999);
	SetAction(objEnemySet, ACT_SHOT1, 60*999);
	waitObj(objEnemy, 60);
	BossCharge(objEnemy);
	waitObj(objEnemy, 60);

	let speed = [6, 4, 6][DifficultEx()];
	let way = [2, 2, 2][DifficultEx()];
	let wt = [3, 4, 3][DifficultEx()];
	
	let base_ct = [2, 1, 2][DifficultEx()];
	let sand_way1 = [3, 1, 3][DifficultEx()];
	let sand_way2 = [5, 3, 5][DifficultEx()];
	
	if (base_ct >= 1) { TShot_sub(speed, 0, 0, 0, 0, way, wt, BGW_CHRYSTAL_S_WHITE, -1); }
	if (base_ct >= 2) { TShot_sub(speed*0.75, 1/12.5, 0, 0, 0, way, wt, BGW_CHRYSTAL_S_WHITE, -1); }
	TShot_sub(speed*0.8, 0.5+0.1, 0.1, 5, sand_way1, way, wt, BGW_BALL_S_ORANGE, 1);
	TShot_sub(speed*0.7, 0.5-0.1, 0.075, 5, sand_way2, way, wt, BGW_BALL_SS_ORANGE, 1);
	/*
	let ang = 0;
	let count = 0;
	let D = -1;
	let way = 2;
	while(eAlive)
	{
		let spd = [2.5, 4.0][count%2 == 0];
		let quant = [5, 4][count%2 == 0];
		let r = [64, 24][count%2 == 0];
		let sg = BGW_CHRYSTAL_S_WHITE;
		if (flgRaiseSet > 0)
		{
			spd *= 1.5;
			sg = [BGW_CHRYSTAL_S_YELLOW, BGW_CHRYSTAL_S_ORANGE][count%2 == 0];
		}
		CallSound(sndShot2);
		ascent(iW in 0 .. way){
			let a = ang +360*iW/way;
			RhombusShotEx(objEnemy, quant, 8.0, 4.8, ObjMove_GetX(objEnemy)+r*cos(a), ObjMove_GetY(objEnemy)+r*sin(a),
			 spd, a, sg, 10);
		}
		ang += 360/32.675*D;
		count++;
		waitObj(objEnemy, 3);
	}
	*/

	task TShot_sub(speed, angle, s_add, a_add, w_add, way, wt, graphic, shot_type)
	{
		let count = 0;
		while(eAlive)
		{
			let sx = ObjMove_GetX(objEnemy);
			let sy = ObjMove_GetY(objEnemy)-72;
			let ba = -count * 360/1.618/18;
			let bs = speed;
			
			if (shot_type < 0)
			{
				// 本体
				let quant = 4;
				ascent(iW in 0 .. way)
				{
					let va = ba + 360*(iW+angle)/way;
					let vpos = [cos(va), sin(va)/2];
					let ss = bs * ((vpos[0])^2 + (vpos[1])^2)^0.5;
					let sa = atan2(vpos[1], vpos[0]);
					RhombusShotEx(objEnemy, quant, 8.0, 4.8, sx, sy,
						ss, sa, graphic, 10);
				}
				CallSound(sndShot3);
			}
			else if (flgRaiseSet > 0)
			{
				ascent(iW in 0 .. way)
				{
					ascent(iW2 in 0 .. w_add)
					{
						let tmp = iW2 - (w_add-1)/2;
						let va = ba + 360*(iW+angle)/way + tmp*a_add;
						let vpos = [cos(va), sin(va)/2];
						let ss = bs * ((vpos[0])^2 + (vpos[1])^2)^0.5 * (1+tmp*s_add);
						let sa = atan2(vpos[1], vpos[0]);
						Ex02_CreateShotA1(sx, sy, ss, sa, graphic, 10, trunc(24/ss));
					}
				}
			}
			count++;
			waitObj(objEnemy, wt);
		}
	}
	
	// 菱形弾の発射遅延に合わせる
	task Ex02_CreateShotA1(x, y, speed, angle, graphic, delay, timer)
	{
		wait(timer);
		if (!eAlive) { return; }
		let objS = My_CreateShotA2(x, y, 0, angle, speed/80, speed, graphic, delay);
	}
}

// 描画用
function SETSET()
{
	let objSet = MakeEnemy(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 9999999, ENEMY_S);
	Boss_SetIDtoObj(objSet, BOSS_ID_SET);
	Boss_AnimeTimer(objSet);
	BossAnime_Initialize(objSet);
	SetEnemyVisible(objSet, false);	// ハイパームテキ
	_TSETSET(objSet);
	ChangingSet(objSet);
	return(objSet);
	
	task _TSETSET(objSet)
	{
		while(eAlive && !Obj_IsDeleted(objSet))
		{
			ObjMove_SetPosition(objSet, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy));
			yield;
		}
		Obj_Delete(objSet);
	}
	
	task ChangingSet(objSet)
	{
		let objImg = [GetBossImageID(objEnemy), GetBossImageID(objSet)];
		ObjRender_SetAlpha(objImg[1], 0);
		
		ascent(i in 0 .. 2)
		{
			ObjShader_SetShaderF(objImg[i], hlslNoise);
			ObjShader_SetTechnique(objImg[i], "TecNoise");
		}

		let efft = 0;
		while(eAlive && !Obj_IsDeleted(objSet))
		{
			let wt = rand(1,15);
			let t = 0;
			while(t < wt)
			{
				let tmpL = min(GetBossTimerRate(), GetBossLifeRate(objEnemy));
				t += (1-tmpL)^2;
				waitObj(objEnemy, 1);
			}
			
			if (!(eAlive && !Obj_IsDeleted(objSet))) { break; }
			CallSound(sndNoiseEx);
			let tmpL = min(GetBossTimerRate(), GetBossLifeRate(objEnemy));
			let alpha = (1-tmpL)*128 + randEffect(0, 128);
			SetSetFlg(trunc(12+(1-tmpL)*12));
			ascent(t in 0 .. 12)
			{
				if (!(eAlive && !Obj_IsDeleted(objSet))) { break; }
				let tmp = sin(t/12*180);
				let tmp2 = max(0, sin(t/12*360)+sin(t/12*180)/2);
				let power = 0.66 * tmp2;
				ascent(i in 0 .. 2)
				{
					ObjShader_SetFloat(objImg[i], "power_", power);
					ObjShader_SetFloat(objImg[i], "seed_", efft+i*64);
				}
				ObjRender_SetAlpha(objImg[0], (1-tmp)*alpha+(255-alpha));
				ObjRender_SetAlpha(objImg[1], tmp*alpha);
				efft++;
				yield;
			}
			ascent(i in 0 .. 2)
			{
				ObjShader_SetFloat(objImg[i], "power_", 0);
			}
			ObjRender_SetAlpha(objImg[0], 255);
			ObjRender_SetAlpha(objImg[1], 0);
		}
	}
	
	task SetSetFlg(timer)
	{
		flgRaiseSet = timer;
		let beforeFlg = flgRaiseSet;
		while(flgRaiseSet > 0)
		{
			if (flgRaiseSet > beforeFlg) { break; }
			flgRaiseSet--;
			beforeFlg = flgRaiseSet;
			yield;
		}
	}
}

task TTalk()
{
	SetA08Fukidashi(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy)-48, 0, 180);
	waitObj(objEnemy, 180);
	while(eAlive)
	{
		let tmpL = min(GetBossTimerRate(), GetBossLifeRate(objEnemy));
		if (tmpL < 0.25) { break; }
		yield;
	}
	if (!eAlive) { return; }
	SetA08Fukidashi(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy)-48, 1, 300);
}

task SetA08Fukidashi(x, y, type, timer)
{
	let ix = 0;
	let iy = 64*type;
	let path = imgDir ~ "world/stg7img/stg7_sh8.png";
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, path);
	Obj_SetRenderPriorityI(obj, 80);
	ObjSprite2D_SetSourceRect(obj, ix+0, iy+0, ix+256, iy+64);
	ObjSprite2D_SetDestRect(obj, -128, -64, 128, 0);
	ObjRender_SetPosition(obj, x, y, 0);
	
	ascent(t in 0 .. 15)
	{
		if (!eAlive) { break; }
		let tmp = GetCurve_d((t+1)/15);
		let tmp2 = sin(t/14*180);
		ObjRender_SetScaleXYZ(obj, tmp+tmp2/4, tmp-tmp2/4, 1);
		yield;
	}
	loop(timer)
	{
		if (!eAlive) { break; }
		yield;
	}
	descent(t in 0 .. 15)
	{
		if (!eAlive) { break; }
		let tmp = GetCurve_d((t+1)/15);
		let tmp2 = sin(t/14*180);
		ObjRender_SetScaleXYZ(obj, tmp+tmp2/8, tmp-tmp2/2, 1);
		yield;
	}
	Obj_Delete(obj);
}
