
#include "./../stage3/lib_FrogFairy.dnh"

// -------------- 敵配置 -------------- //

task S3_I01(pos, add_pos, speed, angle, count, wt_phase)
{
	let ty = 0;
	ascent(t in 0 .. count)
	{
		let ex = pos[0] + add_pos[0]*t;
		let ey = pos[1] + add_pos[1]*ty;
		let muki = [1,-1][t%2];
		if (add_pos[0] < 0) { muki = -muki; }
		S3_SetEnemyI01(ex, ey, speed, angle, muki, 0);
		ty += phaseEx(wt_phase);
		WaitRoad(phaseEx(wt_phase));
	}
}

task S3_F03(pos, add_pos, count, wt_phase)
{
	ascent(t in 0 .. count)
	{
		let ex = pos[0] + add_pos[0]*t+randStage(-8,8);
		let ey = pos[1] + add_pos[1]*t+randStage(-8,8);
		S3_SetEnemyF03(ex, ey, 0, 0, 0, phaseExEnemy(4));
		WaitRoad(phaseEx(wt_phase));
	}
}

task S3_B01(pos, add_pos, speed, angle, count, wt_phase)
{
	ascent(i in 0 .. count)
	{
		S3_ShotBubble01(pos[0]+add_pos[0]*i+randStage(-32,32), pos[1]+add_pos[1]*i, speed, angle, 1);
		WaitRoad(phaseEx(wt_phase));
	}
}

// ------------------------------------------------------------------ //
//                            敵単体の処理                            //
// ------------------------------------------------------------------ //

// ビット陰陽玉
task S3_SetEnemyI01(iniX, iniY, iniSpeed, iniAngle, iniValue, iniWait)
{
	if (flgStopSetZako) { return; }
	
	let e_type = iniValue%2;
	let eSize = ENEMY_M;
	let eColor = EFF_BLUE;
	
	let objEnemy = MakeEnemy(iniX, iniY, 50, eSize);
	SetEnemyDropItem_Extra(objEnemy, 30);
	DrawOnmyou( objEnemy, eColor );
	TAct();
	WaitForKilled(objEnemy);
	ZakoFinalize(objEnemy, eColor);
	
	task TAct()
	{
		ZakoEnterEffect_Onmyou(objEnemy, 120);
		Enemy_WaitForDispOUT(objEnemy, 32, 180);
		
		let x = iniX;
		let y = iniY;
		let vx = iniSpeed*cos(iniAngle);
		let vy = iniSpeed*sin(iniAngle);
		let muki = iniValue;
		
		let t = 0;
		ascent(t in 0 .. 120)
		{
			let tmp = GetCurve((t+1)/120);
			ObjMove_SetPosition(objEnemy, x+sin(30+tmp*150)*96*muki, y);
			x += vx*tmp; y += vy*tmp;
			waitObj(objEnemy, 1);
		}
		if (Obj_IsDeleted(objEnemy)) { return; }
		Enemy_SetPatternA1(objEnemy, 0, iniSpeed, iniAngle);
		TShot();
	}
	
	// ショット
	task TShot()
	{
		// 炎ショット
		let wt = [15, 15, 15][DifficultEx()];
		let shot_delay = [30, 30, 30][DifficultEx()];
		let timer = [360, 120, 360][DifficultEx()] + shot_delay;
		
		let speed = [2.5, 1.5, 2.5][DifficultEx()];
		let way = [2, 2, 2][DifficultEx()];
		let way_angle = 360/way;
		let graphic = ADD_BGW_FIRE_BLUE;
		let base_angle = 90;
		
		let t = 0;
		while(CanShotBullet(objEnemy) && t < timer && ObjMove_GetY(objEnemy) < MaxY-32)
		{
			if (t >= shot_delay)
			{
				if (t%wt == 0)
				{
					ascent(i in 0 .. way)
					{
						let va = base_angle + i*360/way;
						let vx = iniSpeed*cos(iniAngle);
						let vy = iniSpeed*sin(iniAngle);
						let add_vx = speed*cos(va);
						let add_vy = speed*sin(va);
						My_CreateShotB2(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy),
							vx, vy, add_vx/120, add_vy/120, vx+add_vx*3, vy+add_vy*3, graphic, 15);
					}
				}
			}
			waitObj(objEnemy, 1);
			t++;
		}
	}
}

// 壊れるシャボン玉
task S3_ShotBubble01(iniX, iniY, iniSpeed, iniAngle, iniValue)
{
	if (flgStopSetZako) { return; }
	
	let scale = 0.75;
	
	let objEnemy = MakeEnemy(iniX, iniY, 10, ENEMY_S);
	SetEnemyDropItem_Extra(objEnemy, 8);
	// 判定サイズ
	SetEnemyIntersection(objEnemy, scale*16, scale*16);
	DrawBubbleEnemy( objEnemy, scale );
	TAct();
	WaitForKilled(objEnemy);
	if (CheckKillType(objEnemy) == 2)
	{
		// 撃ち返し
		TUchikaeshi();
	}
	ZakoFinalizeEx(objEnemy, EFF_BLUE, false);
	
	task TAct()
	{
		Enemy_SetPatternA2(objEnemy, 0, 0, iniAngle, iniSpeed/120, 0, iniSpeed);
		Enemy_WaitForDispOUT(objEnemy, 32, 0);
	//	TShot();
		let t = 0;
		while(!Obj_IsDeleted(objEnemy))
		{
			if (iniValue == 0 && t < 120)
			{
				let tmp = GetCurve((t+1)/120);
				ObjMove_SetY(objEnemy, ObjMove_GetY(objEnemy)-(1-tmp)*2);
			}
			ObjMove_SetY(objEnemy, ObjMove_GetY(objEnemy)+sin(t*2));
			t++;
			waitObj(objEnemy, 1);
		}
	}
	
	task TShot()
	{
		let shot_delay = phaseExEnemy(8);
		let wt = phaseExEnemy(8);
		let count = 1;
		
		let speed = [2, 2, 2][DifficultEx()];
		let way = [12, 12, 12][DifficultEx()];
		let g2 = BGW_BALL_BS_WHITE;
		
		let st = 0;
		waitObj(objEnemy, shot_delay);
		while(CanShotBullet(objEnemy) && st < count)
		{
			let ba = rand(0, 360);
			CreateShotBubbleCircle(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy),
				speed, ba, g2, 30, way, 1);
			CallSound(sndShot2);
			waitObj(objEnemy, wt);
			st++;
		}
	}
	
	task TUchikaeshi()
	{
		let speed = [4, 3, 4][DifficultEx()];
		let way = [12, 12, 12][DifficultEx()];
		let true_way = [2, 12, 2][DifficultEx()];
		let w1 = (way-1)/2;

		if (way <= 0 || !CheckUchikaeshi(objEnemy, 128)) { return; }
		
		let g2 = [BGW_BALL_BS_SKY,BGW_BALL_BS_BLUE,BGW_BALL_BS_PURPLE][rand_int(0,2)];
		let g = [g2, g2, BGW_BALL_BS_WHITE];
		let add_a = [2, -2, 0];
		let g_base = rand_int(0,length(g)-1);
		
		let ba = GetAngleToPlayer(objEnemy);
		ascent(i in 0 .. 3)
		{
			CreateShotBubbleCircle(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy),
				speed, ba+add_a[i], g[i], 30, way, true_way);
		}
		CallSound(sndShot5);
	}

	function CreateShotBubbleCircle(x, y, speed, angle, graphic, delay, way, true_way_span)
	{
		ascent(i in 0 .. way)
		{
			let sa = angle + i*360/way;
			let sx = x;
			let sy = y;
			CreateShotBubble(x, y, speed, sa, graphic, delay, i%true_way_span!=0);
		}
	}
	
	task CreateShotBubble(x, y, speed, angle, graphic, delay, del_flag)
	{
		let obj = My_CreateShotA2(x, y, 1, angle, -1/60, 0, graphic, delay);
		ObjMove_AddPatternA2(obj, 60, NO_CHANGE, NO_CHANGE, speed/240, 0, speed);
		wait(60);
		if (!Obj_IsDeleted(obj) && del_flag)
		{
			ObjShot_FadeDelete(obj);
		}
	}
}


// カエル妖精（中）
task S3_SetEnemyF02(iniX, iniY, iniSpeed, iniAngle, iniValue, iniWait)
{
	if (flgStopSetZakoTimer > 0) { return; }
//	if (flgStopSetZako) { return; }
	
	let e_type = iniValue%2;
	let eSize = ENEMY_M;
	let eColor = EFF_RED;
	let emnImage = imgZakoFairyFrog;
	
	let objEnemy = MakeEnemy(-32, -32, [90, 140][e_type], eSize);
	SetEnemyDropItem_Extra(objEnemy, 20);
	DrawFrogFairy( objEnemy, imgZakoFairyFrog, FAIRY_MIDDLE );
	TAct();
	WaitForKilled(objEnemy);
	ZakoFinalize(objEnemy, eColor);
	
	task TAct()
	{
		EnterFrogFairy(objEnemy, [iniX,iniY], 1, phaseExEnemy(8));
		waitObj(objEnemy, phaseExEnemy(8));
		if (Obj_IsDeleted(objEnemy)) { return; }
		FirstShot_S03(objEnemy, eSize);
		waitObj(objEnemy, iniWait);
		if (Obj_IsDeleted(objEnemy)) { return; }
		TShot();
		Enemy_SetPatternA2(objEnemy, 0, 0, GetAngleToPlayer(objEnemy), 2/480, 0, 2);
		MoveHormingEnemy(objEnemy, 1, 240);
		TCheckDispINOut(objEnemy, 32);
	}
	
	// ショット
	task TShot()
	{
		let wt = phaseExEnemy(4);
		let count = [3, 1, 3][DifficultEx()];
		
		let speed = [2, 1.5, 2][DifficultEx()];
		let way = [24, 14, 24][DifficultEx()];
		let r = [30, 20, 30][DifficultEx()];
		let graphic = BGW_BALL_BS_BLUE;
		
		let st = 0;
		while(CanShotBullet(objEnemy) && st < count)
		{
			let sa = GetAngleToPlayer(objEnemy);
			BubbleShot02(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy),
				speed, rand(0,360), ADD_BGW_BALL_BS_BLUE, 30, sa, r, rand_dir()*1, way);
			CallSound(sndShot2);
			waitObj(objEnemy, wt);
			st++;
		}
	}
}
// カエル妖精（小）
task S3_SetEnemyF03(iniX, iniY, iniSpeed, iniAngle, iniValue, iniWait)
{
	if (flgStopSetZakoTimer > 0) { return; }
//	if (flgStopSetZako) { return; }
	
	let e_type = iniValue%2;
	let eSize = ENEMY_S;
	let eColor = EFF_RED;
	let emnImage = imgZakoFairyFrog;
	
	let objEnemy = MakeEnemy(-32, -32, 30, eSize);
	SetEnemyDropItem_Extra(objEnemy, 15);
	DrawFrogFairy( objEnemy, imgZakoFairyFrog, FAIRY_SMALL );
	TAct();
	WaitForKilled(objEnemy);
	ZakoFinalize(objEnemy, eColor);
	
	task TAct()
	{
		EnterFrogFairy(objEnemy, [iniX,iniY], 1, phaseExEnemy(8));
		waitObj(objEnemy, phaseExEnemy(8));
		if (Obj_IsDeleted(objEnemy)) { return; }
		FirstShot_S03(objEnemy, eSize);
		waitObj(objEnemy, iniWait);
		if (Obj_IsDeleted(objEnemy)) { return; }
		TShot();
		Enemy_SetPatternA2(objEnemy, 0, 0, GetAngleToPlayer(objEnemy), 2/480, 0, 2);
		MoveHormingEnemy(objEnemy, 1, 240);
		TCheckDispINOut(objEnemy, 32);
	}
	
	// ショット
	task TShot()
	{
	}
}

// カエル妖精（大）
task S3_SetEnemyF04(iniX, iniY, iniSpeed, iniAngle, iniValue, iniWait)
{
	if (flgStopSetZakoTimer > 0) { return; }
//	if (flgStopSetZako) { return; }
	
	let e_type = iniValue%2;
	let eSize = ENEMY_L;
	let eColor = EFF_RED;
	let emnImage = imgZakoFairyFrog;
	
	let objEnemy = MakeEnemy(-32, -32, 300, eSize);
	SetEnemyDropItem_Extra(objEnemy, 50);
	DrawFrogFairy( objEnemy, imgZakoFairyFrog, FAIRY_LARGE );
	TAct();
	WaitForKilled(objEnemy);
	ZakoFinalize(objEnemy, eColor);
	
	task TAct()
	{
		EnterFrogFairy(objEnemy, [iniX,iniY], 1, phaseExEnemy(8));
		waitObj(objEnemy, phaseExEnemy(8));
		if (Obj_IsDeleted(objEnemy)) { return; }
		FirstShot_S03(objEnemy, eSize);
		waitObj(objEnemy, iniWait);
		if (Obj_IsDeleted(objEnemy)) { return; }
		TShot();
		waitObj(objEnemy, 101);
		if (Obj_IsDeleted(objEnemy)) { return; }
		Enemy_SetPatternA2(objEnemy, 0, 0, 90, 2/480, 0, 2);
		TCheckDispINOut(objEnemy, 32);
	}
	
	
	// ショット
	task TShot()
	{
		let wt = phaseExEnemy(4);
		let count = [2, 1, 2][DifficultEx()];
		
		let speed = [0.75, 0.66, 0.75][DifficultEx()];
		let way = [12, 12, 12][DifficultEx()];
		let way2 = [9, 8, 9][DifficultEx()];
		let way_angle = [360/way/way2, 330/way/way2, 360/way/way2][DifficultEx()];
		let graphic = ADD_BGW_BALL_M_BLUE;
		
		let st = 0;
		while(CanShotBullet(objEnemy) && st < count)
		{
			let ba = GetAngleToPlayer(objEnemy);
			ascent(i in 0 .. way)
			{
				let sa = ba + i*360/way;
				let ss = speed * (1-st*0.2);
				ascent(j in 0 .. way2)
				{
					let oa = (j-(way2-1)/2)*way_angle;
					BubbleShot03(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy),
						ss, sa, graphic, 30, oa, 0);
				}
			}
			CallSound(sndShot2);
			waitObj(objEnemy, wt);
			st++;
		}
	}
}

task BubbleShot01(x, y, vx, vy, max_vy, delay)
{
	let obj = [My_CreateShotB2(x, y, vx, vy, 0, 0.02, vx, max_vy, ADD_BGW_LIGHT_S_BLUE, delay),
		My_CreateShotB2Ex(x, y, vx, vy, 0, 0.02, vx, max_vy, ADD_BGW_WATER_BLUE, delay, DELAY_ADD)];
	
	ascent(t in 0 .. delay)
	{
		let add_y = -GetCurve(1-t/delay)*3;
		ascent(i in 0 .. 2) { ObjMove_SetY(obj[i], ObjMove_GetY(obj[i])+add_y); }
		wait(1);
	}
	Obj_SetRenderPriorityI(obj[1], GetShotRenderPriorityI+1);
}
task BubbleShot02(x, y, speed, angle, graphic, delay, to_angle, to_r, add_a, way)
{
	let vx = speed*cos(to_angle);
	let vy = speed*sin(to_angle);
	ascent(i in 0 .. way)
	{
		let sa = angle + i*360/way;
		BubbleShot02_single(x, y, speed, sa, graphic, delay);
	}
	
	task BubbleShot02_single(x, y, speed, angle, graphic, delay)
	{
		let obj = My_CreateShotA1(x, y, 0, angle, graphic, delay);
		
		let svx = cos(angle);
		let svy = sin(angle);
		let vr = to_r;
		
		let ba = sin(angle)*180;
		let t = 0;
		while(!Obj_IsDeleted(obj))
		{
			vr = to_r * (1+sin(ba+t*3)/6)*(1+t/600);
			if (t < 60)
			{
				vr *= GetCurve((t+1)/60);
			}
			else
			{
				let tmp = min(1, (t-60)/240);
				x += tmp*vx; y += tmp*vy;
			}
			ObjMove_SetPosition(obj, x+vr*cos(angle), y+vr*sin(angle));
			angle += add_a;
			t++;
			wait(1);
		}
	}
	/*
	task BubbleShot02_single(x, y, speed, angle, graphic, delay)
	{
		let obj = My_CreateShotA1(x, y, 0, angle, graphic, delay);
		MoveToSlowdown(obj, x+cos(angle)*r, y+sin(angle)*r, 60);
		wait(60);
		if (Obj_IsDeleted(obj)) { return; }
		MoveTo(obj, x+cos(to_angle)*r2, y+sin(to_angle)*r2, 180);
		wait(180);
		if (Obj_IsDeleted(obj)) { return; }
		ObjMove_AddPatternA2(obj, 0, 0, angle, speed/120, 0, speed);
	}
	*/
}
task BubbleShot02B(x, y, speed, angle, graphic, delay, to_angle, to_r, add_a, way)
{
	let vx = speed*cos(to_angle);
	let vy = speed*sin(to_angle);
	ascent(i in 0 .. way)
	{
		let sa = angle + i*360/way;
		BubbleShot02_single(x, y, speed, sa, graphic, delay);
	}
	
	task BubbleShot02_single(x, y, speed, angle, graphic, delay)
	{
		let obj = My_CreateShotA1(x, y, 0, angle, graphic, delay);
		
		let svx = cos(angle);
		let svy = sin(angle);
		let vr = to_r;
		
		let ba = sin(angle)*180;
		let t = 0;
		while(!Obj_IsDeleted(obj))
		{
			vr = to_r * (1+sin(ba+t*3)/6)*(1+t/600);
			let tmp = min(1, t/180);
			x += tmp*vx; y += tmp*vy;
			ObjMove_SetPosition(obj, x+vr*cos(angle), y+vr*sin(angle));
			angle += add_a;
			t++;
			wait(1);
		}
	}
}

task BubbleShot03(x, y, speed, angle, graphic, delay, offset_angle, offset_span)
{
	let obj = My_CreateShotA1(x, y, 0, angle, graphic, delay);
	
	let r = 0;
	let t = 0;
	while(!Obj_IsDeleted(obj))
	{
		let tmp_a = t*1.5 + offset_span;
		let sa = angle + sin(tmp_a)*offset_angle;
		let ss = speed * (1+sin(tmp_a*2-90));
		ObjMove_SetPosition(obj, x+r*cos(sa), y+r*sin(sa));
		r += ss;
		t++;
		wait(1);
	}
}

task BubbleShot04(x, y, speed, angle, graphic, delay, to_speed, to_count, to_way, to_wt, graphic2)
{
	let obj = My_CreateShotA2(x, y, 0, angle, speed/240, speed, graphic, delay);
	
	let st = 0;
	let t = 0;
	while(!Obj_IsDeleted(obj) && st < to_count)
	{
		if (t > 0 && t%to_wt == 0)
		{
			CreateShotCircleA2(ObjMove_GetX(obj), ObjMove_GetY(obj),
				0, GetAngleToPlayer(obj)+st*180/to_way, to_speed/240, to_speed, graphic2, 30, to_way, 0);
			CallSound(sndShot2);
			st++;
		}
		t++;
		wait(1);
	}
}

// 登場時ショット
task FirstShot_S03(objEnemy, eSize)
{
	let speed = [[1.25], [1.25], [1.25]][DifficultEx()];
	let way = [10, 6, 10][DifficultEx()];
	let way_angle = 120;
	let offset_y = 0;
	
	if (eSize == ENEMY_L)
	{
		speed = [[1.25, 1.50], [1.25], [1.25, 1.50]][DifficultEx()];
		way = [8, 8, 8][DifficultEx()];
	}
	
	CallSound(sndShot6);
	ascent(i in 0 .. way)
	{
		ascent(j in 0 .. length(speed)){
			if (!CanShotBullet(objEnemy)) { break; }
			let sa = -90 + ((i+0.5)/way)*way_angle/2;
			let vx = speed[j]*cos(sa);
			let vy = speed[j]*sin(sa)/2 - 2;
			BubbleShot01(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy)+offset_y,
				-vx, vy, speed[0], 30);
			BubbleShot01(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy)+offset_y,
				vx, vy, speed[0], 30);
		}
	}
}
