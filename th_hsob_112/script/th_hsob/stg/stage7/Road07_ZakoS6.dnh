// -------------- 敵配置 -------------- //

task S6_F01(pos, mpos, spos, span, count, wt_span)
{
	ascent(i in 0 .. count)
	{
		let isp = i%span;
		let ex = pos[0] + mpos[0]*i + spos[0]*isp;
		let ey = pos[1] + mpos[1]*i + spos[1]*isp;
		S6_SetEnemyF01(ex, ey, 2, 90, isp, phaseEx(4));
		WaitRoad(phaseEx(wt_span));
	}
}


task S6_H03(pos, count, add_a, r)
{
	ascent(i in 0 .. count)
	{
		S6_SetEnemyH03(pos[0], pos[1], 1, i*360/count, add_a, r, i/count, phaseEx(8));
	}
}

function MoveWithBackS06_GetAngle(x, y)
{
	let BX = CenX;
	let BY = MinY;
	return(atan2(y-BY, x-BX));
}
task MoveWithBackS06(objEnemy, to_pos, timer)
{
	let bx = ObjMove_GetX(objEnemy);
	let by = ObjMove_GetY(objEnemy);
	let before_x = bx;
	let before_y = by;
	ascent(t in 0 .. timer)
	{
		if (Obj_IsDeleted(objEnemy)) { break; }
		let tmp = GetCurve_d((t+1)/timer);
		let x = bx*(1-tmp) + to_pos[0]*tmp;
		let y = by*(1-tmp) + to_pos[1]*tmp;
		ObjMove_SetPosition(objEnemy,
			ObjMove_GetX(objEnemy) + (x-before_x),
			ObjMove_GetY(objEnemy) + (y-before_y));
		before_x = x;
		before_y = y;
		waitObj(objEnemy, 1);
	}
}

task FairyFadeIN_S06(objEnemy, timer)
{
	let objImg = GetEnemyImageID(objEnemy);
	SetEnemyVisible(objEnemy, false);
	Obj_SetRenderPriorityI(objImg, priorityZakoBack);
	ascent(t in 0 .. timer-30)
	{
		if (Obj_IsDeleted(objEnemy)) { break; }
		let tmp = GetCurve_d((t+1)/(timer-30));
		let tmp_a = 255 * min(1,tmp*3);
		let tmp_c = 96;
		ObjRender_SetAlpha(objImg, tmp_a);
		ObjRender_SetColor(objImg, tmp_c, tmp_c, tmp_c);
		wait(1);
	}
	ascent(t in 0 .. 30)
	{
		if (Obj_IsDeleted(objEnemy)) { break; }
		let tmp = (t+1)/30;
		let tmp_a = 255;
		let tmp_c = 96 + (255-96)*tmp;
		ObjRender_SetAlpha(objImg, tmp_a);
		ObjRender_SetColor(objImg, tmp_c, tmp_c, tmp_c);
		wait(1);
	}
	Obj_SetRenderPriorityI(objImg, priorityZako);
	SetEnemyVisible(objEnemy, true);
}


// ------------------------------------------------------------------ //
//                            敵単体の処理                            //
// ------------------------------------------------------------------ //

// 最初の妖精
task S6_SetEnemyF01(iniX, iniY, iniSpeed, iniAngle, iniValue, iniWait)
{
	if (flgStopSetZako) { return; }
	
	let e_type = iniValue%2;
	let eSize = ENEMY_S;
	let eColor = EFF_RED;
	let emnImage = imgZakoFairyDark;
	
	let objEnemy = MakeEnemy(iniX, iniY+128, 20, eSize);
	SetEnemyDropItem_Extra(objEnemy, 5);
	DrawFairy(objEnemy, emnImage, FAIRY_SMALL);
	TAct();
	WaitForKilled(objEnemy);
	ZakoFinalize(objEnemy, eColor);
	
	task TAct()
	{
		TCheckDispINOut(objEnemy, 16);

		let timer = iniWait;
		FairyFadeIN_S06(objEnemy, timer);
		MoveWithBackS06(objEnemy, [iniX, iniY], timer);
		waitObj(objEnemy, timer-60);
		
		let moveAngle = atan2(GetPlayerY-iniY, GetPlayerX-iniX);
		Enemy_SetPatternA2(objEnemy, 0, 0, moveAngle, iniSpeed/120, 0, iniSpeed);
		waitObj(objEnemy, 60);
		
		TShot(moveAngle);
	}
	
	// ショット
	task TShot(shot_angle)
	{
		let ispeed = [4, 3, 4][DifficultEx()];
		let iway = [1, 1, 1][DifficultEx()];
		let iway_angle = [6, 1, 6][DifficultEx()];
		let ict_max = [24, 1, 24][DifficultEx()];
		let igraphic = BGW_ICE_RED;
		
		let tmp_iway = 0;
		
		let st = 0;
		ascent(i in 0 .. ict_max)
		{
			if (!CanShotBullet(objEnemy)) { return; }
			if (i == 0)
			{
				let speed = [2, 2, 2][DifficultEx()];
				let way = [3, 3, 3][DifficultEx()];
				let way_angle = [45, 45, 45][DifficultEx()];
				let graphic = ADD_BGW_BALL_M_RED;
				ascent(i in 0 .. way)
				{
					let sa = shot_angle + (i-(way-1)/2)*way_angle;
					let sa2 = shot_angle - (i-(way-1)/2)*way_angle;
					let objS = My_CreateShotA2(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), -speed, sa, speed/60, speed, graphic, 15);
					ObjMove_AddPatternA2(objS, 60, NO_CHANGE, sa2, speed/120, 0, speed);
				}
				CallSound(sndShot2);
			}
			else if (i > 4)
			{
				ascent(i in 0 .. iway)
				{
					let sa = shot_angle + ([tmp_iway, -tmp_iway][st%2]);
					let ss = ispeed;
					let objS = My_CreateShotA2Ex(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 0, sa, ss/240, ss, igraphic, 15, DELAY_ADD);
				}
				tmp_iway += iway_angle / (st+1);
				st++;
				CallSound(sndShot2);
			}
			waitObj(objEnemy, phaseExEnemy(1/4));
		}
	}
}

task S6_SetEnemyF02(iniX, iniY, iniSpeed, iniAngle, iniValue, iniWait)
{
	if (flgStopSetZako) { return; }
	
	let e_type = iniValue%2;
	let eSize = ENEMY_L;
	let eColor = EFF_RED;
	let emnImage = imgZakoFairyDark;
	let objFamiliers = [];
	
	let objEnemy = MakeEnemy(iniX, iniY+128, 320, eSize);
	SetEnemyDropItem_Extra(objEnemy, 30);
	DrawFairy(objEnemy, emnImage, FAIRY_LARGE);
	TAct();
	WaitForKilled(objEnemy);
	if (CheckKillType(objEnemy) == 2)
	{
		// 撃ち返し
		TUchikaeshi();
	}
	ZakoFinalize(objEnemy, eColor);
	
	task TAct()
	{
		TCheckDispINOut(objEnemy, 16);

		let timer = iniWait;
		FairyFadeIN_S06(objEnemy, timer);
		MoveWithBackS06(objEnemy, [iniX, iniY], timer);
		waitObj(objEnemy, timer);

		TShot();
	}
	
	// ショット
	task TShot()
	{
		let all_wt = 0;
		let amuki = 0;
		if (iniX < CenX) { amuki = -1; }
		if (iniX > CenX) { amuki = 1; }
		ascent(i in 0 .. 6)
		{
			if (!CanShotBullet(objEnemy)) { return; }
			let a = i*60*amuki;
			let aa = -2*amuki;
			let ea = 0 - all_wt*aa;
			if (amuki == 0)
			{
				a = i*60*([1, -1][i%2]);
				aa = 2*([1, -1][i%2]);
				ea = 0 - all_wt*aa;
			}
			objFamiliers = objFamiliers ~ 
				[S6_SetEnemyH01(objEnemy, 64, a, aa, ea, phaseExEnemy(4))];
			all_wt += phaseExEnemy(0.25);
			waitObj(objEnemy, phaseExEnemy(0.25));
		}
		waitObj(objEnemy, phaseExEnemy(8-0.25*6));

		if (!CanShotBullet(objEnemy)) { return; }
		let moveAngle = atan2(GetPlayerY-iniY, GetPlayerX-iniX);
		Enemy_SetPatternA2(objEnemy, 0, 0, moveAngle, iniSpeed/120, 0, iniSpeed);

	}

	task TUchikaeshi()
	{
		// 打ち返しで使い魔撃破
		ascent(i in 0 .. length(objFamiliers))
		{
			if (!Obj_IsDeleted(objFamiliers[i]))
			{
				ObjEnemy_SetLife(objFamiliers[i], 0);
			}
		}
	}
}

function S6_SetEnemyH01(objParent, iniSpeed, iniAngle, iniValue, iniValue2, iniWait)
{
	if (flgStopSetZako) { return; }
	
	let shotAngle = 0;
	let shotSpeed = 0;
	let e_type = iniValue%2;
	let eSize = ENEMY_S;
	let eColor = EFF_RED;
	
	let objEnemy = MakeEnemy(ObjMove_GetX(objParent), ObjMove_GetY(objParent), 100, eSize);
	SetEnemyDropItem_Extra(objEnemy, 3);
	DrawHitodama2(objEnemy, eColor);
	TMain();
	return(objEnemy);
	
	task TMain()
	{
		TAct();
		WaitForKilled(objEnemy);
		ZakoFinalize(objEnemy, eColor);
	}
	
	task TAct()
	{
		TCheckDispINOut(objEnemy, 16);
		
		TShot();

		let timer = iniWait;
		
		let t = 0;
		let er = 0;
		let ea = iniAngle;
		let ra = iniValue2;
		while(CanShotBullet(objEnemy))
		{
			if (!CanShotBullet(objParent)) { break; }

			let tmp = GetCurve_d(min(1, (t+1)/timer));
			er = 24 + tmp*iniSpeed;
			ea += (2-tmp*1)*iniValue;
			let pos = Rotate2D_XY(er*cos(ea)/3, er*sin(ea), ra);
			ObjMove_SetPosition(objEnemy, ObjMove_GetX(objParent)+pos[0], ObjMove_GetY(objParent)+pos[1]);
			shotAngle = atan2(pos[1], pos[0]);
			shotSpeed = ((pos[1])^2+(pos[0])^2)^0.5 / er;
			
			if (t < 30)
			{
				let tmp = (t+1)/30;
				SetHitodama2Size(objEnemy, tmp, 255);
				SetEnemyVisible(objEnemy, false);
			}
			else
			{
				SetEnemyVisible(objEnemy, true);
			}
			t++;
			waitObj(objEnemy, 1);
		}
		waitObj(objEnemy, 1);
		EraseEnemy(objEnemy);
	}
	
	// ショット
	task TShot()
	{
		let speed = [6, 4, 6][DifficultEx()];
		let timer = phaseExEnemy(16);
		let add_a = [-90, 90][iniValue > 0];
		let wt = phaseExEnemy(2);
		let way = [8, 1, 8][DifficultEx()];
		let graphic = BGW_FIRE_RED;
		let fwt = wt;
		
		let st = 0;
		let t = 0;
		
		timer -= fwt;
		waitObj(objEnemy, fwt);
		
		while(CanShotBullet(objEnemy) && t < timer)
		{
			let ba = GetAngleToPlayer(objEnemy);
			let ss = speed;
			ascent(i in 0 .. way)
			{
				let sa = ba + i*360/way;
				let objS = My_CreateShotA2(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), ss/2, sa, -ss/60/2, 0, graphic, 15);
				ObjMove_AddPatternA2(objS, 45, NO_CHANGE, NO_CHANGE, ss/120, 0, ss);
			}
			CallSound(sndShot5);
			t += wt;
			st++;
			waitObj(objEnemy, wt);
		}
	}
}


task S6_SetEnemyF03(iniX, iniY, iniSpeed, iniAngle, iniValue, iniWait)
{
	if (flgStopSetZako) { return; }
	
	let e_type = iniValue%2;
	let eSize = ENEMY_L;
	let eColor = EFF_RED;
	let emnImage = imgZakoFairyDark;
	let objFamiliers = [];
	
	let objEnemy = MakeEnemy(iniX, iniY+128, 300, eSize);
	SetEnemyDropItem_Extra(objEnemy, 30);
	DrawFairy(objEnemy, emnImage, FAIRY_LARGE);
	TAct();
	WaitForKilled(objEnemy);
	ZakoFinalize(objEnemy, eColor);
	
	task TAct()
	{
		TCheckDispINOut(objEnemy, 16);

		let timer = iniWait;
		FairyFadeIN_S06(objEnemy, timer);
		MoveWithBackS06(objEnemy, [iniX, iniY], timer);
		waitObj(objEnemy, timer-60);
		if (!CanShotBullet(objEnemy)) { return; }
		Enemy_SetPatternA2(objEnemy, 0, 0, iniAngle, iniSpeed/240, iniValue, iniSpeed);
		TShot();
	}
	
	// ショット
	task TShot()
	{
		let wt = 8;
		
		let t = 0;
		while(CanShotBullet(objEnemy))
		{
			let es = (1-GetCurve_d(min(1,t/8)))*3;
			let ea = Enemy_GetAngle(objEnemy)+180;
			S6_SetEnemyH02(ObjMove_GetX(objEnemy)+16*cos(ea), ObjMove_GetY(objEnemy)+16*sin(ea),
				es, ea, 0, phaseExEnemy(7)-wt*t/2);
			t++;
			waitObj(objEnemy, wt);
		}
	}
}

task S6_SetEnemyH02(iniX, iniY, iniSpeed, iniAngle, iniValue, iniWait)
{
	if (flgStopSetZako) { return; }
	
	let e_type = iniValue%2;
	let eSize = ENEMY_S;
	let eColor = EFF_RED;
	
	let objEnemy = MakeEnemy(iniX, iniY, 40, eSize);
	SetEnemyDropItem_Extra(objEnemy, 3);
	DrawHitodama(objEnemy, eColor);
	TAct();
	WaitForKilled(objEnemy);
	/*
	if (CheckKillType(objEnemy) == 2)
	{
		// 撃ち返し
		TUchikaeshi();
	}
	*/
	ZakoFinalize(objEnemy, eColor);
	
	task TAct()
	{
		let timer = iniWait;
		TCheckDispINOut(objEnemy, 32);
		Enemy_SetPatternA2(objEnemy, 0, iniSpeed, iniAngle, -iniSpeed/timer, 0, 0);
		TShot(timer);
	}
	
	// ショット
	task TShot(delay)
	{
		let speed = 2.5;
		let count = 12;
		let graphic = BGW_FIRE_RED;
		let stimer = [600, 60, 600][DifficultEx()];
		
		// えへくと
		waitObj(objEnemy, delay-60);
		if (!CanShotBullet(objEnemy)) { return; }
		RingWarning(speed*64);
		waitObj(objEnemy, 60);
		if (!CanShotBullet(objEnemy)) { return; }
		
		let bx = ObjMove_GetX(objEnemy);
		let by = ObjMove_GetY(objEnemy);
		let ba = iniAngle;
		
		// 先に消す
		EraseEnemy(objEnemy);
		CallSound(sndShot2);
		ascent(j in 0 .. count)
		{
			let sa = ba + j*360/count;
			let ss = speed;
			let fs = 8;
			let objS = My_CreateShotA1(bx, by, 0, sa, graphic, 10);
			ObjMove_AddPatternA2(objS, 0, fs, NO_CHANGE, 0, 360/60, fs);
			ObjMove_AddPatternA2(objS, 60, 0, NO_CHANGE, ss/45, 0, ss);
			ObjShot_SetDeleteFrame(objS, stimer);
		}
	}
	
	task RingWarning(size)
	{
		ascent(i in 0 .. 1)
		{
			if (!CanShotBullet(objEnemy)) { break; }
			_RingWarning(size, 60);
			wait(3);
		}
	}
	task _RingWarning(size, timer)
	{
		let objEffect = RingEffect_INI(GetShotRenderPriorityI-2);
		ObjRender_SetAlpha(objEffect, 255);
		ObjRender_SetColor(objEffect, 255, 64, 64);
		ObjRender_SetBlendType(objEffect, BLEND_ADD_ARGB);
		
		ascent(t in 0 .. timer)
		{
			let tmp = GetCurve_d((t+1)/timer);
			RingEffect_SetScareToRadius(objEffect, size*tmp);
			if (!Obj_IsDeleted(objEnemy)) { ObjRender_SetPosition(objEffect, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 0); }
			yield;
		}
		descent(t in 0 .. 15)
		{
			ObjRender_SetAlpha(objEffect, (t+1)/15*255);
			yield;
		}
		Obj_Delete(objEffect);
	}


	task TUchikaeshi()
	{
		let speed = 1;
		let count = 3;
		let bx = ObjMove_GetX(objEnemy);
		let by = ObjMove_GetY(objEnemy);
//		let ba = GetAngleToPlayer(objEnemy);
		let ba = iniAngle;
		let way = 3;
		let way_angle = 15;
		let graphic = ADD_BGW_FIRE_PURPLE;
		
		CallSound(sndShot5);
		ascent(j in 0 .. count)
		{
			ascent(i in 0 .. 2)
			{
				let sa = ba + (i-0.5)*180;
				let ss = speed * (1+j/5);
				My_CreateShotA2(bx, by, -ss/2, sa, ss/15, ss, graphic, 10);
			}
			yield;
		}
	}
}


task S6_SetEnemyH03(iniX, iniY, iniSpeed, iniAngle, iniValue, iniValue2, iniValue3, iniWait)
{
	if (flgStopSetZako) { return; }
	
	let e_type = iniValue%2;
	let eSize = ENEMY_S;
	let eColor = EFF_ORANGE;
	let baseAngle = 0;
	
	let objEnemy = MakeEnemy(-32, -32, 40, eSize);
	SetEnemyDropItem_Extra(objEnemy, 5);
	DrawHitodama2(objEnemy, eColor);
	TAct();
	WaitForKilled(objEnemy);
	ZakoFinalize(objEnemy, eColor);
	
	task TAct()
	{
		TMove();
	}
	
	task TMove()
	{
		let bx = CenX;
		let by = MinY;
		let r = 0;
		let a = iniAngle + MoveWithBackS06_GetAngle(iniX, iniY);
		let add_a = iniValue;
		let r_max = iniValue2;
		let timer = iniWait;
		
		let t = 0;
		while(CanShotBullet(objEnemy) && t < timer)
		{
			if (t < timer/3*2) {
				let tmp = GetCurve_d((t+1)/(timer/3*2));
				r = r_max * tmp;
			} else {
				let tmp = GetCurve_d((timer-t)/(timer/3));
				r = r_max * tmp;
			}
			if (t < timer/2) {
				let tmp = GetCurve_d((t+1)/(timer/2));
				SetEnemyVisible(objEnemy, false);
				SetHitodama2Size(objEnemy, tmp, tmp*128);
			} else {
				SetEnemyVisible(objEnemy, true);
				SetHitodama2Size(objEnemy, 1, 255);
			}
			a += add_a;
			let tmpb = GetCurve_d(t/(timer-1));
			let ex = bx*(0.75-tmpb*0.75) + iniX*(tmpb*0.75+0.25);
			let ey = by*(0.75-tmpb*0.75) + iniY*(tmpb*0.75+0.25);
			ObjMove_SetPosition(objEnemy, ex+r*cos(a), ey+r*sin(a));
			baseAngle = a;
			waitObj(objEnemy, 1);
			t++;
		}
		TCheckDispINOut(objEnemy, 32);
		TShot();
		bx = iniX;
		by = iniY;
		t = 0;
		while(CanShotBullet(objEnemy))
		{
			let tmp = t/120;
			if (tmp > 1) { tmp = (tmp-1)/2 + 1; }
			a += add_a*(1+tmp);
			r = tmp*r_max;
			ObjMove_SetPosition(objEnemy, bx+r*cos(a), by+r*sin(a));
			by -= tmp*3;
			baseAngle = a;
			waitObj(objEnemy, 1);
			t++;
		}
	}
	
	// ショット
	task TShot()
	{
		let wt = [15, 24, 15][DifficultEx()];
		
		let st = 0;
		local
		{
			if (!CanShotBullet(objEnemy)) { return; }
			let sx = ObjMove_GetX(objEnemy);
			let sy = ObjMove_GetY(objEnemy);
			let sa = baseAngle;
			let ss = [1, 1, 1][DifficultEx()];
			let way = [7, 0, 7][DifficultEx()];
			CreateShotCircleA2(sx, sy, ss+3, sa, -3/15, ss, BGB_BALL_S_ORANGE, 15, way, 0);
			if (way > 0) { CallSound(sndShot2); }
		}
		waitObj(objEnemy, wt*2 + trunc(wt*iniValue3));
		while(CanShotBullet(objEnemy))
		{
			let sx = ObjMove_GetX(objEnemy);
			let sy = ObjMove_GetY(objEnemy);
			let sa = 90 + 15*cos(baseAngle);
			let ss = [1.5, 1, 1.5][DifficultEx()] * (1+st/5);
			CreateShotWayA2(sx, sy, ss+3, sa, -3/15, ss, BGB_SCALE_ORANGE, 15, 1, 1, 0);
			CallSound(sndShot2);
			st++;
			waitObj(objEnemy, wt);
		}
	}


	task TUchikaeshi()
	{
		let speed = 1;
		let way = 1;
		let bx = ObjMove_GetX(objEnemy);
		let by = ObjMove_GetY(objEnemy);
		let ba = GetAngleToPlayer(objEnemy);
		let graphic = BGW_FIRE_PURPLE;
		
		if (!CheckInPlayer(bx, by, 48))
		{
			CallSound(sndShot5);
			CreateShotCircleA2(bx, by, speed+2, ba, -2/15, speed, graphic, 15, way, 0);
		}
	}
}
