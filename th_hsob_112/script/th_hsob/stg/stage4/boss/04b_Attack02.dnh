#東方弾幕風[Single]
#ScriptVersion[3]
#Title["上人通常2（ボス）"]
#Text["上人通常2（ボス）"]
#Background[""]
#System["./../../../system/System.dnh"]

//---------------------------------------------------------------------

// 関数取り込み
#include"./../../../lib/lib_boss.dnh"
#include"./lib_Siran.dnh"

@Event {
	alternative(GetEventType())
	case(EV_REQUEST_LIFE)		{ SetScriptResult(4000);	}
	case(EV_REQUEST_TIMER)		{ SetScriptResult(45);		}
	BossEvent();
}

@Initialize {
	// アイテム数
	bossDropItem = 50;

	Boss_Init();	//初期設定
	objEnemy = CreateBoss(BOSS_ID_SIRAN);	//ボスセット
	SetSiranRosary();	// 数珠配置

	// チャプター開始
	ChapterStartBoss(GetBossID(objEnemy), 2, CHAPTER_BOSS);
	CheckLinkLife_Boss(objEnemy);
	Task_Main();
}

@MainLoop {
	yield;
}


// メインタスク
task Task_Main
{
	//数珠の画像を操作したい場合は、GetBossImageID(objEnemyRosary)　で数珠の画像IDを取得する
	
	standBy(objEnemy, CenX, 160, 60);
	SetActionSiran(objEnemy, ACT_MOVE, 120);
	waitObj(objEnemy, 60);
	let D = 1;
	let way = [12, 14, 16, 18][Difficult];
	while(eAlive)
	{
		SetActionSiran(objEnemy, ACT_SHOT1, 60);
		TShotA(way, D, 2);
		waitObj(objEnemy, [300, 270, 240, 240][Difficult]);
		EnemyRandomMove(objEnemy, 160, 32);
		SetActionSiran(objEnemy, ACT_MOVE, 120);
		waitObj(objEnemy, 120);
		D = -D;
	}
}

task TShotA(way, D, wt){
	let ang = rand(0, 360);
	let ID = [];
	ascent(i in 0 .. way){
		ID = ID ~ [i];
	}
	ascent(i in 0 .. way){
		if(!eAlive){return;}
		let j = trunc(rand(0, length(ID)*999)%length(ID));
		SetFamilier01(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 0, ang-(360*ID[j]/way-1.37*wt*i)*D, ID[j]%2, 1.37, 150-wt*i, D);
		wait(wt);
		ID = erase(ID, j);
	}
}

// 数珠オプション
task SetFamilier01(iniX, iniY, iniSpeed, iniAngle, iniValue, ang_spd, Delay, Dirc)
{
	iniValue %= 2;
	let eSize = ENEMY_M;
	let eColor = EFF_WHITE;
	let baseAngle = iniAngle;

	
	let objFamilier = MakeEnemyFamilier(iniX, iniY, 55, eSize);
	CheckLinkLife_Familier(objEnemy, objFamilier, 0.8);	// ボスと体力連動
	SetEnemyVisible(objFamilier, false);
	if(iniValue){
		eColor = EFF_PURPLE;
	}
//	DrawOnmyou( objFamilier, eColor );
	DrawRosaryFamilier( objFamilier, eColor );
	TAct();
	WaitForKilledFamilier(objFamilier, 24, 4);
	ZakoFinalize(objFamilier, eColor);
	
	task TAct()
	{
		TMove;
	}
	
	task TMove(){
		let R = 105;
		let time = 360;
//		let wt = [15, 14, 14, 12][Difficult];
//		let wt_rate = [0.9953, 0.9949, 0.9943, 0.9941][Difficult];
		let wt = [8, 7.5, 6, 6][Difficult];
		let wt_rate = [0.9984, 0.9983, 0.9986, 0.9981][Difficult];
		let ang = iniAngle;
		let ang2 = 15*Dirc;
		let ang2_arc = -45*Dirc;
		let objImgID = Obj_GetValueD(objFamilier, "IMAGE_ID_ALL", []);
		let ini_spd = [1.0, 1.2, 1.35, 1.5][Difficult];
		let fin_spd = [2.7, 3.2, 4.0, 4.8][Difficult];
		let way = 1;
		let grap = [BGW_FUGU_WHITE, BGW_FUGU_PURPLE][iniValue];
		let grap2 = [ADD_BGB_BALL_BS_WHITE, ADD_BGB_BALL_BS_PURPLE][iniValue];

		let iniTime = trunc(Delay*2/3);
		ascent(t in 1 .. iniTime+1){
			if(!CanShotBullet(objFamilier) || !eAlive){break;}
			let rate = sin(90*t/iniTime);
			let r = R*rate*1.8;
			Render(objImgID, rate*1.5, 85*t/iniTime);
			ObjMove_SetPosition(objFamilier, iniX+r*cos(ang+ang2), iniY+r*sin(ang+ang2));
			ang += ang_spd*Dirc;
			yield;
		}
		let iniTime2 = Delay-iniTime;
		ascent(t in 1 .. iniTime2+1){
			if(!CanShotBullet(objFamilier) || !eAlive){break;}
			let rate = t/iniTime2;
			let rate2 = cos(90*rate);
			let r = R*(1.0+0.8*rate2);
			Render(objImgID, 1.5-0.5*rate, 85+170*rate);
			ObjMove_SetPosition(objFamilier, iniX+r*cos(ang+ang2), iniY+r*sin(ang+ang2));
			ang += ang_spd*Dirc;
			yield;
		}
		if(!iniValue){	SetEnemyVisible(objFamilier, true);}
		let c = 0;
		let CS_X = ObjMove_GetX(objFamilier);
		let CS_Y = ObjMove_GetY(objFamilier);
		ascent(t in 1 .. time+1){
			if(!CanShotBullet(objFamilier) || !eAlive){break;}
			let r = t;
			c++;
			if(c >= wt){
				CallSound(sndShot2);
				let rate = (c-wt);
				ang += ang_spd*(1-rate)*Dirc;
				let x = (R+r*0.30)*cos(ang);
				let y = (R-r*0.60)*sin(ang);
				let Pos = Rotate2D_XY(x, y, ang2+ang2_arc*t/time);
				ObjMove_SetPosition(objFamilier, iniX+Pos[0], iniY+Pos[1]);
				c -= wt;
				let s = ini_spd+(fin_spd-ini_spd)*t/time;
				let a = ang+(ang2+ang2_arc*t/time);
				CreateShotWay(ObjMove_GetX(objFamilier)+rate*s*cos(a), ObjMove_GetY(objFamilier)+rate*s*sin(a),
					s, a, grap, 5, way, 45, 10);
				ang -= ang_spd*(1-rate)*Dirc;

			}
			wt = wt*(wt_rate);
			let x = (R+r*0.30)*cos(ang);
			let y = (R-r*0.60)*sin(ang);
			let Pos = Rotate2D_XY(x, y, ang2+ang2_arc*t/time);
			ObjMove_SetPosition(objFamilier, iniX+Pos[0], iniY+Pos[1]);
			ang += ang_spd*Dirc;
			CS_X = ObjMove_GetX(objFamilier);
			CS_Y = ObjMove_GetY(objFamilier);
			yield;
		}
		TCounterShot();
		ZakoFinalize(objFamilier, eColor);
//		TCheckDispINOut(objFamilier, 32);

		task TCounterShot(){
			if(!CanShotBullet(objEnemy)){return;}
			if(Difficult <= D_NORM && !CanShotBullet(objFamilier)){return;}
			if(Difficult <= D_EASY){return;}
			let way = [0, 6, 7, 9][Difficult];
			let speed =	[1.8, 2.4, 3.0, 3.0][Difficult];
			let angle = atan2(GetPlayerY()-CS_Y, GetPlayerX()-CS_X);
			CallSound(sndShot3);
			ascent(iW in 0 .. way){
				ascent(iQ in 0 .. 3){
					let s = 1.0*speed*(1-0.03*iQ);
					let a = angle+360*(iW+0.5) /way+rand(0.75*iQ, -0.75*iQ);
					My_CreateShotA2(CS_X, CS_Y, 0, a, s/200, s, grap2, 10);
				}
			}
		}


		function Render(objImgID, scale, alpha){
			ascent(i in 0 .. length(objImgID)){
				ObjRender_SetScaleXYZ(objImgID[i], scale, scale, scale);
				ObjRender_SetAlpha(objImgID[i], alpha);
			}
		}
	}
}