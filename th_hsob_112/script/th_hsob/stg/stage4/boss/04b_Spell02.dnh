#東方弾幕風[Single]
#ScriptVersion[3]
#Title["上人スペカ2"]
#Text["E-N:無断転サエ「幻想風靡」　H:無断転サエ「無双風神」　L:無断転早苗「モーゼの奇跡」"]
#Background[""]
#System["./../../../system/System.dnh"]

//---------------------------------------------------------------------

// 関数取り込み
#include"./../../../lib/lib_boss.dnh"
#include"./lib_Siran.dnh"

@Event {
	alternative(GetEventType())
	case(EV_REQUEST_LIFE)		{ SetScriptResult(310);	}
	case(EV_REQUEST_TIMER)		{ SetScriptResult(50);		}
	BossEvent();
}

@Initialize {
	let SPELL_ID = 33;
	let SPELL_NAME = [5, 5, 6, 7][Difficult];


	//ダメージ透過率
	dIni_Shot = 10;
	// アイテム数
	bossDropItem = 150;

	Boss_Init();	//初期設定
	objEnemy = CreateBoss(BOSS_ID_SIRAN);	//ボスセット
	SetSiranRosary();	// 数珠配置

	//スペカデータ・セット
	SetSpellCardData(GetSpellCardID(SPELL_ID), SPELL_NAME, 
	GetCurrentScriptDirectory()~"04a_Background.dnh",
	GetBossTexture(objEnemy, I_CUTIN), 0.6, CUTMOTION_NORMAL);

	// チャプター開始
	ChapterStartBoss(GetBossID(objEnemy), SPELL_NAME, CHAPTER_SPELL);

	Task_Main();
}

@MainLoop {
	yield;
}

// メインタスク
task Task_Main
{
	//数珠の画像を操作したい場合は、GetBossImageID(objEnemyRosary)　で数珠の画像IDを取得する
	if(Difficult <= D_HARD){
		standBy(objEnemy, CenX, 160, 150);
	}else{
		standBy(objEnemy, CenX, 160, 270);
	}
	SetActionSiran(objEnemy, ACT_MOVE, 120);
	waitObj(objEnemy, 60);	// ちょっとだけ処理待ち
	CallSpellCard(true);	//スペカ起動
	
	SetActionSiran(objEnemy, ACT_SHOT2, 9999);
	let D = 1;
	waitObj(objEnemy, 60);
	BossCharge(objEnemy);
	if(Difficult <= D_HARD){
		SetFamilier01(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 6, 0);
	}else{
		let ang = rand(0, 360);
		TMoses();
		TShotB(5, 0, 120, ang, 1, 6);
		TShotB(5, 1, 90, ang+36, -1, 6);
		waitObj(objEnemy, 150);
		CallSound(sndFlare);
		DisplayShake(60, 10);
	}
}

task TShotB(way, type, R, ang, D, wt){
	let ID = [];
	ascent(i in 0 .. way){
		ID = ID ~ [i];
	}
	ascent(i in 0 .. way){
		let j = trunc(rand(0, length(ID)*999)%length(ID));
		SetFamilier02(ang-(-360*ID[j]/way-1.17*wt*i)*D, type%2, ID[j], R, 1.17, 150-wt*i, D, 36, 36*way);
		waitObj(objEnemy, wt);
		ID = erase(ID, j);
	}
}
// 数珠オプション
task SetFamilier02(iniAngle, iniValue, iniValue2, R, ang_spd, Delay, Dirc, interval, interval2)
{
	iniValue %= 2;
	let eSize = ENEMY_M;
	let eColor = EFF_RED;
	let baseAngle = iniAngle;

	
	let objFamilier = MakeEnemyFamilier(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 55, eSize);
	CheckLinkLife_Familier(objEnemy, objFamilier, 0.8);	// ボスと体力連動
	SetEnemyVisible(objFamilier, false);
	if(iniValue){
		eColor = EFF_BLUE;
	}
//	DrawOnmyou( objFamilier, eColor );
	DrawRosaryFamilier( objFamilier, eColor );
	TAct();
	WaitForKilledFamilier(objFamilier, 24, 4);
	ZakoFinalize(objFamilier, eColor);
	
	task TAct()
	{
		TMove;
	}
	
	task TMove(){
		let time = 300;
		let wt = 10;
		let wt_rate = 0.9955;
		let ang = iniAngle;
		let objImgID = Obj_GetValueD(objFamilier, "IMAGE_ID_ALL", []);
		let ini_spd = 3.0;
		let fin_spd = 1.2;
		let way = 1;
		let yRate = 0.4;
		let grap = [BGW_FUGU_RED, BGW_FUGU_BLUE][iniValue];
		let grapL = [ADD_BGW_BALL_M_RED, ADD_BGW_BALL_M_BLUE][iniValue];

		let iniTime = trunc(Delay*2/3);
		ascent(t in 1 .. iniTime+1){
			let rate = sin(90*t/iniTime);
			let rate2 = 1-(1-yRate)*(t/Delay);
			let r = R*rate*2.5;
			Render(objImgID, rate*1.5, 85*t/iniTime);
			ObjMove_SetPosition(objFamilier, ObjMove_GetX(objEnemy)+r*cos(ang), ObjMove_GetY(objEnemy)+r*rate2*sin(ang));
			ang += ang_spd*Dirc;
			yield;
		}
		let iniTime2 = Delay-iniTime;
		ascent(t in 1 .. iniTime2+1){
			let rate = t/iniTime2;
			let rate2 = 1-(1-yRate)*((t+iniTime)/Delay);
			let rate3 = cos(90*rate);
			let r = R*(1.0+1.5*rate3);
			Render(objImgID, 1.5-0.5*rate, 85+170*rate);
			ObjMove_SetPosition(objFamilier, ObjMove_GetX(objEnemy)+r*cos(ang), ObjMove_GetY(objEnemy)+r*rate2*sin(ang));
			ang += ang_spd*Dirc;
			yield;
		}
//		if(!iniValue){	SetEnemyVisible(objFamilier, true);}
		let t = 0;
		TShotFamilier(iniValue2);
		while(CanShotBullet(objFamilier)){
			wt = wt*(wt_rate);
			let x = R*cos(ang);
			let y = R*yRate*sin(ang);
			let ang2 = 15*sin(t*1.2*Dirc);

			let Pos = Rotate2D_XY(x, y, ang2);
			ObjMove_SetPosition(objFamilier, ObjMove_GetX(objEnemy)+Pos[0], ObjMove_GetY(objEnemy)+Pos[1]);
			ang += ang_spd*Dirc;
			t++;
			yield;
		}
		ZakoFinalize(objFamilier, eColor);
//		TCheckDispINOut(objFamilier, 32);

		task TShotFamilier(iniValue2){
			waitObj(objEnemy, 120+iniValue2*interval);
			let c = iniValue2*interval;
			while(CanShotBullet(objFamilier)){
				let quant = min(8+trunc(c/(interval*3)), 16);
				if(iniValue == 0){
					Shot(quant, ObjMove_GetX(objFamilier), ObjMove_GetY(objFamilier), 6, GetAngleToPlayer(objFamilier), grap, grapL);
				}else{
					Shot(quant, ObjMove_GetX(objFamilier), ObjMove_GetY(objFamilier), 6, 126, grap, grapL);
					Shot(quant, ObjMove_GetX(objFamilier), ObjMove_GetY(objFamilier), 6, 90, grap, grapL);
					Shot(quant, ObjMove_GetX(objFamilier), ObjMove_GetY(objFamilier), 6, 54, grap, grapL);
				}
				c += interval2;
				waitObj(objFamilier, interval2);
			}
			
			task Shot(quant, x, y, spd, ang, grap, grapL){
//				let objL = My_CreateLooseLaserA1(x, y, 30, ang, 1200, 3, grapL, 0);
//				ObjShot_SetIntersectionEnable(objL, false);
				loop(quant){
					if(!CanShotBullet(objFamilier)){break;}
					CallSound(sndShot1);
					CallSound(sndShot2);
					My_CreateShotA2(x, y, 0, ang, spd/90, spd, grap, 5);
					wait(3);
				}
			}
		}

		function Render(objImgID, scale, alpha){
			ascent(i in 0 .. length(objImgID)){
				ObjRender_SetScaleXYZ(objImgID[i], scale, scale, scale);
				ObjRender_SetAlpha(objImgID[i], alpha);
			}
		}
	}
}

//モーゼの奇跡
task TMoses{
	let time = 240;
	let spd = 2;
	let wt = 16;
	ascent(i in 0 .. 4){
		let L11 = -64+64*(i+0.25);
		let L12 = 48+12*(i+0.25);
		let CL1 = 64*(i+0.25);
		Moses(GetClipMinX+L11, GetClipMinX+L11-L12, spd, wt, time, CL1);
		let L21 = -64+64*(i+0.75);
		let L22 = 48+12*(i+0.75);
		let CL2 = 64*(i+0.75);
		Moses(GetClipMaxX-L21, GetClipMaxX-L21+L22, spd, wt, time, CL2);
	}
	waitObj(objEnemy, wt/2);
	ascent(i in 0 .. 4){
		let L11 = -64+64*(i+0.75);
		let L12 = 48+12*(i+0.75);
		let CL1 = 64*(i+0.75);
		Moses(GetClipMinX+L11, GetClipMinX+L11-L12, spd, wt, time-wt/2, CL1);
		let L21 = -64+64*(i+0.25);
		let L22 = 48+12*(i+0.25);
		let CL2 = 64*(i+0.25);
		Moses(GetClipMaxX-L21, GetClipMaxX-L21+L22, spd, wt, time-wt/2, CL2);
	}
	task Moses(x, x2, spd, wt,  time, color){
		while(time > 0){
			Shot(x, x2, spd, time, color);
			time -= wt;
			wait(wt);
		}
		time = -time;
		let L = 0;
		while(CanShotBullet(objEnemy)){
			let objS = My_CreateShotA1(x2+L*sin(time), GetClipMinY()-32, spd, 90, ADD_BGW_LIGHT_L_BLUE, 5);
			ObjRender_SetColor(objS, color, color, 255);
			L = min(L+80*wt/720, 80);
			time += wt;
			wait(wt);
		}
	}
	
	task Shot(x, x2, spd, time, color){
		let objS = My_CreateShotA1(x, GetClipMinY()-32, spd, 90, ADD_BGW_LIGHT_L_BLUE, 5);
		let time2 = time-90;
		if(time2 >= 0){
			time = 90
		}else{
			time2 = 0;
		}
		loop(time2){
			yield;
		}
		descent(t in 1 .. time+1){
			if(!eAlive){break;}
			ObjMove_SetX(objS, x+(x2-x)*(cos(90*t/90)));
			let cl = 255+(color-255)*(cos(90*t/90));
			ObjRender_SetColor(objS, cl, cl, 255);
			yield;
		}
	}
}

// 幻想風靡or無双風神
task SetFamilier01(x, y, spd, ang)
{
	let eSize = ENEMY_M;
	let eColor = EFF_PURPLE;
	let baseAngle = ang;
//	let MaxBulletSpeed = [2, 2.4, 3, 4][Difficult];
//	let BulletInterval = [80, 65, 50, 45][Difficult];
	let MaxBulletSpeed = [2.0, 2.4, 3.2, 8.0][Difficult];
	let BulletInterval = [80, 60, 50, 1][Difficult];

	
	let objFamilier = MakeEnemyFamilier(x, y, 1000, eSize);
	CheckLinkLife_Familier(objEnemy, objFamilier, 0);	// ボスと体力連動
	SetEnemyVisible(objFamilier, false);
	DrawBirdOption2(objFamilier, eColor, ang, 1, 1.00, false);
	TAct();
	WaitForKilledFamilier(objFamilier, 8, 0);
	ZakoFinalize(objFamilier, eColor);
	
	task TAct()
	{
		TMove;
	}
	
	task TMove(){
		let ty = GetClipMinY()+240;
		let tx = GetClipMinX()-128;
		let t = 120;
		let vx = 8;
		let vy = (ty-ObjMove_GetY(objFamilier))/t;
		let ax = 2*((tx-ObjMove_GetX(objFamilier))/(t^2)-vx/t);
		let l_Interval = BulletInterval;
		ascent(i in 0 .. t){
			ObjMove_SetSpeed(objFamilier, (vy^2+vx^2)^0.5);
			ObjMove_SetAngle(objFamilier, atan2(vy, vx));
			vx += ax;
			yield;
		}
		let MaxSpeed = 60;
		ObjMove_SetSpeed(objFamilier, 15);
		let l = 0;
		loop{
			if(!CheckDispX_LineIN(objFamilier, 128)){
				CallSound(sndShot1);
				let ang = ObjMove_GetAngle(objFamilier);
				let d = 0;
				let tx = GetCenterX;
				if(ObjMove_GetX(objFamilier) <= GetClipMinX()){
					d = (ObjMove_GetX(objFamilier)-(GetClipMinX()-128))/cos(ang);
					tx = GetClipMaxX()+128;
				}
				else if(ObjMove_GetX(objFamilier) >= GetClipMaxX()){
					d = (ObjMove_GetX(objFamilier)-(GetClipMaxX()+128))/cos(ang);
					tx = GetClipMinX()-128;
				}
				let ty = GetClipMinY()+30+rand(0, 210);
				ObjMove_SetPosition(objFamilier, ObjMove_GetX(objFamilier)-d*cos(ang), ObjMove_GetY(objFamilier)-d*sin(ang));
				ang = atan2(ty-ObjMove_GetY(objFamilier), tx-ObjMove_GetX(objFamilier));
				ObjMove_SetPosition(objFamilier, ObjMove_GetX(objFamilier)+d*cos(ang), ObjMove_GetY(objFamilier)+d*sin(ang));
				ObjMove_SetAngle(objFamilier, ang);
				let s = ObjMove_GetSpeed(objFamilier);
				ObjMove_SetSpeed(objFamilier, s+(MaxSpeed-s)*0.03);
				Laser(ObjMove_GetX(objFamilier), ObjMove_GetY(objFamilier), ObjMove_GetSpeed(objFamilier), ObjMove_GetAngle(objFamilier));
//				My_CreateLooseLaserA1(ObjMove_GetX(objFamilier), ObjMove_GetY(objFamilier), ObjMove_GetSpeed(objFamilier), ObjMove_GetAngle(objFamilier)
//				, ObjMove_GetSpeed(objFamilier)*30, 20, ADD_BGW_BALL_M_PURPLE, 0);
				MaxSpeed += 0.1;
			}
			l += ObjMove_GetSpeed(objFamilier);
			let D = cos(ObjMove_GetAngle(objFamilier));
			D = absolute(D)/D;
			while(l >= l_Interval){
				CallSound(sndShot2);
				let bx = ObjMove_GetX(objFamilier)-l*cos(ObjMove_GetAngle(objFamilier));
				let by = ObjMove_GetY(objFamilier)-l*sin(ObjMove_GetAngle(objFamilier));
				let ba = 270 - rand(5, 20)*D;
				let bs = rand(2,4);
				let vx = bs*cos(ba);
				My_CreateShotB2(bx, by, vx, bs*sin(ba), 0, 0.05, vx, (MaxBulletSpeed^2-vx^2)^0.5, BGW_RICE_S_PURPLE, 5);
				l -= l_Interval;
			}
			yield;
		}

		task Laser(x, y, spd, ang){
			let objL = My_CreateLooseLaserA1(x, y, spd, ang, spd*30, 20, ADD_BGW_BALL_M_PURPLE, 0);
			ObjRender_SetAlpha(objL, 127);
			ObjShot_SetAutoDelete(objL, false);
			wait(30);
			ObjShot_SetAutoDelete(objL, true);
		}

		EraseEnemy(objFamilier);
//		ZakoFinalizeEx(objFamilier, eColor, false);
//		TCheckDispINOut(objFamilier, 32);
	}
}