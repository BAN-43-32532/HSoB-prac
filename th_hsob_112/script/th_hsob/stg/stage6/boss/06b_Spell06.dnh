#東方弾幕風[Single]
#ScriptVersion[3]
#Title["ﾎﾛｳﾁｬﾝスペカ6"]
#Text["ﾎﾛｳﾁｬﾝスペカ6"]
#Background[""]
#System["./../../../system/System.dnh"]

//---------------------------------------------------------------------

// 関数取り込み
#include"./../../../lib/lib_boss.dnh"
#include"./lib_Horou.dnh"

let objSubEnemies = [];
let BOSS_HAKKYOU = false;
let BOSS_CT = 0;

@Event {
	alternative(GetEventType())
	case(EV_REQUEST_LIFE)		{ SetScriptResult(777);	}
	case(EV_REQUEST_TIMER)		{ SetScriptResult(77);	}
	case(EV_REQUEST_IS_DURABLE_SPELL)	{ SetScriptResult(true);	}
	BossEvent();
}

@Initialize {
	let SPELL_ID = 76;
	let SPELL_NAME = [15, 15, 16, 16][Difficult];

	// アイテム数
	bossDropItem = 0;
	//ダメージ透過率
	dIni_Shot = 100;
	// 停止無効
	bossResistTime = 1;

	Boss_Init();	//初期設定
	objEnemy = CreateBoss(BOSS_ID_HOROU);	//ボスセット

	//スペカデータ・セット
	SetSpellCardData(GetSpellCardID(SPELL_ID), SPELL_NAME, 
			GetCurrentScriptDirectory()~"06b_Background.dnh",
			GetBossTexture(objEnemy, I_CUTIN), 0.65, CUTMOTION_NORMAL);

	// チャプター開始
	ChapterStartBoss(GetBossID(objEnemy), SPELL_NAME, CHAPTER_SPELL);

	InitHorou();

	Task_Main();
	
	SetBackGroundBase( objEnemy, 6 );
}

@MainLoop {
	yield;
}

// 蒸着！
task A02_OpeningMotion(timer, delay)
{
	SetDummyOpt(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), delay);
	wait(timer);
	CreateHorouTablet(CenX, CenY-112);
	
	task CreateHorouTablet(x, y)
	{
		objHorouTablet = MakeEnemyFamilier(x, y, 999999, ENEMY_SS);
		SetEnemyVisible(objHorouTablet, false);
		DrawHorouTablet(objHorouTablet);
		CheckTabletAlive(objHorouTablet);
	}

	task SetDummyOpt(x, y, timer)
	{
		let objDummy = MakeEnemyFamilier(x, y, 99999, ENEMY_S);
		let objImg = ObjPrim_Create(OBJ_PRIMITIVE_2D);
		Obj_SetValue(objDummy, "IMAGE_ID", objImg);	//IDを記録
		ObjRender_SetPosition(objImg, ObjMove_GetX(objDummy), ObjMove_GetY(objDummy), 0 );
		
		// オプション配置
		SetEffect06_Opt(objDummy, 0, 2);
		objHorouEffect = SetEffect06(objDummy);
		
		let t = 0;
		while(!Obj_IsDeleted(objDummy) && t < timer+90)
		{
			if (t < timer+60)
			{
				ObjMove_SetPosition(objDummy, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy) );
				ObjRender_SetPosition(objImg, ObjMove_GetX(objDummy), ObjMove_GetY(objDummy), 0 );
			}
			t++;
			yield;
		}
		Obj_Delete(objDummy);
		Obj_Delete(objImg);
	}
}


// メインタスク
task Task_Main
{
	if (GetHorouReigekiSynchroFlag(WEAPON_GREEN))
	{
		A02_OpeningMotion(240, 120);
		StandBy_TimeStop2(objEnemy, CenX, CenY-112, 240);
		waitObj(objEnemy, 60);
		HorouReigekiSynchro(WEAPON_GREEN, 150);
	}
	else
	{
		A02_OpeningMotion(120, 0);
		StandBy_TimeStop2(objEnemy, CenX, CenY-112, 120);
		waitObj(objEnemy, 60);
	}
	
	MoveTo(objEnemy, CenX+128, MinY-192, 90);
	SetAction(objEnemy, ACT_MOVE, 90);
	waitObj(objEnemy, 60);
	
	CallSpellCard(true);	//スペカ起動
	waitObj(objEnemy, 60);

	SetEnemyVisible(objEnemy, false);
	BossEffect_DisableMagicCircle(objEnemy);
//	Obj_SetVisible(GetBossImageID(objEnemy), false);
	ObjMove_SetPosition(objEnemy, CenX, MinY-64);
	
	
	let PAT = [];
	alternative(Difficult)
	case(D_EASY)
	{
		alternative(GetPlayerType())
		case(PLAYER_REIMU_A)  { PAT = [0, 7]; }
		case(PLAYER_MARISA_A) { PAT = [1, 9]; }
		case(PLAYER_SAKUYA_A) { PAT = [2, 6]; }
		case(PLAYER_KAGUYA_A) { PAT = [3, 4]; }
	}
	case(D_NORM)
	{
		alternative(GetPlayerType())
		case(PLAYER_REIMU_A)  { PAT = [0, 1, 9]; }
		case(PLAYER_MARISA_A) { PAT = [1, 2, 6]; }
		case(PLAYER_SAKUYA_A) { PAT = [2, 3, 4]; }
		case(PLAYER_KAGUYA_A) { PAT = [3, 0, 7]; }
	}
	case(D_HARD)
	{
		alternative(GetPlayerType())
		case(PLAYER_REIMU_A)  { PAT = [0, 1, 9, 4]; }
		case(PLAYER_MARISA_A) { PAT = [1, 2, 6, 7]; }
		case(PLAYER_SAKUYA_A) { PAT = [2, 3, 4, 9]; }
		case(PLAYER_KAGUYA_A) { PAT = [3, 0, 7, 6]; }
	}
	case(D_LUNA)
	{
		alternative(GetPlayerType())
		case(PLAYER_REIMU_A)  { PAT = [0, 1, 9, 5, 4, 8]; }
		case(PLAYER_MARISA_A) { PAT = [1, 2, 6, 8, 7, 5]; }
		case(PLAYER_SAKUYA_A) { PAT = [2, 3, 4, 5, 9, 8]; }
		case(PLAYER_KAGUYA_A) { PAT = [3, 0, 7, 8, 6, 5]; }
	}

	ascent(i in 0 .. length(PAT))
	{
		if (!eAlive) { return; }
		PATTERN_SET(PAT[i]);
		while(ObjEnemyBossScene_GetInfo(objScene, INFO_TIMER) <= 5) { yield; }	// 終了間際の時は宣言しない
	}
	if (!eAlive) { return; }
	ObjEnemy_SetLife(objEnemy, 0);
}

// 各パターン
function PATTERN_SET(pattern)
{
	// ダミー
	let objSubEnemy = MakeEnemy(CenX, CenY, 1, ENEMY_S);
	// りせっとさん
	objSubEnemies = [];
	BOSS_HAKKYOU = false;

	alternative(pattern)
	case(0)
	{
		// らんらん
		BOSS_CT = 1;
		SetEnemyBoss01(CenX, CenY-48, 0);
	}
	case(1)
	{
		// ちぃ
		BOSS_CT = 1;
		SetEnemyBoss01(CenX, CenY-48, 1);
	}
	case(2)
	{
		// ひかりこ
		BOSS_CT = 1;
		SetEnemyBoss01(CenX, CenY-48, 2);
	}
	case(3)
	{
		// 上人
		BOSS_CT = 1;
		SetEnemyBoss01(CenX, CenY-64, 3);
	}
	case(4)
	{
		// らんちぃ
		BOSS_CT = 2;
		SetEnemyBoss01(CenX-64, CenY-72, 0);
		SetEnemyBoss01(CenX+64, CenY-32, 1);
	}
	case(5)
	{
		// らんひか
		BOSS_CT = 2;
		SetEnemyBoss01(CenX+64, CenY-32, 0);
		SetEnemyBoss01(CenX-64, CenY-72, 2);
	}
	case(6)
	{
		// らん上
		BOSS_CT = 2;
		SetEnemyBoss01(CenX+64, CenY-78, 0);
		SetEnemyBoss01(CenX-64, CenY-78, 3);
	}
	case(7)
	{
		// ちぃひか
		BOSS_CT = 2;
		SetEnemyBoss01(CenX+64, CenY-32, 1);
		SetEnemyBoss01(CenX-64, CenY-72, 2);
	}
	case(8)
	{
		// ちぃ上
		BOSS_CT = 2;
		SetEnemyBoss01(CenX+64, CenY-48, 1);
		SetEnemyBoss01(CenX-64, CenY-72, 3);
	}
	case(9)
	{
		// ひか上
		BOSS_CT = 2;
		SetEnemyBoss01(CenX-64, CenY-78, 2);
		SetEnemyBoss01(CenX+64, CenY-78, 3);
	}
	
	// えへくと待ち
	CallSound(sndPower1);
	wait(60);
	// スペカ発動
	CallSpellCutin_S06(objSubEnemy, objSubEnemies);
	
	// 生存チェック
	while(eAlive)
	{
		let flg = true;
		ascent(i in 0 .. length(objSubEnemies))
		{
			if (CanShotBullet(objSubEnemies[i])) { flg = false; break; }
		}
		if (flg) { break; }
		yield;
	}
	Obj_Delete(objSubEnemy);
	
	if (eAlive)
	{
		// 弾消し
		DeleteShotAll_Delay(CenX, CenY);
	}
}


// ボス配置
task SetEnemyBoss01(iniX, iniY, iniType)
{
	let eLife = [1500, 1000][BOSS_CT > 1];
	let eSize = ENEMY_LL;
	let eColor = [EFF_RED, EFF_WHITE, EFF_BLUE, EFF_PURPLE][iniType];
	let eName = [BOSS_ID_RANRAN, BOSS_ID_CHII, BOSS_ID_HIKARIKO, BOSS_ID_SIRAN][iniType];
	let eSubName = "";
	if (eName == BOSS_ID_CHII) { eLife *= 0.75; }	// 打ち込みづらい
	if (eName == BOSS_ID_HIKARIKO || eName == BOSS_ID_SIRAN) { eLife *= 1.2; }	// 打ち込みやすい
	
	let objSubEnemy = MakeEnemy(iniX, iniY, eLife, eSize);
	objSubEnemies = objSubEnemies ~ [objSubEnemy];	// 配列に追加
	SetEnemyDropItem(objSubEnemy, [MY_ITEM_TIME_10], [MY_ITEM_TIME_3, 7]);	// アイテム排出セット
	
	Boss_SetIDtoObj(objSubEnemy, eName);
	Boss_AnimeTimer(objSubEnemy);
	BossAnime_Initialize(objSubEnemy);
	FamilierEffect_LifeCircle(objSubEnemy, 72);
	CheckLinkLife_Boss(objSubEnemy);	// 使い魔と体力連動
	TAct();
	WaitForKilledFamilier(objSubEnemy, 32, 16);
	ZakoFinalize(objSubEnemy, eColor);
	BOSS_HAKKYOU = true;	// 発狂フラグON
	
	task TAct()
	{
		// 登場えへくと
		EnterEffect();
		
		// 相方ボスIDを取得
		ascent(i in 0 .. length(objSubEnemies))
		{
			if (GetBossID(objSubEnemies[i]) != eName)
			{
				eSubName = GetBossID(objSubEnemies[i]);
			}
		}
		
		alternative(eName)
		case(BOSS_ID_RANRAN) { TAct_Ranran; }
		case(BOSS_ID_CHII) { TAct_Chii; }
		case(BOSS_ID_HIKARIKO) { TAct_Hikariko; }
		case(BOSS_ID_SIRAN) { TAct_Siran; }
	}
	
	// 登場えへくと
	function EnterEffect()
	{
		// 最初はかくす
		let objImg = GetBossImageID(objSubEnemy);
		SetEnemyVisible(objSubEnemy, false);
		Obj_SetVisible(objImg, false);

		// きらきら
		let tmp_c = GetEffectColorL(eColor);
		EffectConcentrationPoint(ObjMove_GetX(objHorouTablet), ObjMove_GetY(objHorouTablet), objSubEnemy, [tmp_c[0]/2+32,tmp_c[1]/2+32,tmp_c[2]/2+32], 15, 60);

		waitObj(objSubEnemy, 90);
		
		Obj_SetVisible(objImg, true);
		ascent(i in 0 .. 30)
		{
			let tmp = GetCurve_d((i+1)/30);
			ObjRender_SetScaleXYZ(objImg, tmp, 3-tmp*2, 1);
			yield;

		}
		SetEnemyVisible(objSubEnemy, true);
	}
	
	// 使い魔用キルチェック
	task CheckSubEnemyKilled(objSubEnemy, objFamilier)
	{
		while(CanShotBullet(objFamilier))
		{
			if (Obj_IsDeleted(objSubEnemy))
			{
				EraseEnemy(objFamilier);
				break;
			}
			yield;
		}
	}
	
// ----------------- らんらん ----------------- //
	task TAct_Ranran
	{
		#include"./../../stage1/boss/lib_Ranran.dnh"
		
		TShot;
		
		task TShot
		{
			let wt = [210, 180, 180, 180][Difficult];
			let min_wt = wt*0.5;
			
			let pat = [[3, 0], [2, 1]];
			let pat_count = 1;
			let move_range = GetClipWidth/2*0.75;
			let move_r = 64;
			
			// 各パターン用補正
			alternative(eSubName)
			case(BOSS_ID_CHII, BOSS_ID_HIKARIKO, BOSS_ID_SIRAN)
			{
				move_range *= 0.5;
				move_r *= 0.66;
				wt *= 0.88;
			}
			others
			{
				// 単体
				pat_count = 2;
				wt *= 0.75;
			}
			
			let t = 0;
			while(CanShotBullet(objSubEnemy))
			{
				if (BOSS_HAKKYOU) { pat_count = 2; }	// 発狂さん
				
				let angle = GetAngleToPlayer(objSubEnemy);
				RanranActSet(objSubEnemy, 60, 150+pat_count*30);
				CallSound(sndBoon);
				ascent(i in 0 .. pat_count)
				{
					if (!CanShotBullet(objSubEnemy)) { return; }
					SetFamilier01(ObjMove_GetX(objSubEnemy), ObjMove_GetY(objSubEnemy), 0, angle, pat[t%2][i]);
					waitObj(objSubEnemy, 30);
				}
				if (BOSS_HAKKYOU) { waitObj(objSubEnemy, wt/2); }	// 発狂さん
				else { waitObj(objSubEnemy, wt); }
				
				if (!CanShotBullet(objSubEnemy)) { return; }
				_EnemyRandomMove(objSubEnemy, iniX, iniY, move_range, 64, move_r/2, move_r, 0.75);
				waitObj(objSubEnemy, 60);
				if (t > 1) { wt = min_wt + (wt-min_wt)*0.75; }
				t++;
			}
		}

		// 筆ショット
		task SetFamilier01(iniX, iniY, iniSpeed, iniAngle, iniValue)
		{
			let timer = 60;
			let baseAngle = 0;
			let baseSpeed = 0;
			let iniMuki =  ([1, -1][iniValue%2]) * ([1, -1][trunc(iniValue/2)%2]);
			
			let eSize = ENEMY_SS;
			let eColor = EFF_RED;
			
			let objFamilier = MakeEnemyFamilier(iniX, iniY, 999999, eSize);
			SetEnemyVisible(objFamilier, false);
			DrawRanranOption(objFamilier);
			CheckSubEnemyKilled(objSubEnemy, objFamilier);	// 使い魔用キルチェック
			TAct();
			WaitForKilledFamilier(objFamilier, 0, 0);
			ZakoFinalize(objFamilier, eColor);
			
			task TAct()
			{
				TMove;
				TShot;
			}
			
			task TMove()
			{
				let mukiX = [1, -1][iniValue%2];
				let mukiY = [1, -1][trunc(iniValue/2)%2];
				
				let max_r = 192;
				let rotate_angle = -20 * mukiX * mukiY + iniAngle-90;
				let base_angle = 90 + 90*mukiX;
				let add_angle = 180*mukiX * mukiY;
				
				ascent(t in 0 .. timer+60)
				{
					if (Obj_IsDeleted(objFamilier) || Obj_IsDeleted(objSubEnemy)) { return; }
					let tmp = GetCurve_ad(max(0, (t+1-60)/timer));
					let r = (0.25+0.75*tmp) * max_r;
					let a = base_angle + add_angle*tmp;
					let pos = Rotate2D_XY(r*cos(a), r/3*sin(a), rotate_angle);
					let ex = ObjMove_GetX(objSubEnemy) + pos[0];
					let ey = ObjMove_GetY(objSubEnemy) + pos[1];
					ObjMove_SetPosition(objFamilier, ex, ey);
					baseAngle = atan2(pos[1], pos[0]);
					baseSpeed = ((pos[0])^2+(pos[1])^2)^0.5 / r;
					
					waitObj(objFamilier, 1);
				}
				if (Obj_IsDeleted(objFamilier)) { return; }
				if (eSubName == "")
				{
					TShot2();	// 単体時のみ発射、消える間際に自機狙い
				}
				EraseEnemy(objFamilier);
			}
			
			task TShot()
			{
				waitObj(objFamilier, 60);
				
				let shot_speed = [2, 2.5, 2.5, 3][Difficult];
				let graphic = BGW_SCALE_RED;
				let way = [3, 5, 5, 6][Difficult];
				let way_angle = [45, 30, 30, 24][Difficult];
				let wt = 1;

				// 各パターン用補正
				alternative(eSubName)
				case(BOSS_ID_CHII, BOSS_ID_HIKARIKO, BOSS_ID_SIRAN)
				{
					// 単体
					shot_speed *= 0.8;
				}
				others
				{
					// 単体
					shot_speed *= 1.2;
				}
				
				let st = 0;
				ascent(t in 0 .. timer)
				{
					if (Obj_IsDeleted(objFamilier) || Obj_IsDeleted(objSubEnemy)) { break; }
					if (t%wt == 0)
					{
						let tmp = t/timer;
						let st = trunc(t/wt);
						let to_sa = baseAngle + 120*iniMuki;
						let to_ss = shot_speed * baseSpeed;
						if (0) { RedRedShot(ObjMove_GetX(objFamilier), ObjMove_GetY(objFamilier), to_ss, to_sa, graphic, 15, 0, 0); }
						else { RedRedShot(ObjMove_GetX(objFamilier), ObjMove_GetY(objFamilier), to_ss, to_sa, graphic, 15, way, way_angle); }
						
						CallSound(sndShot2);
						st++;
					}
					waitObj(objFamilier, 1);
				}

				task RedRedShot(x, y, speed, angle, graphic, delay, way, way_angle)
				{
					let obj = My_CreateShotA1(x, y, 0, 90, ADD_BGW_BALL_S_RED, 15);
					wait(60);
					if (!Obj_IsDeleted(obj))
					{
						ascent(i in 0 .. way)
						{
							let sa = angle + (i-(way-1)/2)*way_angle;
							let to_obj = My_CreateShotA1(x, y, 0.2, sa, graphic, delay);
							ObjMove_AddPatternA2(to_obj, 60, NO_CHANGE, NO_CHANGE, speed/60, 0, speed);
							Obj_SetRenderPriorityI(to_obj, GetShotRenderPriorityI+1);
						}
						DeleteBulletEffect(obj);
					}
				}
			}
			
			task TShot2()
			{
				let shot_speed = [1, 1, 1, 1.5][Difficult];
				let base_angle = GetAngleToPlayer(objFamilier);
				let graphics = [ADD_BGW_BALL_M_RED, ADD_BGW_BALL_S_RED];
				let way = [8, 8, 8, 8][Difficult];
				let way2 = [5, 7, 7, 7][Difficult];
				let way3 = [1, 1, 2, 2][Difficult];
				
				ascent(j in 0 .. way3)
				{
					let tmp_way2 = way2-j*2;
					ascent(i in 0 .. tmp_way2)
					{
						let sa = base_angle + j*360/way/way3 + (i-(tmp_way2-1)/2)*3;
						let ss = shot_speed * (1 - j*0.25);
						CreateShotCircleA2(ObjMove_GetX(objFamilier), ObjMove_GetY(objFamilier),
							0, sa, ss/120, ss, graphics[j%2], 15, way, 0);
					}
				}
				CallSound(sndShot4);
			}
		}
	}

// ----------------- ちぃ ----------------- //
	task TAct_Chii
	{
		#include"./../../stage2/boss/lib_Chii.dnh"
		
		TShot;
		
		task TShot
		{
			let wt_rate = 1;
			let wt_rate2 = 1;
			let add_shot = false;
			
			// 各パターン用補正
			alternative(eSubName)
			case(BOSS_ID_RANRAN, BOSS_ID_HIKARIKO, BOSS_ID_SIRAN)
			{
			}
			others
			{
				// 単体
				wt_rate *= 0.75;
				wt_rate2 *= 0;
				add_shot = true;
			}
			
			let wt_rate_min = wt_rate/2;
			
			let muki = rand_dir();
			let t = 0;
			while(CanShotBullet(objSubEnemy))
			{
				CallSound(sndPower3);
				waitObj(objSubEnemy, 30);

				let move_angle = GetAngleToPlayer(objSubEnemy);
				local
				{
					if (!CanShotBullet(objSubEnemy)) { return; }
					let a = move_angle;
					let r = ((ObjMove_GetX(objSubEnemy)-GetPlayerX)^2 + (ObjMove_GetY(objSubEnemy)-GetPlayerY)^2)^0.5;
					r = min(192, max(0, r-96));
					let mpos = [iniX+r*cos(a), iniY+r*sin(a)];
					
					SetAction(objSubEnemy, ACT_MOVE, 45);
					MoveToSlowdown2(objSubEnemy, mpos[0], mpos[1], 45);
					waitObj(objSubEnemy, 45+30*wt_rate2);
				}

				local
				{
					if (!CanShotBullet(objSubEnemy)) { return; }
					if (add_shot) { Shot02(); }

					let muki = rand_dir();
					if (ObjMove_GetX(objSubEnemy) < CenX) { muki = 1; }
					if (ObjMove_GetX(objSubEnemy) > CenX) { muki = -1; }
					let a = move_angle + muki*120;
					let r = 96;
					let mpos = [ObjMove_GetX(objSubEnemy)+r*cos(a), ObjMove_GetY(objSubEnemy)+r*sin(a)];
					SetAction(objSubEnemy, ACT_MOVE, 30);
					MoveToSlowdown2(objSubEnemy, mpos[0], mpos[1], 45);
					waitObj(objSubEnemy, 45);
				}

				local
				{
					if (!CanShotBullet(objSubEnemy)) { return; }
					let mpos = [iniX, iniY];
					SetAction(objSubEnemy, ACT_MOVE, 90);
					MoveTo(objSubEnemy, mpos[0], mpos[1], 90);
					Shot01(90);
					waitObj(objSubEnemy, 90 + 60*wt_rate);
				}

				if (!CanShotBullet(objSubEnemy)) { return; }
				local
				{
					ascent(i in 0 .. 3)
					{
						let ea = -90 + (i-1)*60;
						let es = 3 + absolute(i-1);
						SetEnemyChii01(ObjMove_GetX(objSubEnemy), ObjMove_GetY(objSubEnemy),
							es, ea, 30*wt_rate2+i*15);
					}
					CallSound(sndPower3);
					waitObj(objSubEnemy, 150*wt_rate);
				}
				
				// 発狂さん
				if (t > 0) { wt_rate = wt_rate_min + (wt_rate-wt_rate_min)*0.75; }
				if (BOSS_HAKKYOU) { wt_rate2 = 0; add_shot = true; }
				t++;

			}
		}

		// 自機狙い
		task Shot01(timer)
		{
			let speed = [3, 4, 5, 5][Difficult];
		//	let timer = 60;
			let wt = [5, 4, 4, 4][Difficult];
			let way = [3, 3, 3, 5][Difficult];
			let arc = [6, 12, 12, 7][Difficult];
			
			// 各パターン用補正
			alternative(eSubName)
			case(BOSS_ID_RANRAN, BOSS_ID_HIKARIKO, BOSS_ID_SIRAN)
			{
				speed *= 0.75;
			}
			others
			{
				// 単体
			}
			
			
			let w1 = (way-1)/2;
			
			ascent(t in 0 .. timer)
			{
				if (!CanShotBullet(objSubEnemy)) { return; }
				if (t%wt == 0)
				{
					ascent(iW in 0 ..way){
						let ss = speed;
						let sa = -90+rand(-45,45)+((ObjMove_GetX(objSubEnemy)-MinX)/GetClipWidth-0.5)*120;
						TumaShot_ToPlayer(ObjMove_GetX(objSubEnemy), ObjMove_GetY(objSubEnemy), rand(1, 5^2)^0.5, sa, BGW_STICK_YELLOW, 30,
							ss, arc*(iW-w1), BGW_STICK_YELLOW, 60);
						CallSound(sndShot3);
					}
				}
				waitObj(objSubEnemy, 1);
			}
		}
		
		// ろっかくけい
		task Shot02()
		{
			let speed = [3, 3, 3, 3][Difficult];
			let way = 6;
			let count = [6, 8, 8, 10][Difficult];
			let count2 = [1, 1, 2, 2][Difficult];
			
			let sx = ObjMove_GetX(objSubEnemy);
			let sy = ObjMove_GetY(objSubEnemy);
			let angle = GetAngleToPlayer(objSubEnemy);
			
			ascent(i in 0 .. count2)
			{
				let ss = speed * (1 - i*0.33);
				let sa = angle + i*180/way;
				let ct = count - i*2;
				Shot1_sub(sx, sy, ss, sa, BGB_SCALE_YELLOW, ct, way);
			}
			
			CallSound(sndShot4);
			
			task Shot1_sub(sx, sy, speed, angle, graphic, count, way)
			{
				ascent(i in 0 .. count)
				{
					let ss = speed;
					ascent(j in 0 .. way)
					{
						let vx = ss * (1 - i*0.02);
						let vy = ss * (i*0.02*1.732);
						let sa = angle + j*360/way;
						local
						{
							let pos = Rotate2D_XY(vx, vy, sa);
							My_CreateShotB2(sx, sy, pos[0]/10000, pos[1]/10000, pos[0]/240, pos[1]/240, pos[0], pos[1], graphic, 15);
						}
						if (vy > 0)
						{
							let pos = Rotate2D_XY(vx, -vy, sa);
							My_CreateShotB2(sx, sy, pos[0]/10000, pos[1]/10000, pos[0]/240, pos[1]/240, pos[0], pos[1], graphic, 15);
						}
					}
				}
			}
		}
		
		// ちぃちぃ
		task SetEnemyChii01(iniX, iniY, iniSpeed, iniAngle, iniValue)
		{
			let e_type = iniValue%2;
			let eSize = ENEMY_S;
			let eColor = EFF_BLUE;
			
			let objFamilier = MakeEnemy(iniX, iniY, 200, eSize);
			Boss_SetIDtoObj(objFamilier, BOSS_ID_CHII);
			Boss_SetAnimeTimer(objFamilier);
			BossAnime_Initialize(objFamilier);
			CheckSubEnemyKilled(objSubEnemy, objFamilier);	// 使い魔用キルチェック
			TAct();
			WaitForKilledFamilier(objFamilier, 0, 0);
			ZakoFinalize(objFamilier, eColor);
			
			task TAct()
			{
				TMove();
				
				let timer = 30;
				let objImg = GetBossImageID(objFamilier);
				ascent(t in 0 .. timer)
				{
					let alpha = min(255, t/timer*2*255);
					let sc = 1-t/timer/3;
					ObjRender_SetAlpha(objImg, alpha);
					ObjRender_SetScaleXYZ(objImg, sc, sc, sc);
					waitObj(objFamilier, 1);
				}
				SetEnemyVisible(objFamilier, true);
			}
			
			task TMove()
			{
				Enemy_SetPatternA2(objFamilier, 0, iniSpeed, iniAngle, -iniSpeed/60, 0, 0);
				SetAction(objFamilier, [ACT_MOVE_L,ACT_MOVE_R][cos(iniAngle)>0], 60);
				waitObj(objFamilier, 60+iniValue);
				
				let angle = GetAngleToPlayer(objFamilier);
				TLaser(angle);	// わりばしビーム！
				Enemy_SetPatternA2(objFamilier, 0, NO_CHANGE, angle, 4/90, 0, 4);
				SetAction(objFamilier, [ACT_MOVE_L,ACT_MOVE_R][cos(angle)>0], 99999);
				TCheckDispINOut(objFamilier, 64);
			}
			
			task TLaser(angle)
			{
				let l_len = [80, 80, 80, 80][Difficult];
				let graphic = BGW_SCALE_YELLOW;
				
				let way = [2, 2, 2, 2][Difficult];
				let way_angle = [60, 60, 60, 60][Difficult];
				let speed = [1.5, 1.5, 1.5, 1.5][Difficult];
				let wt = 2;
				let shot_span = [8, 6, 6, 6][Difficult];
				let shot_count = [3, 3, 3, 3][Difficult];
				
				// 各パターン用補正
				alternative(eSubName)
				case(BOSS_ID_RANRAN, BOSS_ID_HIKARIKO, BOSS_ID_SIRAN)
				{
					way_angle = [30, 30, 60, 60][Difficult];
				}
				others
				{
					// 単体
				}
				
				let objLaser = My_CreateStraightLaserA1Ex(ObjMove_GetX(objFamilier), ObjMove_GetY(objFamilier), angle, 0, 18, 999999, BGW_STICK_YELLOW, 0, [true,false]);
				ObjShot_SetAutoDelete(objLaser, false);
				
				let t = 0;
				while(!Obj_IsDeleted(objLaser))
				{
					if (Obj_IsDeleted(objFamilier) || Obj_IsDeleted(objSubEnemy)) { break; }
					let ea = angle;
					let ex = ObjMove_GetX(objFamilier)+32*cos(ea);
					let ey = ObjMove_GetY(objFamilier)+32*sin(ea);
					ObjMove_SetPosition(objLaser, ex, ey);
					ObjStLaser_SetAngle(objLaser, ea);
					if (t < 60)
					{
						let tmp = GetCurve_d((t+1)/60);
						ObjLaser_SetLength(objLaser, l_len*tmp);
					}
					if (t > 15 && t%wt == 0 && trunc(t/wt)%shot_span < shot_count)
					{
						if (way > 0)
						{
							ascent(i in 0 .. way)
							{
								let ss = speed;
								let sa = angle+180 + (i-(way-1)/2)*way_angle;
								let obj = My_CreateShotA2(ex, ey, 3, sa, -3/30, 3/10, graphic, 30);
								ObjMove_AddPatternA2(obj, 120, NO_CHANGE, NO_CHANGE, ss/60, 0, ss);
							}
							CallSound(sndShot3);
						}
					}
					t++;
					wait(1);
				}
				Obj_Delete(objLaser);
			}
		}
	}

// ----------------- ひかりこ ----------------- //
	task TAct_Hikariko
	{
		#include"./../../stage3/boss/lib_Hikariko.dnh"
		
		TShot;
		
		task TShot
		{
			let way = [5, 5, 5, 7][Difficult];
			let add_way = [2, 2, 3, 3][Difficult];
			let wt = [300, 240, 180, 210][Difficult];

			let move_range = GetClipWidth/2*0.75;
			let move_r = 64;
			
			// 各パターン用補正
			alternative(eSubName)
			case(BOSS_ID_RANRAN, BOSS_ID_CHII, BOSS_ID_SIRAN)
			{
				move_range *= 0.5;
				move_r *= 0.66;
				wt *= 0.88;
			}
			others
			{
				// 単体
				wt *= 0.75;
			}
			
			let wt_min = wt*0.66;
			
			let t = 0;
			let muki = rand_dir();
			while(CanShotBullet(objSubEnemy))
			{
				SetAction(objSubEnemy, ACT_SHOT2, 90);
				CallSound(sndPower2);
				let a2 = 0 + 15*muki;
				let ba = rand(0, 360);
				ascent(i in 0 .. way)
				{
					if (!CanShotBullet(objSubEnemy)) { return; }
					SetFamilier01(ObjMove_GetX(objSubEnemy), ObjMove_GetY(objSubEnemy), 0, ba+i*add_way*360/way*muki, muki, a2);
					CallSound(sndShot2);
					waitObj(objSubEnemy, 5);
				}
				waitObj(objSubEnemy, 60-5*way);
				if (!CanShotBullet(objSubEnemy)) { return; }
				_EnemyRandomMove(objSubEnemy, iniX, iniY, move_range, 64, move_r/2, move_r, 0.75);
				if (BOSS_HAKKYOU) { waitObj(objSubEnemy, wt/3); }	// 発狂さん
				else { waitObj(objSubEnemy, wt); }
				if (!CanShotBullet(objSubEnemy)) { return; }
				SetAction(objSubEnemy, ACT_SHOT1, 90);
				waitObj(objSubEnemy, 60);
				
				if (t > 0) { wt = wt_min + (wt-wt_min)*0.75; }
				muki = -muki;
				t++;
			}
		}

		// 人魂
		task SetFamilier01(iniX, iniY, iniSpeed, iniAngle, iniMuki, iniValue)
		{
			let timer = 360;

			let eSize = ENEMY_M;
			let eColor = EFF_BLUE;
			let baseAngle = iniAngle;
			
			let objFamilier = MakeEnemyFamilier(iniX, iniY, 240, eSize);
			CheckLinkLife_Familier(objSubEnemy, objFamilier, 0.8);	// ボスと体力連動
			DrawBirdOption(objFamilier, EFF_BLUE, iniAngle, 1);
			CheckSubEnemyKilled(objSubEnemy, objFamilier);	// 使い魔用キルチェック
			TAct();
			WaitForKilledFamilier(objFamilier, 24, 4);
			ZakoFinalize(objFamilier, eColor);
			
			task TAct()
			{
				TMove;
				TShot;
			}
			
			task TMove()
			{
				ascent(t in 0 .. timer)
				{
					if (Obj_IsDeleted(objFamilier) || Obj_IsDeleted(objSubEnemy)) { break; }
					let tmp = sin(t/timer*90);
					let tmp2 = sin(t/timer*180);
					baseAngle += (1-tmp*0.75)*1*iniMuki;
					let vr = tmp2*240;
					let vx = vr * cos(baseAngle);
					let vy = vr/2 * sin(baseAngle) - ((tmp-1/4)^2-1/16)*600;
					let pos = Rotate2D_XY(vx, vy, iniValue);
					
					ObjMove_SetPosition(objFamilier, iniX+pos[0], iniY+pos[1]);
					waitObj(objFamilier, 1);
				}
				EraseEnemy(objFamilier);
			}
			
			task TShot()
			{
				waitObj(objFamilier, 120);
				
				let speed = [0.75, 0.75, 0.85, 1][Difficult];
				let graphic = BGW_FIRE_BLUE;
				let graphic2 = BGW_FIRE_SKY;
				let wt = [9, 7, 7, 7][Difficult];
				
				let shot_span = 1;
				let shot_count = 1;
				let way = [3, 3, 3, 3][Difficult];
				let way2 = [1, 1, 2, 2][Difficult];
				let way_angle = 45;
				let add_shot = false;
				
				// 各パターン用補正
				alternative(eSubName)
				case(BOSS_ID_RANRAN, BOSS_ID_CHII, BOSS_ID_SIRAN)
				{
					wt = trunc(wt*1.75);
				}
				others
				{
					// 単体
					add_shot = true;
				}

				let st = 0;
				let t = 120;
				while(t < timer-60)
				{
					if (Obj_IsDeleted(objFamilier) || Obj_IsDeleted(objSubEnemy)) { break; }
					if (st%shot_span < shot_count)
					{
						let sa = Obj_GetValueD(objFamilier, "E_ANGLE", 0) + 180 + rand(-2,2);
						let wa = (shot_span - st%shot_span)*way_angle;
						if (add_shot && trunc(st/shot_span)%2 == 1)
						{
							CreateShotWayA2(ObjMove_GetX(objFamilier), ObjMove_GetY(objFamilier),
								0, sa, speed/30*0.5, speed*0.5, graphic2, 15, way2, wa, 0);
						}
						else
						{
							CreateShotWayA2(ObjMove_GetX(objFamilier), ObjMove_GetY(objFamilier),
								0, sa, speed/30, speed, graphic, 15, way, wa, 0);
						}
						CallSound(sndShot2);
					}
					t += wt;
					st++;
					waitObj(objFamilier, wt);
				}
			}
		}
	}

// ----------------- 上人 ----------------- //
	task TAct_Siran
	{
		#include"./../../stage4/boss/lib_Siran.dnh"
		
		TShot;
		
		task TShot
		{
			let D = 1;
			let way = [12, 12, 14, 14][Difficult];
			let offset_y = 0;

			let move_range = GetClipWidth/2*0.75;
			let move_r = 64;

			// 各パターン用補正
			alternative(eSubName)
			case(BOSS_ID_RANRAN, BOSS_ID_CHII, BOSS_ID_HIKARIKO)
			{
				move_range *= 0.5;
				move_r *= 0.66;
				offset_y = 32;
			}
			others
			{
				// 単体
			}

			let t = 0;
			while(CanShotBullet(objSubEnemy))
			{
				if (!CanShotBullet(objSubEnemy)) { return; }
				let ex = CenX;
				let ey = CenY+64 + offset_y;
				SetActionSiran(objSubEnemy, ACT_SHOT1, 120);
				TShotA(ex, ey, 14, D, 3, t);
				CallSound(sndBoon);
				waitObj(objSubEnemy, 120);
		//		SetActionSiran(objSubEnemy, ACT_SHOT2, 120);
				waitObj(objSubEnemy, 90);
				_EnemyRandomMove(objSubEnemy, iniX, iniY, move_range, 64, move_r/2, move_r, 0.75);
				SetActionSiran(objSubEnemy, ACT_MOVE, 120);
				waitObj(objSubEnemy, 120);
				D = -D;
				t++;
			}
		}
		
		task TShotA(ex, ey, way, D, wt, pat){
			let ang = rand(0, 360);
			let ID = [];
			ascent(i in 0 .. way){
				ID = ID ~ [i];
			}
			ascent(i in 0 .. way){
				if (!CanShotBullet(objSubEnemy)) { return; }
				let j = trunc(rand(0, length(ID)*999)%length(ID));
				SetFamilier01(ex, ey, 0, ang-(360*ID[j]/way-1.11*wt*i)*D, ID[j]%2, pat, 1.11, 150-wt*i, D);
				waitObj(objSubEnemy, wt);
				ID = erase(ID, j);
			}
		}

		// 数珠オプション
		task SetFamilier01(iniX, iniY, iniSpeed, iniAngle, iniValue, iniPat, ang_spd, Delay, Dirc)
		{
			iniValue %= 2;
			let eSize = ENEMY_M;
			let eColor = EFF_WHITE;
			let baseAngle = iniAngle;
			if(iniValue){
				eColor = EFF_PURPLE;
			}
			
			let objFamilier = MakeEnemyFamilier(iniX, iniY, 55, eSize);
			SetEnemyDropItem(objSubEnemy, [MY_ITEM_TIME_1], [MY_ITEM_TIME_1, 0]);	// アイテム排出セット
			CheckLinkLife_Familier(objSubEnemy, objFamilier, 0.8);	// ボスと体力連動
			SetEnemyVisible(objFamilier, false);
			DrawRosaryFamilier( objFamilier, eColor );
			CheckSubEnemyKilled(objSubEnemy, objFamilier);	// 使い魔用キルチェック
			TAct();
			WaitForKilledFamilier(objFamilier, 24, 4);
			ZakoFinalize(objFamilier, eColor);
			
			task TAct()
			{
				TMove;
			}
			
			task TMove(){
				let pat_value = GetCurve_ad(min(max(0, iniPat-1), 10)/10);
				let R = 180;
				let time = 300;
				let wt = [15, 14, 14, 14][Difficult];
				let wt_rate = [0.9953, 0.9949, 0.9943, 0.9943][Difficult];
				let ang = iniAngle;
				let ang_arc = [140*Dirc, 145*Dirc, 150*Dirc, 155*Dirc][Difficult];
				ang_arc += pat_value*10*Dirc;
				let ang2 = 30*Dirc;
				let ang2_arc = -70*Dirc;
				let objImgID = Obj_GetValueD(objFamilier, "IMAGE_ID_ALL", []);
				let ini_spd = [2.4, 2.8, 3.2, 3.6][Difficult];
				let fin_spd = [0.9, 1.0, 1.1, 1.2][Difficult];
				let way = 1;
				let grap = [BGW_FUGU_WHITE, BGW_FUGU_PURPLE][iniValue];
				let grap2 = [ADD_BGB_BALL_BS_WHITE, ADD_BGB_BALL_BS_PURPLE][iniValue];
				let add_shot = false;
				let flgHakkyou = BOSS_HAKKYOU;

				// 各パターン用補正
				alternative(eSubName)
				case(BOSS_ID_RANRAN, BOSS_ID_CHII, BOSS_ID_HIKARIKO)
				{
				}
				others
				{
					// 単体
					ang_arc = [160*Dirc, 162.5*Dirc, 162.5*Dirc, 165*Dirc][Difficult];
					ang_arc += pat_value*10*Dirc;
					add_shot = true;
				}
				
				if (flgHakkyou) { add_shot = true; }

				let iniTime = Delay;
				ascent(t in 1 .. iniTime+1){
					if (Obj_IsDeleted(objFamilier) || Obj_IsDeleted(objSubEnemy)) { break; }
					let rate = GetCurve_ad(t/iniTime);
					let r = R*rate;
					let alpha = rate*3/2 * 64;
					if (rate > 2/3) { alpha = 64 + (rate-1/3)*3/2*192; }
					Render(objImgID, 2-rate, alpha);
					let bx = ObjMove_GetX(objSubEnemy)*(1-rate) + iniX*rate;
					let by = ObjMove_GetY(objSubEnemy)*(1-rate) + iniY*rate;
					ObjMove_SetPosition(objFamilier, bx+r*cos(ang+ang2), by+r*sin(ang+ang2));
					ang += ang_spd*Dirc;
					yield;
				}
				if(!iniValue){	SetEnemyVisible(objFamilier, true);}
				let c = 0;
				let CS_X = ObjMove_GetX(objFamilier);
				let CS_Y = ObjMove_GetY(objFamilier);
				ascent(t in 1 .. time+1){
					if (Obj_IsDeleted(objFamilier) || Obj_IsDeleted(objSubEnemy)) { break; }
					let r = t;
					c++;
					if(c >= wt){
						CallSound(sndShot2);
						let rate = (c-wt);
						ang += ang_spd*(1-rate)*Dirc;
						let x = (R+r*0.25)*cos(ang);
						let y = (R-r*0.25)*sin(ang);
						let Pos = Rotate2D_XY(x, y, ang2+ang2_arc*t/time);
						ObjMove_SetPosition(objFamilier, iniX+Pos[0], iniY+Pos[1]);
						c -= wt;
						let s = ini_spd+(fin_spd-ini_spd)*t/time;
						let a = ang+(ang2+(ang2_arc+ang_arc)*t/time);
						CreateShotWay(ObjMove_GetX(objFamilier)+rate*s*cos(a), ObjMove_GetY(objFamilier)+rate*s*sin(a),
							s, a, grap, 5, way, 45, 10);
						ang -= ang_spd*(1-rate)*Dirc;

					}
					wt = wt*(wt_rate);
					let x = (R+r*0.25)*cos(ang);
					let y = (R-r*0.25)*sin(ang);
					let Pos = Rotate2D_XY(x, y, ang2+ang2_arc*t/time);
					ObjMove_SetPosition(objFamilier, iniX+Pos[0], iniY+Pos[1]);
					ang += ang_spd*Dirc;
					CS_X = ObjMove_GetX(objFamilier);
					CS_Y = ObjMove_GetY(objFamilier);
					yield;
				}
				if (add_shot) { TCounterShot(); }
				ZakoFinalize(objFamilier, eColor);
		//		TCheckDispINOut(objFamilier, 32);

				task TCounterShot(){
					if(!CanShotBullet(objSubEnemy)){return;}
					if(Difficult <= D_NORM && !CanShotBullet(objFamilier)){return;}
					if(Difficult <= D_EASY){return;}
					let way = [0, 6, 9, 9][Difficult];
					let way_start = [1, 1, 1, 1][Difficult];
					let speed =	[2, 2, 2, 2][Difficult];
					let angle = atan2(GetPlayerY()-CS_Y, GetPlayerX()-CS_X);
					CallSound(sndShot3);
					if (flgHakkyou) { way_start = 0; }
					ascent(iW in way_start .. way){
						ascent(iQ in 0 .. 5){
							let s = 1.0*speed*(1-0.03*iQ);
							let a = angle+360*iW /way+rand(0.75*iQ, -0.75*iQ);
							let obj = My_CreateShotA2(CS_X, CS_Y, s, a, -s/15, s/12, grap2, 10);
							ObjMove_AddPatternA2(obj, 180, NO_CHANGE, NO_CHANGE, s/240, 0, s);
							Obj_SetRenderPriorityI(obj, GetShotRenderPriorityI+1);
						}
					}
				}


				function Render(objImgID, scale, alpha){
					ascent(i in 0 .. length(objImgID)){
						ObjRender_SetScaleXYZ(objImgID[i], scale, scale, scale);
						ObjRender_SetAlpha(objImgID[i], alpha);
					}
				}
			}
		}
	}
}


//=======================================================================
//　スペカ宣言
//  objBaseが消えたら終わり（ダミーオブジェクト）
//  objEnemiesは登場させるキャラのID
//=======================================================================
task CallSpellCutin_S06(objBase, objEnemies)
{
	// 配列から起動スペルを取得
	let spell_id = -1;
	if (length(objEnemies) <= 0) { /* なにもなし */ }
	else if (length(objEnemies) <= 1)
	{
		// 単体
		alternative(GetBossID(objEnemies[0]))
		case(BOSS_ID_RANRAN)	{ spell_id = 0; }
		case(BOSS_ID_CHII)	{ spell_id = 1; }
		case(BOSS_ID_HIKARIKO)	{ spell_id = 2; }
		case(BOSS_ID_SIRAN)	{ spell_id = 3; }
	}
	else
	{
		// 複数
		alternative(GetBossID(objEnemies[0]))
		case(BOSS_ID_RANRAN)	{
			alternative(GetBossID(objEnemies[1]))
			case(BOSS_ID_RANRAN)	{ spell_id = 0; }
			case(BOSS_ID_CHII)	{ spell_id = 4; }
			case(BOSS_ID_HIKARIKO)	{ spell_id = 5; }
			case(BOSS_ID_SIRAN)	{ spell_id = 6; }
		}
		case(BOSS_ID_CHII)	{
			alternative(GetBossID(objEnemies[1]))
			case(BOSS_ID_RANRAN)	{ spell_id = 4; }
			case(BOSS_ID_CHII)	{ spell_id = 1; }
			case(BOSS_ID_HIKARIKO)	{ spell_id = 7; }
			case(BOSS_ID_SIRAN)	{ spell_id = 8; }
		}
		case(BOSS_ID_HIKARIKO)	{
			alternative(GetBossID(objEnemies[1]))
			case(BOSS_ID_RANRAN)	{ spell_id = 5; }
			case(BOSS_ID_CHII)	{ spell_id = 7; }
			case(BOSS_ID_HIKARIKO)	{ spell_id = 2; }
			case(BOSS_ID_SIRAN)	{ spell_id = 9; }
		}
		case(BOSS_ID_SIRAN)	{
			alternative(GetBossID(objEnemies[1]))
			case(BOSS_ID_RANRAN)	{ spell_id = 6; }
			case(BOSS_ID_CHII)	{ spell_id = 8; }
			case(BOSS_ID_HIKARIKO)	{ spell_id = 9; }
			case(BOSS_ID_SIRAN)	{ spell_id = 3; }
		}
	}
	if (spell_id < 0) { return; }	// なんにもないよ

	let BaseY = MinY+60;
	let snfile = Boss_GetSpellCardImage(objEnemy);
	
	// えへくと配置
	if (length(objEnemies) > 1)
	{
		_SpellCard_Effect(BaseY, objBase, spell_id+22, snfile,
			GetBossTexture(objEnemies[0], I_CUTIN), GetCutinSize(objEnemies[0]), CUTMOTION_TWIN_UP,
			imgSystemSCircle2b, 0.75);
		SpellCard_Effect(BaseY, objBase, -1, snfile,
			GetBossTexture(objEnemies[1], I_CUTIN), GetCutinSize(objEnemies[1]), CUTMOTION_TWIN_DOWN);
	}
	else
	{
		_SpellCard_Effect(BaseY, objBase, spell_id+22, snfile,
			GetBossTexture(objEnemies[0], I_CUTIN), GetCutinSize(objEnemies[0])*1.15, CUTMOTION_UP,
			imgSystemSCircle2b, 0.75);
	}
	
	function GetCutinSize(objBase)
	{
		alternative(GetBossID(objBase))
		case(BOSS_ID_RANRAN)	{ return(0.6); }
		case(BOSS_ID_CHII)	{ return(0.6); }
		case(BOSS_ID_HIKARIKO)	{ return(0.575); }
		case(BOSS_ID_SIRAN)	{ return(0.475); }
		return(0);
	}
}

// StandByタイマー無効付き
task StandBy_TimeStop2(objEnemy, xIni, yIni, wIni)
{
	let wr = ((ObjMove_GetY(objEnemy)-yIni)^2+(ObjMove_GetX(objEnemy)-xIni)^2)^0.5;
	if (wIni > 5 && wr > 16) { SetAction(objEnemy, ACT_MOVE, 600); }
	if (wr > 1) { ObjMove_SetDestAtWeightSpeedUp(objEnemy, xIni, yIni, 10, 4, 0.1, 12); }
	
	//移動中は判定を消す
	SetEnemyVisible(objEnemy, false);
	// タイマー停止
	ObjEnemyBossScene_SetSpellTimer(objScene, -1);

	waitObj(objEnemy, wIni);

	// 判定復活させない
//	SetEnemyVisible(objEnemy, true);
	// タイマー開始
	ObjEnemyBossScene_SetSpellTimer(objScene, ObjEnemyBossScene_GetInfo(objScene, INFO_ORGTIMERF));
}
