#東方弾幕風[Single]
#ScriptVersion[3]
#Title["ﾎﾛｳﾁｬﾝ通常4"]
#Text["ﾎﾛｳﾁｬﾝ通常4"]
#Background[""]
#System["./../../../system/System.dnh"]

//---------------------------------------------------------------------

// 関数取り込み
#include"./../../../lib/lib_boss.dnh"
#include"./lib_Horou.dnh"

@Event {
	alternative(GetEventType())
	case(EV_REQUEST_LIFE)		{ SetScriptResult(5777);	}
	case(EV_REQUEST_TIMER)		{ SetScriptResult(70);		}
	BossEvent();
}

@Initialize {
	// アイテム数
	bossDropItem = 50;
	//ダメージ透過率
	dIni_Shot = 180;
	// 停止無効
	bossResistTime = 1;

	Boss_Init();	//初期設定
	objEnemy = CreateBoss(BOSS_ID_HOROU);	//ボスセット

	// チャプター開始
	ChapterStartBoss(GetBossID(objEnemy), 4, CHAPTER_BOSS);
	
	InitHorou();

	// 使い魔と体力連動
	CheckLinkLife_Boss(objEnemy);

	Task_Main();
	
	SetBackGroundBase( objEnemy, 3 );
}

@MainLoop {
	yield;
}


// メインタスク
task Task_Main
{
	// オプション配置
	SetEffect06_Opt(objEnemy, 0, 0);
	objHorouEffect = SetEffect06(objEnemy);

	StandBy_TimeStop(objEnemy, CenX, 160, 210);
	waitObj(objEnemy, 60);
	HorouReigekiSynchro(WEAPON_BLUE, 180);

	let wt = [120, 120, 120, 120][Difficult];
	let wt2 = [60, 60, 60, 60][Difficult];
	let muki = 1;
	
	let t = 0;
	while(eAlive)
	{
		let ct = 2;
		if (t > 0) { ct = 4; }
		ascent(i in 0 .. ct)
		{
			if (!eAlive) { return; }
			TShot_sub(muki);
			EnemyRandomMove(objEnemy, 160, 32);
			waitObj(objEnemy, wt2);
			if (i%2 == 1) { waitObj(objEnemy, wt2/2); }
			muki = -muki;
		}
		
		if (!eAlive) { return; }
		SetAction(objEnemy, ACT_SHOT1, 120);
		BossCharge(objEnemy);
		TShot_sub2(muki);
		
		waitObj(objEnemy, wt-30);
		if (t == 0) { waitObj(objEnemy, wt-30); }

		if (!eAlive) { return; }
		CallSound(sndPower5);
		waitObj(objEnemy, 30);
		muki = -muki;
		t++;
	}

	task TShot_sub(muki)
	{
		let speed = [1.25, 1.25, 1.75, 2.5][Difficult];
		let angle = GetAngleToPlayer(objEnemy);
		let way = [15, 15, 18, 18][Difficult];
		let graphic = BGW_WING_BLUE;
		
//		let muki = 1;
		ascent(i in 0 .. 5)
		{
			if (!eAlive) { return; }
			let sr = 160-i*15;
			let way_angle = 120;
			let tmp_way = way-i;
			let ss = speed * (1 - i*0.05);
			loop(1)
			{
				let sa = angle + (75-way_angle*i/way/2)*muki;
				let sx = ObjMove_GetX(objEnemy) + 32*cos(sa);
				let sy = ObjMove_GetY(objEnemy) + 32*sin(sa);
				WingShotWay(sx, sy, ss, sa, graphic, 30, 60+i*5, tmp_way, way_angle/tmp_way*muki, sr);
			}
			CallSound(sndShot2);
			waitObj(objEnemy, 5);
		}
	}
	
	task TShot_sub2(muki)
	{
		let shot_speed = [0.75, 0.75, 0.75, 0.75][Difficult];
		let shot_way = [0, 10, 10, 15][Difficult];
		let shot_way_angle = [2.5, 2.5, 2.5, 3][Difficult];
		let laser_way = [6, 6, 9, 9][Difficult];
		
		let BASE_ANGLE = rand(0, 360);
		
		if (Difficult >= D_HARD)
		{
			_TShot_sub2(muki);
			waitObj(objEnemy, 60);
			if (!eAlive) { return; }
			_TShot_sub2(-muki);

			if (!eAlive) { return; }
			_TShot_sub2b(muki, BASE_ANGLE);
			waitObj(objEnemy, 60);
			if (!eAlive) { return; }
			_TShot_sub2b(-muki, BASE_ANGLE+30);
		}
		else
		{
			_TShot_sub2(muki);
			_TShot_sub2(-muki);
			waitObj(objEnemy, 60);
			if (!eAlive) { return; }
			_TShot_sub2b(muki, BASE_ANGLE);
		}
		
		task _TShot_sub2(muki)
		{
			ascent(i in 0 .. laser_way)
			{
				if (!eAlive) { return; }
				let sa = -90 + (30+i*7.5)*muki;
				let sx = ObjMove_GetX(objEnemy) + 64*cos(sa);
				let sy = ObjMove_GetY(objEnemy) + 64*sin(sa);
				let obj = CreateHorouLaser(sx, sy, 1, sa, 20, 24, BGW_LIGHT_L_BLUE, 30);
				ObjMove_AddPatternA2(obj, 0, NO_CHANGE, NO_CHANGE, 16/30, 0, 16);
				CallSound(sndBulletBreak);
				waitObj(objEnemy, 5);
			}
		}
		task _TShot_sub2b(muki, angle)
		{
			ascent(i in 0 .. 3)
			{
				let wa = shot_way_angle;
				if (shot_way > 0) { wa /= shot_way; }
				HorouLaserA04(5, angle+i*120, 20, 24, BGW_LIGHT_L_BLUE, 60, muki,
					shot_speed, BGW_CHRYSTAL_S_BLUE, shot_way, wa);
			}
		}

	}
}

task HorouLaserA04(speed, angle, l_len, l_wid, graphic, delay, muki, speed2, graphic2, way2, way_angle2)
{
	let baseX = GetPlayerX;
	let baseY = GetPlayerY;
	let r = 480;
	let add_a = speed;
	
	let sx = baseX + r*cos(angle);
	let sy = baseY + r*sin(angle);
	let obj = CreateHorouLaserEx(sx, sy, 0, 0, l_len, l_wid, graphic, delay, -1);
	ObjShot_SetAutoDelete(obj, false);
	
	let t = 0;
	while(!Obj_IsDeleted(obj))
	{
		if (t < 90)
		{
			let tmp = GetCurve_d((t+1)/90);
			r = 480 - 360*tmp;
		}
		else if (t < 150)
		{
			let tmp = GetCurve_d((t+1-90)/60);
			let tmp2 = GetCurve_ad((t+1-90)/60);
			add_a = speed * (1-tmp)^2;
			r = 120 + 90*tmp2;
		}
		else
		{
			let to_speed = 16;
			let to_angle = GetAngleToPlayer(obj);
			ObjMove_AddPatternA2(obj, 0, 0, to_angle, to_speed/30, 0, to_speed);
			CallSound(sndShot4);
			
			// ショット
			let ba = to_angle;
			if (sin(ba) > -0.5 && way2 > 0)
			{
				DelayWay(ObjMove_GetX(obj), ObjMove_GetY(obj),
					0, ba, speed2/120, speed2, graphic2, 30, way2, way_angle2, 0, 60);
			}

			wait(30);
			ObjShot_SetAutoDelete(obj, true);
			break;
		}
		if (t%15 == 0)
		{
			let sx = baseX + r*cos(angle);
			let sy = baseY + r*sin(angle);
			MoveTo(obj, sx, sy, 15);
			angle += 90*muki;
		}
		if (t%5 == 0) { CallSound(sndBulletBreak); }
		baseX = baseX*0.9 + GetPlayerX*0.1;
		baseY = baseY*0.9 + GetPlayerY*0.1;
		t++;
		wait(1);
	}

	task DelayWay(x, y, speed, angle, add_speed, max_speed, graphic, delay, way, way_angle, r, timer)
	{
		wait(timer);
		if (!eAlive) { return; }
		
		let w_cen = 0;
		if (way > 1) { w_cen = (way-1)/2; }
		ascent(i in 0 .. way)
		{
			let pos = Rotate2D_XY(1, (i-w_cen)*way_angle, angle);
			
			let ss = ((pos[1])^2+(pos[0])^2)^0.5;
			let sa = atan2(pos[1], pos[0]);
			let sx = x + pos[0]*r;
			let sy = y + pos[1]*r;
			ascent(j in 0 .. 3)
			{
				let ss2 = ss * (1-absolute(j-1)*0.025);
				let sa2 = sa + (j-1)*1;
				let obj = My_CreateShotA2(sx, sy, ss2*speed, sa2, ss2*add_speed, ss2*max_speed, graphic, delay);
				Obj_SetRenderPriorityI(obj, GetShotRenderPriorityI+1);
			}
		}
	}
}

task WingShotWay(x, y, speed, angle, graphic, delay, timer, way, way_angle, r)
{
	ascent(i in 0 .. way)
	{
		let add_a = (i-(way-1)/2)*way_angle;
		let to_r = (0.25 + 0.75*(i+1)/way) * r;
		let to_offset = add_a*1;
		WingShot(x, y, speed, angle, graphic, delay,
			timer, add_a, to_r, to_offset);
	}
}

task WingShot(x, y, speed, angle, graphic, delay, timer, add_a, to_r, to_offset)
{
	let obj = My_CreateShotA1(x, y, 0, angle, graphic, delay);
	WingAddShot(obj);
	ascent(t in 0 .. timer)
	{
		if (Obj_IsDeleted(obj)) { return; }
		let tmpd = GetCurve_d((t+1)/timer);
		let tmpa = GetCurve_ad((t+1)/timer);
		let br = tmpd * to_r;
		let ba = angle + add_a*tmpa;
		let sx = x + br*cos(ba);
		let sy = y + br*sin(ba);
		let sa = ba + to_offset*tmpd;
		ObjMove_SetPosition(obj, sx, sy);
		ObjMove_SetAngle(obj, sa);
		yield;
	}
	if (Obj_IsDeleted(obj)) { return; }
	ObjMove_AddPatternA2(obj, 0, NO_CHANGE, NO_CHANGE, speed/120, 0, speed);
	CallSound(sndShot2);
}

task WingAddShot(objBase)
{
	let obj = My_CreateShotA1(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 0, 0, ADD_BGW_FUGU_WHITE, 0);
	let col = GetEffectColor(BULLET_EFFECT[ObjShot_GetImageID(objBase)%8]);
	ObjRender_SetColor(obj, col[0]*0.66+64, col[1]*0.66+64, col[2]*0.66+64);
	SetShotDisabled(obj);
	let t = 0;
	while(!Obj_IsDeleted(objBase))
	{
		if (Obj_IsDeleted(obj)) { return; }
		if (t < 60)
		{
			let tmp = GetCurve((t+1)/60);
			ObjRender_SetAlpha(obj, tmp*255);
		}
		ObjMove_SetPosition(obj, ObjMove_GetX(objBase), ObjMove_GetY(objBase));
		ObjMove_SetAngle(obj, ObjMove_GetAngle(objBase));
		t++;
		yield;
	}
	Obj_Delete(obj);
}
