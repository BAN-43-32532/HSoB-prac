#東方弾幕風[Single]
#ScriptVersion[3]
#Title["ﾎﾛｳﾁｬﾝスペカ4"]
#Text["ﾎﾛｳﾁｬﾝスペカ4"]
#Background[""]
#System["./../../../system/System.dnh"]

//---------------------------------------------------------------------

// 関数取り込み
#include"./../../../lib/lib_boss.dnh"
#include"./lib_Horou.dnh"

@Event {
	alternative(GetEventType())
	case(EV_REQUEST_LIFE)		{ SetScriptResult(777);	}
	case(EV_REQUEST_TIMER)		{ SetScriptResult(77);		}
	BossEvent();
}

@Initialize {
	let SPELL_ID = 74;
	let SPELL_NAME = [9, 9, 10, 11][Difficult];

	// アイテム数
	bossDropItem = 150;
	//ダメージ透過率
	dIni_Shot = 20;
	// 停止無効
	bossResistTime = 1;

	Boss_Init();	//初期設定
	objEnemy = CreateBoss(BOSS_ID_HOROU);	//ボスセット

	//スペカデータ・セット
	SetSpellCardData(GetSpellCardID(SPELL_ID), SPELL_NAME, 
			GetCurrentScriptDirectory()~"06b_Background.dnh",
			GetBossTexture(objEnemy, I_CUTIN), 0.65, CUTMOTION_NORMAL);

	// チャプター開始
	ChapterStartBoss(GetBossID(objEnemy), SPELL_NAME, CHAPTER_SPELL);

	// 使い魔と体力連動
	CheckLinkLife_Boss(objEnemy);

	InitHorou();

	Task_Main();
}

@MainLoop {
	yield;
}



// メインタスク
task Task_Main
{
	standBy(objEnemy, CenX, 220, 60);

	// オプション配置
	SetEffect06_Opt(objEnemy, 0, 0);
	objHorouEffect = SetEffect06(objEnemy);

	waitObj(objEnemy, 60);
	CallSpellCard(true);	//スペカ起動

	waitObj(objEnemy, 30);
	
	let way = [6, 8, 8, 7][Difficult];
	let max_way = [10, 10, 10, 7][Difficult];
	let add_way = [2, 2, 2, 2][Difficult];
	let wt = [600, 600, 600, 480][Difficult];
	let muki = 1;
	
	let t = 0;
	while(eAlive)
	{
		let objs = [];
		let base_angle = rand(0, 360);
		ascent(i in 0 .. way)
		{
			let ea = base_angle - i*360/way*muki;
			objs = objs ~ [SetFamilier01(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 320, ea, i, muki)];
		}
		// お隣のオブジェクトを入れたげる
		ascent(i in 0 .. way)
		{
			Obj_SetValue(objs[i], "ALL_OBJ", objs);
		}
		SetAction(objEnemy, ACT_SHOT2, 120);
		CallSound(sndPower2);
		way = min(max_way, way+add_way);
		muki = -muki;
		t++;
		wait(wt);
	}

}

// ミイラだぞー
function SetFamilier01(iniX, iniY, iniSpeed, iniAngle, iniValue, iniMuki)
{
	let eSize = ENEMY_S;
	let eColor = [EFF_BLUE, EFF_BLUE, EFF_BLUE, iniValue%7][Difficult];
	let emnImage = imgZakoFairyBlue;
	let eLife = [150, 300, 9999999, 9999999][Difficult];
	let eResist = [-2, -2, 0, 0][Difficult];
	let move_count = [5, 5, 5, 4][Difficult];
	
	let objFamilier = MakeEnemyFamilier(iniX+iniSpeed*cos(iniAngle), iniY+iniSpeed*sin(iniAngle), eLife, eSize);
	CheckLinkLife_Familier(objEnemy, objFamilier, 1);	// ボスと体力連動
	SetEffectResist(objFamilier, eResist);	// 状態異常耐性
	DrawFairy(objFamilier, emnImage, FAIRY_SMALL);
	TAct();
	return(objFamilier);
	
	task TAct()
	{
		TMove;
		TBandage;
		if (Difficult >= D_LUNA) { TRecoveryShot; }
		
		// 判定サイズ
		WaitForKilledFamilier(objFamilier, 12, 0);
		ZakoFinalize(objFamilier, eColor);
	}
	
	task TMove()
	{
		let er = iniSpeed;
		let eang = iniAngle;
		ascent(i in 0 .. move_count)
		{
			if (!CanShotBullet(objFamilier)) { return; }
			let tmp = (i+1)/move_count;
			er = iniSpeed*(1-tmp*0.7);
			eang += iniMuki*(tmp)*60;
			let to_x = iniX + er*cos(eang);
			let to_y = iniY + er*sin(eang);
			MoveTo(objFamilier, to_x, to_y, 180);
			
			if (i > 0)
			{
				// ショット
				TShot(eang-iniMuki*90, i);
				CallSound(sndBoon);
			}
			waitObj(objFamilier, 180);
		}
		if (!CanShotBullet(objFamilier)) { return; }
		if (Difficult >= D_HARD)
		{
			// ショット
			TShot(eang-iniMuki*120, move_count);
			CallSound(sndBoon);
		}
		TCheckDispINOut(objFamilier, 32);
		Enemy_SetPatternA2(objFamilier, 0, 0, eang-iniMuki*120, 2/240, -iniMuki*0.75, 2);
		Enemy_SetPatternA2(objFamilier, 120, NO_CHANGE, NO_CHANGE, 2/240, -iniMuki*0.5, 2);
		Enemy_SetPatternA2(objFamilier, 300, NO_CHANGE, NO_CHANGE, 0, 0, 2);
		CallSound(sndPower3);
		CallSound(sndBoon);
	}
	
	task TShot(shot_angle, dec_way)
	{
		let way = 3;
		let way2 = [8, 8, 8, 8][Difficult];
		let speed = [1, 1, 1, 1][Difficult];
		let tri_way = [1, 1, 1, 1][Difficult];
		let graphic = ADD_BGW_BALL_S_RED + SHOT_COLOR[eColor];
		let timer = 360;
		let col = GetEffectColorS04(eColor);
		if (Difficult == D_LUNA) { graphic = ADD_BGW_BALL_BS_RED + SHOT_COLOR[eColor]; }
		
		way2 = ceil(way2 * 1/(dec_way+1));
		if (dec_way < 2) { way2 *= 2; }
		
		ascent(k in 0 .. tri_way)
		{
			ascent(i in 0 .. way)
			{
				let va1 = shot_angle + i*360/way + k*360/tri_way;
				let va2 = shot_angle + (i+1)*360/way + k*360/tri_way;
				let vx1 = cos(va1);
				let vy1 = sin(va1);
				let vx2 = cos(va2);
				let vy2 = sin(va2);
				ascent(j in 0 .. way2)
				{
					let tmp = j/way2;
					let vx = vx1*(1-tmp) + vx2*tmp;
					let vy = vy1*(1-tmp) + vy2*tmp;
					let va = atan2(vy, vx);
					let vs = (vx^2+vy^2)^0.5 * speed;
					TimeEraseShot(ObjMove_GetX(objFamilier), ObjMove_GetY(objFamilier), vs, va, graphic, 15, timer, col);
				}
			}
		}
		
		task TimeEraseShot(x, y, speed, angle, graphic, delay, timer, col)
		{
			let obj = My_CreateShotA2(x, y, speed, angle, -speed/120, speed/2, graphic, delay);
			let objEffect = CreateParticleEffect([x, y], 1, 0);
			Obj_SetRenderPriorityI(objEffect, GetShotRenderPriorityI-1);
			if (Difficult == D_LUNA)
			{
				ObjRender_SetColor(objEffect, 64, 64, 64);
				ObjRender_SetBlendType(objEffect, BLEND_SUBTRACT);
			}
			else
			{
				ObjRender_SetColor(objEffect, 0, 0, 64);
				ObjRender_SetBlendType(objEffect, BLEND_ADD_ARGB);
			}
			loop(timer)
			{
				if (Obj_IsDeleted(obj)) { break; }
				ObjRender_SetPosition(objEffect, ObjMove_GetX(obj), ObjMove_GetY(obj), 0);
				yield;
			}
			ObjShot_FadeDelete(obj);
			descent(t in 0 .. 15)
			{
				ObjRender_SetAlpha(objEffect, t/15*255);
				yield;
			}
			Obj_Delete(objEffect);
		}
	}
	task TBandage()
	{
		yield;
		
		let speed = [2, 3, 4, 4][Difficult];
		let wt = [20, 10, 2, 2][Difficult];
		let shot_span = [1, 1, 7, 7][Difficult];
		let shot_ct = [1, 1, 3, 3][Difficult];
		let shot_timer = (move_count*180+195)/wt;
		
		let add_a = 3;
		let graphic = BGW_BILL_WHITE;
		if (Difficult == D_HARD) { graphic = BGW_STAR_S_BLUE; }
		if (Difficult == D_LUNA) { graphic = BGW_STAR_S_RED+SHOT_COLOR[eColor]; }
		if (GetItemLegacyMode())
		{
			// 白黒装備は弱体化
			speed *= 0.4;
			wt *= 3;
			if (Difficult <= D_NORM) { wt *= 1.5; }
		}
		
		let objs = Obj_GetValueD(objFamilier, "ALL_OBJ", []);
		let to_obj = objs[(iniValue+length(objs)-1)%length(objs)];
		
		let t = 0;
		while(CanShotBullet(objFamilier) && t < shot_timer)
		{
			if (!IsTimeStopObj(objFamilier))
			{
				if (t%shot_span < shot_ct)
				{
					BandageShot(objFamilier, to_obj, speed, graphic, 3);
				}
			}
			wait(wt);
			t++;
		}
	}
	
	task BandageShot(from_obj, to_obj, speed, graphic, delay)
	{
		let obj = My_CreateShotA1(0, 0, 0, 0, graphic, delay);
		
		let r = 0;
		while(!Obj_IsDeleted(obj))
		{
			if (Obj_IsDeleted(from_obj) || Obj_IsDeleted(to_obj))
			{
				ObjShot_FadeDelete(obj);
				break;
			}
			
			let pr = ((ObjMove_GetY(to_obj)-ObjMove_GetY(from_obj))^2 + (ObjMove_GetX(to_obj)-ObjMove_GetX(from_obj))^2)^0.5;
			r += speed;
			if (pr < r) { Obj_Delete(obj); break; }
			
			let pa = atan2(ObjMove_GetY(to_obj)-ObjMove_GetY(from_obj), ObjMove_GetX(to_obj)-ObjMove_GetX(from_obj));
			ObjMove_SetPosition(obj, ObjMove_GetX(from_obj)+r*cos(pa), ObjMove_GetY(from_obj)+r*sin(pa));
			ObjMove_SetAngle(obj, pa);
			yield;
		}
	}
	
	task TRecoveryShot()
	{
		let uchi_speed = 2.5;
		let graphic = BGW_KUNAI_RED + SHOT_COLOR[eColor];
		let wt = [0, 0, 0, 5][Difficult];
		let life = ObjEnemy_GetInfo(objFamilier, INFO_LIFE);
		
		let st = 0;
		while(CanShotBullet(objFamilier))
		{
			// ふっかつ！
			if (IsTimeStopObj(objFamilier))
			{
				EffectConcentrationPointEx(ObjMove_GetX(objFamilier), ObjMove_GetY(objFamilier), objFamilier,
					[64,64,128], 5, 3, 120, 120);
				
				while(IsTimeStopObj(objFamilier)) { yield; }
				if (CanShotBullet(objFamilier))
				{
					RecoveryShot(ObjMove_GetX(objFamilier), ObjMove_GetY(objFamilier), GetAngleToPlayer(objFamilier));
					CallSound(sndShot4);
				}
				// 打ち返しチェック更新
				life = ObjEnemy_GetInfo(objFamilier, INFO_LIFE);
			}
			/*
			// 打ち返しやばいむり
			if (wt > 0)
			{
				if (st >= wt && ObjEnemy_GetInfo(objFamilier, INFO_LIFE) < life)
				{
					UchikaeshiShot(ObjMove_GetX(objFamilier), ObjMove_GetY(objFamilier),
						uchi_speed, GetAngleToPlayer(objFamilier)+180+rand(-120,120), graphic, 15, rand(1,3));
					CallSound(sndShot3);
					
					life = ObjEnemy_GetInfo(objFamilier, INFO_LIFE);
					st = 0;
				}
			}
			*/
			st++;
			wait(1);
		}
	}
	
	task UchikaeshiShot(x, y, speed, angle, graphic, delay, first_speed)
	{
//		let px = GetPlayerX;
//		let py = GetPlayerY;
		let obj = My_CreateShotA1(x, y, 0, 0, graphic, delay);
		ascent(t in 0 .. 30)
		{
			if (Obj_IsDeleted(obj)) { break; }
			let tmp = (30-t)/30;
			x += tmp*speed*cos(angle);
			y += tmp*speed*sin(angle);
			ObjMove_SetPosition(obj, x, y);
			ObjMove_SetAngle(obj, GetAngleToPlayer(obj));
		}
		if (!Obj_IsDeleted(obj))
		{
			ObjMove_AddPatternA2(obj, 0, NO_CHANGE, NO_CHANGE, speed/120, 0, speed);
		}
	}

	task RecoveryShot(x, y, angle)
	{
		let way = 10;
		let way2 = [1, 1, 3, 3][Difficult];
		let speed = [1, 1, 1.25, 1.25][Difficult];
		let graphic = BGW_ICE_RED + SHOT_COLOR[eColor];
		
		ascent(i in 0 .. way)
		{
			let va1 = angle + i*360/way;
			let va2 = angle + (i+1)*360/way;
			let vr1 = [1, 0.66][i%2];
			let vr2 = [0.66, 1][i%2];
			let vx1 = cos(va1)*vr1;
			let vy1 = sin(va1)*vr1;
			let vx2 = cos(va2)*vr2;
			let vy2 = sin(va2)*vr2;
			ascent(j in 0 .. way2)
			{
				let tmp = j/way2;
				let vx = vx1*(1-tmp) + vx2*tmp;
				let vy = vy1*(1-tmp) + vy2*tmp;
				let va = atan2(vy, vx);
				let vs = (vx^2+vy^2)^0.5 * speed;
				ascent(i in 0 .. 3)
				{
					My_CreateShotA1(ObjMove_GetX(objFamilier), ObjMove_GetY(objFamilier), vs*(1-absolute(i-1)*0.025), va+(i-1)*1, graphic, 15);
				}
			}
		}
	}
	
	//カラー取得
	function GetEffectColorS04(color_type)
	{
		alternative(color_type)
		case(EFF_RED)		{ return([60, 0, 0]); }
		case(EFF_ORANGE)	{ return([48, 24, 0]); }
		case(EFF_YELLOW)	{ return([32, 32, 0]); }
		case(EFF_GREEN)		{ return([0, 38, 0]); }
		case(EFF_SKY)		{ return([0, 40, 40]); }
		case(EFF_BLUE)		{ return([0, 0, 72]); }
		case(EFF_PURPLE)	{ return([48, 0, 48]); }
		others			{ return([16, 16, 16]); }
	}
}
