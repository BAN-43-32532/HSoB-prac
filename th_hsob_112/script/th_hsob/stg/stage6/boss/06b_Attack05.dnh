#東方弾幕風[Single]
#ScriptVersion[3]
#Title["ﾎﾛｳﾁｬﾝ通常5"]
#Text["ﾎﾛｳﾁｬﾝ通常5"]
#Background[""]
#System["./../../../system/System.dnh"]

//---------------------------------------------------------------------

// 関数取り込み
#include"./../../../lib/lib_boss.dnh"
#include"./lib_Horou.dnh"

@Event {
	alternative(GetEventType())
	case(EV_REQUEST_LIFE)		{ SetScriptResult(5777);	}
	case(EV_REQUEST_TIMER)		{ SetScriptResult(70);		}
	BossEvent();
}

@Initialize {
	// アイテム数
	bossDropItem = 50;
	//ダメージ透過率
	dIni_Shot = 180;
	// 停止無効
	bossResistTime = 1;

	Boss_Init();	//初期設定
	objEnemy = CreateBoss(BOSS_ID_HOROU);	//ボスセット

	// チャプター開始
	ChapterStartBoss(GetBossID(objEnemy), 5, CHAPTER_BOSS);
	
	InitHorou();

	// 使い魔と体力連動
	CheckLinkLife_Boss(objEnemy);

	Task_Main();
	
	SetBackGroundBase( objEnemy, 4 );
}

@MainLoop {
	yield;
}


// メインタスク
task Task_Main
{
	// オプション配置
	SetEffect06_Opt(objEnemy, 0, 0);
	objHorouEffect = SetEffect06(objEnemy);

	StandBy_TimeStop(objEnemy, CenX, 180, 210);
	waitObj(objEnemy, 60);
	HorouReigekiSynchro(WEAPON_SKY, 180);
	
	let add_wt = [30, 0, 0, -30][Difficult];
	let add_wt2 = [-60, 0, -45, -45][Difficult];
	
	let t = 0;
	while(eAlive)
	{
		if (t > 0)
		{
			SetAction(objEnemy, ACT_SHOT1, 60);
			BossCharge(objEnemy);
			waitObj(objEnemy, 60);
		}

		if (!eAlive) { return; }
		local
		{
			let angle = GetAngleToPlayer(objEnemy);
			let r = ((ObjMove_GetX(objEnemy)-GetPlayerX)^2 + (ObjMove_GetY(objEnemy)-GetPlayerY)^2)^0.5;
			r = min(64, r);

			MoveToSlowdown(objEnemy, ObjMove_GetX(objEnemy)-cos(angle)*32, ObjMove_GetY(objEnemy)-sin(angle)*32, 45);
			SetAction(objEnemy, ACT_MOVE, 45);
			waitObj(objEnemy, 45);
			if (!eAlive) { return; }
			MoveToSlowdown(objEnemy, ObjMove_GetX(objEnemy)+cos(angle)*r, ObjMove_GetY(objEnemy)+sin(angle)*r, 60);
			TShot_sub(angle, 1);
			TShot_sub(angle, -1);
			SetAction(objEnemy, ACT_MOVE, 60);
		}
		waitObj(objEnemy, 120+add_wt);

		if (!eAlive) { return; }
		BossCharge(objEnemy);
		waitObj(objEnemy, 60);

		if (!eAlive) { return; }
		local
		{
			let angle = GetAngleToPlayer(objEnemy);
			let r = 96;

			MoveToSlowdown(objEnemy, ObjMove_GetX(objEnemy)-cos(angle)*r, ObjMove_GetY(objEnemy)-sin(angle)*r, 60);
			TShot_sub(angle, 1);
			TShot_sub(angle, -1);
			SetAction(objEnemy, ACT_MOVE, 60);
		}
		waitObj(objEnemy, 150);

		if (!eAlive) { return; }
		local
		{
			let angle = GetAngleToPlayer(objEnemy);
			TLaser(angle);
			SetAction(objEnemy, ACT_SHOT2, 120);
		}
		waitObj(objEnemy, 60+add_wt2);
		
		if (!eAlive) { return; }
//		CallSound(sndPower3);
		waitObj(objEnemy, 30);

		if (!eAlive) { return; }
		local
		{
			MoveToSlowdown(objEnemy, CenX, 180, 90);
			SetAction(objEnemy, ACT_MOVE, 90);
		}
		waitObj(objEnemy, 90);
		t++;
	}
	
	task TShot_sub(angle, muki)
	{
		let speed = [2, 2, 2.5, 3][Difficult];
//		let angle = 90;
		let way = [15, 15, 18, 18][Difficult];
		let count = [9, 12, 12, 12][Difficult];
		let graphic = BGW_WING_SKY;
		
		ascent(i in 0 .. count)
		{
			if (!eAlive) { return; }
			let sr = 160-i*5;
			let way_angle = 150-i*10;
			let tmp_way = way-i;
			let ss = speed * (1 - i*0.025);
			let oa = 90 - i*5;
			local
			{
				let sa = angle + oa*muki;
				let sx = ObjMove_GetX(objEnemy) + 32*cos(sa);
				let sy = ObjMove_GetY(objEnemy) + 32*sin(sa);
				WingShotWay(sx, sy, ss, sa, graphic, 30, 60+i*7, tmp_way, way_angle/tmp_way*muki, sr);
			}
			CallSound(sndShot2);
			waitObj(objEnemy, 5);
		}
	}

	task TLaser(angle)
	{
		let way = 7;
		let speed = 16;

		let shot_speed = [0.75, 0.75, 0.75, 1][Difficult];
		let shot_count = [0, 8, 8, 10][Difficult];

		ascent(i in 0 .. way)
		{
			if (!eAlive) { return; }
			let oa = 135 - i*10;
			
			let muki = 1;
			loop(2)
			{
				let sa = angle + oa*muki;
				let sx = ObjMove_GetX(objEnemy) + 32*cos(sa);
				let sy = ObjMove_GetY(objEnemy) + 32*sin(sa);
				HorouLaserA05(sx, sy, speed, sa, 20, 24, BGW_LIGHT_L_SKY, 60,
					shot_speed, shot_count, BGW_CHRYSTAL_S_SKY);
				muki = -muki;

			}
			waitObj(objHorouTablet, 8);
		}
	}
}

task HorouLaserA05(x, y, speed, angle, l_len, l_wid, graphic, delay, speed2, count2, graphic2)
{
	CallSound(sndBulletBreak);
	
	let vs = speed*0.75;
	let va = angle;
	
	let obj = CreateHorouLaser(x, y, vs, va, l_len, l_wid, graphic, delay);
	ObjMove_AddPatternA2(obj, 0, vs, NO_CHANGE, -vs/30, 0, vs/8);
	ObjMove_AddPatternA2(obj, 30, NO_CHANGE, NO_CHANGE, speed/45, 0, speed);
	MoveHorming02(obj, 12, 60, 45);
	
	wait(60);
	while(!Obj_IsDeleted(obj))
	{
		if (!CheckDispIN(obj, 0))
		{
			let pos = GetVergePosition(ObjMove_GetX(obj)-speed*cos(ObjMove_GetAngle(obj)),
						ObjMove_GetY(obj)-speed*sin(ObjMove_GetAngle(obj)),
						ObjMove_GetAngle(obj));
			let sa = ObjMove_GetAngle(obj)+180;
			DelayWay(pos[0], pos[1], 0, sa, speed2/120, speed2, graphic2, 30, count2, 0, delay);
			break;
		}
		wait(1);
	}

	task DelayWay(x, y, speed, angle, add_speed, max_speed, graphic, delay, way, r, timer)
	{
		wait(timer);
		if (!eAlive || way <= 0) { return; }
		
		CallSound(sndShot4);
		
		let w_cen = 0;
		if (way > 1) { w_cen = (way-1)/2; }
		ascent(j in 0 .. 3)
		{
			ascent(i in 0 .. way)
			{
				let tmp = i/way;
				let pos = Rotate2D_XY(1, 1.732*(tmp-0.5)*2, angle+j*120);
				let sa = atan2(pos[1], pos[0]);
				let ss = ((pos[1])^2+(pos[0])^2)^0.5;
				let sx = x + r*pos[0];
				let sy = y + r*pos[1];
				let obj = My_CreateShotA2(sx, sy, ss*speed, sa, ss*add_speed, ss*max_speed, graphic, delay);
				Obj_SetRenderPriorityI(obj, GetShotRenderPriorityI+1);
			}
		}
	}
}

task WingShotWay(x, y, speed, angle, graphic, delay, timer, way, way_angle, r)
{
	ascent(i in 0 .. way)
	{
		let add_a = (i-(way-1)/2)*way_angle;
		let to_r = (0.25 + 0.75*(i+1)/way) * r;
		let to_offset = add_a*1;
		WingShot(x, y, speed, angle, graphic, delay,
			timer, add_a, to_r, to_offset);
	}
}

task WingShot(x, y, speed, angle, graphic, delay, timer, add_a, to_r, to_offset)
{
	let obj = My_CreateShotA1(x, y, 0, angle, graphic, delay);
	WingAddShot(obj);
	ascent(t in 0 .. timer)
	{
		if (Obj_IsDeleted(obj)) { return; }
		let tmpd = GetCurve_d((t+1)/timer);
		let tmpa = GetCurve_ad((t+1)/timer);
		let br = tmpd * to_r;
		let ba = angle + add_a*tmpa;
		let sx = x + br*cos(ba);
		let sy = y + br*sin(ba);
		let sa = ba + to_offset*tmpd;
		ObjMove_SetPosition(obj, sx, sy);
		ObjMove_SetAngle(obj, sa);
		yield;
	}
	if (Obj_IsDeleted(obj)) { return; }
	ObjMove_AddPatternA2(obj, 0, NO_CHANGE, NO_CHANGE, speed/120, 0, speed);
	CallSound(sndShot2);
}
task WingAddShot(objBase)
{
	let obj = My_CreateShotA1(ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 0, 0, ADD_BGW_FUGU_WHITE, 0);
	let col = GetEffectColor(BULLET_EFFECT[ObjShot_GetImageID(objBase)%8]);
	ObjRender_SetColor(obj, col[0]*0.66+64, col[1]*0.66+64, col[2]*0.66+64);
	SetShotDisabled(obj);
	let t = 0;
	while(!Obj_IsDeleted(objBase))
	{
		if (Obj_IsDeleted(obj)) { return; }
		if (t < 60)
		{
			let tmp = GetCurve((t+1)/60);
			ObjRender_SetAlpha(obj, tmp*255);
		}
		ObjMove_SetPosition(obj, ObjMove_GetX(objBase), ObjMove_GetY(objBase));
		ObjMove_SetAngle(obj, ObjMove_GetAngle(objBase));
		t++;
		yield;
	}
	Obj_Delete(obj);
}
