

//　砂丘
task World06Object01( m_pos, add_pos, m_kill, scale ){
	let frame = 0;
	
	//　モデル初期化
	let obj		= ObjMesh_Create();
	ObjMesh_Load( obj, world06_path[2] );
	Obj_SetRenderPriorityI( obj, world_layer );
	ObjRender_SetBlendType( obj, BLEND_ALPHA );
	ObjRender_SetAngleY( obj, 90 );
	ObjRender_SetScaleXYZ( obj, -scale, scale, scale );
	
	while( true && frame < m_kill ){
		ObjRender_SetPosition( obj, m_pos[0], m_pos[1], m_pos[2] );
		
		frame++;
		m_pos[0] = m_pos[0] + add_pos[0];
		m_pos[1] = m_pos[1] + add_pos[1];
		m_pos[2] = m_pos[2] + add_pos[2];
		
		yield;
	}
	Obj_Delete( obj );
}


//　陽炎
task World06Object02( pos, spd, angle, long, scale, rgba, layer, blend ){
	let obj		= ObjPrim_Create(OBJ_SPRITE_2D);
	let _rect	= [ 256, 256 ];
	let ac		= randEffect( 32, 64 );
	let def		= randEffect( 0, 360 );
	let frame	= 0;
	let move1	= 0;
	let moveA	= 0;
	
	ObjRender_SetPosition( obj, pos[0], pos[1], 0 );
	ObjPrim_SetTexture( obj, imgEffectSpark3 );
	ObjRender_SetBlendType( obj, blend );
	Obj_SetRenderPriorityI( obj, layer );
	ObjSprite2D_SetSourceRect( obj, 0, 0, _rect[0], _rect[1] );
	ObjSprite2D_SetDestCenter( obj );
	ObjRender_SetScaleXYZ( obj, scale[0], scale[1], 0 );
	
	let sLayer	= [ 20, 28 ];
	
	let rt	= CreateRenderTexture( "rtTest", sLayer[0], sLayer[1], true );
	let shd	= CreateShaderObject( obj, 5 );
	ObjShader_SetVector( shd, "m_rtSize", 1024, 512, 0, 0 );
	ObjShader_SetVector( shd, "m_texSize", _rect[0], _rect[1], 0, 0 );
	
	while( !Obj_IsDeleted(obj) && frame < long ){
		let angc = ac * sin( def+frame*(spd*4) );
		let spos = [
			ObjRender_GetX(obj) + spd * cos( angle + angc ),
			ObjRender_GetY(obj) + spd * sin( angle + angc ),
		];
		move1 = 1 * sin( moveA );
		ObjRender_SetPosition( obj, spos[0], spos[1], 0 );
		ObjRender_SetAlpha( obj, move1*rgba[3] );
		
		RenderToTextureA1( rt, sLayer[0], sLayer[1], true );
		
		ObjShader_SetFloat( shd, "m_frame", frame );
		ObjShader_SetVector( shd, "m_pos", spos[0], spos[1], 0, 0 );
		ObjShader_SetVector( shd, "m_color", rgba[0]*(1/255), rgba[1]*(1/255), rgba[2]*(1/255), move1*(rgba[3]*(1/255)) );
		ObjShader_SetTexture( shd, "g_Texture", rt );
		
		frame++;
		if( move1 < 1 ){ moveA += 2; }
		yield;
	}
	while( move1 > 0 ){
		let angc = ac * sin( def+frame*(spd*4) );
		let spos = [
			ObjRender_GetX(obj) + spd * cos( angle + angc ),
			ObjRender_GetY(obj) + spd * sin( angle + angc ),
		];
		move1 = 1 * sin( moveA );
		ObjRender_SetPosition( obj, spos[0], spos[1], 0 );
		ObjRender_SetAlpha( obj, move1*rgba[3] );
		
		RenderToTextureA1( rt, sLayer[0], sLayer[1], true );
		
		ObjShader_SetFloat( shd, "m_frame", frame );
		ObjShader_SetVector( shd, "m_pos", spos[0], spos[1], 0, 0 );
		ObjShader_SetVector( shd, "m_color", rgba[0]*(1/255), rgba[1]*(1/255), rgba[2]*(1/255), move1*(rgba[3]*(1/255)) );
		ObjShader_SetTexture( shd, "g_Texture", rt );
		
		frame++;
		moveA += 5;
		yield;
	}
	Obj_Delete( shd );
	Obj_Delete( obj );
}


//　砂嵐
task World06Object03( pos, movep, sca, angle, long, rgb_array, alpha ){
	let obj			= ObjPrim_Create(OBJ_SPRITE_3D);
	let objScene 	= GetEnemyBossSceneObjectID();
	let OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
	let move		= [0,0,0];
	let frame		= 0;
	let move1		= 0;
	let moveA		= 0;
	
	ObjRender_SetPosition( obj, pos[0], pos[1], pos[2] );
	ObjPrim_SetTexture( obj, world06_path[3] );
	ObjRender_SetBlendType( obj, BLEND_ALPHA );
	Obj_SetRenderPriorityI( obj, world_layer+1 );
	ObjRender_SetScaleXYZ( obj, sca[0], sca[1], sca[2] );
	ObjRender_SetColor( obj, rgb_array[0], rgb_array[1], rgb_array[2] );
	ObjSprite3D_SetSourceDestRect( obj, 0, 0, 256, 256 );
	ObjRender_SetAngleXYZ( obj, angle[0], angle[1], angle[2] );
	ObjSprite3D_SetBillboard( obj, true );
	
	while( move1 < 1 ){
		objScene 	= GetEnemyBossSceneObjectID();
		OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
		
		move1 = 1 * sin( moveA );
		
		ObjRender_SetPosition( obj, pos[0]+move[0], pos[1]+move[1], pos[2]+move[2] );
		ObjRender_SetAlpha( obj, move1*alpha );
		
		if( !OnSpell ){
			frame++;
			moveA += 1;
			move[0] = move[0] + movep[0];
			move[1] = move[1] + movep[1];
			move[2] = move[2] + movep[2];
		}
		else{ break; }
		
		yield;
	}
	move1 = 0;
	moveA = 0;
	while( frame < long ){
		objScene 	= GetEnemyBossSceneObjectID();
		OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
		
		ObjRender_SetPosition( obj, pos[0]+move[0], pos[1]+move[1], pos[2]+move[2] );
		
		if( !OnSpell ){
			frame++;
			move[0] = move[0] + movep[0];
			move[1] = move[1] + movep[1];
			move[2] = move[2] + movep[2];
		}
		else{ break; }
		
		yield;
	}
	while( move1 < 1 ){
		objScene 	= GetEnemyBossSceneObjectID();
		OnSpell		= ObjEnemyBossScene_GetInfo(objScene,INFO_IS_SPELL);
		
		move1 = 1 * sin( moveA );
		
		ObjRender_SetPosition( obj, pos[0]+move[0], pos[1]+move[1], pos[2]+move[2] );
		ObjRender_SetAlpha( obj, alpha - move1*alpha );
		
		if( !OnSpell ){
			frame++;
			moveA += 2;
			move[0] = move[0] + movep[0];
			move[1] = move[1] + movep[1];
			move[2] = move[2] + movep[2];
		}
		else{ break; }
		
		yield;
	}
	Obj_Delete( obj );
}