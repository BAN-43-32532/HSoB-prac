#東方弾幕風[Single]
#ScriptVersion[3]
#Title["セトスペカ3"]
#Text["E-N:神器「物理と魔法を司る宝杖」　H:宝杖「碑文の杖ウアス＆アンク」　L:魔宝杖「真名入りウアス＆アンク」"]
#Background[""]
#System["./../../../system/System.dnh"]

//---------------------------------------------------------------------

// 関数取り込み
#include"./../../../lib/lib_boss.dnh"
#include"./lib_Set.dnh"

@Event {
	alternative(GetEventType())
	case(EV_REQUEST_LIFE)		{ SetScriptResult(320);	}
	case(EV_REQUEST_TIMER)		{ SetScriptResult(65);		}
	BossEvent();
}

let yAdd = 0;
let RightHandPos = [CenX-120, 150];
let LeftHandPos = [CenX+120, 150];

@Initialize {
	let SPELL_ID = 63;
	let SPELL_NAME = [6, 6, 7, 8][Difficult];


	//ダメージ透過率
	dIni_Shot = 10;
	// アイテム数
	bossDropItem = 150;

	Boss_Init();	//初期設定
	objEnemy = CreateBoss(BOSS_ID_SET);	//ボスセット
	//手のオブジェクト初期化
	SetHandInitialize();

	//スペカデータ・セット
	SetSpellCardData(GetSpellCardID(SPELL_ID), SPELL_NAME, 
	GetCurrentScriptDirectory()~"05c_Background.dnh",
	GetBossTexture(objEnemy, I_CUTIN), 0.6, CUTMOTION_NORMAL);

	// チャプター開始
	ChapterStartBoss(GetBossID(objEnemy), SPELL_NAME, CHAPTER_SPELL);
	CheckLinkLife_Boss(objEnemy);

	Task_Main();
}

@MainLoop {
	yield;
}

// メインタスク
task Task_Main
{
	let wtInit = 0;
	let objHand = Ini_SetAndSetHand(wtInit, CenX, 160,
					RightHandPos[0], RightHandPos[1],
					LeftHandPos[0], LeftHandPos[1]);
//	WaitSetHand(wtInit);
	wait(60);
	SetSetHandMove01(objHand[0], SET_RIGHT_HAND, FIST_RIGHT);
	SetSetHandMove01(objHand[1], SET_LEFT_HAND, FIST_LEFT);
	CallSpellCard(true);	//スペカ起動
	
	let D = 1;
	BossCharge(objEnemy);
/*	while(eAlive){
		let ang = GetAngleToPlayer(objEnemy);
		waitObj(objEnemy, 240);
	}*/
}

task SetSetHandMove01(objHand, handNum, fistNum){
	let ChargeCancel = false;
	let eColor = EFF_PURPLE;
	let iniPos = [RightHandPos, LeftHandPos][handNum%2];
	let D = [-1, 1][handNum%2];
	let WasLength = 280;
	CheckLinkLife_Familier(objEnemy, objHand, 0.6);	// ボスと体力連動
	TAct();
	WaitForKilledFamilier(objHand, 8, 0);
	ZakoFinalize(objHand, eColor);
	SetEnemyVisible(objHand, false);
	task TAct()
	{
		let count = 0;
		if(handNum == SET_LEFT_HAND){count++;}
		while(CanShotBullet(objHand)){
			if(count%2 == 0){
				TMoveAnkh(objHand);
			}else{
				TMoveWas(objHand);
			}
			wait(1290);
			count++;
		}
	}
	
	task TMoveWas(objHand){
		let BX = GetCenterX();
		let BY = GetClipMinY()-500;
		let angRate  = 0.015;
		let Collision = false;
		let WasBreak = false;
		SetMovePositionBraking03(objHand, GetCenterX+384*D, iniPos[1], 90);
		wait(90);
		if(!CanShotBullet(objHand)){return;}
		CallSound(sndBoon);
		Ini_HandAngle(objHand, 90+45*D, atan2(iniPos[1]-BY, iniPos[0]-BX)%360+90*D, 150);
		TWas();
		TFist(objHand, fistNum);
//		ObjMove_SetAngle(objHand, 90+90*D);
		SetMovePositionBraking01(objHand, iniPos[0], iniPos[1], 90);
		wait(120);

		//パラメータ関係　ここから
		let ang = ObjMove_GetAngle(objHand)+180;
		let WasX = ObjMove_GetX(objHand)+30*cos(ang);
		let WasY = ObjMove_GetY(objHand)+30*sin(ang);
		let B_R = ((WasY - BY)^2 + (WasX - BX)^2)^0.5;
		let B_ANG = atan2(WasY - BY, WasX - BX);

		let SountWtArray = [24, 16, 12, 8, 6, 4, 3, 3, 3, 3, 2, 2, 2, 2];
		let wngWt = 30;
		let wngWt2 = 30;
		let clsnTime = 60;
		if(Difficult == D_HARD){
			SountWtArray = [24, 16, 12, 8, 6, 4, 3, 3, 3, 2, 2, 2];
			wngWt = 15;
			wngWt2 = 25;
			clsnTime = 90;
		}
		//パラメータ関係　ここまで
		
		SetEnemyVisible(objHand, true);			//ここまでは自機ショットが効かない（碧対策）
		
		ascent(i in 0 .. 4){
			if(!CanShotBullet(objHand)){return;}
			ChargeCancel = IsTimeStopObj(objHand);		//凍結時の攻撃判定
			WasRMoveEx(objHand, B_R, 400, 45);
			ascent(t in 0 .. wngWt){
				if(!CanShotBullet(objHand) || IsTimeStopObj(objHand)){			ChargeCancel = true;	}
				let aR = angRate*t/wngWt;
				waitWasHomingAngle(objHand, aR, aR, 1);
			}
			
			if(!ChargeCancel){													SoundWarning(SountWtArray);	}			//合計90フレーム待機

			loop(3){
				if(!CanShotBullet(objHand)){return;}
				if(!ChargeCancel){												Effect_LaserWarning(objHand, 15, 900, wngWt2+15);	}
				loop(wngWt2){
					if(!CanShotBullet(objHand) || IsTimeStopObj(objHand)){		ChargeCancel = true;	}
					waitWasHomingAngle(objHand, angRate, angRate, 1);
				}
			}
			
			if(!CanShotBullet(objHand)){return;}
			if(!ChargeCancel){													Effect_LaserWarning(objHand, 24, 900, 45);	}
			let count = [1, 1, 3, 1][Difficult];
			let time = clsnTime;
			while(time > 0 && count > 0){
				if(!ChargeCancel){												WasRMoveDown(objHand, [1.0, 1.0, 2.5, 1.0][Difficult]);	}
				while(!Collision){
					if(time <= 0 || ChargeCancel){break;}
					fWasHomingManage(objHand, angRate);
					time--;
					wait(1);
				}
				count--;
				
				let t2 = 15;
				while(Collision){
					if(t2 <= 0 || time <= 0 || count <= 0 || ChargeCancel){break;}
					B_R += (400-B_R)*0.15;
					fWasHomingManage(objHand, angRate);
					time--;
					t2--;
					wait(1);
				}
				Collision = false;
			}
			loop(time){
				fWasHomingManage(objHand, 0);
				wait(1);
			}
//			if(!IsTimeStopObj(objHand)){
//			}
		}
		if(!CanShotBullet(objHand)){return;}
		WasRMove(objHand, B_R, 400, 45);

		SetEnemyVisible(objHand, false);						//ここから先は自機ショットが効かない（碧対策）
		waitWasHomingAngle(objHand, 0.00, angRate, 30);		
		while(IsTimeStopObj(objHand)){											wait(1);	}	//凍結解除まで待機
		
		if(!CanShotBullet(objHand)){return;}
		SoundWarning([36, 24, 16, 12, 8, 6, 3, 3, 3, 3, 2, 2, 2]);			//合計120フレーム待機
		CallSound(sndPower1);
		descent(i in 0 .. 4){
			Effect_LaserWarning(objHand, 15, 900, 45);
			waitWasHomingAngle(objHand, angRate, [angRate, 0.00][i == 0], 30);
		}
		loop(2){
			if(!CanShotBullet(objHand)){return;}
			WasRMoveDown(objHand, 1.5);
			loop(30){
				fWasHomingManage(objHand, 0);
				if(!Collision){
				}else{
					B_R += (400-B_R)*0.12;
				}
				wait(1);
			}
			Collision = false;
		}
		WasRMoveDown(objHand, 1.5);
		while(!Collision){
			fWasHomingManage(objHand, 0);
			wait(1);
		}
		if(!CanShotBullet(objHand)){return;}
		WasBreak = true;
		let bltquant = [1, 2, 3, 3][Difficult];
		let bltSpd = [0.75, 1.25, 1.25, 1.25][Difficult];
		let bltSAdd = [-0.5, -0.5, -0.3, -0.3][Difficult];
		let bltItv = [10, 10, 10, 10][Difficult];
		let bltItv2 = [3, 4, 5, 5][Difficult];
		let bltRd = trunc(rand(0, bltItv*10-0.001))%bltItv;
		let bx = WasX + WasLength*cos(ang+90*D);
		let by = WasY + WasLength*sin(ang+90*D);
		let ba = ang-90*D;
		let grap = BGB_BILL_ORANGE;
		
		TWasBroken(80, 8, ba, bx, by, 1.25, grap, bltRd, bltItv, bltItv2);

		task TWasBroken(quant, dist, baseAng, x, y, spd, grap, count, itv, itv2){
			if(Difficult <= D_HARD){
				ascent(i in 0 .. bltquant){
					WasBroken(quant, dist, baseAng, x, y, bltSpd+bltSAdd*i, baseAng+90, grap, count+itv*(0.5*i), itv, itv2);
					WasBroken(quant, dist, baseAng, x, y, bltSpd+bltSAdd*i, baseAng-90, grap, count+itv*(0.5*i+0.5), itv, itv2);
				}
			}
		}
		
		task WasBroken(quant, dist, baseAng, x, y, spd, ang, grap, count, itv, itv2){
			if(!CanShotBullet(objHand) || IsTimeStopObj(objHand)){return;}
			ascent(i in 0 .. quant){
				let bx = x+dist*i*cos(baseAng);
				let by = y+dist*i*sin(baseAng);
				if(count%itv < itv2){
					My_CreateShotA2(bx, by, 0, ang, spd/120, spd, grap, 10);
				}
				count++;
			}
		}

		task SoundWarning(wtArray){
			ascent(i in 0 .. length(wtArray)){
				if(!CanShotBullet(objHand) || IsTimeStopObj(objHand)){return;}
				CallSound(sndShot2);
				wait(wtArray[i]);
			}
		}

		task WasRMoveEx(objHand, ini_R, fin_R, frame){
			B_R = ini_R;
			ascent(time in 1 .. frame+1){
				if(!CanShotBullet(objHand)){return;}
				while(IsTimeStopObj(objHand)){
					wait(1);
				}
				let t_rate = 90 / frame * time;
				B_R = ini_R + (fin_R - ini_R) * sin(t_rate);
				wait(1);
			}
		}

		task WasRMove(objHand, ini_R, fin_R, frame){
			B_R = ini_R;
			ascent(time in 1 .. frame+1){
				if(!CanShotBullet(objHand) || IsTimeStopObj(objHand)){return;}
				let t_rate = 90 / frame * time;
				B_R = ini_R + (fin_R - ini_R) * sin(t_rate);
				wait(1);
			}
		}
		
		task WasRMoveDown(objHand, R_Add){
			let R_Acce = 2;
			loop{
				if(!CanShotBullet(objHand) || IsTimeStopObj(objHand)){return;}
				let x = WasX + WasLength*cos(ang+90*D);
				let y = WasY + WasLength*sin(ang+90*D);
				if(y > GetClipMaxY()+8 ){break;}
				R_Acce += R_Add;
				B_R += R_Acce;
				wait(1);
			}
			if(!CanShotBullet(objHand)){return;}
			CallSound(sndFlare);
			
			let pos = GetWallPos(WasX, WasY, ang+90*D, 0);
			if(Difficult <= D_NORM){
				Bussyaaaa(100, pos[0], pos[1], 1.2, 0.04, ang-90*D, 10, 5);
			}else if(Difficult <= D_HARD){
				Bussyaaaa2(100, pos[0], pos[1], 1.2, 0.04, ang-90*D, 10, 10, 100/20);
			}else{
				TBussyaaaa2(50, pos[0], 32, pos[1], 1.2, 0.08, ang-90*D, 5, 3, 50/8);
				TBussyaaaa2(50, pos[0], -32, pos[1], 1.2, 0.08, ang-90*D, 5, 3, 50/8);
			}

			Collision = true;

			task TBussyaaaa2(quant, x,xAdd, y, spd, spdAdd, ang, rdR, rdAcr, interval){
				let count = 1;
				while(CheckDispX_LineINEx(x, 96)){
					if(!CanShotBullet(objHand)){return;}
					TBussyaaaa(quant, x, y, spd, spdAdd, ang, rdR, rdAcr, interval);
					x += xAdd*count/sin(ang);
					count++;
					wait(6);
				}
			}

			task TBussyaaaa(quant, x, y, spd, spdAdd, ang, rdR, rdAcr, interval){
				DisplayShake(10, 2);
				descent(i in 0 .. 45){
					if(!CanShotBullet(objHand)){return;}
					let rd = 20*i/45;
					let objEffect = CreateStraightLaserA1(x+rand(-rd, rd), y, ang, 600, 6, 0, BGW_BEAM_YELLOW, 0);
					ObjStLaser_SetSource(objEffect, false);
					ObjShot_SetAutoDelete(objEffect, false);
					ObjShot_SetIntersectionEnable(objEffect, false);
					ObjShot_SetItemChange(objEffect, false);
					ObjRender_SetColor(objEffect, 191, 191, 63);
//					ObjRender_SetAlpha(objEffect, 127);
					wait(2);
				}
				if(!CanShotBullet(objHand)){return;}
				Bussyaaaa2(quant, x, y, spd, spdAdd, ang, rdR, rdAcr, interval);
			}

			task Bussyaaaa(quant, x, y, spd, spdAdd, ang, rdR, rdAcr){
				CallSound(sndFlare);
				DisplayShake(10, 4);
				let grap = [BGB_BALL_S_ORANGE, BGW_BALL_SS_ORANGE];
				ascent(i in 0 .. quant){
					let s = spd+spdAdd*i;
					let rd_r = rand(0, rdR);
					let rd_a = rand(0, 360);
					My_CreateShotA2(x + rd_r*cos(rd_a), y + rd_r*sin(rd_a),  s*2, ang + rand(-rdAcr,rdAcr), -s/30, s, grap[i%2], 0);
				}
			}
			
			task Bussyaaaa2(quant, x, y, spd, spdAdd, ang, rdR, rdAcr, itv){
				CallSound(sndFlare);
				DisplayShake(10, 2);
				let grap = [BGB_BALL_S_ORANGE, BGW_BALL_SS_ORANGE];
				let grapAdd = [ADD_BGB_BALL_S_ORANGE, ADD_BGW_BALL_SS_ORANGE];
				let c = 0;
				ascent(i in 0 .. quant){
					c++;
					let s = spd+spdAdd*i;
					let rd_r = rand(0, rdR);
					let rd_a = rand(0, 360);
					if(c >= itv){
						c -= itv;
						let objS = My_CreateShotA2(x + rd_r*cos(rd_a), y + rd_r*sin(rd_a),  s*2, ang + rand(-rdAcr*2,rdAcr*2), -s/30, s, grapAdd[0], 0);
//						ObjMove_AddPatternA2(objS, 30, NO_CHANGE, NO_CHANGE, s/120, 0, s);
						ObjMove_AddPatternB3(objS, 30, NO_CHANGE, NO_CHANGE, 0, rand(0.018, 0.022), 0, 2.0, grap[0]);
					}else{
						let objS = My_CreateShotA2(x + rd_r*cos(rd_a), y + rd_r*sin(rd_a),  s*2, ang + rand(-rdAcr,rdAcr), -s/30, s, grapAdd[i%2], 0);
						ObjRender_SetColor(objS, 255, 127, 63);
					}
				}
			}
		}

		task Effect_LaserWarning(objHand, r, leng, time){
			let R = B_R;
			ascent(i in 1 .. time+1){
				let r2 = r*sin(90*i/time);
				Effect(objHand, r2,  90, leng, 20);
				Effect(objHand, r2, -90, leng, 20);
				wait(1);
			}
			
			task Effect(obj, r, angPlus, leng, time){
				let bx = BX + R*cos(B_ANG);
				let x2 = r * cos(B_ANG + angPlus);
				let by = BY + R*sin(B_ANG);
				let y2 = r * sin(B_ANG + angPlus);
				let objEffect = CreateStraightLaserA1(bx + x2, by + y2, B_ANG, leng, 6, 9999, BGW_BEAM_E_PURPLE, 0);
				ObjStLaser_SetSource(objEffect, false);
				ObjShot_SetAutoDelete(objEffect, false);
				ObjShot_SetIntersectionEnable(objEffect, false);
				ObjShot_SetItemChange(objEffect, false);

				descent(i in 1 .. time+1){
					if(!CanShotBullet(obj)){break;}
					bx = BX + R*cos(B_ANG);
					x2 = r * cos(B_ANG + angPlus);
					by = BY + R*sin(B_ANG);
					y2 = r * sin(B_ANG + angPlus);
					ObjMove_SetPosition(objEffect, bx + x2, by + y2);
					ObjStLaser_SetAngle(objEffect, B_ANG);
					ObjRender_SetAlpha(objEffect, 31*i/time);
					wait(1);
				}
				Obj_Delete(objEffect);
			}
		}
		
		function waitWasHomingAngle(objHand, iniAngRate, finAngRate, frame){
			ascent(t in 0 .. frame){
				if(!CanShotBullet(objHand)){return;}
				if(!IsTimeStopObj(objHand)){
					let angRate = iniAngRate + (finAngRate - iniAngRate) * t/frame;
					fWasHomingManage(objHand, angRate);
				}
				waitObj(objHand, 1);
			}
		}
		
		function fWasHomingManage(objHand, angRate){
			ang = ObjMove_GetAngle(objHand)+180;
			WasX = ObjMove_GetX(objHand)+30*cos(ang);
			WasY = ObjMove_GetY(objHand)+30*sin(ang);
			B_ANG = atan2(WasY - BY, WasX - BX);
			let toAng = atan2(GetPlayerY()-BY, GetPlayerX()-BX);
			toAng = HomingAngle(angRate, B_ANG, toAng);
			let x = BX + B_R*cos(toAng) + 30*cos(ang+180);
			let y = BY + B_R*sin(toAng) + 30*sin(ang+180);
			ObjMove_SetPosition(objHand, x, y);
			ObjMove_SetAngle(objHand, toAng+90*D);
		}

		function GetWallPos(x, y, ang, Dist){
			let objPos = [x, y];
			let VertexPos = [GetClipMinX() - Dist, GetClipMinY() - Dist,
							 GetClipMaxX() + Dist, GetClipMaxY() + Dist];
			let a1 = GetGapAngle( objPos, [VertexPos[2], VertexPos[3]] ) % 360;
			let a2 = GetGapAngle( objPos, [VertexPos[0], VertexPos[3]] ) % 360;
			let a3 = GetGapAngle( objPos, [VertexPos[0], VertexPos[1]] ) % 360;
			let a4 = GetGapAngle( objPos, [VertexPos[2], VertexPos[1]] ) % 360;
			let la = ang%360;
			let ll = 0;
/*			if(la <= a1){
				ll = (VertexPos[2] - objPos[0])/cos(la);
			}else if(la <=a2){
				ll = (VertexPos[3] - objPos[1])/sin(la);
			}else if(la <=a3){
				ll = (VertexPos[0] - objPos[0])/cos(la);
			}else if(la <=a4){
				ll = (VertexPos[1] - objPos[1])/sin(la);
			}else{
				ll = (VertexPos[2] - objPos[0])/cos(la);
			}*/
			ll = (VertexPos[3] - objPos[1])/sin(la);
			return [objPos[0] + ll*cos(la), objPos[1] + ll*sin(la)];
		}

		task TFist(objHand, fistNum){
			let ang = ObjMove_GetAngle(objHand);
			let objFist = FistShot2(ObjMove_GetX(objHand)+20*cos(ang+170), ObjMove_GetY(objHand)+20*sin(ang+170), [255, 63, 255], 40, ang+180, fistNum, 15);
			ObjShot_SetAutoDelete(objFist, false);
			ObjShot_SetSpellResist(objFist, true);
			let objImg = Obj_GetValueD(objHand, "IMAGE_ID", -1);
			Obj_SetVisible(objImg, false);
			let objImg2 = Obj_GetValueD(objFist, "IMAGE_ID", -1);
			Obj_SetValue(objFist, "AI_COLOR", [63, 15, 63]);
//			ObjRender_SetScaleX(objImg2, 0.8);
			while(CanShotBullet(objHand)){
				if(WasBreak){break;}
				ang = ObjMove_GetAngle(objHand);
				ObjMove_SetPosition(objFist, ObjMove_GetX(objHand)+20*cos(ang+170), ObjMove_GetY(objHand)+20*sin(ang+170));
				ObjMove_SetAngle(objFist, ang+180);
				wait(1);
			}
			Obj_SetVisible(objImg, true);
			Obj_Delete(objFist);
		}

		task TWas(){
			let angZ = ObjMove_GetAngle(objHand)+180;
			let objBase = My_CreateShotA1(ObjMove_GetX(objHand)+30*cos(angZ), ObjMove_GetY(objHand)+30*sin(angZ), 0, angZ, ADD_BGB_RICE_S_ORANGE, 0);
			ObjShot_SetAutoDelete(objBase, false);
			ObjShot_SetSpellResist(objBase, true);
			Obj_SetVisible(objBase, false);
			LaserY(objBase, WasLength-33-40, 33, 90*D);
			LaserY(objBase, 180, 39, -90*D);
			ascent(i in 0 .. 2){
				LaserX(objBase, 80, WasLength, 90*D, 30,  180*i, -1.2);
				LaserX(objBase, 100, WasLength, 90*D, 20, 180*i, 1.0);
			}
			while(!Obj_IsDeleted(objHand)){
				angZ = ObjMove_GetAngle(objHand)+180;
				ObjMove_SetPosition(objBase, ObjMove_GetX(objHand)+30*cos(angZ), ObjMove_GetY(objHand)+30*sin(angZ));
				ObjMove_SetAngle(objBase, angZ);
				wait(1);
			}
			Obj_Delete(objBase);
			
			task LaserY(objBase, leng, r, ang){
				let angZ = ObjMove_GetAngle(objBase)+ang;
				let objL = My_CreateStraightLaserA1Ex(ObjMove_GetX(objBase)+r*cos(angZ), ObjMove_GetY(objBase)+r*sin(angZ), angZ, leng, 16, 999999,
				 ADD_BGW_BEAM_ORANGE, 0, [false,true]);
				ObjShot_SetAutoDelete(objL, false);
				while(!Obj_IsDeleted(objBase) && !WasBreak){
					angZ = ObjMove_GetAngle(objBase)+ang;
					ObjMove_SetPosition(objL, ObjMove_GetX(objBase)+r*cos(angZ), ObjMove_GetY(objBase)+r*sin(angZ));
					ObjStLaser_SetAngle(objL, angZ);
					wait(1);
				}
				Obj_Delete(objL);
			}
			
			task LaserX(objBase, leng, r, ang, r2, ang2, a2Add){
				let angZ = ObjMove_GetAngle(objBase)+ang;
				let objL = My_CreateStraightLaserA1Ex(ObjMove_GetX(objBase)+r*cos(angZ), ObjMove_GetY(objBase)+r*sin(angZ), angZ+ang2, leng, 16, 999999,
				 ADD_BGW_RICE_M_ORANGE, 0, [false,false]);
				ObjShot_SetAutoDelete(objL, false);
				while(!Obj_IsDeleted(objBase) && !WasBreak){
					angZ = ObjMove_GetAngle(objBase)+ang;
					let lx = -leng+r2/3*cos(ang2);
					let ly = r2*sin(ang2);
					ObjMove_SetPosition(objL, ObjMove_GetX(objBase)+r*cos(angZ), ObjMove_GetY(objBase)+r*sin(angZ));
					ObjLaser_SetLength(objL, (ly^2+ lx^2)^0.5);
					ObjStLaser_SetAngle(objL, angZ+atan2(ly, lx));
					ang2 += a2Add;
					wait(1);
				}
				Obj_Delete(objL);
			}
		}
	}
	
	task TMoveAnkh(objHand){
		let AnkhPurge = false;
		let Pos = [
			[CenX+120*D, 150],
			[CenX, 105],
			[CenX-120*D, 150],
		];

		let AnkhSWay = [1, 2, 3, 3][Difficult];
		let AnkhSQuant = [60, 60, 60, 60][Difficult];
		let AnkhSWt = [4, 4, 4, 4][Difficult];
		let AnkhSSpd = [[2.4, 0.9], [3.0, 1.0], [3.0, 1.0],  [1.2, 0.75]][Difficult];
		let AnkhSWay2 = [[3, 7], [3, 9], [4, 7], [3, 5]][Difficult];
		let AnkhSWay2_2 = [[2, 4], [3, 7], [3, 4], [2, 3]][Difficult];
		SetMovePositionBraking03(objHand, GetCenterX+384*D, iniPos[1], 90);
		wait(89);
		
		if(!CanShotBullet(objHand)){return;}
		Obj_SetValue(objHand, "PAT_ANG", Obj_GetValueD(objHand, "PAT_ANG", 0)+1);
		let objBase = FAnhk(objHand);
		wait(1);
		
		if(!CanShotBullet(objHand)){return;}
		CallSound(sndBoon);
		ObjMove_SetAngle(objHand, 270);
		SetMovePositionBraking01(objHand, iniPos[0], iniPos[1], 90);
		wait(120);
		
		SetEnemyVisible(objHand, true);						//ここまでは自機ショットが効かない（碧対策）
		wait(60);
		if(!CanShotBullet(objHand)){return;}
		let D2 = 1;
		ascent(i in 0 .. 2){
			if(!CanShotBullet(objHand)){return;}
			ChargeCancel = IsTimeStopObj(objHand);
			let t = 0;
			while(IsTimeStopObj(objHand)){											t++;		wait(1);		}	//凍結解除まで待機
			SetMovePositionBraking01(objHand, Pos[i][0], Pos[i][1], 90);
			wait(120-t);
			let ang = ObjMove_GetAngle(objHand);
			if(!IsTimeStopObj(objHand) && !ChargeCancel){
				TAnhkShot(objBase, AnkhSQuant, AnkhSWay, AnkhSWt, AnkhSSpd[0], AnkhSSpd[1], AnkhSWay2, D2);
			}
			D2 = -D2;
			wait(240);
		}
		SetMovePositionBraking01(objHand, Pos[2][0], Pos[2][1], 90);
		wait(90);
		
		SetEnemyVisible(objHand, false);						//ここから先は自機ショットが効かない（碧対策）
		wait(30);
		while(IsTimeStopObj(objHand)){											wait(1);	}	//凍結解除まで待機

		if(!CanShotBullet(objHand)){return;}
		CallSound(sndBoon);
		let toAng = ((GetAngleToPlayer(objHand)+90)%360)-90;
		Ini_HandAngle(objHand, ((ObjMove_GetAngle(objHand)+90)%360)-90, toAng, 60);
		wait(60);
		
		if(!CanShotBullet(objHand)){return;}
		CallSound(sndShot1);
		AnkhPurge = true;
		ObjMove_AddPatternA2(objBase, 0, 0, NO_CHANGE, 4.5/100, 0, 4.5);
		Effect_LaserWarning2(objHand, 20, 600, 45);
		while(CheckDispINEx(ObjMove_GetX(objBase), ObjMove_GetY(objBase), 0)){
			wait(1);
		}
		
		if(!CanShotBullet(objHand)){return;}
		TAnhkShot(objBase, AnkhSQuant, AnkhSWay, AnkhSWt, AnkhSSpd[0], AnkhSSpd[1], AnkhSWay2_2, D2);
		Obj_Delete(objBase);

		task TAnhkShot(obj, quant, way, wt, MaxSpd, MinSpd, way2, D){
			if(!CanShotBullet(objHand)){return;}
			let ang = rand(0, 360);
			let D2 = 1;
			let bx = ObjMove_GetX(obj);
			let by = ObjMove_GetY(obj);
			CallSound(sndShot4);
			ascent(iQ in 0 .. quant){
				if(!CanShotBullet(objHand) || IsTimeStopObj(objHand)){return;}
				let r = 40*iQ/quant;
				let quant2 = way2[0]+trunc((way2[1]-way2[0])*iQ/quant);
				let spd = MaxSpd-(MaxSpd-MinSpd)*iQ/quant;
				ascent(iW in 0 .. way){
					let a = ang + 360*iW/way;
					ShotA(quant2, 2, bx + r*cos(a), by + r*sin(a), spd, a, 10, a+90*D2);
				}
				ang += 360*0.56/way*D;
				D2 = -D2;
				wait(wt);
			}

			task ShotA(quant, wt, x, y, spd, ang, dist, ang2){
				ascent(iQ in 0 .. quant){
					if(!CanShotBullet(objHand) || IsTimeStopObj(objHand)){return;}
					CallSound(sndShot3);
					let l = dist*(iQ-(quant-1)/2);
					let bx = x + l*cos(ang2);
					let by = y + l*sin(ang2);
					let bx2 = spd*iQ*wt*cos(ang);
					let by2 = spd*iQ*wt*sin(ang);
					My_CreateShotA2(bx + bx2, by + by2, 0, ang, spd/60, spd, BGB_BILL_YELLOW, 10);
					wait(wt);
				}
			}
		}

	function FAnhk(objHand){
			let angZ = ObjMove_GetAngle(objHand);
			let objBase = My_CreateShotA1(ObjMove_GetX(objHand)+45*cos(angZ), ObjMove_GetY(objHand)+45*sin(angZ), 0, angZ, ADD_BGB_RICE_S_YELLOW, 0);
			Obj_SetVisible(objBase, false);
			ObjShot_SetAutoDelete(objBase, false);
			ObjShot_SetSpellResist(objBase, true);
			FAnhkMove(objBase);
			return objBase;
			
			task FAnhkMove(objBase){
				let angY = 0;
				let xRate = 0;
				let t = 0;
				let height = 0;
				ascent(i in 0 .. 8){
					height += 1.6+(7.5-i)*0.75;
					let width = 15*sin(180*(i+0.5)/8);
					ShotX(objBase, height, width);
					ShotX(objBase, height, -width);
				}
				LaserX(objBase, 36, 90);
				LaserX(objBase, 36, -90);
				LaserY(objBase, 54, 180);
				while(!Obj_IsDeleted(objHand) && !AnkhPurge){
					angZ = ObjMove_GetAngle(objHand);
					xRate = sin(2*t);
					ObjMove_SetPosition(objBase, ObjMove_GetX(objHand)+45*cos(angZ), ObjMove_GetY(objHand)+45*sin(angZ));
					ObjMove_SetAngle(objBase, ObjMove_GetAngle(objHand));
					t++;
					wait(1);
				}
				while(!Obj_IsDeleted(objHand)){
					xRate = sin(2*t);
					t++;
					wait(1);
				}
				if(Obj_IsDeleted(objHand)){return;}
				
				task ShotX(objBase, height, width){
					let ang = ObjMove_GetAngle(objBase);
					let objS = My_CreateShotA1(ObjMove_GetX(objBase)+height*cos(ang), ObjMove_GetY(objBase)+height*sin(ang), 0, ang, ADD_BGW_BALL_S_YELLOW, 0);
					ObjShot_SetAutoDelete(objS, false);
					ObjShot_SetSpellResist(objS, true);
					while(!Obj_IsDeleted(objBase)){
						let ang = ObjMove_GetAngle(objBase);
						let pos1 = [height*cos(ang), height*sin(ang)];
						let pos2 = [width*xRate*cos(ang+90), width*xRate*sin(ang+90)];
						ObjMove_SetPosition(objS, ObjMove_GetX(objBase) + pos1[0] + pos2[0], ObjMove_GetY(objBase) + pos1[1] + pos2[1]);
						ObjStLaser_SetAngle(objS, ang);
						wait(1);
					}
					Obj_Delete(objS);
				}
				
				task LaserX(objBase, leng, ang){
					let objL = My_CreateStraightLaserA1Ex(ObjMove_GetX(objBase), ObjMove_GetY(objBase), ang, 0, 16, 999999, ADD_BGW_BEAM_YELLOW, 0, [true,false]);
					ObjShot_SetAutoDelete(objL, false);
					while(!Obj_IsDeleted(objBase)){
						ObjLaser_SetLength(objL, leng*xRate);
						ObjMove_SetPosition(objL, ObjMove_GetX(objBase), ObjMove_GetY(objBase));
						ObjStLaser_SetAngle(objL, ObjMove_GetAngle(objBase)+ang);
						wait(1);
					}
					Obj_Delete(objL);
				}
				task LaserY(objBase, leng, ang){
					let objL = My_CreateStraightLaserA1Ex(ObjMove_GetX(objBase), ObjMove_GetY(objBase), ang, leng, 16, 999999, ADD_BGW_BEAM_YELLOW, 0, [true,false]);
					ObjShot_SetAutoDelete(objL, false);
					while(!Obj_IsDeleted(objBase)){
						ObjMove_SetPosition(objL, ObjMove_GetX(objBase), ObjMove_GetY(objBase));
						ObjStLaser_SetAngle(objL, ObjMove_GetAngle(objBase)+ang);
						wait(1);
					}
					Obj_Delete(objL);
				}
			}
		}
	}

	task Effect_LaserWarning2(obj, r, leng, time){
		ascent(i in 1 .. time+1){
			if(!CanShotBullet(objHand)){return;}
			let r2 = r*sin(90*i/time);
			Effect(obj, r2,  90, leng, 20);
			Effect(obj, r2, -90, leng, 20);
			wait(1);
		}
		
		task Effect(obj, r, angPlus, leng, time){
			let objEffect = CreateStraightLaserA1(ObjMove_GetX(obj), ObjMove_GetY(obj), ObjMove_GetAngle(obj), leng, 6, 9999, BGW_BEAM_E_PURPLE, 0);
			ObjStLaser_SetSource(objEffect, false);
			ObjShot_SetIntersectionEnable(objEffect, false);
//					ObjRender_SetColor(objEffect, 0, 0, 0);
			ObjShot_SetItemChange(objEffect, false);

			descent(i in 1 .. time+1){
				if(!CanShotBullet(obj)){break;}
				let ang = ObjMove_GetAngle(obj);
				ObjMove_SetPosition(objEffect, ObjMove_GetX(obj) + r * cos(ang + angPlus), ObjMove_GetY(obj) + r * sin(ang + angPlus));
				ObjStLaser_SetAngle(objEffect, ang);
				ObjRender_SetAlpha(objEffect, 95*i/time);
				wait(1);
			}
			Obj_Delete(objEffect);
		}
	}
}