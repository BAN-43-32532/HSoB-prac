//------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------
//　真珠島　霊撃・緋
//------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------

// 初期設定
function InitRed( v_obj, v_playerNo )
{
	//なし
}

//　炎上付与
task SetFireDamage( v_obj ){
	if( Obj_GetValueD( v_obj, "FIRE", false ) ||
		ObjEnemy_GetInfo(v_obj, INFO_LIFE) <= 10 ){ break; }
	
	//　炎上エフェクト
	let obj		= ObjPrim_Create(OBJ_SPRITE_2D);
	let scale	= 2 + rand(-0.2,0.2);
	let alpha	= 192;
	SetFireDamage_Draw( v_obj, obj, scale, alpha );
	
	//　テクスチャidの取得と炎上シェーダ適用
	let tex		= Obj_GetValueD( v_obj, "IMAGE_ID", -1 );
	let shader	= CreateShaderObject( tex, 0 );
	let g_mask	= imgPlMask01a;
	let frame 	= 0;
	
	//　fxにマスク用テクスチャを渡す
	ObjShader_SetTexture( shader, "g_Texture", g_mask );
	
	//　3秒かけて、最大300(50*ダメージレート)ダメージを与える
	while( !Obj_IsDeleted(v_obj) && frame < 180 ){
		let dmgRate = ObjEnemy_GetInfo( v_obj, INFO_DAMAGE_RATE_SHOT );
		Obj_SetValue( v_obj, "FIRE", true );
		if( frame > 0 && frame%30 == 0 ){
			//　ダメージレートを考慮しないと物凄いことになった
			let dmg = FireDamage / 100 * dmgRate * GetAddDamageRate();
			//　特殊耐性反映
			if (Obj_GetValueD(v_obj, "DISH_RESIST", false)) { dmg /= 2; }
			ObjEnemy_AddLife( v_obj, -dmg );
		}
		//　a値反映レベル(0〜1)
		ObjShader_SetFloat( shader, "m_frame", frame );
		ObjShader_SetVector( shader, "m_xyzw", (1/255)*255, (1/255)*255, (1/255)*255, (1/255)*0 );
		ObjShader_SetFloat( shader, "m_param", 1 );
		frame++;
		yield;
	}
	
	//　終了処理
	let move1 = 0;
	let moveA = 0;
	while( !Obj_IsDeleted(v_obj) && move1 < 1 ){
		move1 = 1 * sin( moveA );
		ObjRender_SetAlpha( obj, alpha - move1*alpha );
		ObjShader_SetFloat( shader, "m_frame", frame );
		ObjShader_SetVector( shader, "m_xyzw", (1/255)*255, (1/255)*255, (1/255)*255, (1/255)*0 );
		ObjShader_SetFloat( shader, "m_param", 1 - move1 );
		moveA += 15;
		frame++;
		yield;
	}
	
	//　シェーダ適用を解除　オブジェクト削除
	ObjShader_ResetShader( tex );
	Obj_Delete( obj );
	Obj_Delete( shader );
	Obj_SetValue( v_obj, "FIRE", false );
}

//　炎上エフェクト描画
task SetFireDamage_Draw( v_enm, v_obj, v_scale, v_alpha ){
	
	if (IsDrawEffect() < 2) { return; }
	
	let move1		= 0;
	let moveA		= 0;
	let animeCtr	= 0;
	let anime		= 0;
	let seed		= randEffect(0,1);
	
	//　fxにマスク用テクスチャを渡す
	let shader	= CreateShaderObject( v_obj, 0 );
	let g_mask	= imgPlMask01a;
	ObjShader_SetTexture( shader, "g_Texture", g_mask );
	
	ObjPrim_SetTexture( v_obj, imgPlAura01a );
	Obj_SetRenderPriorityI( v_obj, 49 );
	ObjRender_SetBlendType( v_obj, BLEND_ADD_ARGB );
	ObjSprite2D_SetSourceRect( v_obj, 0, 0, 64, 64 );
	ObjSprite2D_SetDestCenter( v_obj );
	ObjRender_SetScaleXYZ( v_obj, v_scale/1.8, v_scale, 0 );
	
	while( !Obj_IsDeleted(v_enm) && !Obj_IsDeleted(v_obj) ){
		move1 = 1 * sin( moveA );
		
		let pos = [ ObjMove_GetX(v_enm), ObjMove_GetY(v_enm) ];
		let sca = [ v_scale/1.8 + randEffect(-0.2,0.2), v_scale ];
		ObjRender_SetPosition( v_obj, pos[0], pos[1], 0 );
		ObjSprite2D_SetSourceRect( v_obj, 0 + anime*64, 0, 64 + anime*64, 64 );
		ObjRender_SetScaleXYZ( v_obj, move1*sca[0], move1*sca[1], 0 );
		ObjRender_SetColor( v_obj, 255, 64, 32 );
		ObjRender_SetAlpha( v_obj, move1 * v_alpha );
		
		//　a値反映レベル(0〜1)
		ObjShader_SetFloat( shader, "m_frame", seed + animeCtr*2.5 );
		ObjShader_SetVector( shader, "m_xyzw", (1/255)*255, (1/255)*64, (1/255)*32, (1/255)*0 );
		ObjShader_SetFloat( shader, "m_param", move1 * ( (1/255) * v_alpha ) );
		
		if( animeCtr > 0 && animeCtr%4 == 0 ){
			ObjRender_SetAngleZ( v_obj, 0 + randEffect(-2,2) );
			anime++;
		}
		if( move1 < 1 ){ moveA += 5; }
		animeCtr++;
		
		yield;
	}
	ObjShader_ResetShader( v_obj );
	Obj_Delete( shader );
}