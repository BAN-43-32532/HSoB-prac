//------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------
//　禁呪返し
//　「マスターブレードインフィニティ」
//------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------


//　マスターブレード
task Player02ZBomb(){
//	let objManage	= GetSpellManageObject();
	let spell		= ObjSpell_Create();
	let se			= ObjSound_Create();
	let allEnm		= GetAllEnemyID();
	let frame		= 0;
	let bombTm		= 60 * 3.5;	// 480F
	let lpmax		= [ length(allEnm), 3 ];
	let waitTime	= 2;
	let callTime	= waitTime * ( lpmax[0] * lpmax[1] );	// 320F
	let pang = GetPlayerAngle();

	//　無敵
	ResetPlayerInvincibility( bombTm + 240 );
	// Zボム開始通知
	SetAreaCommonData(CAREA_SYSTEM, "ZBOMB_ACTIVE", true );
	// カットイン
	if (!IsRainbow())
	{
		SetAreaCommonData(CAREA_SYSTEM, "PACKAGE_CUTIN", true );
		SetAreaCommonData(CAREA_SYSTEM, "PACKAGE_CUTIN_ID", 1 );
	}
	// 効果音
	ObjSound_Play( PlayerEnviron_SE[8] );
	
	// 1f待機
	yield;
	
	ZBombArea( bombTm+60 );
	
	ObjSound_Play( PlayerEnviron_SE[4] );
	ObjSound_Play( PlayerEnviron_SE[9] );
	
	//　ダメージはここね
	ObjSpell_SetDamage( spell, 4 );
	ObjSpell_Regist( spell );
	
	Zbomb02_Effect01( pang, -360, bombTm-30 );
	Zbomb02_Effect01( pang, 360, bombTm-30 );
	
	// 移動速度はやっぱり下げよう
	ChangePlayerSpeed(0.25, 0.5);
	
	while( IsPermitPlayerSpell() && frame < bombTm ){

		// 霊撃位置を記録
		SetAreaCommonData(CAREA_SYSTEM, "PLAYER_SPELL_POS", [CenX, CenY]);
		SetAreaCommonData(CAREA_SYSTEM, "PLAYER_SPELL_SIZE", 384);
		SetAreaCommonData(CAREA_SYSTEM, "PLAYER_SPELL_LV", GetZSpellLevel());
		
		// アイテム化
		DeleteShotAll_ToZItem(CenX, CenY, 384);

		if (frame < 130) {
			//　ダメージ
			ObjSpell_SetDamage( spell, GetZSpellDamage()*1.66 );
			// 攻撃範囲
			let angle = -90 + pang;
			let wid = sin((frame+1)/110*90) * 80;
			ObjSpell_SetIntersectionLine( spell, GetPlayerX-64*cos(angle), GetPlayerY-64*sin(angle),
				GetPlayerX+384*cos(angle), GetPlayerY+384*sin(angle), wid);
		} else {
			//　ダメージ
			ObjSpell_SetDamage( spell, GetZSpellDamage()*2 );
			// 攻撃範囲
			ObjSpell_SetIntersectionCircle( spell, CenX, CenY, 384 );
			// 画面揺れ
			let r = (1-(frame-130)/(bombTm-130)) * 24;
			Set2DCameraFocusX( GetStgFrameWidth()/2 + randEffect(-r,r) );
			Set2DCameraFocusY( GetStgFrameHeight()/2 + randEffect(-r,r) );
		}

		if (frame == 130)
		{
			// 効果音
			ObjSound_Play( PlayerEnviron_SE[7] );
		}

		frame++;
		yield;
	}
	// 初期化
	SetAreaCommonData(CAREA_SYSTEM, "PLAYER_SPELL_SIZE", 0);
	SetAreaCommonData(CAREA_SYSTEM, "PLAYER_SPELL_LV", 0);

	Set2DCameraFocusX( GetStgFrameWidth()/2 );
	Set2DCameraFocusY( GetStgFrameHeight()/2 );
	DeleteShotInCircle( TYPE_SHOT, TYPE_ITEM, GetPlayerX(), GetPlayerY(), 512 );
	ObjSound_Play( PlayerEnviron_SE[3] );
//	Obj_Delete( objManage );
	Obj_Delete( spell );
	Obj_Delete( se );

	// 移動速度を戻そう
	ChangePlayerSpeed(1, 1);
	
	// Zボム終了通知
	SetAreaCommonData(CAREA_SYSTEM, "ZBOMB_ACTIVE", false );
}


//　ブレード
task Zbomb02_Effect01( v_angle, v_spin, v_time ){
	let obj		= ObjPrim_Create(OBJ_SPRITE_2D);
	let path	= imgPlZbomb2a;
	let frame	= 0;
	let move1	= 0;
	let moveA	= 0;
	let move2	= 0;
	let moveB	= 0;
	let acc		= 0;
	let baseSca	= [ 0.2, 0.8 ];
	
	ObjPrim_SetTexture( obj, path );
	Obj_SetRenderPriorityI( obj, 31 );
	ObjRender_SetBlendType( obj, BLEND_ADD_ARGB );
	ObjPrim_SetPrimitiveType( obj, PRIMITIVE_TRIANGLESTRIP );
	ObjPrim_SetVertexCount( obj, 6 );
	ObjPrim_SetVertexPosition( obj, 0, -256, -512, 0 );
	ObjPrim_SetVertexPosition( obj, 1, -256, 0, 0 );
	ObjPrim_SetVertexPosition( obj, 2, 0, -512-256, 0 );
	ObjPrim_SetVertexPosition( obj, 3, 0, 0, 0 );
	ObjPrim_SetVertexPosition( obj, 4, 256, -512, 0 );
	ObjPrim_SetVertexPosition( obj, 5, 256, 0, 0 );
	ObjPrim_SetVertexUVT( obj, 0, 0, 0 );
	ObjPrim_SetVertexUVT( obj, 1, 0, 512 );
	ObjPrim_SetVertexUVT( obj, 2, 256, 0 );
	ObjPrim_SetVertexUVT( obj, 3, 256, 512 );
	ObjPrim_SetVertexUVT( obj, 4, 512, 0 );
	ObjPrim_SetVertexUVT( obj, 5, 512, 512 );
	
	ObjRender_SetAngleZ( obj, v_angle );
	
	
	while( moveA < 90 ){
		let gpos = [ GetPlayerX(), GetPlayerY() ];
		move1 = 1 * sin( moveA );
		
		ObjRender_SetPosition( obj, gpos[0], gpos[1], 0 );
		ObjRender_SetScaleXYZ( obj, move1*baseSca[0], baseSca[1], 0 );
		ObjRender_SetAlpha( obj, move1*255 );
		
		if( IsDrawEffect() > 0 && frame%2 == 0 ){
			Zbomb02_Effect02( ObjRender_GetAngleZ(obj), [ move1*baseSca[0], baseSca[1] ], 192, move1*720 );
		}
		if( IsDrawEffect() > 1 && frame%8 == 0 ){
			Zbomb02_Effect03( ObjRender_GetAngleZ(obj), [ 1, move1*1.4 ], 255 );
		}
		
		frame++;
		moveA += 90/v_time*3/2;
		yield;
	}
	move1 = 0;
	moveA = 0;
	while( moveA < 90 ){
		move1 = (1 - 1 * cos( moveA*2 )) / 2;
		move2 = sin( moveB );

		let gpos = [ GetPlayerX(), GetPlayerY() ];
		let sca = [ min(1,15-move2*15)*baseSca[0], baseSca[1] + move2*baseSca[1] ];
		ObjRender_SetPosition( obj, gpos[0], gpos[1], 0 );
		ObjRender_SetAngleZ( obj, v_angle + move1*v_spin );
		ObjRender_SetScaleXYZ( obj, sca[0], sca[1], 0 );
//		ObjRender_SetAlpha( obj, 255 - move2*255 );
		
		if( IsDrawEffect() > 0 && frame%1 == 0 ){
			Zbomb02_Effect02( ObjRender_GetAngleZ(obj), baseSca, 128, move1*360 );
		}
		if( IsDrawEffect() > 1 && frame%8 == 0 ){
			Zbomb02_Effect03( ObjRender_GetAngleZ(obj), [ 1, 1.4 - move2*1.4 ], 255 );
		}
		
		frame++;
		moveA += 90/v_time*3;
		moveB += 90/v_time*3;
		yield;
	}
	Obj_Delete( obj );
}


//　ブレード光波
task Zbomb02_Effect02( v_angle, v_scale, v_alpha, v_colorh ){
	let obj		= ObjPrim_Create(OBJ_SPRITE_2D);
	let path	= imgPlZbomb2a;
	let move1	= 0;
	let moveA	= 0;
	let baseSca	= [ v_scale[0], v_scale[1] ];
	
	ObjPrim_SetTexture( obj, path );
	Obj_SetRenderPriorityI( obj, 31 );
	ObjRender_SetBlendType( obj, BLEND_ADD_ARGB );
	ObjPrim_SetPrimitiveType( obj, PRIMITIVE_TRIANGLESTRIP );
	ObjPrim_SetVertexCount( obj, 6 );
	ObjPrim_SetVertexPosition( obj, 0, -256, -512, 0 );
	ObjPrim_SetVertexPosition( obj, 1, -256, 0, 0 );
	ObjPrim_SetVertexPosition( obj, 2, 0, -512-256, 0 );
	ObjPrim_SetVertexPosition( obj, 3, 0, 0, 0 );
	ObjPrim_SetVertexPosition( obj, 4, 256, -512, 0 );
	ObjPrim_SetVertexPosition( obj, 5, 256, 0, 0 );
	ObjPrim_SetVertexUVT( obj, 0, 0, 0 );
	ObjPrim_SetVertexUVT( obj, 1, 0, 512 );
	ObjPrim_SetVertexUVT( obj, 2, 256, 0 );
	ObjPrim_SetVertexUVT( obj, 3, 256, 512 );
	ObjPrim_SetVertexUVT( obj, 4, 512, 0 );
	ObjPrim_SetVertexUVT( obj, 5, 512, 512 );
	
	ObjRender_SetAngleZ( obj, v_angle );
	ObjRender_SetColorHSV( obj, v_colorh, 160, 255 );
	
	while( move1 < 1 ){
		let gpos = [ GetPlayerX(), GetPlayerY() ];
		move1 = 1 * sin( moveA );
		
		ObjRender_SetPosition( obj, gpos[0], gpos[1], 0 );
		ObjRender_SetScaleXYZ( obj, baseSca[0]*4 - move1*baseSca[0]*3, baseSca[1], 0 );
		ObjRender_SetAlpha( obj, move1*v_alpha );
		
		moveA += 5;
		yield;
	}
	move1 = 0;
	moveA = 0;
	while( move1 < 1 ){
		let gpos = [ GetPlayerX(), GetPlayerY() ];
		move1 = 1 * sin( moveA );
		
		ObjRender_SetPosition( obj, gpos[0], gpos[1], 0 );
		ObjRender_SetScaleXYZ( obj, baseSca[0] - move1*baseSca[0], baseSca[1] + move1*baseSca[1], 0 );
		ObjRender_SetAlpha( obj, v_alpha - move1*v_alpha );
		
		moveA += 5;
		yield;
	}
	Obj_Delete( obj );
}

//　波動
task Zbomb02_Effect03( v_angle, v_scale, v_alpha ){
	let obj		= ObjPrim_Create(OBJ_SPRITE_2D);
	let path	= imgPlZbomb2b;
	let move1	= 0;
	let moveA	= 0;
	
	ObjPrim_SetTexture( obj, path );
	Obj_SetRenderPriorityI( obj, 31 );
	ObjRender_SetBlendType( obj, BLEND_ADD_ARGB );
	ObjSprite2D_SetSourceRect( obj, 0, 0, 128, 256 );
	ObjSprite2D_SetDestCenter( obj );
	
	ObjRender_SetAngleZ( obj, -90+v_angle );
	ObjRender_SetColor( obj, 128, 64, 255 );
	
	while( move1 < 1 ){
		let dist = move1 * 448;
		let gpos = [ GetPlayerX(), GetPlayerY() ];
		let spos = [ gpos[0] + dist * cos( -90+v_angle ), gpos[1] + dist * sin( -90+v_angle ) ];
		
		move1 = 1 * sin( moveA );
		
		ObjRender_SetPosition( obj, spos[0], spos[1], 0 );
		ObjRender_SetScaleXYZ( obj, move1*v_scale[0], move1*v_scale[1], 0 );
		ObjRender_SetAlpha( obj, v_alpha - move1*v_alpha );
		
		moveA += 5;
		yield;
	}
	Obj_Delete( obj );
}