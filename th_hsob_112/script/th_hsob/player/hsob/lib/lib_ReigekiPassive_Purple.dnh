//------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------
//　真珠島　霊撃・菫
//------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------

// 初期設定
function InitPurple( v_obj, v_playerNo )
{
	SeamlessStgArea( v_obj );
}

//　反射属性
task SetMirrorShot( v_obj ){
	if( Obj_GetValueD( v_obj, "MIRROR", false ) ){ break; }
	
	let border = 0;
	while( !Obj_IsDeleted(v_obj) ){
		Obj_SetValue( v_obj, "MIRROR", true );
		let gpos = [ ObjMove_GetX(v_obj), ObjMove_GetY(v_obj) ];
		let angle = ObjMove_GetAngle(v_obj);
		//　左端ワープ
		if( gpos[0] < MinX ){
			border = gpos[0] - MinX;
			ObjMove_SetPosition(v_obj, MaxX+border, gpos[1]);
		}
		//　右端ワープ
		if( gpos[0] > MaxX ){
			border = gpos[0] - MaxX;
			ObjMove_SetPosition(v_obj, MinX+border, gpos[1]);
		}
		//　上端反射
		if( gpos[1] < MinY ){
			border = gpos[1] - MinX;
			ObjMove_SetPosition(v_obj, gpos[0], MaxY-border);
			break;
		}
		yield;
	}
	//Obj_SetValue( v_obj, "MIRROR", false );
}

//　画面シームレス化
task SeamlessStgArea( v_obj ){
	let stgArea = [ MinX(), MinY(), MaxX(), MaxY() ];
	let borderNum = 8;
	let invFrag = false;
	let v_color = GetPlayerWeapon();
	
	//　端のｳﾈｳﾈ
	SeamlessEffect( v_obj, [ stgArea[0], stgArea[1] ], 90, 1, -1, [ 192, 255, 64, 64 ] );
	SeamlessEffect( v_obj, [ stgArea[0], stgArea[1] ], 90, -1, 1, [ 192, 64, 64, 255 ] );
	SeamlessEffect( v_obj, [ stgArea[2], stgArea[3] ], -90, 1, -1, [ 192, 255, 64, 64 ] );
	SeamlessEffect( v_obj, [ stgArea[2], stgArea[3] ], -90, -1, 1, [ 192, 64, 64, 255 ] );
	
	while( !Obj_IsDeleted(v_obj) && v_color == GetPlayerWeapon() ){
		let gpos = [ GetPlayerX(), GetPlayerY() ];
		
		//　ワープ
		if( GetVirtualKeyState(VK_LEFT) == KEY_PUSH && gpos[0] < stgArea[0] + borderNum )
		{
			ObjMove_SetX( v_obj, stgArea[2] - borderNum );
			ObjSound_Play( PlayerEnviron_SE[10] );
		}
		if( GetVirtualKeyState(VK_RIGHT) == KEY_PUSH && gpos[0] > stgArea[2] - borderNum )
		{
			ObjMove_SetX( v_obj, stgArea[0] + borderNum );
			ObjSound_Play( PlayerEnviron_SE[10] );
		}
		
		//　無敵時間1.5倍化
		/*
		let inv = GetPlayerInvincibilityFrame();
		if( inv <= 0 ){ invFrag = false; }
		if( !invFrag && inv > 0 ){
			SetPlayerInvincibilityFrame( inv * 1.5 );
			invFrag = true;
		}
		*/
		
		yield;
	}
}

//　シームレスエフェクト
task SeamlessEffect( v_obj, v_pos, v_angle, v_scrSpd, v_scrSpdY, v_argb ){
	
	if (IsDrawEffect() < 1) { return; }
	
	let obj		= ObjPrim_Create(OBJ_SPRITE_2D);
	let path	= imgPlBomb01c;
	let gpos	= [ GetPlayerX(), GetPlayerY() ];
	let baseSca	= [ 1, 1 ];
	let move1	= 0;
	let moveA	= 0;
	let frame	= 0;
	let v_color = GetPlayerWeapon();
	
	ObjPrim_SetTexture( obj, path );
	Obj_SetRenderPriorityI( obj, 61 );
	ObjRender_SetBlendType( obj, BLEND_ADD_ARGB );
	ObjPrim_SetPrimitiveType( obj, PRIMITIVE_TRIANGLESTRIP );
	ObjPrim_SetVertexCount( obj, 10 );
	
	ObjRender_SetAngleZ( obj, v_angle );
	ObjRender_SetColor( obj, v_argb[1], v_argb[2], v_argb[3] );
	
	while( !Obj_IsDeleted(v_obj) && v_color == GetPlayerWeapon() ){
		ObjRender_SetPosition( obj, v_pos[0], v_pos[1], 0 );
		
		let alpha = v_argb[0] + v_argb[0]/4 * sin( frame*8 );
		ascent( let i in 0..5 ){
			let tmp = (i/4)^2;
			let a = alpha * tmp;
			ObjPrim_SetVertexPosition( obj, 0 + i*2, 0, 32*(i/4-1), 0 );
			ObjPrim_SetVertexPosition( obj, 1 + i*2, 448, 32*(i/4-1), 0 );
			ObjPrim_SetVertexUVT( obj, 0 + i*2, 32*tmp + frame*v_scrSpdY, 0 + frame*v_scrSpd );
			ObjPrim_SetVertexUVT( obj, 1 + i*2, 32*tmp + frame*v_scrSpdY, 448 + frame*v_scrSpd );
			ObjPrim_SetVertexAlpha( obj, 0 + i*2, a );
			ObjPrim_SetVertexAlpha( obj, 1 + i*2, a );
		}
		frame++;
		yield;
	}
	Obj_Delete( obj );
}