#include "./lib_Common.dnh"
#include "./lib_Item.dnh"
#include "./lib_Bullet.dnh"
#include "./lib_Enemylibs.dnh"
#include "./lib_Effect.dnh"
#include "./lib_Result.dnh"
#include "./lib_Sound.dnh"
#include "./lib_Chapter.dnh"
#include "./lib_String.dnh"

#include "./bosslib/lib_Character.dnh"
#include "./bosslib/lib_BossUtil.dnh"
#include "./bosslib/lib_Anime.dnh"
#include "./bosslib/lib_SpellEffect.dnh"
#include "./bosslib/lib_StatusEffect.dnh"
#include "./bosslib/lib_AuraHSoB.dnh"
#include "./bosslib/lib_Distortion.dnh"
#include "./bosslib/lib_MagicCircle.dnh"
// ボス画像
#include "./loadlib/file_character.dnh"

//グローバル変数宣言
let objEnemy;	// メインボス（通常はこれのみ使用）
let objAllEnemys = [];

// ------------------------- 変更不可
//ボス生存フラグ
let eAlive = true;
let isBossSpell = false;

// 描画レイヤー
let priorityBossSystem	= 79;
let priorityAura	= 30;
let priorityBoss	= 41;

// 終了タイプ
let bossEndType		= 0;
let BOSS_END_SINGLE	= 0;	// １人倒したら終わり
let BOSS_END_ALL	= 1;	// 全員倒したら終わり
let BOSS_END_LAST1	= 2;	// ラス１になったら終わり

// ------------------------- 初期値(init前に値を変更すれば反映)

//ダメージ割合
let dIni_Shot = 100;	// 百分率
let dIni_Spell = 1;	// dIni_Shot(%) x dIni_Spell = ボムダメージ透過率

//状態異常耐性
let bossResistEffect = 0.75;
let bossResistTime = 0.5;

//ボスの被弾判定（デフォ値）
let bossHitToShot = 48;
let bossHitToPlayer = 28;
let bossBigExplode = false;

//ボスのドロップアイテム数
let bossDropItem = 100;
let bossDropItemSpecial = [];
let bossKillCount = 60;

// ------------------------- 初期値ここまで

// ボススクリプト側の初期設定
sub Boss_Init
{
	init();
	InitDeleteClip();	//弾消去範囲をリセット
	if (GetPlayMode() == GAME_SPELL)
	{
		//スペプラではアイテム落とさないよ
		bossDropItem = 0;
		bossDropItemSpecial = [];
	}
	LoadAllShotData();	// ショットデータ読み込み
}

// ボスのイベント通知
sub BossEvent()
{
	alternative(GetEventType())
	case(EV_END_BOSS_STEP)
	{
		isBossSpell = false;
	}
}

// ボスオブジェクトを作ろう！　ついでにボスオブジェクト側の初期設定とか
// 雑魚扱いで出す場合はExの方を使う
// 注意点：CreateBossExを使う場合は、CreateBossの前に実行する必要がある。（コード実行順の関係）
// 歪みオーラは3体以上のボスには未対応で色はボスと共用、多分修正しない
function CreateBoss(strBossID)
{
	return(_CreateBoss(strBossID, OBJ_ENEMY_BOSS));
}
function CreateBossEx(strBossID)
{
	return(_CreateBoss(strBossID, OBJ_ENEMY));
}

function _CreateBoss(strBossID, objectType)
{
	let isBoss = (objectType == OBJ_ENEMY_BOSS);
	//敵オブジェクトを生成し登録
	let objNewBoss = ObjEnemy_Create(objectType);
	
	// 配列に登録
	objAllEnemys = objAllEnemys ~ [objNewBoss];
	
	//初期設定
	Boss_SetIDtoObj(objNewBoss, strBossID);
	Boss_InitPosition(objNewBoss);	//初期座標セット
	ObjEnemy_SetDamageRate(objNewBoss, dIni_Shot, dIni_Shot*dIni_Spell);
	ObjEnemy_SetLife(objNewBoss, ObjEnemyBossScene_GetInfo(objScene, INFO_CURRENT_LIFE_MAX));	//ライフ設定
	ObjEnemy_Regist(objNewBoss);
	SetEffectResist(objNewBoss, bossResistEffect);	// 状態異常耐性
	SetTimeResist(objNewBoss, bossResistTime);	// 停止耐性

	//色々登録
	Obj_SetValue(objNewBoss, "KILLED", 0);
	SetEnemyVisible(objNewBoss, false);
	Obj_SetValue(objNewBoss, "MAX_LIFE", ObjEnemy_GetInfo(objNewBoss, INFO_LIFE));	//最大体力記録
	EntryEnemyCount(objNewBoss, bossKillCount);	//敵カウント用
	
	//タスク起動
	Boss_AnimeTimer(objNewBoss);		//アニメ状態管理タスク
	BossEffect_LifeCircle(objNewBoss);	//ライフゲージ
	BossEffect_Marker(objNewBoss);		//マーカー
	Boss_InitAura(objNewBoss, isBoss);	//オーラ
	BossEffect_MagicCircle(objNewBoss);	//魔法陣
	BossAnime_Initialize(objNewBoss);	//ボス描画タスク
	TDamageSound(objNewBoss, 0.15);		//ダメージ音
	TIntersection(objNewBoss);	//当たり判定
	TAddPoint(objNewBoss);			//撃ち込み点

	//終了待機タスク   一番最後に配置！（重要）
	if (isBoss) { TEnd(); }

	return(objNewBoss);
}
// 完全に雑魚扱いで生成（ボス配列に登録しない）
function CreateSemiBoss(strBossID)
{
	//敵オブジェクトを生成し登録
	let objNewBoss = ObjEnemy_Create(OBJ_ENEMY);
	
	//初期設定
	Boss_SetIDtoObj(objNewBoss, strBossID);
	Boss_InitPosition(objNewBoss);	//初期座標セット
	ObjEnemy_SetDamageRate(objNewBoss, dIni_Shot, dIni_Shot*dIni_Spell);
	ObjEnemy_SetLife(objNewBoss, ObjEnemyBossScene_GetInfo(objScene, INFO_CURRENT_LIFE_MAX));	//ライフ設定
	ObjEnemy_Regist(objNewBoss);
	SetEffectResist(objNewBoss, bossResistEffect);	// 状態異常耐性
	SetTimeResist(objNewBoss, bossResistTime);	// 停止耐性
	
	//色々登録
	Obj_SetValue(objNewBoss, "KILLED", 0);
	SetEnemyVisible(objNewBoss, false);
	Obj_SetValue(objNewBoss, "MAX_LIFE", ObjEnemy_GetInfo(objNewBoss, INFO_LIFE));	//最大体力記録
	Obj_SetValue(objNewBoss, "NOT_BOSS", true);
	EntryEnemyCount(objNewBoss, bossKillCount);	//敵カウント用
	
	//タスク起動
	Boss_AnimeTimer(objNewBoss);		//アニメ状態管理タスク
	BossEffect_LifeCircle(objNewBoss);	//ライフゲージ
	BossEffect_Marker(objNewBoss);		//マーカー
	Boss_InitAura(objNewBoss, false);	//オーラ
	BossEffect_MagicCircle(objNewBoss);	//魔法陣
	BossAnime_Initialize(objNewBoss);	//ボス描画タスク
	TDamageSound(objNewBoss, 0.15);		//ダメージ音
	TIntersection(objNewBoss);	//当たり判定
	TAddPoint(objNewBoss);			//撃ち込み点

	return(objNewBoss);
}

// 会話時用（終了処理を行わない）
// Ex付きはザコ扱いver
function CreateBossTalk(strBossID)
{
	return(_CreateBossTalk(strBossID, OBJ_ENEMY_BOSS));
}
function CreateBossTalkEx(strBossID)
{
	return(_CreateBossTalk(strBossID, OBJ_ENEMY));
}
function _CreateBossTalk(strBossID, objectType)
{
	//敵オブジェクトを生成し登録
	let objNewBoss = ObjEnemy_Create(objectType);
	
	//初期設定
	Boss_SetIDtoObj(objNewBoss, strBossID);
	Boss_InitPosition(objNewBoss);	//初期座標セット
	ObjEnemy_SetDamageRate(objNewBoss, 0, 0);
	ObjEnemy_Regist(objNewBoss);
	
	//色々登録
	Obj_SetValue(objNewBoss, "KILLED", false);
	SetEnemyVisible(objNewBoss, false);
	Obj_SetValue(objNewBoss, "MAX_LIFE", ObjEnemy_GetInfo(objNewBoss, INFO_LIFE));	//最大体力記録
	Obj_SetValue(objNewBoss, "TALKING", 1);
	
	//タスク起動
	Boss_AnimeTimer(objNewBoss);		//アニメ状態管理タスク
	BossAnime_Initialize(objNewBoss);	//ボス描画タスク
	return(objNewBoss);
}
// ダミー用
function CreateBossDummy()
{
	//敵オブジェクトを生成し登録
	let objNewBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	
	// 配列に登録
	objAllEnemys = objAllEnemys ~ [objNewBoss];
	
	//初期設定
	ObjEnemy_SetLife(objNewBoss, ObjEnemyBossScene_GetInfo(objScene, INFO_CURRENT_LIFE_MAX));	//ライフ設定
	ObjEnemy_Regist(objNewBoss);
	
	//色々登録
	Obj_SetValue(objNewBoss, "KILLED", 0);
	Obj_SetValue(objNewBoss, "IS_DUMMY", true);
	SetEnemyVisible(objNewBoss, false);
	Obj_SetValue(objNewBoss, "MAX_LIFE", ObjEnemy_GetInfo(objNewBoss, INFO_LIFE));	//最大体力記録

	//終了待機タスク   一番最後に配置！（重要）
	TEnd();

	return(objNewBoss);
}
//表示のみ、逃走モーション等に使用
function CreateBossDrawOnly(strBossID)
{
	//敵オブジェクトを生成し登録
	let objNewBoss = ObjEnemy_Create(OBJ_ENEMY);
	
	//初期設定
	Boss_SetIDtoObj(objNewBoss, strBossID);
	Boss_InitPosition(objNewBoss);	//初期座標セット
	ObjEnemy_Regist(objNewBoss);
	
	//タスク起動
	Boss_AnimeTimer(objNewBoss);		//アニメ状態管理タスク
	BossAnime_Initialize(objNewBoss);	//ボス描画タスク
	return(objNewBoss);
}

// ヘイキダモーンｗｗｗｗｗ
task TBombBarrier(objEnemy)
{
}


