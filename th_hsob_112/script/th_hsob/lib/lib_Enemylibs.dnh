//雑魚・ボス共通の処理
#include"./zakolib/lib_ZakoDraw.dnh"
#include"./zakolib/lib_ZakoMotion.dnh"


// -------------------- 描画レイヤー
let priorityZako	= 40;
let priorityZakoBack	= 30;

// -------------------- 妖精種類定数
let FAIRY_VERYSMALL		= 0;	//最小
let FAIRY_VERYSMALL_FLUFF	= 1;	//最小（綿毛）
let FAIRY_SMALL			= 2;	//小
let FAIRY_SMALL_CAP		= 3;	//小（帽子）
let FAIRY_MIDDLE		= 4;	//中
let FAIRY_MIDDLE_RIBBON		= 5;	//中（リボン）
let FAIRY_LARGE			= 6;	//大
let FAIRY_LARGE_FLOWER		= 7;	//大（向日葵）

// -------------------- 敵のサイズ（判定・撃破エフェクトに影響）
let ENEMY_FREE			= 0;	//当たり判定設定なし（別個で設定する必要あり）
let ENEMY_3L			= 1;	//準中ボス
let ENEMY_LL			= 2;	//特大
let ENEMY_L			= 3;	//大
let ENEMY_M			= 4;	//中
let ENEMY_S			= 5;	//小
let ENEMY_SS			= 6;	//最小


// -------------------- 敵の判定サイズ [shot, player]
let ENEMY_INTERSECTION = [
	[-1, -1],	//当たり判定設定なし
	[64, 24],	//準中ボス
	[40, 24],	//特大
	[32, 14],	//大
	[24,  8],	//中
	[16,  0],	//小
	[10,  0],	//ミニ
];


// -------------------- 爆発えへくとサイズ
let ENEMY_EXPLO_EFFECT = [
	[-1, -1],	//当たり判定設定なし
	[24,  8],	//準中ボス
	[24,  8],	//特大
	[16,  6],	//大
	[12,  4],	//中
	[ 8,  3],	//小
	[ 8,  3],	//ミニ
];

// -------------------- 敵撃破カウント数（アイテム回収ラインに影響）
let ENEMY_KILL_COUNT = [
	0,	//当たり判定設定なし
	120,	//準中ボス
	120,	//特大
	120,	//大
	120,	//中
	30,	//小
	30,	//ミニ
];

// -------------------- アイテムドロップ [周囲アイテム, 個数]
let ENEMY_ITEM_DROP = [
	[ 0, -1],	//当たり判定設定なし
	[MY_ITEM_TIME_1, 10],	//準中ボス
	[MY_ITEM_TIME_1, 10],	//特大
	[MY_ITEM_TIME_1, 10],	//大
	[MY_ITEM_TIME_1, 5],	//中
	[MY_ITEM_TIME_1, 0],	//小
	[MY_ITEM_TIME_1, 0],	//ミニ
];
// -------------------- アイテムドロップ [中心アイテム配列]
let ENEMY_ITEM_SPECIAL = [
	[-1],			//当たり判定設定なし
	[MY_ITEM_TIME_10],	//準中ボス
	[MY_ITEM_TIME_10],	//特大
	[MY_ITEM_TIME_10],	//大
	[MY_ITEM_TIME_3],	//中
	[MY_ITEM_TIME_3],	//小
	[MY_ITEM_TIME_1],	//ミニ
];

//配置ひな形
function MakeEnemy(emnX, emnY, emnLife, enmSize)
{
	return(_MakeEnemy(emnX, emnY, emnLife, enmSize, true));
}
function MakeEnemyFamilier(emnX, emnY, emnLife, enmSize)
{
	return(_MakeEnemy(emnX, emnY, emnLife, enmSize, false));
}
function _MakeEnemy(emnX, emnY, emnLife, enmSize, enmEntry)
{
	let obj = ObjEnemy_Create(OBJ_ENEMY);
	ObjEnemy_SetLife(obj, emnLife);
	ObjEnemy_SetDamageRate(obj, 100, 100);
	ObjMove_SetPosition(obj, emnX, emnY);
	Obj_SetValue(obj, "KILLED", false);
	Obj_SetValue(obj, "E_SIZE", enmSize);
	SetEnemyDropItem(obj, ENEMY_ITEM_SPECIAL[enmSize], ENEMY_ITEM_DROP[enmSize]);
	SetEnemyIntersection(obj, ENEMY_INTERSECTION[enmSize][0], ENEMY_INTERSECTION[enmSize][1]);
	Obj_SetValue(obj, "EARTH", false);
	SetEnemyVisible(obj, true);
	ObjEnemy_Regist(obj);

	TEnemyMove(obj);	//移動用タスク
	TAddPoint(obj);	//撃ち込み点
	if (enmEntry) { EntryEnemyCount(obj, ENEMY_KILL_COUNT[enmSize]); }	//敵カウント用
	
	return (obj);
}

//体力チェックと判定設置
function WaitForKilled(obj)
{
	let tmp_inter = Obj_GetValueD(obj, "INTERSECTION", [0,0]);
	let enmToShot = tmp_inter[0];
	let enmToPlayer = tmp_inter[1];

	while(!Obj_GetValueD(obj, "KILLED", false) &&
		ObjEnemy_GetInfo(obj, INFO_LIFE) > 0)
	{
		//当たり判定登録
		if (GetEnemyVisible(obj))
		{
			if (enmToShot) { ObjEnemy_SetIntersectionCircleToShot(obj, ObjMove_GetX(obj), ObjMove_GetY(obj), enmToShot); }
			if (enmToPlayer && !GetEnemyEeathFlag(obj)) { ObjEnemy_SetIntersectionCircleToPlayer(obj, ObjMove_GetX(obj), ObjMove_GetY(obj), enmToPlayer); }
		}
		// 時間停止カウントダウン
		Obj_SetValue(obj, "TIME_STOP", Obj_GetValueD(obj, "TIME_STOP", 0)-1);
		yield;
	}
	//動きを停止
	ObjMove_SetSpeed(obj, 0);
	ObjMove_SetAcceleration(obj, 0);
	Obj_SetValue(obj, "ANIME_STOP", 1);
}

// 雑魚撃破・消滅処理
task ZakoFinalize(objEnemy, eff_color)
{
	ZakoFinalizeEx(objEnemy, eff_color, true);
}
task ZakoFinalizeEx(objEnemy, eff_color, isExplode)
{
	let eX = ObjMove_GetX(objEnemy);
	let eY = ObjMove_GetY(objEnemy);
	let eA = GetAngleToPlayer(objEnemy);
	let enmSize = Obj_GetValueD(objEnemy, "E_SIZE", 0);

	let kill_type = CheckKillType(objEnemy);
	if (kill_type == 2)
	{
		// 撃破数カウント用
		KilledEnemyCount(objEnemy, ENEMY_KILL_COUNT[enmSize]);
		
		// アイテム配置
		DropItems(objEnemy);
	}
	// 撃破えへくと
	if (kill_type > 0)
	{
		if (isExplode)
		{
			EffectZako_Explode(eX, eY, eA+randEffect(-15,15), eff_color, ENEMY_EXPLO_EFFECT[enmSize][0], ENEMY_EXPLO_EFFECT[enmSize][1]);
		}
		CallSound(sndVanish);
	}
	Obj_Delete(objEnemy);
}


// -------------------------- フラグ類
//当たり判定の有無フラグをセット
function SetEnemyVisible(obj, val) { Obj_SetValue(obj, "VISIBLE", val); }
function GetEnemyVisible(obj) { return(Obj_GetValueD(obj, "VISIBLE", false)); }
function EraseEnemy(obj) { Obj_SetValue(obj, "KILLED", true); }
//地上敵フラグ
function SetEnemyEeathFlag(obj) { Obj_SetValue(obj, "EARTH", true); }
function GetEnemyEeathFlag(obj) { return(Obj_GetValueD(obj, "EARTH", false)); }
//当たり判定
function SetEnemyIntersection(obj, enmToShot, enmToPlayer) { Obj_SetValue(obj, "INTERSECTION", [enmToShot,enmToPlayer]); }
//アイテムドロップ数
// base_item = [ドロップアイテムID配列]
// around_item = [外側配置アイテム,個数]
function SetEnemyDropItem(obj, base_item, around_item)
{
	if (DEBUG_MODE) { AddAreaCommonData(CAREA_STAGE, "AllDropItem_Road", -GetDropItemCount(obj)); }	// リセット時用
	Obj_SetValue(obj, "ITEM_DROP_SP", base_item);
	Obj_SetValue(obj, "ITEM_DROP", around_item);
	if (DEBUG_MODE) { AddAreaCommonData(CAREA_STAGE, "AllDropItem_Road", GetDropItemCount(obj)); }
}
// デバッグ用：アイテム数取得
function GetDropItemCount(obj)
{
	let ct = 0;
	let it_bs = Obj_GetValueD(obj, "ITEM_DROP_SP", []);
	let it_ar = Obj_GetValueD(obj, "ITEM_DROP", []);
	ascent(i in 0 .. length(it_bs))
	{
		alternative(it_bs[i])
		case(MY_ITEM_TIME_1)  { ct += 1; }
		case(MY_ITEM_TIME_2)  { ct += 2; }
		case(MY_ITEM_TIME_3)  { ct += 3; }
		case(MY_ITEM_TIME_5)  { ct += 5; }
		case(MY_ITEM_TIME_10) { ct += 10; }
	}
	if (length(it_ar) >= 2)
	{
		let tmp_ct = 0;
		alternative(it_ar[0])
		case(MY_ITEM_TIME_1)  { tmp_ct = 1; }
		case(MY_ITEM_TIME_2)  { tmp_ct = 2; }
		case(MY_ITEM_TIME_3)  { tmp_ct = 3; }
		case(MY_ITEM_TIME_5)  { tmp_ct = 5; }
		case(MY_ITEM_TIME_10) { tmp_ct = 10; }
		ct += tmp_ct*it_ar[1];
	}
	if (length(it_ar) >= 4)
	{
		let tmp_ct = 0;
		alternative(it_ar[2])
		case(MY_ITEM_TIME_1)  { tmp_ct = 1; }
		case(MY_ITEM_TIME_2)  { tmp_ct = 2; }
		case(MY_ITEM_TIME_3)  { tmp_ct = 3; }
		case(MY_ITEM_TIME_5)  { tmp_ct = 5; }
		case(MY_ITEM_TIME_10) { tmp_ct = 10; }
		ct += tmp_ct*it_ar[3];
	}
	return(ct);
}
//状態異常の耐性セット(0〜1、1で完全耐性)
function SetEffectResist(obj, val) { Obj_SetValue(obj, "RESIST_EFFECT", val); }
function SetTimeResist(obj, val) { Obj_SetValue(obj, "RESIST_TIME", val); }

//弾撃てる？
function CanShotBullet(obj)
{
	return(!Obj_IsDeleted(obj) && !Obj_GetValueD(obj, "ANIME_STOP", 0));
}

//撃破タイプ
function CheckKillType(obj)
{
	let tmp = 0;
	if (ObjEnemy_GetInfo(obj, INFO_LIFE) <= 0)	//撃破された
	{
		if (Obj_GetValueD(obj, "KILLED", false))	//人魂消滅などで撃破した
			{ tmp = 1; }
		else
			{ tmp = 2; }
	}
	else { tmp = 0; }
	return(tmp);
}

// 撃ち返しフラグ
function CheckUchikaeshi(obj, r)
{
	return((ObjMove_GetX(obj)-GetPlayerX)^2 + (ObjMove_GetY(obj)-GetPlayerY)^2 > r^2);
}

// -------------------------- 監視用関数
//画面内に入るまで判定なし
task HideWhileDispIn(obj)
{
	Obj_SetValue(obj, "VISIBLE", 0);
	let t = 0;
	while(!Obj_IsDeleted(obj) && t < 120 &&
		(MinX > ObjMove_GetX(obj) || MaxX < ObjMove_GetX(obj) ||
		MinY > ObjMove_GetY(obj) || MaxY < ObjMove_GetY(obj))) { t++; yield; }
	if (!Obj_IsDeleted(obj))
	{
		Obj_SetValue(obj, "VISIBLE", 1);
	}
}

//画面外退出待ち
task Enemy_WaitForDispOUT(obj, eSize, delay)
{
	wait(delay);
	while(!Obj_IsDeleted(obj) &&
		MinX-eSize <= ObjMove_GetX(obj) && MaxX+eSize >= ObjMove_GetX(obj) &&
		MinY-eSize <= ObjMove_GetY(obj) && MaxY+eSize >= ObjMove_GetY(obj)) { yield; }
	if (!Obj_IsDeleted(obj)) { EraseEnemy(obj); }
}

// 瀕死時のブブブ音
task TDamageSound(obj, lifeRate)
{
	let before_life = ObjEnemy_GetInfo(obj, INFO_LIFE);
	let damage_life = before_life*lifeRate;
	while(!Obj_IsDeleted(obj))
	{
		let now_life = ObjEnemy_GetInfo(obj, INFO_LIFE);
		if (now_life < before_life && now_life < damage_life)
		{
			CallSound(sndNoiseUP);
		}
		before_life = now_life;
		yield;
	}
}

//消滅フラグ立てるマン
task TCheckDispINOut(obj, size)
{
	while(!Obj_IsDeleted(obj))
	{
		if (CheckDispIN(obj, size))
		{
			Enemy_WaitForDispOUT(obj, size, 60);
			break;
		}
		yield;
	}
}

//打ち込み点
task TAddPoint(obj)
{
	let hRate = 1/1000;
	let before_ad = ObjEnemy_GetInfo(obj, INFO_LIFE);
	while(!Obj_IsDeleted(obj) && !Obj_GetValueD(obj, "ANIME_STOP", 0))
	{
		let ad = ObjEnemy_GetInfo(obj, INFO_LIFE);
		if (before_ad > ad)
		{
			let tmp_score = trunc(GetMaxScore()*(before_ad-ad)*hRate)*10;
			AddScore(tmp_score);
			before_ad = ad;
		}
		yield;
	}
}

//親の監視
task TCheckKillParent(obj, parent)
{
	while(CanShotBullet(obj))
	{
		if (!Obj_IsDeleted(parent) && ObjEnemy_GetInfo(parent, INFO_LIFE) <= 0 && !Obj_GetValueD(parent, "KILLED", false))
		{
			ObjEnemy_AddLife(obj, -ObjEnemy_GetInfo(obj, INFO_LIFE)-1);
			Obj_SetValue(obj, "KILLED_PARENT", 1);
			break;
		}
		yield;
	}
}

//画面端っこの座標を取得
//画面外の座標が原点だった場合は知らない！
function GetVergePosition(x, y, angle)
{
	let sina = sin(angle);
	let cosa = cos(angle);
	if (sina == 0) {
		if (cosa > 0) { return([MaxX, y]); }
		else { return([MinX, y]) }
	} else if (sina > 0)
	{
		if (cosa == 0) { return([x, MaxY]); }
		else if (cosa > 0) {
			let r1 = (MaxX-x) / cosa;
			let r2 = (MaxY-y) / sina;
			if (r1 < r2) { return([MaxX, y+r1*sina]); }
			else { return([x+r2*cosa, MaxY]); }
		}
		else {
			let r1 = (MinX-x) / cosa;
			let r2 = (MaxY-y) / sina;
			if (r1 < r2) { return([MinX, y+r1*sina]); }
			else { return([x+r2*cosa, MaxY]); }
		}
	} else {
		if (cosa == 0) { return([x, MinY]); }
		else if (cosa < 0) {
			let r1 = (MinX-x) / cosa;
			let r2 = (MinY-y) / sina;
			if (r1 < r2) { return([MinX, y+r1*sina]); }
			else { return([x+r2*cosa, MinY]); }
		}
		else {
			let r1 = (MaxX-x) / cosa;
			let r2 = (MinY-y) / sina;
			if (r1 < r2) { return([MaxX, y+r1*sina]); }
			else { return([x+r2*cosa, MinY]); }
		}
	}
}
// [距離,角度]を返す
function GetVergeDistance(x, y, angle)
{
	let pos = GetVergePosition(x, y, angle);
	let r = ((x-pos[0])^2 + (y-pos[1])^2)^0.5;
	let a = atan2(y-pos[1], x-pos[0]);
	return([r, a]);
}


// -------------------------- 弾一括削除
//弾削除エフェクトのみ
task DeleteShotAll_Effect(x, y)
{
	_DeleteShotAll_Effect(x, y, true);
}
task DeleteShotAll_EffectEx(x, y, delete_type)
{
	_DeleteShotAll_Effect(x, y, delete_type);
}
task _DeleteShotAll_Effect(x, y, delete_type)
{
	let isResDelete = delete_type;
	let delType = [TYPE_SHOT, TYPE_ALL][isResDelete];

	//画面端から一番遠い点を取得
	let max_r = GetFarthestPoint(x, y) + 64;
	
	let r = 0;
	DeleteShotAll(delType, TYPE_FADE);	//先に判定を消す
	while (r < max_r)
	{
		r += 16;
		let objShots = GetShotIdInCircleA2(x, y, r, TARGET_ENEMY);
		ascent(i in 0 .. length(objShots))
		{
			if (isResDelete || !ObjShot_IsSpellResist(objShots[i]))
			{
				DeleteBulletEffect(objShots[i]);
			}
		}
		yield;
	}
	DeleteShotAll(delType, TYPE_IMMEDIATE);	//画面外の弾も削除
}

//徐々に弾削除
task DeleteShotAll_Delay(x, y)
{
	//画面端から一番遠い点を取得
	let max_r = GetFarthestPoint(x, y) + 64;
	
	let r = 0;
	DeleteShotAll(TYPE_ALL, TYPE_FADE);	//先に判定を消す
	while (r < max_r)
	{
		r += 16;
		DeleteShotInCircle(TYPE_ALL, TYPE_ITEM, x, y, r);
		yield;
	}
	DeleteShotAll(TYPE_ALL, TYPE_IMMEDIATE);	//画面外の弾も削除
}

//範囲内の弾削除
task DeleteShot_Effect(x, y, r, delete_type)
{
	let isResDelete = (delete_type != "TYPE_SHOT");
	let objShots = GetShotIdInCircleA2(x, y, r, TARGET_ENEMY);
	ascent(i in 0 .. length(objShots))
	{
		if (isResDelete || !ObjShot_IsSpellResist(objShots[i]))
		{
			DeleteBulletEffect(objShots[i]);
		}
	}
}

// 画面端までの一番遠い点への距離を取得
function GetFarthestPoint(x, y)
{
	//画面端から一番遠い点を取得
	let max_r = (x-MinX)^2 + (y-MinY)^2;
	max_r = max(max_r, (MaxX-x)^2 + (y-MinY)^2);
	max_r = max(max_r, (x-MinX)^2 + (MaxY-y)^2);
	max_r = max(max_r, (MaxX-x)^2 + (MaxY-y)^2);
	return(max_r^0.5);
}

//敵出現数カウント
task EntryEnemyCount(objEnemy, count)
{
	AddAreaCommonData(CAREA_STAGE, "ChapterShootDownMax", count);
	Obj_SetValue(objEnemy, "EntryCount", 1);
}
//撃破数カウント
task KilledEnemyCount(objEnemy, count)
{
	if (Obj_GetValueD(objEnemy, "EntryCount", 0))
	{
		AddAreaCommonData(CAREA_STAGE, "ChapterShootDownCount", count);
		
		// 敵撃破通知
		NoticeEnemyKilled(count);
	}
}

// アイテム配置
task DropItems(objEnemy)
{
	if (GetPlayMode() == GAME_SPELL) { return; }	// スペプラ中は落とさない
	
	let eX = ObjMove_GetX(objEnemy);
	let eY = ObjMove_GetY(objEnemy);

	let item_norm = Obj_GetValueD(objEnemy, "ITEM_DROP", [0,0]);
	let item_sp = Obj_GetValueD(objEnemy, "ITEM_DROP_SP", []);
	
	let ct1 = item_norm[1];
	let r1 = (3 + ct1^0.5) / 1.66; if (ct1 < 2) { r1 = 0; }

	let ct2 = length(item_sp);
	let r2 = (3 + ct2)/ 3; if (ct2 < 2) { r2 = 0; }

	let item_count = Obj_GetValueD(objEnemy, "ItemCount", 0);
	
	local
	{
		let ba = rand(0,360);
		ascent(i in 0 .. ct1)
		{
			let ia = ba + i/ct1*360;
			let is = r1;
			SetItemEx(eX, eY, is, ia, item_norm[0], -1);
		}
		if (length(item_norm) > 3)
		{
			let ct1 = item_norm[3];
			ascent(i in 0 .. ct1)
			{
				let ia = ba + (i+0.5)/ct1*360;
				let is = r1*1.25;
				SetItemEx(eX, eY, is, ia, item_norm[2], -1);
			}
		}
	}
	local
	{
		let ba = rand(0,360);
		ascent(i in 0 .. ct2)
		{
			let ia = ba + i/ct2*360;
			let is = r2;
			SetItemEx(eX, eY, is, ia, item_sp[i], -1);
		}
	}
}


// てきを　ぜんいん　ころす
function KillAllEnemy()
{
	KillAllEnemyEx(true)
}
function KillAllEnemyEx(kill_boss)
{
	let tmp_obj = GetAllEnemyID();
	let tmp_boss = GetEnemyBossObjectID();
	ascent(i in 0 .. length(tmp_obj))
	{
		let flg = true;
		if (!kill_boss)
		{
			ascent(j in 0 .. length(tmp_boss))
			{
				if (tmp_obj[i] == tmp_boss[j])
				{
					flg = false;
					break;
				}
			}
		}
		if (flg)
		{
			Obj_SetValue(tmp_obj[i], "KILLED", 1);	//アイテムドロップフラグOFF
			ObjEnemy_SetLife(tmp_obj[i], 0);
		}
	}
}
// ぜんいん　いなくなれ
function DeleteAllEnemy()
{
	let tmp_obj = GetAllEnemyID();
	ascent(i in 0 .. length(tmp_obj))
	{
		Obj_SetValue(tmp_obj[i], "KILLED", 1);	//アイテムドロップフラグOFF
	}
}

// 敵撃破通知
function NoticeEnemyKilled(count)
{
	NotifyEventAll(ev_EnemyKilled, count);
}

//アイテム配置（ボスや強敵用）
task Boss_SetItem(obj, itemCount)
{
	_Boss_SetItem(ObjMove_GetX(obj), ObjMove_GetY(obj), itemCount);
}
task _Boss_SetItem(eX, eY, itemCount)
{
	if (GetPlayMode() == GAME_SPELL) { return; }	// スペプラ中は落とさない

	if (itemCount > 300)
	{
		_Boss_SetItem(eX, eY, 6.5, 9, MY_ITEM_TIME_5);
		yield;
		_Boss_SetItem(eX, eY, 5, 7, MY_ITEM_TIME_5);
		yield;
		_Boss_SetItem(eX, eY, 3.5, 5, MY_ITEM_TIME_5);
		yield;
		_Boss_SetItem(eX, eY, 2, 3, MY_ITEM_TIME_5);
	}
	else if (itemCount > 200)
	{
		_Boss_SetItem(eX, eY, 6.5, 9, MY_ITEM_TIME_2);
		yield;
		_Boss_SetItem(eX, eY, 5, 7, MY_ITEM_TIME_3);
		yield;
		_Boss_SetItem(eX, eY, 3.5, 5, MY_ITEM_TIME_5);
		yield;
		_Boss_SetItem(eX, eY, 2, 3, MY_ITEM_TIME_10);
	}
	else if (itemCount > 150)
	{
		_Boss_SetItem(eX, eY, 6.5, 9, MY_ITEM_TIME_2);
		yield;
		_Boss_SetItem(eX, eY, 5, 7, MY_ITEM_TIME_2);
		yield;
		_Boss_SetItem(eX, eY, 3.5, 5, MY_ITEM_TIME_3);
		yield;
		_Boss_SetItem(eX, eY, 2, 3, MY_ITEM_TIME_5);
	}
	else if (itemCount > 100)
	{
		_Boss_SetItem(eX, eY, 5, 7, MY_ITEM_TIME_3);
		yield;
		_Boss_SetItem(eX, eY, 3.5, 5, MY_ITEM_TIME_3);
		yield;
		_Boss_SetItem(eX, eY, 2, 3, MY_ITEM_TIME_3);
	}
	else if (itemCount > 50)
	{
		_Boss_SetItem(eX, eY, 4, 6, MY_ITEM_TIME_3);
		yield;
		_Boss_SetItem(eX, eY, 2, 4, MY_ITEM_TIME_3);
	}
	else if (itemCount > 0)
	{
		_Boss_SetItem(eX, eY, 3, 5, MY_ITEM_TIME_3);
	}

	task _Boss_SetItem(eX, eY, size, ct, itype)
	{
		ascent(i in 0 .. ct)
		{
			let tmp = i/(ct-1);
			let vx = tmp;
			let vy = 1-tmp;
			let is = size * (vx^2+vy^2)^0.5;
			let ia = atan2(vy, vx);
			SetItemEx(eX, eY, is, ia, itype, -1);
			if (i > 0) { SetItemEx(eX, eY, is, 180-ia, itype, -1); }
			if (DEBUG_MODE) { AddAreaCommonData(CAREA_STAGE, "AllDropItem_Boss", [6,3][i==0]); }
			yield;
		}
		descent(i in 0 .. ct-1)
		{
			let tmp = i/(ct-1);
			let vx = tmp;
			let vy = tmp-1;
			let is = size * (vx^2+vy^2)^0.5;
			let ia = atan2(vy, vx);
			SetItemEx(eX, eY, is, ia, itype, -1);
			if (i > 0) { SetItemEx(eX, eY, is, 180-ia, itype, -1); }
			if (DEBUG_MODE) { AddAreaCommonData(CAREA_STAGE, "AllDropItem_Boss", [6,3][i==0]); }
			yield;
		}
	}
}

//特殊アイテム配置
task Boss_SetSpecialItem(obj, itemSpecial)
{
	let eX = ObjMove_GetX(obj);
	let eY = ObjMove_GetY(obj);
	_Boss_SetSpecialItem(eX, eY, itemSpecial);
}
task _Boss_SetSpecialItem(eX, eY, itemSpecial)
{
	let itemCount = length(itemSpecial);
	let eR = ((itemCount-1)^0.5) * 32;

	wait(30);
	// アイテム配置
	ascent(i in 0 .. itemCount)
	{
		let ia = 90 + (i+0.5)/itemCount*360;
		SetItem(eX+eR*cos(ia), eY+eR*sin(ia), itemSpecial[i]);
		wait(15);
	}
}



// 曲名表示
task PlayMusicWithName( int_play_num, bool_fade_out, int_delay )
{
	PlayMusic( int_play_num, bool_fade_out, int_delay );
	if (GetPlayMode() == GAME_MAIN || GetPlayMode() == GAME_PRACTICE || GetPlayMode() == GAME_PRACTICE || GetPlayMode() == GAME_SPELL)
	{
		waitEx(int_delay);
		SetMusicName(int_play_num);
	}
}
task SetMusicName(musicID)
{
	let baseX = 160;
	let baseY = 450;
	
	//初期設定
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(obj, 99);
	ObjPrim_SetTexture(obj, imgSystemMusic);
	ObjSprite2D_SetSourceRect(obj, 0, musicID*32, 512, (musicID+1)*32);
	ObjSprite2D_SetDestCenter(obj);

	ascent(t in 0 .. 30)
	{
		let tmp = sin((t+1)/30*90);
		ObjRender_SetPosition(obj, baseX+(1-tmp)*256, baseY, 0);
		ObjRender_SetAlpha(obj, tmp*255);
		yield;
	}
	waitEx(240);
	descent(t in 0 .. 30)
	{
		let tmp = sin((t+1)/45*90);
		ObjRender_SetAlpha(obj, tmp*255);
		yield;
	}
	Obj_Delete(obj);
}

// 使い魔と体力連動（ボス側）
task CheckLinkLife_Boss(objEnemy)
{
	Obj_SetValue(objEnemy, "LINK_LIFE", 1);	// 体力リンク設定（近接アイテム出現判定に関連）
	Obj_SetValue(objEnemy, "LINK_COUNT", 0);
	Obj_SetValue(objEnemy, "LINK_DMG", 0);
	
	let before_life = ObjEnemy_GetInfo(objEnemy, INFO_LIFE);
	let before_linkdmg = 0;
	while(!Obj_IsDeleted(objEnemy))
	{
		let now_life = ObjEnemy_GetInfo(objEnemy, INFO_LIFE);
		let d = Obj_GetValueD(objEnemy, "LINK_DMG", 0);
		let dmg = now_life-before_life + before_linkdmg;
		if (dmg > 1)	// 本体へのダメージが一定以上ならリンクダメージ半減
		{
			d /= 2;
		}
		if (d > 0)
		{
			d *= ObjEnemy_GetInfo(objEnemy, INFO_DAMAGE_RATE_SHOT)/100;
			ObjEnemy_AddLife(objEnemy, -d);
		}
		// 毎frameリセット
		Obj_SetValue(objEnemy, "LINK_COUNT", 0);
		Obj_SetValue(objEnemy, "LINK_DMG", 0);
		before_linkdmg = d;
		yield;
	}
}

// 使い魔と体力連動（使い魔側）
task CheckLinkLife_Familier(objEnemy, objFamilier, damage_rate)
{
	Obj_SetValue(objFamilier, "LINK_LIFE", 2);	// 体力リンク設定（近接アイテム出現判定に関連）
	Obj_SetValue(objFamilier, "LINK_PARENT", objEnemy);

	let tmp_life = ObjEnemy_GetInfo(objFamilier, INFO_LIFE);
	
	while(!Obj_IsDeleted(objFamilier) && !Obj_IsDeleted(objEnemy))
	{
		let new_life = max(0, ObjEnemy_GetInfo(objFamilier, INFO_LIFE));
		let dmg = tmp_life - new_life;
		if (dmg > 0)
		{
			let c = Obj_GetValueD(objEnemy, "LINK_COUNT", 0);
			let d = Obj_GetValueD(objEnemy, "LINK_DMG", 0);
			let dm = damage_rate * dmg;
			c++;
			if (dm > d) { d = d/c + dm; }
			else { d = d + dm/c; }
			Obj_SetValue(objEnemy, "LINK_COUNT", c);
			Obj_SetValue(objEnemy, "LINK_DMG", d);
		}
		tmp_life = new_life;
		yield;
	}
}

//敵移動用（SetSpeed等を使わない）
task TEnemyMove(obj)
{
	while(!Obj_IsDeleted(obj))
	{
		let s = Obj_GetValueD(obj, "S", 0);
		let a = Obj_GetValueD(obj, "A", 0);
		ObjMove_SetPosition(obj, ObjMove_GetX(obj)+s*cos(a), ObjMove_GetY(obj)+s*sin(a));
		waitObj(obj, 1);
	}
}

function Enemy_SetSpeed(obj, speed) { Obj_SetValue(obj, "S", speed); }
function Enemy_SetAngle(obj, angle) { Obj_SetValue(obj, "A", angle); }
function Enemy_GetSpeed(obj) { return(Obj_GetValueD(obj, "S", 0)); }
function Enemy_GetAngle(obj) { return(Obj_GetValueD(obj, "A", 0)); }

task _Enemy_SetPatternA1(obj, speed, angle)
{
	let pat = Obj_GetValueD(obj, "PAT", 0) + 1;
	Obj_SetValue(obj, "PAT", pat);
	
	if (speed == NO_CHANGE) { speed = Enemy_GetSpeed(obj); }
	if (angle == NO_CHANGE) { angle = Enemy_GetAngle(obj); }
	Enemy_SetSpeed(obj, speed);
	Enemy_SetAngle(obj, angle);
}

task _Enemy_SetPatternA2(obj, speed, angle, add_s, add_a, max_s)
{
	let pat = Obj_GetValueD(obj, "PAT", 0) + 1;
	Obj_SetValue(obj, "PAT", pat);
	
	if (speed == NO_CHANGE) { speed = Enemy_GetSpeed(obj); }
	if (angle == NO_CHANGE) { angle = Enemy_GetAngle(obj); }
	Enemy_SetSpeed(obj, speed);
	Enemy_SetAngle(obj, angle);
	
	while(!Obj_IsDeleted(obj) && pat == Obj_GetValueD(obj, "PAT", 0))
	{
		if (!IsTimeStopObj(obj))
		{
			if (add_s < 0) { Enemy_SetSpeed(obj, max(max_s,Enemy_GetSpeed(obj)+add_s)); }
			else if (add_s > 0) { Enemy_SetSpeed(obj, min(max_s,Enemy_GetSpeed(obj)+add_s)); }
			Enemy_SetAngle(obj, Enemy_GetAngle(obj)+add_a);
		}
		yield;
	}
}

task _Enemy_SetPatternA4(obj, speed, offset_angle, add_s, add_a, max_s, to_obj)
{
	let pat = Obj_GetValueD(obj, "PAT", 0) + 1;
	Obj_SetValue(obj, "PAT", pat);
	
	let angle = atan2(ObjMove_GetY(to_obj)-ObjMove_GetY(obj), ObjMove_GetX(to_obj)-ObjMove_GetX(obj)) + offset_angle;
	if (speed == NO_CHANGE) { speed = Enemy_GetSpeed(obj); }
	if (angle == NO_CHANGE) { angle = Enemy_GetAngle(obj); }
	Enemy_SetSpeed(obj, speed);
	Enemy_SetAngle(obj, angle);
	
	while(!Obj_IsDeleted(obj) && pat == Obj_GetValueD(obj, "PAT", 0))
	{
		if (!IsTimeStopObj(obj))
		{
			if (add_s < 0) { Enemy_SetSpeed(obj, max(max_s,Enemy_GetSpeed(obj)+add_s)); }
			else if (add_s > 0) { Enemy_SetSpeed(obj, min(max_s,Enemy_GetSpeed(obj)+add_s)); }
			Enemy_SetAngle(obj, Enemy_GetAngle(obj)+add_a);
		}
		yield;
	}
}

task _Enemy_SetPatternB1(obj, vx, vy)
{
	let pat = Obj_GetValueD(obj, "PAT", 0) + 1;
	Obj_SetValue(obj, "PAT", pat);
	
	if (vx == NO_CHANGE) { vx = Enemy_GetSpeed(obj)*cos(Enemy_GetAngle(obj)); }
	if (vy == NO_CHANGE) { vy = Enemy_GetSpeed(obj)*sin(Enemy_GetAngle(obj)); }
	let speed = (vx^2 + vy^2)^0.5;
	let angle = atan2(vy, vx);
	Enemy_SetSpeed(obj, speed);
	Enemy_SetAngle(obj, angle);
}

task _Enemy_SetPatternB2(obj, vx, vy, add_vx, add_vy, max_vx, max_vy)
{
	let pat = Obj_GetValueD(obj, "PAT", 0) + 1;
	Obj_SetValue(obj, "PAT", pat);
	
	if (vx == NO_CHANGE) { vx = Enemy_GetSpeed(obj)*cos(Enemy_GetAngle(obj)); }
	if (vy == NO_CHANGE) { vy = Enemy_GetSpeed(obj)*sin(Enemy_GetAngle(obj)); }
	if (max_vx == NO_CHANGE) { max_vx = [99999,-99999][add_vx < 0]; }
	if (max_vy == NO_CHANGE) { max_vy = [99999,-99999][add_vy < 0]; }
	let speed = (vx^2 + vy^2)^0.5;
	let angle = atan2(vy, vx);
	Enemy_SetSpeed(obj, speed);
	Enemy_SetAngle(obj, angle);
	
	while(!Obj_IsDeleted(obj) && pat == Obj_GetValueD(obj, "PAT", 0))
	{
		if (!IsTimeStopObj(obj))
		{
			speed = (vx^2 + vy^2)^0.5;
			angle = atan2(vy, vx);
			
			Enemy_SetSpeed(obj, speed);
			Enemy_SetAngle(obj, angle);
			if (add_vx < 0) { vx = max(max_vx,vx+add_vx); }
			else if (add_vx > 0) { vx = min(max_vx,vx+add_vx); }
			if (add_vy < 0) { vy = max(max_vy,vy+add_vy); }
			else if (add_vy > 0) { vy = min(max_vy,vy+add_vy); }
		}
		yield;
	}
}

// タイマー付き
task Enemy_SetPatternA1(obj, timer, speed, angle)
{
	waitObj(obj, timer);
	if (!Obj_IsDeleted(obj)) { _Enemy_SetPatternA1(obj, speed, angle); }
}
task Enemy_SetPatternA2(obj, timer, speed, angle, add_s, add_a, max_s)
{
	waitObj(obj, timer);
	if (!Obj_IsDeleted(obj)) { _Enemy_SetPatternA2(obj, speed, angle, add_s, add_a, max_s); }
}
task Enemy_SetPatternA4(obj, timer, speed, angle, add_s, add_a, max_s, to_obj)
{
	waitObj(obj, timer);
	if (!Obj_IsDeleted(obj)) { _Enemy_SetPatternA4(obj, speed, angle, add_s, add_a, max_s, to_obj); }
}
task Enemy_SetPatternB1(obj, timer, vx, vy)
{
	waitObj(obj, timer);
	if (!Obj_IsDeleted(obj)) { _Enemy_SetPatternB1(obj, vx, vy); }
}
task Enemy_SetPatternB2(obj, timer, vx, vy, add_vx, add_vy, max_vx, max_vy)
{
	waitObj(obj, timer);
	if (!Obj_IsDeleted(obj)) { _Enemy_SetPatternB2(obj, vx, vy, add_vx, add_vy, max_vx, max_vy); }
}



//TriFocuserからお引越しした関数
//-----------------------------------------------------------------------

let MOVE_BRAKING01 = 0;
let MOVE_BRAKING02 = 1;
let MOVE_BRAKING03 = 2;

//正弦波的な移動関数1
task SetMovePositionBrakingEx(obj, fin_x, fin_y, flame, type){
	alternative(type)
	case(MOVE_BRAKING01){	//急に動いてゆっくり止まる
		SetMovePositionBraking01(obj, fin_x, fin_y, flame);
	}case(MOVE_BRAKING02){	//ゆっくり動いてゆっくり止まる
		SetMovePositionBraking02(obj, fin_x, fin_y, flame);
	}case(MOVE_BRAKING03){	//ゆっくり動いて急に止まる
		SetMovePositionBraking03(obj, fin_x, fin_y, flame);
	}
}
task SetMovePositionBraking01(obj, fin_x, fin_y, flame){
	let pat = Obj_GetValueD(obj, "PAT", 0) + 1;
	Obj_SetValue(obj, "PAT", pat);
	let x = ObjMove_GetX(obj);
	let y = ObjMove_GetY(obj);
	let rx = fin_x - x;
	let ry = fin_y - y;
	ascent(time in 1 .. flame+1){
		if(Obj_IsDeleted(obj) || pat != Obj_GetValueD(obj, "PAT", 0)){return;}
		let t_rate = 90 / flame * time;
		ObjMove_SetX(obj, x + rx * sin(t_rate));
		ObjMove_SetY(obj, y + ry * sin(t_rate));
		waitObj(obj, 1);
	}
	ObjMove_SetX(obj, fin_x);
	ObjMove_SetY(obj, fin_y);
}

//正弦波的な移動関数2
task SetMovePositionBraking02(obj, fin_x, fin_y, flame){
	let pat = Obj_GetValueD(obj, "PAT", 0) + 1;
	Obj_SetValue(obj, "PAT", pat);
	let cx = (ObjMove_GetX(obj)+fin_x)/2;
	let cy = (ObjMove_GetY(obj)+fin_y)/2;
	let rx = (fin_x-ObjMove_GetX(obj))/2;
	let ry = (fin_y-ObjMove_GetY(obj))/2;
	ascent(time in 1 .. flame+1){
		if(Obj_IsDeleted(obj) || pat != Obj_GetValueD(obj, "PAT", 0)){return;}
		let t_rate = 180 / flame * time;
		ObjMove_SetX(obj, cx - rx * cos(t_rate));
		ObjMove_SetY(obj, cy - ry * cos(t_rate));
		waitObj(obj, 1);
	}
	ObjMove_SetX(obj, fin_x);
	ObjMove_SetY(obj, fin_y);
}

//正弦波的な移動関数3
task SetMovePositionBraking03(obj, fin_x, fin_y, flame){
	let pat = Obj_GetValueD(obj, "PAT", 0) + 1;
	Obj_SetValue(obj, "PAT", pat);
	let x = ObjMove_GetX(obj);
	let y = ObjMove_GetY(obj);
	let rx = fin_x - x;
	let ry = fin_y - y;
	ascent(time in 1 .. flame+1){
		if(Obj_IsDeleted(obj) || pat != Obj_GetValueD(obj, "PAT", 0)){return;}
		let t_rate = 90 / flame * time;
		ObjMove_SetX(obj, x + rx * (1-cos(t_rate)));
		ObjMove_SetY(obj, y + ry * (1-cos(t_rate)));
		waitObj(obj, 1);
	}
	ObjMove_SetX(obj, fin_x);
	ObjMove_SetY(obj, fin_y);
}



//-----------------------------------------------------------------------



// -------------------------- 移動関係
// 加速→減速移動
task ObjMove_SetDestAtWeightSpeedUp(obj, x, y, weight, speed, add_speed, max_speed)
{
	let pat = Obj_GetValueD(obj, "PAT", 0) + 1;
	Obj_SetValue(obj, "PAT", pat);

	while(!Obj_IsDeleted(obj) && pat == Obj_GetValueD(obj, "PAT", 0))
	{
		if (IsTimeStopObj(obj))
		{
			ObjMove_SetDestAtWeight(obj, x, y, weight, 0);
		}
		else
		{
			ObjMove_SetDestAtWeight(obj, x, y, weight, speed);
			speed = min(max_speed, speed+add_speed);
			if ((x-ObjMove_GetX(obj))^2+(y-ObjMove_GetY(obj))^2 < 1) { break; }
		}
		yield;
	}
	ObjMove_SetDestAtFrame(obj, x, y, 1);
}

//指定箇所へ移動（加速→減速）
task MoveTo(obj, to_x, to_y, timer)
{
	let pat = Obj_GetValueD(obj, "PAT", 0) + 1;
	Obj_SetValue(obj, "PAT", pat);

	let tm = trunc(timer/3);
	let tm2 = timer - tm*2;

	let max_t = tm2 + (tm+1);
	if (tm <= 0) { max_t--; }

	let tmp_x = ObjMove_GetX(obj);
	let tmp_y = ObjMove_GetY(obj);
	let vx = (to_x-ObjMove_GetX(obj))/max_t;
	let vy = (to_y-ObjMove_GetY(obj))/max_t;

	ascent(i in 0 .. tm)
	{
		if (Obj_IsDeleted(obj) || pat != Obj_GetValueD(obj, "PAT", 0)) { break; }
		tmp_x += vx*(i+1)/tm; tmp_y += vy*(i+1)/tm;
		ObjMove_SetDestAtFrame(obj, tmp_x, tmp_y, 1);
		waitObj(obj, 1);
	}
	loop(tm2)
	{
		if (Obj_IsDeleted(obj) || pat != Obj_GetValueD(obj, "PAT", 0)) { break; }
		tmp_x += vx; tmp_y += vy;
		ObjMove_SetDestAtFrame(obj, tmp_x, tmp_y, 1);
		waitObj(obj, 1);
	}
	descent(i in 0 .. tm)
	{
		if (Obj_IsDeleted(obj) || pat != Obj_GetValueD(obj, "PAT", 0)) { break; }
		tmp_x += vx*(i+1)/tm; tmp_y += vy*(i+1)/tm;
		ObjMove_SetDestAtFrame(obj, tmp_x, tmp_y, 1);
		waitObj(obj, 1);
	}
}

//指定箇所へ移動（減速）
task MoveToSlowdown(obj, to_x, to_y, timer)
{
	let pat = Obj_GetValueD(obj, "PAT", 0) + 1;
	Obj_SetValue(obj, "PAT", pat);

	let max_t = (timer+1)/2;
	let tmp_x = ObjMove_GetX(obj);
	let tmp_y = ObjMove_GetY(obj);
	let vx = (to_x-ObjMove_GetX(obj))/max_t;
	let vy = (to_y-ObjMove_GetY(obj))/max_t;

	descent(i in 0 .. timer)
	{
		if (Obj_IsDeleted(obj) || pat != Obj_GetValueD(obj, "PAT", 0)) { break; }
		tmp_x += vx*(i+1)/timer; tmp_y += vy*(i+1)/timer;
		ObjMove_SetDestAtFrame(obj, tmp_x, tmp_y, 1);
		waitObj(obj, 1);
	}
}

//指定箇所へ移動（いっぱい減速）
task MoveToSlowdown2(obj, to_x, to_y, timer)
{
	let pat = Obj_GetValueD(obj, "PAT", 0) + 1;
	Obj_SetValue(obj, "PAT", pat);

	let from_x = ObjMove_GetX(obj);
	let from_y = ObjMove_GetY(obj);

	ascent(i in 0 .. timer)
	{
		if (Obj_IsDeleted(obj) || pat != Obj_GetValueD(obj, "PAT", 0)) { break; }
		let tmp = sin(((i+1)/timer)*90);
		let x = from_x*(1-tmp) + to_x*tmp;
		let y = from_y*(1-tmp) + to_y*tmp;
		ObjMove_SetDestAtFrame(obj, x, y, 1);
		waitObj(obj, 1);
	}
}

//【弾幕風ph3向け・v0.12m関数ライブラリ(α版)】
task SetMovePositionHermite( let obj, let x2 , let y2 , let VR1 , let VT1 , let VR2 , let VT2 , let frame )
{
	let t = 0 ;
	
	let x1 = ObjMove_GetX(obj) ;
	let y1 = ObjMove_GetY(obj) ;
	let vx1 = VR1 * cos( VT1 ) ;
	let vy1 = VR1 * sin( VT1 ) ;
	let vx2 = VR2 * cos( VT2 ) ;
	let vy2 = VR2 * sin( VT2 ) ;
	
	ascent(timer in 0 .. frame)
	{
		if (Obj_IsDeleted(obj)) { break; }
		let MoveX =	( 2 * x1 +     vx1 - 2 * x2 +   vx2 ) * t^3+
				(-3 * x1 - 2 * vx1 + 3 * x2 -   vx2 ) * t^2+
				( vx1 ) * t^1 + ( 1 * x1 );
		let MoveY =	( 2 * y1 +     vy1 - 2 * y2 +   vy2 ) * t^3+
				(-3 * y1 - 2 * vy1 + 3 * y2 -   vy2 ) * t^2+
				( vy1 ) * t^1 + ( 1 * y1 );
		ObjMove_SetDestAtFrame( obj , MoveX , MoveY , 1 );
		t = timer / frame ;
		waitObj(obj, 1);
	}
	ObjMove_SetDestAtFrame( obj , x2 , y2 , 1 );
}

//ホーミング移動
task MoveHorming(obj, horming_power, timer)
{
	let t = 0;
	while(!Obj_IsDeleted(obj) && t < timer)
	{
		ObjMove_SetAngle(obj, GetHormingAngle(ObjMove_GetX(obj), ObjMove_GetY(obj),
			ObjMove_GetAngle(obj), horming_power * (timer-t)/timer));
		t++;
		waitObj(obj, 1);
	}
}
task MoveHorming02(obj, horming_power, f_timer, timer)
{
	let t = 0;
	while(!Obj_IsDeleted(obj) && t < timer)
	{
		let hp = horming_power;
		if (t < f_timer) { hp *= (t+1)/f_timer; }
		else { hp *= (timer-t)/(timer-f_timer); }
		ObjMove_SetAngle(obj, GetHormingAngle(ObjMove_GetX(obj), ObjMove_GetY(obj),
			ObjMove_GetAngle(obj), hp));
		t++;
		waitObj(obj, 1);
	}
}
function GetHormingAngle(x, y, angle, horming_power)
{
	let to_angle = atan2(GetPlayerY-y, GetPlayerX-x);
	let tmp = (angle-to_angle)%360;
	if (tmp > 180) { tmp -= 360; }
	if (tmp < -horming_power) { return(angle+horming_power); }
	else if (tmp > horming_power) { return(angle-horming_power); }
	else { return(to_angle); }
}
function GetHormingAngleEx(x, y, angle, horming_power, to_obj)
{
	let to_angle = atan2(ObjMove_GetY(to_obj)-y, ObjMove_GetX(to_obj)-x);
	let tmp = (angle-to_angle)%360;
	if (tmp > 180) { tmp -= 360; }
	if (tmp < -horming_power) { return(angle+horming_power); }
	else if (tmp > horming_power) { return(angle-horming_power); }
	else { return(to_angle); }
}
function GetHormingAngleEx2(x, y, angle, horming_power, to_angle)
{
	let tmp = (angle-to_angle)%360;
	if (tmp > 180) { tmp -= 360; }
	if (tmp < -horming_power) { return(angle+horming_power); }
	else if (tmp > horming_power) { return(angle-horming_power); }
	else { return(to_angle); }
}

//ホーミング移動（敵用）
task MoveHormingEnemy(obj, horming_power, timer)
{
	MoveHormingEnemyEx(obj, horming_power, timer, 0);
}
task MoveHormingEnemyEx(obj, horming_power, timer, offset_angle)
{
	let t = 0;
	while(!Obj_IsDeleted(obj) && t < timer)
	{
		Enemy_SetAngle(obj, GetHormingAngle(ObjMove_GetX(obj), ObjMove_GetY(obj),
			Enemy_GetAngle(obj)-offset_angle, horming_power * (timer-t)/timer));
		t++;
		waitObj(obj, 1);
	}
}
