
//================================================================
//大域設定値
//Texture
sampler sampler0_ : register(s0);

//--------------------------------
//マスク用テクスチャ
// 切り取り範囲
float4 posFrame_;	// [x, y, width, height]
float4 fogColor_;

texture textureMask_;

sampler samplerMask_ = sampler_state
{ 
	Texture = <textureMask_>;
};

//================================================================
//--------------------------------
//ピクセルシェーダ入力値
struct PS_INPUT
{
	float4 diffuse : COLOR0;  //ディフューズ色
	float2 texCoord : TEXCOORD0; //テクスチャ座標
	float2 vPos : VPOS; //描画先座標
};

//--------------------------------
//ピクセルシェーダ出力値
struct PS_OUTPUT
{
    float4 color : COLOR0; //出力色
};


//================================================================
// シェーダ
//--------------------------------
//ピクセルシェーダ
PS_OUTPUT PsMask( PS_INPUT In ) : COLOR0
{
	PS_OUTPUT Out;

	//テクスチャの色
	float4 colorTexture = tex2D(sampler0_, In.texCoord);

	//頂点ディフーズ色
	float4 colorDiffuse = In.diffuse;

	//合成
	float4 color = colorTexture * colorDiffuse;
	Out.color = color;

	//--------------------------------
	float2 maskUV;

	//描画先からマスク用テクスチャの位置を計算
	maskUV.x = (In.vPos.x - posFrame_[0]) / posFrame_[2];
	maskUV.y = (In.vPos.y - posFrame_[1]) / posFrame_[3];
	float4 colorMask = tex2D(samplerMask_, maskUV);


	//マスクのg値をフォグ濃度として合成する
	Out.color.rgb = (Out.color.rgb * colorMask.g) + (fogColor_.rgb * (1.0f-colorMask.g));
	Out.color.rgb = (Out.color.rgb * colorMask.r);

	//マスクのr値を出力結果のα値として合成する(g=1でalpha=0)
	Out.color.a = colorMask.r;

	return Out;
}


//================================================================
//--------------------------------
//technique
technique TecMask
{
	pass P0
	{
		PixelShader = compile ps_3_0 PsMask();
	}
}

