let FIST_LEFT = 0;
let FIST_RIGHT = 1;

function FistShot(x, y, color, size, angle, delay){
	return FistShot2(x, y, color, size, angle, FIST_RIGHT, delay);
}
function FistShot2(x, y, color, size, angle, type, delay){
	type %= 2;
	let objShot = CreateShotA1(x, y, 0, angle, BGW_BALL_S_WHITE, 0);
	Effect(objShot, type);
	Obj_SetVisible(objShot, false);
	ObjShot_SetIntersectionEnable(objShot, false);
	Obj_SetValue(objShot, "COLOR", color);
	Obj_SetValue(objShot, "SIZE", size);
	Obj_SetValue(objShot, "AI_LENGTH", 20);
	Obj_SetValue(objShot, "AI_COLOR", color);
	return objShot;

	task Effect(objShot, type){
		let RectY = 256*type;
		let obj=ObjPrim_Create(OBJ_SPRITE_2D);
		Obj_SetValue(objShot, "IMAGE_ID", obj);
//		ObjRender_SetBlendType(obj, BLEND_ADD_RGB);
		ObjPrim_SetTexture(obj, imgEffectFist);//オブジェクトとテスクチャを関連付け
		Obj_SetRenderPriority(obj, 0.43);
		ObjSprite2D_SetSourceRect(obj, 0, RectY, 256, RectY+256);
		let r2 = Obj_GetValueD(objShot, "SIZE", 60)/80*128;
		ObjSprite2D_SetDestRect(obj, -r2, -r2, r2, r2);
		ObjRender_SetAlpha(obj, 255);
		let col = Obj_GetValueD(objShot, "COLOR", [255,0,0]);
		let ai_col = Obj_GetValueD(objShot, "AI_COLOR", [255,0,0]);
		ascent(i in 1 .. delay+1){
			if(Obj_IsDeleted(objShot)){
				Obj_Delete(obj);
				return;
			}
			let scale = 1.0*i/delay;
			ObjRender_SetScaleY(obj, scale);
			ObjRender_SetAngleZ(obj, ObjMove_GetAngle(objShot));
			let r2 = Obj_GetValueD(objShot, "SIZE", 60)/80*128;
			ObjSprite2D_SetDestRect(obj, -r2, -r2, r2, r2);
			ObjRender_SetPosition(obj, ObjMove_GetX(objShot), ObjMove_GetY(objShot), 0);
			col = Obj_GetValueD(objShot, "COLOR", [255,0,0]);
			ai_col = Obj_GetValueD(objShot, "AI_COLOR", [255,0,0]);
			ObjRender_SetColor(obj, col[0], col[1], col[2]);
			AfterImage(obj, ObjRender_GetX(obj), ObjRender_GetY(obj), size, ObjRender_GetAngleZ(obj), scale, col, Obj_GetValueD(objShot, "AI_LENGTH", 20));
			yield;
		}
		while(!Obj_IsDeleted(objShot)){
			ObjShot_SetIntersectionCircleA1(objShot, Obj_GetValueD(objShot, "SIZE", 60));
			ObjRender_SetAngleZ(obj, ObjMove_GetAngle(objShot));
			let r2 = Obj_GetValueD(objShot, "SIZE", 60)/80*128;
			ObjSprite2D_SetDestRect(obj, -r2, -r2, r2, r2);
			ObjRender_SetPosition(obj, ObjMove_GetX(objShot), ObjMove_GetY(objShot), 0);
			col = Obj_GetValueD(objShot, "COLOR", [255,0,0]);
			ai_col = Obj_GetValueD(objShot, "AI_COLOR", [255,0,0]);
			ObjRender_SetColor(obj, col[0], col[1], col[2]);
			AfterImage(obj, ObjRender_GetX(obj), ObjRender_GetY(obj), size, ObjRender_GetAngleZ(obj), 1.0, ai_col, Obj_GetValueD(objShot, "AI_LENGTH", 20));
			yield;
		}
		descent(i in 0 .. 15){
			let scale = 1.0*i/15;
			ObjRender_SetScaleY(obj, scale);
			AfterImage(obj, ObjRender_GetX(obj), ObjRender_GetY(obj), size, ObjRender_GetAngleZ(obj), scale, ai_col, Obj_GetValueD(objShot, "AI_LENGTH", 20));
			yield;
		}
		Obj_Delete(obj);
	}
	
	task AfterImage(objS, x, y, size, angle, scale, color, AI_length){
		let RectY = 256*type;
		let obj=ObjPrim_Create(OBJ_SPRITE_2D);
		ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
		ObjPrim_SetTexture(obj, imgEffectFist);//オブジェクトとテスクチャを関連付け
		ObjRender_SetPosition(obj, ObjRender_GetX(objS), ObjRender_GetY(objS), 0);
		Obj_SetRenderPriority(obj, 0.40);
		ObjSprite2D_SetSourceRect(obj, 256, RectY, 512, RectY+256);
		let r2 = size/80*128;
		ObjSprite2D_SetDestRect(obj, -r2, -r2, r2, r2);
		ObjRender_SetScaleY(obj, scale);
		ObjRender_SetAngleZ(obj, angle);
		ObjRender_SetColor(obj, color[0], color[1], color[2]);
		descent(i in 1 .. AI_length+1){
			ObjRender_SetAlpha(obj, 95*i/AI_length);
			yield;
		}
		Obj_Delete(obj);
	}
}