// 色定数
// EFF_RED 〜 EFF_WHITE

// 直線えへくと
// 返り値のオブジェクトレーザー操作で移動出来る
function LaserEffect(x, y, angle, l_length, color, timer)
{
	let objDummy = CreateStraightLaserA1(x, y, angle, l_length, 0, timer, BGW_BALL_S_RED+SHOT_COLOR[color], 0);
	// 予告線
	ObjStLaser_SetSource(objDummy, false);
	ObjShot_SetAutoDelete(objDummy, false);
	ObjShot_SetItemChange(objDummy, false);
	ObjShot_SetIntersectionEnable(objDummy, false);
	Obj_SetVisible(objDummy, false);
	LaserEffect_Single(objDummy, color, timer/4, timer);
	return(objDummy);
}
// 広がるやつ
// timer/4から広がる
function LaserEffect02(x, y, angle, l_length, l_width, color, timer)
{
	let objDummy = CreateStraightLaserA1(x, y, angle, l_length, 0, timer-30, BGW_BALL_S_RED+SHOT_COLOR[color], 0);
	// 予告線
	ObjStLaser_SetSource(objDummy, false);
	ObjShot_SetAutoDelete(objDummy, false);
	ObjShot_SetItemChange(objDummy, false);
	ObjShot_SetIntersectionEnable(objDummy, false);
	Obj_SetVisible(objDummy, false);
	_LaserEffect_sub();
	return(objDummy);
	
	task _LaserEffect_sub()
	{
		LaserEffect_Single(objDummy, color, timer/4, timer*3/4);
		ascent(t in 0 .. timer)
		{
			if (t > timer/4*3)
			{
				let r = l_width * sin((t+1-timer*3/4)/timer*4*90);
				LaserEffect_Single02(objDummy, [r, 90], 0, 80, color, 0, 15);
				LaserEffect_Single02(objDummy, [-r, 90], 0, 80, color, 0, 15);
			}
			yield;
		}
	}
}
// 広がるやつ
// 最初から広がる
function LaserEffect02B(x, y, angle, l_length, l_width, color, timer)
{
	let objDummy = CreateStraightLaserA1(x, y, angle, l_length, 0, timer-30, BGW_BALL_S_RED+SHOT_COLOR[color], 0);
	// 予告線
	ObjStLaser_SetSource(objDummy, false);
	ObjShot_SetAutoDelete(objDummy, false);
	ObjShot_SetItemChange(objDummy, false);
	ObjShot_SetIntersectionEnable(objDummy, false);
	Obj_SetVisible(objDummy, false);
	_LaserEffect_sub();
	return(objDummy);
	
	task _LaserEffect_sub()
	{
		ascent(t in 0 .. timer)
		{
			let r = l_width * sin((t+1)/timer*90);
			LaserEffect_Single02(objDummy, [r, 90], 0, 64, color, 0, 15);
			LaserEffect_Single02(objDummy, [-r, 90], 0, 64, color, 0, 15);
			yield;
		}
	}
}

// えへくと単品
task LaserEffect_Single(objDummy, color, delay, timer)
{
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(obj, GetShotRenderPriorityI());
	ObjPrim_SetTexture(obj, imgEffectBullet);
	ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
	ObjSprite2D_SetSourceRect(obj, 1+32*color, 66, 31+32*color, 94);
	ObjSprite2D_SetDestRect(obj, -2, 0, 2, 640);
	
	let t = 0;
	while(!Obj_IsDeleted(objDummy) && t < timer)
	{
		if (t < delay) { ObjRender_SetAlpha(obj, (t+1)/delay*255); }
		ObjRender_SetScaleY(obj, ObjLaser_GetLength(objDummy)/640);
		ObjRender_SetPosition(obj, ObjMove_GetX(objDummy), ObjMove_GetY(objDummy), 0);
		ObjRender_SetAngleZ(obj, ObjStLaser_GetAngle(objDummy)-90);
		t++;
		yield;
	}
	descent(i in 0 .. 15)
	{
		ObjRender_SetAlpha(obj, 255*i/15);
		yield;
	}
	Obj_Delete(obj);
}
// offset_pos = [原点からの距離,エフェクト原点と元レーザーの角度差]
// offset_angle = エフェクトとの角度差
task LaserEffect_Single02(objDummy, offset_pos, offset_angle, alpha, color, delay, timer)
{
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(obj, GetShotRenderPriorityI());
	ObjPrim_SetTexture(obj, imgEffectBullet);
	ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
	ObjSprite2D_SetSourceRect(obj, 1+32*color, 66, 31+32*color, 94);
	ObjSprite2D_SetDestRect(obj, -2, 0, 2, 640);
	ObjRender_SetAlpha(obj, alpha);
	
	let t = 0;
	while(!Obj_IsDeleted(objDummy) && t < timer)
	{
		if (t < delay) { ObjRender_SetAlpha(obj, (t+1)/delay*alpha); }
		let oa = ObjStLaser_GetAngle(objDummy) + offset_pos[1];
		ObjRender_SetScaleY(obj, ObjLaser_GetLength(objDummy)/640);
		ObjRender_SetPosition(obj, ObjMove_GetX(objDummy)+offset_pos[0]*cos(oa), ObjMove_GetY(objDummy)+offset_pos[0]*sin(oa), 0);
		ObjRender_SetAngleZ(obj, ObjStLaser_GetAngle(objDummy)-90+offset_angle);
		t++;
		yield;
	}
	descent(i in 0 .. 15)
	{
		ObjRender_SetAlpha(obj, alpha*i/15);
		yield;
	}
	Obj_Delete(obj);
}
