// ショット発射ライブラリ

// カラー定数
let SHOT_RED	 = 0;
let SHOT_GREEN	 = 1;
let SHOT_BLUE	 = 2;
let SHOT_YELLOW	 = 3;
let SHOT_PURPLE	 = 4;
let SHOT_AQUA	 = 5;
let SHOT_ORANGE	 = 6;
let SHOT_WHITE	 = 7;

// ディレイ種別
let DELAY_DEFAULT = 0;	// 通常（ディレイ時間中も動き続ける：弾源安地に注意）
let DELAY_ADD     = 1;	// 動きは通常と同じ、ディレイのみADD描画（ディレイ後はADD弾でも強制的にALPHAになる）
let DELAY_STAY    = 2;	// ディレイ時間後に動き出す（ObjMove_AddPatternで設定しているので後から操作する際注意）
let DELAY_SCALE   = 3;	// 拡大するやつ


let BULLET_EFFECT = [7, 0, 3, 5, 2, 6, 4, 1];
let SHOT_COLOR = [SHOT_RED, SHOT_ORANGE, SHOT_YELLOW, SHOT_GREEN, SHOT_AQUA, SHOT_BLUE, SHOT_PURPLE, SHOT_WHITE];


//CreateShotA1
function My_CreateShotA1(x, y, speed, angle, graphic, delay)
	{ return(My_CreateShotA1Ex(x, y, speed, angle, graphic, delay, DELAY_DEFAULT)); }
function My_CreateShotA2(x, y, speed, angle, add_speed, max_speed, graphic, delay)
	{ return(My_CreateShotA2Ex(x, y, speed, angle, add_speed, max_speed, graphic, delay, DELAY_DEFAULT)); }
function My_CreateShotB1(x, y, vx, vy, graphic, delay)
	{ return(My_CreateShotB1Ex(x, y, vx, vy, graphic, delay, DELAY_DEFAULT)); }
function My_CreateShotB2(x, y, vx, vy, avx, avy, mvx, mvy, graphic, delay)
	{ return(My_CreateShotB2Ex(x, y, vx, vy, avx, avy, mvx, mvy, graphic, delay, DELAY_DEFAULT)); }

//追加設定つき
function My_CreateShotA1Ex(x, y, speed, angle, graphic, delay, delay_type)
{
	let obj = CreateShotA1(x, y, speed, angle, graphic, 0);
	TMove();
	return(obj);

	task TMove()
	{
		alternative(delay_type)
		case(DELAY_DEFAULT) {
			My_RaiseShotEffect01(obj, delay);
		} case(DELAY_ADD) {
			My_RaiseShotEffect02(obj, delay);
		} case(DELAY_STAY) {
			My_RaiseShotEffect01(obj, delay);
			ObjMove_AddPatternA1(obj, 0, 0, NO_CHANGE);
			wait(delay);
			ObjMove_AddPatternA1(obj, 0, speed, NO_CHANGE);
		} case(DELAY_SCALE) {
			My_RaiseShotEffect04(obj, delay);
		}
	}
}
function My_CreateShotA2Ex(x, y, speed, angle, add_speed, max_speed, graphic, delay, delay_type)
{
	let obj = CreateShotA2(x, y, speed, angle, add_speed, max_speed, graphic, 0);
	TMove();
	return(obj);

	task TMove()
	{
		alternative(delay_type)
		case(DELAY_DEFAULT) {
			My_RaiseShotEffect01(obj, delay);
		} case(DELAY_ADD) {
			My_RaiseShotEffect02(obj, delay);
		} case(DELAY_STAY) {
			My_RaiseShotEffect01(obj, delay);
			ObjMove_AddPatternA2(obj, 0, 0, NO_CHANGE, 0, 0, 0);
			wait(delay);
			ObjMove_AddPatternA2(obj, 0, speed, NO_CHANGE, add_speed, 0, max_speed);
		} case(DELAY_SCALE) {
			My_RaiseShotEffect04(obj, delay);
		}
	}
}
function My_CreateShotB1Ex(x, y, vx, vy, graphic, delay, delay_type)
{
	let obj = CreateShotB1(x, y, vx, vy, graphic, 0);
	TMove();
	return(obj);

	task TMove()
	{
		alternative(delay_type)
		case(DELAY_DEFAULT) {
			My_RaiseShotEffect01(obj, delay);
		} case(DELAY_ADD) {
			My_RaiseShotEffect02(obj, delay);
		} case(DELAY_STAY) {
			My_RaiseShotEffect01(obj, delay);
			ObjMove_AddPatternB1(obj, 0, vx/10000, vy/10000);
			wait(delay);
			ObjMove_AddPatternB1(obj, 0, vx, vy);
		} case(DELAY_SCALE) {
			My_RaiseShotEffect04(obj, delay);
		}
	}
}
function My_CreateShotB2Ex(x, y, vx, vy, avx, avy, mvx, mvy, graphic, delay, delay_type)
{
	let obj = CreateShotB2(x, y, vx, vy, avx, avy, mvx, mvy, graphic, 0);
	TMove();
	return(obj);

	task TMove()
	{
		alternative(delay_type)
		case(DELAY_DEFAULT) {
			My_RaiseShotEffect01(obj, delay);
		} case(DELAY_ADD) {
			My_RaiseShotEffect02(obj, delay);
		} case(DELAY_STAY) {
			My_RaiseShotEffect01(obj, delay);
			ObjMove_AddPatternB2(obj, 0, vx/10000, vy/10000, 0, 0, vx/10000, vy/10000);
			wait(delay);
			ObjMove_AddPatternB2(obj, 0, vx, vy, avx, avy, mvx, mvy);
		} case(DELAY_SCALE) {
			My_RaiseShotEffect04(obj, delay);
		}
	}
}

//自由落下ショット（grav_angle＝重力の向き）
function CreateGravityShot(x, y, speed, angle, graphic, delay, grav_add, grav_max, grav_angle)
{
	return(CreateGravityShotEx(x, y, speed, angle, graphic, delay, grav_add, grav_max, grav_angle, DELAY_DEFAULT));
}
function CreateGravityShotEx(x, y, speed, angle, graphic, delay, grav_add, grav_max, grav_angle, delay_type)
{
	let obj = CreateShotA1(x, y, 0, angle, graphic, 0);
	TMove();
	return(obj);

	task TMove()
	{
		alternative(delay_type)
		case(DELAY_DEFAULT) {
			My_RaiseShotEffect01(obj, delay);
		} case(DELAY_ADD) {
			My_RaiseShotEffect02(obj, delay);
		} case(DELAY_STAY) {
			My_RaiseShotEffect01(obj, delay);
			wait(delay);
		} case(DELAY_SCALE) {
			My_RaiseShotEffect04(obj, delay);
		}

		let vx = speed * cos(angle-grav_angle+90);
		let vy = speed * sin(angle-grav_angle+90);
		while(!Obj_IsDeleted(obj))
		{
			let tmp_s = (vx^2 + vy^2)^0.5;
			let tmp_a = atan2(vy, vx)+grav_angle-90;
			if (tmp_s > grav_max)
			{
				let tmp = tmp_s/grav_max;
				vx /= tmp; vy /= tmp; tmp_s = grav_max;
			}
			ObjMove_SetSpeed(obj, tmp_s);
			ObjMove_SetAngle(obj, tmp_a);
			vy += grav_add;
			yield;
		}
	}
}

//発射エフェクト
task My_RaiseShotEffect01(obj, delay)
{
	ObjShot_SetIntersectionEnable(obj, false);
	ascent(i in 0 .. delay)
	{
		let tmp_s = 1 + (delay-i-1)/delay*3;
		let tmp_a = (i+1)/delay*160;
		ObjRender_SetScaleX(obj, tmp_s);
		ObjRender_SetScaleY(obj, tmp_s);
		ObjRender_SetAlpha(obj, tmp_a);
		wait(1);
	}
	if (!Obj_IsDeleted(obj))
	{
		ObjShot_SetIntersectionEnable(obj, true);
		ObjRender_SetAlpha(obj, 255);
	}
}
// 拡大率とか追加設定
task My_RaiseShotEffect01Ex(obj, delay, alpha, scale)
{
	ObjShot_SetIntersectionEnable(obj, false);
	ascent(i in 0 .. delay)
	{
		let tmp_s = 1 + (delay-i-1)/delay*scale;
		let tmp_a = (i+1)/delay*alpha;
		ObjRender_SetScaleX(obj, tmp_s);
		ObjRender_SetScaleY(obj, tmp_s);
		ObjRender_SetAlpha(obj, tmp_a);
		wait(1);
	}
	if (!Obj_IsDeleted(obj))
	{
		ObjShot_SetIntersectionEnable(obj, true);
		ObjRender_SetAlpha(obj, 255);
	}
}
//発射エフェクト（Add描画→Alphaに）
task My_RaiseShotEffect02(obj, delay)
{
	ObjShot_SetIntersectionEnable(obj, false);
	ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
	Obj_SetRenderPriorityI(obj, GetShotRenderPriorityI+1);
	ascent(i in 0 .. delay)
	{
		let tmp = (i+1)/delay;
		let tmp_s = 3 - tmp*2;
		let tmp_a = tmp*512;
		ObjRender_SetScaleX(obj, tmp_s);
		ObjRender_SetScaleY(obj, tmp_s);
		ObjRender_SetAlpha(obj, tmp_a);
		wait(1);
	}
	if (!Obj_IsDeleted(obj))
	{
		ObjShot_SetIntersectionEnable(obj, true);
		ObjRender_SetBlendType(obj, BLEND_ALPHA);
		Obj_SetRenderPriorityI(obj, GetShotRenderPriorityI);
	}
}
// フェードインするやつ
task My_RaiseShotEffect03(obj, delay)
{
	ObjShot_SetIntersectionEnable(obj, false);
	ascent(i in 0 .. delay)
	{
		let tmp_a = (i+1)/delay*255;
		ObjRender_SetAlpha(obj, tmp_a);
		wait(1);
	}
	if (!Obj_IsDeleted(obj))
	{
		ObjShot_SetIntersectionEnable(obj, true);
		ObjRender_SetAlpha(obj, 255);
	}
}
// 拡大するやつ
task My_RaiseShotEffect04(obj, delay)
{
	ObjShot_SetIntersectionEnable(obj, false);
	ascent(i in 0 .. delay)
	{
		let tmp = (i+1)/delay;
		let tmp_s = tmp;
		ObjRender_SetScaleX(obj, tmp_s);
		ObjRender_SetScaleY(obj, tmp_s);
		wait(1);
	}
	if (!Obj_IsDeleted(obj))
	{
		ObjShot_SetIntersectionEnable(obj, true);
		ObjRender_SetAlpha(obj, 255);
	}
}

//弾オブジェクトをエフェクト用にする（当たり判定等削除）
function SetShotDisabled(obj)
{
	ObjShot_SetIntersectionEnable(obj, false);
	ObjShot_SetSpellResist(obj, true);
	ObjShot_SetItemChange(obj, false);
}
function SetShotEnabled(obj)
{
	ObjShot_SetIntersectionEnable(obj, true);
	ObjShot_SetSpellResist(obj, false);
	ObjShot_SetItemChange(obj, true);
}
