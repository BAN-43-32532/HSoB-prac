// --------------------  アイテムスクリプト
#include "./lib/lib_Common.dnh"
#include "./lib/lib_Util.dnh"
#include "./../lib/lib_Item.dnh"
#include "./../lib/lib_Sound.dnh"

let objPlayer;

//  ユーザーアイテム
let datItemData = GetCurrentScriptDirectory() ~ "./lib/Dat_ItemData.dnh";
let imgItem =  GetCurrentScriptDirectory ~ "./../img/system/item.png";


// 小アイテム取得時のカウント（10個取得毎に最大得点+10）
let MiniItemCount	= 0;

// ボム、残機の最大値
let plLifeMax = 8;
let plSpellMax = 8;

// アイテム落下速度
let ITEM_SPEED = 2;

// 弾消し用カウント
let ERASE_COUNT = 0;

// 敵撃破数カウント
let ENEMY_KILLED = 0;
let KILLCOUNT_DEC = 1;
let KILLCOUNT_MAX = 120;

//  弾消しエフェクトのカラー
let EFFECT_COLOR = [
	[255, 255, 255],	// 白	(IDが16n)
	[255,  64,  64],	// 赤
	[ 64, 255,  64],	// 緑
	[ 64,  64, 255],	// 青
	[255, 255,  64],	// 黄
	[255,  46, 255],	// 紫
	[ 64, 255, 255],	// 水
	[255, 140,  64]		// 橙
];

@Initialize{

	//  スクリプトID記録
	SetSystemScriptID("ScriptItem");
	
	//　弾削除時得点アイテム自動作成無効化
	SetDefaultBonusItemEnable( false );
	
	//　アイテム描画レイヤー
	SetItemRenderPriorityI(40);
	
	//　ユーザ定義アイテムデータ読み込み
	LoadItemData( datItemData );
	
	//　初期設定
	SetAreaCommonData(CAREA_SYSTEM, "PLAYER_ITEM_MULTI", 1);	// スペカゲージ倍率
	SetAreaCommonData(CAREA_SYSTEM, "PLAYER_ZITEM_MULTI", 1);	// Zボムゲージ倍率
	
	// アイテム落下速度チェック
	TDropItemSpeed();
}

@MainLoop{
	ERASE_COUNT = max(0, ERASE_COUNT-3);
	yield;
}

@Event
{
	alternative( GetEventType() )
	//　アイテムゲット時のイベント
	case( EV_GET_ITEM )
	{
		let ItemType	= GetEventArgument(0);	//　アイテム種別取得
		let ObjItem	= GetEventArgument(1);	//　アイテムオブジェクト取得
		GetItemEvent( ObjItem, ItemType );
	}
	//　ユーザーイベント用アイテム取得
	case( ev_GetItem )
	{
		let ItemType	= GetEventArgument(0);	//　アイテム種別取得
		GetItemEvent( -1, ItemType );
	}
	//　アイテム生成イベント
	case( ev_CallItem )
	{
		let tmp	= GetEventArgument(0);	//　[x, y, item_type]
		alternative( tmp[2] )
		case( MY_ITEM_POINT )
		{
			CreateNormalItem( tmp[2], [tmp[0], tmp[1]], 0, 0, false );
		}
		case( MY_ITEM_POINT_S )
		{
			CreateNormalItem( tmp[2], [tmp[0], tmp[1]], 1, rand(0,360), true );
		}
		case( MY_ITEM_SPELL_S, MY_ITEM_LIFE_S, MY_ITEM_SPELL, MY_ITEM_LIFE )
		{
			CreateAutoCaptureItem( tmp[2], [tmp[0], tmp[1]], 1.5, 0 );
			CallSound(sndItemSpecial);
		}
	}
	case( ev_CallItemEx )
	{
		let tmp	= GetEventArgument(0);	//　[x, y, speed, angle, item_type, item_count]
		alternative( tmp[4] )
		case( MY_ITEM_TIME )
			{ CreateTimeItem(tmp[0], tmp[1], tmp[2], tmp[3], tmp[5]); }
		case( MY_ITEM_TIME_COLOR )
			{ CreateTimeItemColor(tmp[0], tmp[1], tmp[2], tmp[3], tmp[5]); }
		case( MY_ITEM_TIME_S )
			{ CreateTimeItemSmall(tmp[0], tmp[1]); }
	}
	//  弾削除時アイテム生成イベント
	case(EV_DELETE_SHOT_TO_ITEM)
	{
		let objShot = GetEventArgument(0);
		let objPos = GetEventArgument(1);	//弾オブジェクト座標取得([0]=x, [1]=y)
		//多重呼び出し対策
		if (!Obj_IsDeleted(objShot)) { ShotToItem(objPos[0], objPos[1], objShot); }
	}
	//　弾消しエフェクト（任意）のイベント
	case( ev_BulletEffect )
	{
		let tmp	= GetEventArgument(0);	//　弾オブジェクトID
		//弾消しエフェクト
		ShotEraseEffect(ObjMove_GetX(tmp), ObjMove_GetY(tmp), ObjShot_GetImageID(tmp));
		Obj_Delete(tmp);
	}
	//　敵撃破カウントアップ
	case (ev_EnemyKilled)
	{
		let tmp	= GetEventArgument(0);
		ENEMY_KILLED = min(KILLCOUNT_MAX, ENEMY_KILLED+tmp);
	}
}


//----------------------------------------------------
//　アイテムゲット時のイベント
//----------------------------------------------------
function GetItemEvent(objItem, itemType)
{
	alternative(itemType)
	case( MY_ITEM_LIFE )
	{
		//　残機取得時
		// 最大値の場合、スコアに換算
		/*
		if (GetPlayerLife() >= plLifeMax)
		{
			AddScore_byLife(3);
		} else {
			SetPlayerLife(GetPlayerLife()+1);
		}
		*/
		// 限界なっしんぐ
		SetPlayerLife(GetPlayerLife()+1);
	}
	case( MY_ITEM_SPELL )
	{
		//　ボム取得時
		// 最大値の場合、スコアに換算
		if (GetPlayerSpell() >= plSpellMax)
		{
		//	AddScore_byLife(3);
		} else {
			SetPlayerSpell(GetPlayerSpell()+1);
		}
	}
	case( MY_ITEM_POINT )
	{
		// 得点加算
		let tmp_score = GetMaxScore();
		if (!Obj_GetValueD(objItem, "AUTO", false)) { tmp_score *= (1 - max(0, GetPlayerY-GetPlayerAutoItemCollectLine())/MaxY); }
		tmp_score = round(tmp_score/10)*10;
		AddScore(tmp_score);
		// 効果音
		CallSound(sndScore);
	}
	case( MY_ITEM_POINT_S )
	{
		//  弾消しアイテム取得時
		let tmp_score = trunc(GetMaxScore()/1000)*10;
		AddScore(tmp_score);
		// 最大得点アップ
		MiniItemCount += 1;
		if (MiniItemCount >= 5)
		{
			MiniItemCount -= 5;
			AddMaxScore(10);
		}
		// 効果音
		CallSound(sndScore2);
	}
	case( MY_ITEM_TIME )
	{
		// 時間結晶
		let count = Obj_GetValueD(objItem, "COUNT", 0);
		let mul = GetAreaCommonData(CAREA_SYSTEM, "PLAYER_ITEM_MULTI", 1);
		let zmul = GetAreaCommonData(CAREA_SYSTEM, "PLAYER_ZITEM_MULTI", 1);
		// 得点up、ボムゲージup、Zボムゲージ小up
		let tmp_score = round(GetMaxScore()*count/10)*10;
		AddMaxScore(5*count);
		AddScore(tmp_score);
		AddTimeItem(count*mul);
		AddZSpellItem(count*zmul);
		// 効果音
		CallSound(sndScore);
	}
	case( MY_ITEM_TIME_COLOR )
	{
		// 時間結晶（色付き）
		let count = Obj_GetValueD(objItem, "COUNT", 0);
		let lv = Obj_GetValueD(objItem, "LV", 0);
		let mul = GetAreaCommonData(CAREA_SYSTEM, "PLAYER_ITEM_MULTI", 1);
		let zmul = GetAreaCommonData(CAREA_SYSTEM, "PLAYER_ZITEM_MULTI", 1);
		// 最大得点up、得点大up、Zボムゲージ大up
		AddMaxScore(5*count*lv);
		let tmp_score = round(GetMaxScore()*count/10*lv)*10;
		AddScore(tmp_score);
//		AddTimeItem(count*mul);
		if (!Obj_GetValueD(objItem, "Z", 0)) { AddZSpellItem(count*zmul*5); }
		// 効果音
		CallSound(sndScore);
	}
	case( MY_ITEM_TIME_S )
	{
		let count = Obj_GetValueD(objItem, "COUNT", -1);
		// 得点小
		let tmp_score = round(GetMaxScore()*count/1000)*10;
		AddScore(tmp_score);
		// 効果音
		CallSound(sndScore2);
	}
}

//----------------------------------------------------
//　アイテム作成
//----------------------------------------------------
task CreateAutoCaptureItem( ID, pos, scale, score ){
	let obj	= My_CreateItem( ID, pos[0], pos[1], 0 );
	ObjMove_AddPatternA2(obj, 0, -4, 90, 0.1, 0, 0);
	Obj_SetRenderPriorityI(obj, 70);	// 前面に表示
	
	let t = 0;
	while( !Obj_IsDeleted(obj) )
	{
		if( t < 45 )
		{
			let tmp = (t+1)/45;
			let tmp_s = min(1, tmp*2)*scale;
		//	ObjRender_SetAngleXYZ(obj, 0, 0, tmp*720 );
			ObjRender_SetScaleXYZ(obj, tmp_s, tmp_s, 1 );
		}
		if (t > 60 && GetPlayerState() == STATE_NORMAL)
		{
			My_ItemMotionToPlayer(obj, 15);
			if (Obj_IsDeleted(obj)) { break; }
			// 途中で被弾した場合
			ObjMove_SetAngle(obj, 90);
			ObjMove_SetSpeed(obj, 0.5);
			ObjMove_SetMaxSpeed(obj, 0.5);
		}
		t++;
		yield;
	}
}

//----------------------------------------------------
//  ユーザーアイテム（通常アイテム）
//----------------------------------------------------
task CreateNormalItem( itemID, pos, speed, angle, auto_collect )
{
	let obj	= My_CreateItem( itemID, pos[0], pos[1], 0 );
	let vx = cos(angle) * speed;
	let vy = sin(angle) * speed;
	// モーション
	ObjMove_AddPatternA2(obj, 0, -4, 90, 0.1, 0, 0);
	ObjMove_AddPatternA2(obj, 30, NO_CHANGE, NO_CHANGE, 0.025, 0, 2);

	let t = 0;
	while( !Obj_IsDeleted(obj) )
	{
		if (t < 45)
		{
			let tmp = (45-t)/45;
			ObjMove_SetX(obj, max(MinX, min(MaxX, ObjMove_GetX(obj)+vx*tmp)));
			ObjMove_SetY(obj, ObjMove_GetY(obj)+vy*tmp);
		}
		else if (GetPlayerState() == STATE_NORMAL)
		{
			if( flgItemAutoCollect() || auto_collect || Obj_GetValueD(obj, "AUTO", false) )
			{
				Obj_SetValue(obj, "AUTO", true);	// オートコレクトフラグON（最大得点化）
				My_ItemMotionToPlayer(obj, 15);
				if (Obj_IsDeleted(obj)) { break; }
				// 途中で被弾した場合
				Obj_SetValue(obj, "AUTO", false);
				ObjMove_SetAngle(obj, 90);
				ObjMove_SetSpeed(obj, 0);
				ObjMove_SetAcceleration(obj, 0.025);
				ObjMove_SetMaxSpeed(obj, 2);
			}
			else if( GetObjectDistance(obj, GetPlayerObjectID()) <= GetPlayerItemCollectRange() )
			{
				My_ItemMotionToPlayer(obj, 15);
				if (Obj_IsDeleted(obj)) { break; }
				// 途中で被弾した場合
				ObjMove_SetAngle(obj, 90);
				ObjMove_SetSpeed(obj, 0);
				ObjMove_SetAcceleration(obj, 0.025);
				ObjMove_SetMaxSpeed(obj, 2);
			}
		}
		if (t < 30)
		{
			let tmp = (t+1)/30;
			ObjRender_SetAngleZ(obj, tmp*1080);
			ObjRender_SetAlpha(obj, tmp*255 );
		}
		t++;
		yield;
	}
}

//----------------------------------------------------
//  ユーザーアイテム（時間結晶）
//----------------------------------------------------

task CreateTimeItem( x, y, speed, angle, size )
{
	let scale = [0.5, 0.65, 0.8, 1.33, 1.75, 0.4][size];
	let item_count = [1, 2, 3, 5, 10, 0.5][size];
	
	_CreateTimeItem( MY_ITEM_TIME, x, y, speed, angle, false, scale, item_count );
}
task CreateTimeItemColor( x, y, speed, angle, size )
{
	let scale = [0.5, 0.65, 0.8, 1.33, 1.75, 0.4][size];
	let item_count = [1, 2, 3, 5, 10, 0.25][size];
	let lv = min(1, GetAreaCommonData(CAREA_SYSTEM, "PLAYER_SPELL_LV", 1));
	
	_CreateTimeItemColor( MY_ITEM_TIME_COLOR, x, y, speed, angle, true, scale, item_count, lv );
//	_CreateTimeItemColor( MY_ITEM_TIME_COLOR, x, y, speed, angle, false, scale, item_count, lv, color );
}
task CreateTimeItemSmall( x, y )
{
	_CreateTimeItemSmall( MY_ITEM_TIME_S, x, y, true, 0.5 );
}

task _CreateTimeItem( itemID, x, y, speed, angle, auto_collect, scale, item_count )
{
	let obj	= My_CreateItem( itemID, x, y, 0 );
	Obj_SetValue(obj, "COUNT", item_count);
	ObjRender_SetScaleXYZ(obj, scale, scale, 1);

	let vx = cos(angle) * speed;
	let vy = sin(angle) * speed;
	// モーション
	ObjMove_AddPatternA2(obj, 0, -4, 90, 0.1, 0, 0);
	ObjMove_AddPatternA2(obj, 30, NO_CHANGE, NO_CHANGE, 0.05, 0, ITEM_SPEED);
	
	CheckTimeSpell();

	let t = 0;
	while( !Obj_IsDeleted(obj) )
	{
		if (t <= 30)
		{
			let tmp = (30-t)/30;
			ObjMove_SetX(obj, max(MinX, min(MaxX, ObjMove_GetX(obj)+vx*tmp)));
			ObjMove_SetY(obj, ObjMove_GetY(obj)+vy*tmp);
			
			if (GetPlayerState() == STATE_NORMAL && GetObjectDistance(obj, GetPlayerObjectID()) <= GetPlayerItemCollectRange())
				{ Obj_SetValue(obj, "AUTO", true); }
		}
		else if (GetPlayerState() == STATE_NORMAL)
		{
			if( flgItemAutoCollect() || auto_collect || Obj_GetValueD(obj, "AUTO", false) )
			{
				Obj_SetValue(obj, "AUTO", true);	// オートコレクトフラグON（最大得点化）
				My_ItemMotionToPlayer(obj, 15);
				if (Obj_IsDeleted(obj)) { break; }
				// 途中で被弾した場合
				Obj_SetValue(obj, "AUTO", false);
				ObjMove_SetAngle(obj, 90);
				ObjMove_SetSpeed(obj, 0);
				ObjMove_SetAcceleration(obj, 0.025);
			//	ObjMove_SetMaxSpeed(obj, 1);
			}
			else if( GetObjectDistance(obj, GetPlayerObjectID()) <= GetPlayerItemCollectRange() )
			{
				My_ItemMotionToPlayer(obj, 15);
				if (Obj_IsDeleted(obj)) { break; }
				// 途中で被弾した場合
				ObjMove_SetAngle(obj, 90);
				ObjMove_SetSpeed(obj, 0);
				ObjMove_SetAcceleration(obj, 0.025);
			//	ObjMove_SetMaxSpeed(obj, 1);
			}
			ObjMove_SetMaxSpeed(obj, ITEM_SPEED);
		}
		t++;
		yield;
	}
	
	// 霊撃範囲内にアイテムがあるかどうかのチェック
	task CheckTimeSpell()
	{
		if (GetItemLegacyMode()) { return; }
		while(!Obj_IsDeleted(obj))
		{
			if (GetAreaCommonData(CAREA_SYSTEM, "PLAYER_SPELL_SIZE", 0) > 0)
			{
				let pos = GetAreaCommonData(CAREA_SYSTEM, "PLAYER_SPELL_POS", [0,0]);
				if ((pos[0]-ObjMove_GetX(obj))^2+(pos[1]-ObjMove_GetY(obj))^2 <= GetAreaCommonData(CAREA_SYSTEM, "PLAYER_SPELL_SIZE", 0)^2)
				{
					let lv = GetAreaCommonData(CAREA_SYSTEM, "PLAYER_SPELL_LV", 1);
					_CreateTimeItemColor( MY_ITEM_TIME_COLOR, ObjMove_GetX(obj), ObjMove_GetY(obj), speed, angle, true, scale, item_count, lv );
					Obj_Delete(obj);
					break;
				}
			}
			yield;
		}
	}
}
task _CreateTimeItemColor( itemID, x, y, speed, angle, auto_collect, scale, item_count, item_level )
{
	let obj	= My_CreateItem( itemID, x, y, 0 );
	Obj_SetValue(obj, "COUNT", item_count);
	Obj_SetValue(obj, "LV", item_level);
	// Zボム中はゲージ増加なし
	if (GetAreaCommonData(CAREA_SYSTEM, "ZBOMB_ACTIVE", false)) { Obj_SetValue(obj, "Z", 1); }
	
	scale *= item_level^0.33;
	ObjRender_SetScaleXYZ(obj, scale, scale, 1);
	
	DrawTimeItem(obj, scale);

	let vx = cos(angle) * speed;
	let vy = sin(angle) * speed;
	// モーション
	ObjMove_AddPatternA2(obj, 0, -4, 90, 0.1, 0, 0);
	ObjMove_AddPatternA2(obj, 30, NO_CHANGE, NO_CHANGE, 0.025, 0, ITEM_SPEED);

	let t = 0;
	while( !Obj_IsDeleted(obj) )
	{
		if (t <= 30)
		{
			let tmp = (30-t)/30;
			ObjMove_SetX(obj, max(MinX, min(MaxX, ObjMove_GetX(obj)+vx*tmp)));
			ObjMove_SetY(obj, ObjMove_GetY(obj)+vy*tmp);
		}
		else if (GetPlayerState() == STATE_NORMAL)
		{
			if( flgItemAutoCollect() || auto_collect || Obj_GetValueD(obj, "AUTO", false) )
			{
				Obj_SetValue(obj, "AUTO", true);	// オートコレクトフラグON（最大得点化）
				My_ItemMotionToPlayer(obj, 15);
				if (Obj_IsDeleted(obj)) { break; }
				// 途中で被弾した場合
				Obj_SetValue(obj, "AUTO", false);
				ObjMove_SetAngle(obj, 90);
				ObjMove_SetSpeed(obj, 0);
				ObjMove_SetAcceleration(obj, 0.025);
				ObjMove_SetMaxSpeed(obj, 1);
			}
			else if( GetObjectDistance(obj, GetPlayerObjectID()) <= GetPlayerItemCollectRange() )
			{
				My_ItemMotionToPlayer(obj, 15);
				if (Obj_IsDeleted(obj)) { break; }
				// 途中で被弾した場合
				ObjMove_SetAngle(obj, 90);
				ObjMove_SetSpeed(obj, 0);
				ObjMove_SetAcceleration(obj, 0.025);
				ObjMove_SetMaxSpeed(obj, 1);
			}
			ObjMove_SetMaxSpeed(obj, ITEM_SPEED);
		}
		else if (t <= 30)
		{
			let tmp = (30-t)/30;
			ObjMove_SetX(obj, ObjMove_GetX(obj)+vx*tmp);
			ObjMove_SetY(obj, ObjMove_GetY(obj)+vy*tmp);
		}
		t++;
		yield;
	}
}
task _CreateTimeItemSmall( itemID, x, y, auto_collect, scale )
{
	let obj	= My_CreateItem( MY_ITEM_TIME_S, x, y, 0 );
	ObjRender_SetScaleXYZ(obj, scale, scale, 1);
	Obj_SetValue(obj, "COUNT", 1);

	// モーション
	ObjMove_SetPosition(obj, x, y);
	ObjMove_AddPatternA2(obj, 0, -4, 90, 0.1, 0, 0);
	ObjMove_AddPatternA2(obj, 40, NO_CHANGE, NO_CHANGE, 0.025, 0, 2);
	wait(30);

	let t = 0;
	while( !Obj_IsDeleted(obj) )
	{
		if (GetPlayerState() == STATE_NORMAL)
		{
			if( flgItemAutoCollect() || auto_collect || Obj_GetValueD(obj, "AUTO", false) )
			{
				Obj_SetValue(obj, "AUTO", true);	// オートコレクトフラグON（最大得点化）
				My_ItemMotionToPlayer(obj, 15);
				if (Obj_IsDeleted(obj)) { break; }
				// 途中で被弾した場合
				Obj_SetValue(obj, "AUTO", false);
				ObjMove_SetAngle(obj, 90);
				ObjMove_SetSpeed(obj, 0);
				ObjMove_SetAcceleration(obj, 0.025);
				ObjMove_SetMaxSpeed(obj, 2);
			}
			else if( GetObjectDistance(obj, GetPlayerObjectID()) <= GetPlayerItemCollectRange() )
			{
				My_ItemMotionToPlayer(obj, 15);
				if (Obj_IsDeleted(obj)) { break; }
				// 途中で被弾した場合
				ObjMove_SetAngle(obj, 90);
				ObjMove_SetSpeed(obj, 0);
				ObjMove_SetAcceleration(obj, 0.025);
				ObjMove_SetMaxSpeed(obj, 2);
			}
		}
		t++;
		yield;
	}
}

// アイテム描画用
task DrawTimeItem(objItem, scale)
{
	let color = GetItemColor();
	if (IsDrawEffect() > 2)
	{
		Obj_SetVisible(objItem, false);
		
		//初期設定
		let obj = [ObjPrim_Create(OBJ_SPRITE_2D), ObjPrim_Create(OBJ_SPRITE_2D)];
		
		ascent(i in 0 .. 2)
		{
			Obj_SetRenderPriorityI(obj[i], GetItemRenderPriorityI-i);
			ObjPrim_SetTexture(obj[i], imgItem);
		}
		ObjRender_SetBlendType(obj[0], BLEND_ADD_ARGB);
		ObjRender_SetBlendType(obj[1], BLEND_SUBTRACT);
		ObjRender_SetColor(obj[0], color[0], color[1], color[2]);
		ObjRender_SetColor(obj[1], color[3], color[4], color[5]);
		ObjSprite2D_SetDestRect(obj[0], -scale*32, -scale*32, scale*32, scale*32);
		ObjSprite2D_SetDestRect(obj[1], -scale*56, -scale*56, scale*56, scale*56);
		ObjRender_SetAlpha(obj[0], 240);
		ObjRender_SetAlpha(obj[1], 80);
		
		let t = 0;
		while(!Obj_IsDeleted(objItem))
		{
			if (t < 30)
			{
				let tmp = (t+1)/30;
				let tmp_s = 3 - tmp*2;
				ObjRender_SetScaleXYZ(obj[0], tmp_s, tmp_s, tmp_s);
				ObjRender_SetScaleXYZ(obj[1], tmp_s, tmp_s, tmp_s);
				ObjRender_SetAlpha(obj[0], 240*tmp+1024*tmp*(1-tmp));
				ObjRender_SetAlpha(obj[1], 80*tmp);
			}
			if (t%5 == 0)
			{
				let anime = trunc(t/5)%5;
				ObjSprite2D_SetSourceRect(obj[0], 64*anime, 128, 64*(anime+1), 192);
				ObjSprite2D_SetSourceRect(obj[1], 64*anime, 128, 64*(anime+1), 192);
			}
			ObjRender_SetPosition(obj[0], ObjMove_GetX(objItem), ObjMove_GetY(objItem), 0);
			ObjRender_SetPosition(obj[1], ObjMove_GetX(objItem), ObjMove_GetY(objItem), 0);
			t++;
			yield;
		}
		ascent(i in 0 .. 2) { Obj_Delete(obj[i]); }
	}
	else
	{
		// 軽量版
		Obj_SetVisible(objItem, false);
		
		//初期設定
		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		
		Obj_SetRenderPriorityI(obj, GetItemRenderPriorityI);
		ObjPrim_SetTexture(obj, imgItem);
		ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);
		ObjRender_SetColor(obj, color[0], color[1], color[2]);
		ObjSprite2D_SetDestRect(obj, -scale*32, -scale*32, scale*32, scale*32);
		ObjRender_SetAlpha(obj, 255);
		
		let t = 0;
		while(!Obj_IsDeleted(objItem))
		{
			if (t < 30)
			{
				let tmp = (t+1)/30;
				let tmp_s = 3 - tmp*2;
				ObjRender_SetScaleXYZ(obj, tmp_s, tmp_s, tmp_s);
				ObjRender_SetAlpha(obj, 240*tmp+1024*tmp*(1-tmp));
			}
			if (t%5 == 0)
			{
				let anime = trunc(t/5)%5;
				ObjSprite2D_SetSourceRect(obj, 64*anime, 128, 64*(anime+1), 192);
			}
			ObjRender_SetPosition(obj, ObjMove_GetX(objItem), ObjMove_GetY(objItem), 0);
			t++;
			yield;
		}
		Obj_Delete(obj);
	}
}

//アイテムひな形
function My_CreateItem(iType, iX, iY, iScore)
{
	let objItem = CreateItemU1(iType, iX, iY, iScore);
	ObjItem_SetRenderScoreEnable(objItem, false);
	ObjItem_SetAutoCollectEnable(objItem, false);
	return(objItem);
}

function My_ItemMotionToPlayer(objItem, speed)
{
	ObjMove_SetSpeed(objItem, 0);
	let t = 0;
	while(!Obj_IsDeleted(objItem) && GetPlayerState() == STATE_NORMAL)
	{
		let tmp_s = speed * min(t+1,15)/15;
		let r = ((GetPlayerX-ObjMove_GetX(objItem))^2 + (GetPlayerY-ObjMove_GetY(objItem))^2)^0.5;
		ObjMove_SetPosition(objItem, ObjMove_GetX(objItem)+(GetPlayerX-ObjMove_GetX(objItem))/r*tmp_s,
			ObjMove_GetY(objItem)+(GetPlayerY-ObjMove_GetY(objItem))/r*tmp_s);
		t++;
		yield;
	}
}

//----------------------------------------------------
//エフェクト
//----------------------------------------------------
//弾消し処理
function ShotToItem(x, y, objShot)
{
	//弾消しアイテム
	CreateNormalItem( MY_ITEM_POINT_S, [x, y], 1, rand(0,360), true );
	//弾消しエフェクト
	ShotEraseEffect(x, y, ObjShot_GetImageID(objShot));
}


//----------------------------------------------------
//  弾消しエフェクト
//----------------------------------------------------
task ShotEraseEffect(itemX, itemY, graphic)
{
	if (IsDrawEffect() < 3) { return; }

	// カラー
	let effect_color = EFFECT_COLOR[ graphic%8 ];
	// エフェクトサイズは被弾半径に比例
	let col = GetShotDataInfoA1(graphic, TARGET_ENEMY, INFO_COLLISION);
	let eff_size = 16 + col * 4;
	
	if (ERASE_COUNT < 60)
	{
		if (col > 8)
		{
			ERASE_COUNT+=3;
			loop(3)
			{
				_ShotEraseEffect(itemX+randEffect(-16,16), itemY+randEffect(-16,16), effect_color, eff_size/2, randEffect(-2,2), randEffect(-2,2));
				wait(6);
			}
		} else {
			ERASE_COUNT++;
			_ShotEraseEffect(itemX, itemY, effect_color, eff_size, randEffect(-2,2), randEffect(-2,2));
		}
	}
}

task _ShotEraseEffect(itemX, itemY, effect_color, eff_size, vx, vy)
{
	if (IsDrawEffect() < 3) { return; }
	
	//初期設定
	let obj = [ObjPrim_Create(OBJ_SPRITE_2D), ObjPrim_Create(OBJ_SPRITE_2D)];
	
	let a = randEffect(0,360);
	ascent(i in 0 .. 2)
	{
		Obj_SetRenderPriorityI(obj[i], GetShotRenderPriorityI() + i+1);
		ObjPrim_SetTexture(obj[i], imgSystemShotBreak);
		ObjSprite2D_SetDestRect(obj[i], -eff_size, -eff_size, eff_size, eff_size);
		ObjRender_SetPosition(obj[i], itemX, itemY, 0);
		ObjRender_SetAngleZ(obj[i], a);
	}
	ObjRender_SetColor(obj[0], 255-effect_color[0], 255-effect_color[1], 255-effect_color[2]);
	ObjRender_SetColor(obj[1], effect_color[0], effect_color[1], effect_color[2]);
	ObjRender_SetBlendType(obj[0], BLEND_SUBTRACT);
	ObjRender_SetBlendType(obj[1], BLEND_ADD_ARGB);
	ObjRender_SetAlpha(obj[0], 64);
	ObjRender_SetAlpha(obj[1], 128);
	ascent(i in 0 .. 32)
	{
		if (i%4 == 0)
		{
			let x = trunc(i/4)*128;
			ObjSprite2D_SetSourceRect(obj[0], 0+x, 0, 128+x, 128);
			ObjSprite2D_SetSourceRect(obj[1], 0+x, 0, 128+x, 128);
		}
		ObjRender_SetPosition(obj[0], itemX, itemY, 0);
		ObjRender_SetPosition(obj[1], itemX, itemY, 0);
		let tmp = 1-i/32;
		itemX += tmp*vx; itemY += tmp*vy;
		yield;
	}
	Obj_Delete(obj[0]);
	Obj_Delete(obj[1]);
}

//----------------------------------------------------
//  アイテム落下速度チェック
//----------------------------------------------------
task TDropItemSpeed()
{
	ITEM_SPEED = 2;
	
	loop
	{
		if (!GetItemLegacyMode())
		{
			if (ENEMY_KILLED <= 0) { ITEM_SPEED = min(ITEM_SPEED+0.05,2); }
			else { ITEM_SPEED = max(ITEM_SPEED-0.1,0.5); }
			ENEMY_KILLED = max(0, ENEMY_KILLED-KILLCOUNT_DEC);
		}
		yield;
	}
}

//----------------------------------------------------
//  アイテムの色をチェック
//----------------------------------------------------
function GetItemColor()
{
	alternative(GetPlayerWeapon)
	case(WEAPON_RED)	{ return([255, 128, 128,     0, 255, 255]); }
	case(WEAPON_PURPLE)	{ return([255, 128, 255,     0, 255,   0]); }
	case(WEAPON_BLUE)	{ return([128, 128, 255,   255, 255,   0]); }
	case(WEAPON_SKY)	{ return([128, 255, 255,   255,   0,   0]); }
	case(WEAPON_GREEN)	{ return([128, 255, 128,   255,   0, 255]); }
	case(WEAPON_YELLOW)	{ return([255, 255, 128,     0,   0, 255]); }
	case(WEAPON_ORANGE)	{ return([255, 192, 128,     0, 128, 255]); }
	case(WEAPON_RAINBOW)	{ return([255, 255, 255,   255, 255, 255]); }
	case(WEAPON_WHITE, WEAPON_BLACK)	{ return([224, 224, 224,   192, 192, 192]); }
	others	{ return([255, 255, 255,   255, 255, 255]); }
}
