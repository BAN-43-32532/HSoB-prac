#include "./lib/lib_SystemScene.dnh"
#include "../lib/lib_HighScore.dnh"



//　コンティニュー用

@Initialize{
	SetAutoDeleteObject(true);
	TMain();
}

@MainLoop{
	yield;
}

@Finalize{
	//ClosePackage();
}



//----------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------
task TMain
{
	if (GetContinueRest() <= 0)
	{
		SetScriptResult( false );
		CloseScript( GetOwnScriptID() );
	}
	else
	{
		TBackground();
		TMenu();
	}
}

task TMenu
{
	// BGM一時停止
	StopMusic();
	
	//メニュー配置
	let mx			= 172+48;
	let my			= 224+96;
	let myRESULT_HELP = 107777;
	
	let texts		= ["はい", "いいえ"];
	let listResult		= [ true, false ];
	let listReverify	= [ false, true ];
	let continue		= GetContinueCount();
	
	let spell_clear		= (GetPlayMode() == GAME_SPELL && GetAreaCommonData(CAREA_SYSTEM, "PlayerHitCount", 0) <= 0);
	let stage_clear		= GetAreaCommonData(CAREA_SYSTEM, "ClearStage", false);
	let clear		= (spell_clear || stage_clear);

	let countMenu	= length(texts);

	//　メニュータイトル作成
	let objParent = ObjText_Create();	//適当なオブジェクトを生成（データのやり取り用）
	Obj_SetValue(objParent, "VALUE", 0);

	//　項目作成
	TMenuItem(objParent, countMenu+1, mx, my-80, "コンティニュー");
	TMenuItem(objParent, countMenu+1, mx+160, my-80+48, "あと");
	TMenuItem(objParent, countMenu+1, mx+110, my-80+48, "∞");
	
	ascent( var iText in 0 .. countMenu )
	{
		TMenuItem(objParent, iText, mx+48, my, texts[iText] );
		my += 32;
		mx += 0;
	//	if (iText == 0) { mx += 32; }
	}
	
	//　8フレーム待機
	loop( 8 ){ yield; }
	
	// Tips
	SetTips(objParent, 0, 410, 0, TIPS_GAMEOVER);

	//キー状態がリセットされるまで待機
	WaitForResetKeyEx([VK_OK, VK_CANCEL, VK_PAUSE]);
	
	//メニュー選択処理
	//キー状態がリセットされるまで待機
	loop(5) { yield; }
	
	loop
	{
		//キー入力待ち
		let downKey = CheckKey_Menu(8, [VK_UP, VK_DOWN, VK_CANCEL, VK_OK]);

		alternative (downKey)
		case (VK_UP)
		{
			CallSoundPackage(sndTtSelect);
			Menu_AddValue(objParent, "VALUE", -1, countMenu);
		}
		case (VK_DOWN)
		{
			CallSoundPackage(sndTtSelect);
			Menu_AddValue(objParent, "VALUE", 1, countMenu);
		}
		case (VK_CANCEL)
		{
			Obj_SetValue(objParent, "VALUE", 0);
			CallSoundPackage(sndTtCancel);
		}
		case (VK_OK)
		{
			let selectIndex = Obj_GetValueD(objParent, "VALUE", 0);
			Obj_SetValue(objParent, "ACTIVE", false);
			
			let menu_flg = true;
			if (listReverify[selectIndex])
			{
				CallSoundPackage(sndTtDecide);
				menu_flg = TReverify(380, 270);
			}

			if (menu_flg)
			{
				if (listResult[selectIndex])
				{
					//　コンティニュー
					SetScriptResult( listResult[selectIndex] );
					
					// コンティニュー回数加算
					AddAreaCommonData(CAREA_SYSTEM, "CONTINUE", 1);
					
					// BGM再開
					RestartMusic();
					break;
				}
				else
				{
					SetScriptResult( listResult[selectIndex] );
					break;
				}
			}
			Obj_SetValue(objParent, "ACTIVE", true);
		}
		loop(3) { yield; }	//適当に固定ディレイ
	}
	Obj_Delete(objParent);

	CloseScript( GetOwnScriptID() );
}
