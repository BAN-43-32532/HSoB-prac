#include "../../lib/lib_HighScore.dnh"

let layFront = 90;

//----------------------------------------------------
//枠外の背景表示
//----------------------------------------------------
task InitFrame()
{
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLELIST);
	ObjPrim_SetVertexCount(obj, 6*4);
	ObjPrim_SetTexture(obj, imgSystemStgFrame);
	Obj_SetRenderPriorityI(obj, layFront);
	SetAreaCommonData(CAREA_SYSTEM, "STG_FRAME", obj);
	
	// 座標指定
	AddImg_Triangle01(obj, 0,
		0, 0, 32, 480,	// 切り取り範囲
		0, 0, 32, 480	// 貼り付け範囲
	);
	AddImg_Triangle01(obj, 6,
		32, 0, 256, 480,	// 切り取り範囲
		32+384, 0, 256+384, 480	// 貼り付け範囲
	);
	AddImg_Triangle01(obj, 12,
		0, 480, 384, 496,	// 切り取り範囲
		0+32, 480-480, 384+32, 496-480	// 貼り付け範囲
	);
	AddImg_Triangle01(obj, 18,
		0, 496, 384, 512,	// 切り取り範囲
		0+32, 496-32, 384+32, 512-32	// 貼り付け範囲
	);
	
	while( !Obj_IsDeleted(obj) ){
		yield;
	}
	Obj_Delete(obj);
}

//----------------------------------------------------
// フェードイン
//----------------------------------------------------
task FadeinDisplay(objs, delay)
{
	if (delay < 0) { return; }
	
	ascent(i in 0 .. length(objs))
	{
		ObjRender_SetAlpha(objs[i], 0);
	}
	waitEx(delay);
	ascent(i in 0 .. 90)
	{
		let alpha = (i+1)/90*255;
		ascent(i in 0 .. length(objs))
		{
			ObjRender_SetAlpha(objs[i], alpha);
		}
		yield;
	}
}

//----------------------------------------------------
//ラインを描画
//----------------------------------------------------
task FrontLine(x,y,delay,rgb_h,mxs)
{
	let fronl	= ObjPrim_Create(OBJ_SPRITE_2D);
	let move1	= 0;
	let moveA	= 0;
	let alpha	= 0;
	
	ObjRender_SetPosition(fronl, x, y, 0 );
	ObjPrim_SetTexture(fronl, imgSystemBase01 );
	Obj_SetRenderPriorityI(fronl, layFront );
	ObjRender_SetBlendType(fronl, BLEND_ADD_ARGB );
	ObjRender_SetAngleXYZ(fronl, 0, 0, move1 );
	ObjRender_SetScaleXYZ(fronl, move1, 1.2, 0 );
	ObjPrim_SetVertexCount(fronl, 6 );
	ObjPrim_SetVertexPosition(fronl, 0, -18, -1, 0 );
	ObjPrim_SetVertexPosition(fronl, 1, -18, 1, 0 );
	ObjPrim_SetVertexPosition(fronl, 2, 0, -1, 0 );
	ObjPrim_SetVertexPosition(fronl, 3, 0, 1, 0 );
	ObjPrim_SetVertexPosition(fronl, 4, 18, -1, 0 );
	ObjPrim_SetVertexPosition(fronl, 5, 18, 1, 0 );
	ObjPrim_SetVertexUVT(fronl, 0, 128, 64 );
	ObjPrim_SetVertexUVT(fronl, 1, 128, 65 );
	ObjPrim_SetVertexUVT(fronl, 2, 190, 64 );
	ObjPrim_SetVertexUVT(fronl, 3, 190, 65 );
	ObjPrim_SetVertexUVT(fronl, 4, 256, 64 );
	ObjPrim_SetVertexUVT(fronl, 5, 256, 65 );
	ObjPrim_SetVertexColor(fronl, 0, 255, 255, 255 );
	ObjPrim_SetVertexColor(fronl, 1, 255, 255, 255 );
	ObjPrim_SetVertexColor(fronl, 2, rgb_h[0],rgb_h[1],rgb_h[2]);
	ObjPrim_SetVertexColor(fronl, 3, rgb_h[0],rgb_h[1],rgb_h[2]);
	ObjPrim_SetVertexColor(fronl, 4, 255, 255, 255 );
	ObjPrim_SetVertexColor(fronl, 5, 255, 255, 255 );
	
	if (delay >= 0)
	{
		loop(delay){ yield; }
		
		while( move1 < 1 ){
			if( move1 < 1 ){ moveA += 2; }
			move1 = 1 * sin( moveA );
			ObjRender_SetScaleXYZ(fronl, move1*mxs, 1, 0 );
			yield;
		}
	}
	else
	{
		move1 = 1;
		ObjRender_SetScaleXYZ(fronl, move1*mxs, 1, 0 );
	}
	while( true ){
		yield;
	}
	Obj_Delete(fronl);
}

//----------------------------------------------------
//スコア表示
//----------------------------------------------------
task TScore(effX, effY, delay)
{
	FrontLine( effX+120, effY+25, delay, [128,255,128], 5 );

	//Score文字列
	let objString = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(objString, imgSystemBase01);
	Obj_SetRenderPriorityI(objString, layFront);
	ObjSprite2D_SetSourceRect(objString, 0, 32, 128, 64);
	ObjSprite2D_SetDestRect(objString, 0, 0, 128*0.7, 32*0.7);
	ObjRender_SetPosition(objString, effX, effY+4, 0);

	//得点
	let count = 12;
	let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	ObjPrim_SetTexture(obj, imgSystemNumber);
	ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLELIST);
	ObjPrim_SetVertexCount(obj, (count+3)*6);
	Obj_SetRenderPriorityI(obj, layFront);
	ObjRender_SetPosition(obj, effX+42, effY-2, 0);
	local
	{
		let keta_count = 0;
		let offset_x = 0;
		ascent(iObj in 0 .. count)
		{
			SetNumber_Base(obj, keta_count, offset_x, 0, 16, 32);
			offset_x += 12; keta_count++;
			if (iObj%3 == 2)
			{
				SetNumber_Base(obj, keta_count, offset_x, 0, 16, 32);
				offset_x += 6; keta_count++;
			}
		}
	}
	
	//フェードイン
	FadeinDisplay([objString, obj], delay);

	let before_score = -1;
	while(IsGame())
	{
		let score = GetScore();
		score = min(score, 999999999999);
		if (before_score != score)
		{
			before_score = score;
			let listNum = DigitToArray(score, count);
			let keta_count = 0;
			ascent(iObj in 0 .. count)
			{
				let num = listNum[iObj];
				SetNumber(obj, keta_count, num);
				keta_count++;
				if (iObj%3 == 2)
				{
					if (num >= 0) { SetNumber(obj, keta_count, 11); }
					else { SetNumber(obj, keta_count, -1); }
					keta_count++;
				}
			}
			if (score > 100000000000) {
				ObjRender_SetScaleX(obj, 0.85);
				ObjRender_SetX(obj, effX+42+24);
			} else if (score > 10000000000) {
				ObjRender_SetScaleX(obj, 0.915);
				ObjRender_SetX(obj, effX+42+14);
			} else {
				ObjRender_SetScaleX(obj, 1);
				ObjRender_SetX(obj, effX+42);
			}
		}
		yield;
	}
}

//----------------------------------------------------
//ハイスコア表示
//----------------------------------------------------
task THiScore(effX, effY, delay)
{
	if (!(GetPlayMode() == GAME_MAIN || GetPlayMode() == GAME_PRACTICE)) { return; }
	
	FrontLine( effX+120, effY+25, delay, [255,128,128], 5 );
	// ハイスコアロード用待機
	yield;

	//Score文字列
	let objString = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(objString, imgSystemBase01);
	Obj_SetRenderPriorityI(objString, layFront);
	ObjSprite2D_SetSourceRect(objString, 0, 0, 128, 32);
	ObjSprite2D_SetDestRect(objString, 0, 0, 128*0.7, 32*0.7);
	ObjRender_SetPosition(objString, effX, effY+4, 0);

	//得点
	let count = 12;
	let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	ObjPrim_SetTexture(obj, imgSystemNumber);
	ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLELIST);
	ObjPrim_SetVertexCount(obj, (count+3)*6);
	Obj_SetRenderPriorityI(obj, layFront);
	ObjRender_SetPosition(obj, effX+42, effY-2, 0);
	ObjRender_SetColor(obj, 160, 160, 160);
	local
	{
		let keta_count = 0;
		let offset_x = 0;
		ascent(iObj in 0 .. count)
		{
			SetNumber_Base(obj, keta_count, offset_x, 0, 16, 32);
			offset_x += 12; keta_count++;
			if (iObj%3 == 2)
			{
				SetNumber_Base(obj, keta_count, offset_x, 0, 16, 32);
				offset_x += 6; keta_count++;
			}
		}
	}
	
	//フェードイン
	FadeinDisplay([objString, obj], delay);

	let hi_score = LoadHighScore(Difficult(), GetPlayerType(), GetPlayerWeapon(), GetAreaCommonData(CAREA_STAGE, "StageIndex", 0), GetPlayMode());
	
	let before_score = -1;
	while(IsGame())
	{
		let score = max(hi_score, GetScore());
		if (before_score != score)
		{
			before_score = score;
			let listNum = DigitToArray(min(score, 999999999999), count);
			let keta_count = 0;
			ascent(iObj in 0 .. count)
			{
				let num = listNum[iObj];
				SetNumber(obj, keta_count, num);
				keta_count++;
				if (iObj%3 == 2)
				{
					if (num >= 0) { SetNumber(obj, keta_count, 11); }
					else { SetNumber(obj, keta_count, -1); }
					keta_count++;
				}
			}
			if (score > 100000000000) {
				ObjRender_SetScaleX(obj, 0.85);
				ObjRender_SetX(obj, effX+42+24);
			} else if (score > 10000000000) {
				ObjRender_SetScaleX(obj, 0.915);
				ObjRender_SetX(obj, effX+42+14);
			} else {
				ObjRender_SetScaleX(obj, 1);
				ObjRender_SetX(obj, effX+42);
			}
		}
		yield;
	}
}

//----------------------------------------------------
//残機表示
//----------------------------------------------------
task TPlayerLife(effX, effY, delay)
{
	// エクステンド表示用
	TPlayerExtendLife(effX, effY+22, delay);
	
//	FrontLine( MaxX+110+36, effY+25, delay, [255,96,255], 5 );

	let StarX = 256; let StarY = 0;
	let count = 8;

	//文字列
	let objString = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(objString, imgSystemBase01);
	Obj_SetRenderPriorityI(objString, layFront);
	ObjSprite2D_SetSourceRect(objString, 0, 64, 128, 96);
	ObjSprite2D_SetDestRect(objString, 0, 0, 128*0.6, 32*0.6);
	ObjRender_SetPosition(objString, effX, effY+6, 0);

	//残機
	let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	ObjPrim_SetTexture(obj, imgSystemBase01);
	ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLELIST);
	ObjPrim_SetVertexCount(obj, count*6);
	Obj_SetRenderPriorityI(obj, layFront);
	ObjRender_SetPosition(obj, effX+78, effY+8, 0);
	ascent(iObj in 0 .. count)
	{
		SetStar_Base(obj, iObj, iObj*14, 0, 16, 16);
	}

	//フェードイン
	FadeinDisplay([objString, obj], delay);
	let before_score = -1;
	let before_flg = isLastSpell;
	
	while(IsGame())
	{
		let score = min(GetPlayerLife()+
			GetAreaCommonData(CAREA_SYSTEM,"FragmentPlayer",0)/GetAreaCommonData(CAREA_SYSTEM,"FragmentPlayer_Next",1)
			, 8);
		if (before_score != score || before_flg != isLastSpell)
		{
			before_flg = isLastSpell;
			before_score = score;
			
			let tmpX = StarX;
			if (isLastSpell) { tmpX += 128; }
			
			//星の数
			ascent(iObj in 0 .. count)
			{
				if (trunc(score) > iObj) { SetStar(obj, iObj, 5, tmpX, StarY); }
				else if (ceil(score) <= iObj) { SetStar(obj, iObj, 0, tmpX, StarY); }
				// かけら
				else { SetStar(obj, iObj, trunc((score-trunc(score))*4+1), tmpX, StarY); }
			}
		}
		yield;
	}
}

//----------------------------------------------------
//残スペル表示
//----------------------------------------------------
task TPlayerSpell(effX, effY, delay)
{
	if (GetItemLegacyMode())
	{
		TPlayerSpellRainbow(effX, effY, delay);
		return;
	}
	// エクステンド表示用
	TPlayerExtendSpell(effX, effY+22, delay);
	
//	FrontLine( MaxX+110+36, effY+25, delay, [96,255,96], 5 );
	
	let StarX = 256; let StarY = 16;
	let count = 8;

	//文字列
	let objString = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(objString, imgSystemBase01);
	Obj_SetRenderPriorityI(objString, layFront);
	ObjSprite2D_SetSourceRect(objString, 0, 96, 128, 128);
	ObjSprite2D_SetDestRect(objString, 0, 0, 128*0.6, 32*0.6);
	ObjRender_SetPosition(objString, effX, effY+6, 0);

	let objString2 = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(objString2, imgSystemBase01);
	Obj_SetRenderPriorityI(objString2, layFront);
	ObjSprite2D_SetSourceRect(objString2, 0, 416, 128, 448);
	ObjSprite2D_SetDestRect(objString2, 0, 0, 128*0.6, 32*0.6);
	ObjRender_SetPosition(objString2, effX+48, effY+6, 0);
	ObjRender_SetColor(objString2, 192, 255, 192);

	//残機
	let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	ObjPrim_SetTexture(obj, imgSystemBase01);
	ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLELIST);
	ObjPrim_SetVertexCount(obj, count*6);
	Obj_SetRenderPriorityI(obj, layFront);
	ObjRender_SetPosition(obj, effX+78+22, effY+10, 0);
	ascent(iObj in 0 .. count)
	{
		SetStar_Base(obj, iObj, iObj*11, 0, 14, 14);
	}
	
	//フェードイン
	FadeinDisplay([objString, obj, objString2], delay);
	
	// レベル表示
	TDrawLevel(delay);

	let before_score = -1;
	let before_flg = isLastSpell;
	while(IsGame())
	{
		let score = min(GetPlayerSpell()+
			GetAreaCommonData(CAREA_SYSTEM,"FragmentSpell",0)/GetAreaCommonData(CAREA_SYSTEM,"FragmentSpell_Next",1)
			, 8);
		if (before_score != score || before_flg != isLastSpell)
		{
			before_flg = isLastSpell;
			before_score = score;
			
			let tmpX = StarX;
			if (isLastSpell) { tmpX += 128; }
			
			//星の数
			ascent(iObj in 0 .. count)
			{
				if (trunc(score) > iObj) { SetStar(obj, iObj, 5, tmpX, StarY); }
				else if (ceil(score) <= iObj) { SetStar(obj, iObj, 0, tmpX, StarY); }
				// かけら
				else { SetStar(obj, iObj, trunc((score-trunc(score))*4+1), tmpX, StarY); }
			}
		}
		yield;
	}
	
	task TDrawLevel(delay)
	{
		if (delay > 0) { waitEx(delay+15); }
		
		//文字列
		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjPrim_SetTexture(obj, imgSystemBase01);
		Obj_SetRenderPriorityI(obj, layFront+1);
		ObjRender_SetColor(obj, 255, 255, 192);
//		ObjRender_SetPosition(obj, effX+68, effY+24, 0);
		
		let before_lv = -1;
		while(IsGame())
		{
			if (before_lv != GetPlayerSpell())
			{
				before_lv = GetPlayerSpell();
				ChangeLevel();
			}
			yield;
		}
		
		task ChangeLevel()
		{
			let lv = trunc(GetPlayerSpell());
			let sc = [0.5,0.5,0.6,0.7,0.8,0.9,1,1,1][lv];
			ObjSprite2D_SetSourceRect(obj, 0+lv*32, 480, 32+lv*32, 512);
			ObjSprite2D_SetDestRect(obj, -16*sc, -32*sc, 16*sc, 0*sc);
			ObjRender_SetPosition(obj, effX+72+8*sc, effY+21+6*sc, 0);
			
			ascent(t in 0 .. 20)
			{
				let tmp = ((t+1)/20)^2;
				ObjRender_SetScaleXYZ(obj, tmp, 3-tmp*2, 1);
				yield;
			}
		}
	}
}
task TPlayerSpellRainbow(effX, effY, delay)
{
	// エクステンド表示用
	TPlayerExtendSpell(effX, effY+22, delay);
	
	let StarX = 256; let StarY = 16;
	let count = 8;

	//文字列
	let objString = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(objString, imgSystemBase01);
	Obj_SetRenderPriorityI(objString, layFront);
	ObjSprite2D_SetSourceRect(objString, 0, 256, 128, 288);
	ObjSprite2D_SetDestRect(objString, 0, 0, 128*0.6, 32*0.6);
	ObjRender_SetPosition(objString, effX, effY+6, 0);

	//残機
	let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	ObjPrim_SetTexture(obj, imgSystemBase01);
	ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLELIST);
	ObjPrim_SetVertexCount(obj, count*6);
	Obj_SetRenderPriorityI(obj, layFront);
	ObjRender_SetPosition(obj, effX+78, effY+8, 0);
	ascent(iObj in 0 .. count)
	{
		SetStar_Base(obj, iObj, iObj*14, 0, 16, 16);
	}
	
	//フェードイン
	FadeinDisplay([objString, obj], delay);
	
	let before_score = -1;
	let before_flg = isLastSpell;
	while(IsGame())
	{
		let score = min(GetPlayerSpell()+
			GetAreaCommonData(CAREA_SYSTEM,"FragmentSpell",0)/GetAreaCommonData(CAREA_SYSTEM,"FragmentSpell_Next",1)
			, 8);
		if (before_score != score || before_flg != isLastSpell)
		{
			before_flg = isLastSpell;
			before_score = score;
			
			let tmpX = StarX;
			if (isLastSpell) { tmpX += 128; }
			
			//星の数
			ascent(iObj in 0 .. count)
			{
				if (trunc(score) > iObj) { SetStar(obj, iObj, 5, tmpX, StarY); }
				else if (ceil(score) <= iObj) { SetStar(obj, iObj, 0, tmpX, StarY); }
				// かけら
				else { SetStar(obj, iObj, trunc((score-trunc(score))*4+1), tmpX, StarY); }
			}
		}
		yield;
	}
}

//----------------------------------------------------
//エクステンド表示
//----------------------------------------------------
task TPlayerExtendLife(effX, effY, delay)
{
	//ゲージ
	let objBase = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(objBase, imgSystemExtend);
	Obj_SetRenderPriorityI(objBase, layFront+1);
	ObjSprite2D_SetSourceRect(objBase, 0, 0, 208, 12);
	ObjSprite2D_SetDestRect(objBase, 0, 0, 208, 12);
	ObjRender_SetPosition(objBase, effX, effY, 0);
	
	let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLESTRIP);
	ObjPrim_SetVertexCount(obj, 4);
	ObjPrim_SetTexture(obj, imgSystemExtend);
	Obj_SetRenderPriorityI(obj, layFront+1);
	ObjRender_SetPosition(obj, effX, effY, 0);
	ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);

	//フェードイン
	FadeinDisplay([obj, objBase], delay);

	let t = 0;
	let before_score = -1;
	while(IsGame())
	{
		let score = GetExtendScore();
		if (before_score != score)
		{
			if (GetExtendMax() <= 0)	// 最終エクステンド終わり
			{
				Obj_Delete(obj);
				Obj_Delete(objBase);
				break;
			}
			before_score = score;
		}
		let tmp = score / GetExtendMax();
		let ix = tmp*187;
		let ot = -t/3;
		ObjPrim_SetVertexPosition(obj, 0, 5+2, 4, 0);
		ObjPrim_SetVertexPosition(obj, 1, 3+2, 9, 0);
		ObjPrim_SetVertexPosition(obj, 2, 5+2+ix, 4, 0);
		ObjPrim_SetVertexPosition(obj, 3, 3+2+ix, 9, 0);
		ObjPrim_SetVertexUVT(obj, 0, 2+ot, 17);
		ObjPrim_SetVertexUVT(obj, 1, 0+ot, 22);
		ObjPrim_SetVertexUVT(obj, 2, ix+2+ot, 17);
		ObjPrim_SetVertexUVT(obj, 3, ix+ot, 22);
		t++;
		yield;
	}
}
task TPlayerExtendSpell(effX, effY, delay)
{
	//ゲージ
	let objBase = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(objBase, imgSystemExtend);
	Obj_SetRenderPriorityI(objBase, layFront+1);
	ObjSprite2D_SetSourceRect(objBase, 0, 32, 208, 44);
	ObjSprite2D_SetDestRect(objBase, 0, 0, 208, 12);
	ObjRender_SetPosition(objBase, effX, effY, 0);
	
	let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLESTRIP);
	ObjPrim_SetVertexCount(obj, 4);
	ObjPrim_SetTexture(obj, imgSystemExtend);
	Obj_SetRenderPriorityI(obj, layFront+1);
	ObjRender_SetPosition(obj, effX, effY, 0);
	ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);

	//フェードイン
	FadeinDisplay([obj, objBase], delay);

	let t = 0;
	let before_score = -1;
	while(IsGame())
	{
		let score = GetTimeItem();
		if (before_score != score)
		{
			if (GetTimeItemMax() <= 0)	// 最終エクステンド終わり
			{
				Obj_Delete(obj);
				Obj_Delete(objBase);
				break;
			}
			before_score = score;
		}
		let tmp = score / GetTimeItemMax();
		let ix = tmp*187;
		let ot = -t/3;
		ObjPrim_SetVertexPosition(obj, 0, 5+2, 4, 0);
		ObjPrim_SetVertexPosition(obj, 1, 3+2, 9, 0);
		ObjPrim_SetVertexPosition(obj, 2, 5+2+ix, 4, 0);
		ObjPrim_SetVertexPosition(obj, 3, 3+2+ix, 9, 0);
		ObjPrim_SetVertexUVT(obj, 0, 2+ot, 49);
		ObjPrim_SetVertexUVT(obj, 1, 0+ot, 53);
		ObjPrim_SetVertexUVT(obj, 2, ix+2+ot, 49);
		ObjPrim_SetVertexUVT(obj, 3, ix+ot, 53);
		t++;
		yield;
	}
}

//----------------------------------------------------
//Zボム用
//----------------------------------------------------
task TPlayerExtendZSpell(delay)
{
	let effX = 528;
	let effY = 348;
	let effAngle = 135;
	let effScale = 0.8;
	
	let objBase = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(objBase, imgSystemZbomb);
	Obj_SetRenderPriorityI(objBase, layFront);
	ObjSprite2D_SetSourceRect(objBase, 0, 0, 256, 384);
	ObjSprite2D_SetDestRect(objBase, -128, -192, 128, 192);
	ObjRender_SetPosition(objBase, effX, effY, 0);
	ObjRender_SetBlendType(objBase, BLEND_ADD_ARGB);
	ObjRender_SetAlpha(objBase, 0);

	let objMsg = [ObjPrim_Create(OBJ_SPRITE_2D), ObjPrim_Create(OBJ_SPRITE_2D)];
	ascent(i in 0 .. 2)
	{
		ObjPrim_SetTexture(objMsg[i], imgSystemZbomb);
		Obj_SetRenderPriorityI(objMsg[i], layFront);
		ObjSprite2D_SetSourceRect(objMsg[i], 0, 416-32*i, 192, 448-32*i);
		ObjSprite2D_SetDestRect(objMsg[i], 0, 0, 192, 32);
		ObjRender_SetPosition(objMsg[i], GetScreenWidth-256-160, GetScreenHeight-32, 0);
		ObjRender_SetAlpha(objMsg[i], 0);
	}
	ObjRender_SetBlendType(objMsg[0], BLEND_SUBTRACT);
	ObjRender_SetBlendType(objMsg[1], BLEND_ADD_ARGB);
	
	// クリスタルベース
	let objC1 = [];
	// 光るクリスタル
	let objC2 = [];

	ascent(i in 0 .. 12)
	{
		let oa = 170 + i/11*200;
		let ox = 42*cos(oa);
		let oy = 42*sin(oa) - 58;
		local
		{
			let tmp_obj = ObjPrim_Create(OBJ_SPRITE_2D);
			ObjPrim_SetTexture(tmp_obj, imgSystemZbomb);
			Obj_SetRenderPriorityI(tmp_obj, layFront);
			ObjSprite2D_SetSourceRect(tmp_obj, 192, 384, 256, 448);
			ObjSprite2D_SetDestRect(tmp_obj, -20*effScale, -20*effScale, 20*effScale, 20*effScale);
			ObjRender_SetPosition(tmp_obj, effX+ox, effY+oy, 0);
			ObjRender_SetAngleZ(tmp_obj, oa+90);
			ObjRender_SetColor(tmp_obj, 0, 0, 0);
			ObjRender_SetAlpha(tmp_obj, 255);
			Obj_SetValue(tmp_obj, "OFFSET", [ox, oy]);
			objC1 = objC1 ~ [tmp_obj];
		}
		local
		{
			let tmp_obj = [ObjPrim_Create(OBJ_SPRITE_2D), ObjPrim_Create(OBJ_SPRITE_2D)];
			ascent(j in 0 .. 2)
			{
				ObjPrim_SetTexture(tmp_obj[j], imgSystemZbomb);
				Obj_SetRenderPriorityI(tmp_obj[j], layFront);
				ObjSprite2D_SetSourceRect(tmp_obj[j], 192, 384, 256, 448);
				ObjSprite2D_SetDestRect(tmp_obj[j], -20*effScale, -20*effScale, 20*effScale, 20*effScale);
				ObjRender_SetPosition(tmp_obj[j], effX+ox, effY+oy, 0);
				ObjRender_SetAngleZ(tmp_obj[j], oa-90);
				ObjRender_SetBlendType(tmp_obj[j], BLEND_ADD_ARGB);
				ObjRender_SetAlpha(tmp_obj[j], 0);
				Obj_SetValue(tmp_obj[j], "OFFSET", [ox, oy]);
			}
			ObjRender_SetColorHSV(tmp_obj[0], i/12*360, 128, 255);
			ObjRender_SetColorHSV(tmp_obj[1], i/12*360, 128, 255);
			CheckZItem(tmp_obj, i/12);
			objC2 = objC2 ~ tmp_obj;
		}
	}

	let t = 0;
	let before_score = -1;
	let alpha = 0;
	while(IsGame())
	{
		let tmp = (GetZSpellItem() / GetZSpellItemMax());
		if (IsRainbow())
		{
			alpha = min(1, alpha+1/60);
			ObjRender_SetAlpha(objBase, ((sin(t*3)+1)*96+64)*alpha);
		}
		else if (GetZSpellItemMax() <= GetZSpellItem())
		{
			alpha = min(1, alpha+1/60);
			ObjRender_SetAlpha(objBase, ((sin(t*3)+1)*96+64)*alpha);
			ascent(i in 0 .. 2)
			{
				ObjRender_SetAlpha(objMsg[i], 255*alpha);
			}
			ObjRender_SetColorHSV(objMsg[0], t, 64, 128);
			ObjRender_SetColorHSV(objMsg[1], t+180, 128, 255);
		}
		else
		{
			alpha = 0;
			ObjRender_SetAlpha(objBase, 0);
			ascent(i in 0 .. 2)
			{
				ObjRender_SetAlpha(objMsg[i], 0);
			}
		}
		t++;
		yield;
	}
	
	task CheckZItem(objs, value)
	{
		if (IsRainbow())
		{
			let t = trunc(120*value);
			while(IsGame())
			{
				ObjRender_SetAlpha(objs[0], 255);
				ObjRender_SetAlpha(objs[1], (sin(t*3)+1)*96+64);
				t++;
				yield;
			}
		}
		else
		{
			let t = trunc(120*value);
			while(IsGame())
			{
				let tmp = (GetZSpellItem() / GetZSpellItemMax() - value)*12;
				ObjRender_SetAlpha(objs[0], tmp*255);
				if (tmp >= 1) { ObjRender_SetAlpha(objs[1], (sin(t*3)+1)*96+64); }
				else { ObjRender_SetAlpha(objs[1], 0); }
				t++;
				yield;
			}
		}
		ascent(i in 0 .. length(objs)) { Obj_Delete(objs[i]); }
	}
}
task _TPlayerExtendZSpell(effX, effY, delay)
{
	//ゲージ
	let objBase = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(objBase, imgSystemExtend);
	Obj_SetRenderPriorityI(objBase, layFront);
	ObjSprite2D_SetSourceRect(objBase, 0, 64, 208, 76);
	ObjSprite2D_SetDestRect(objBase, 0, 0, 208, 12);
	ObjRender_SetPosition(objBase, effX, effY, 0);
	
	let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLESTRIP);
	ObjPrim_SetVertexCount(obj, 4);
	ObjPrim_SetTexture(obj, imgSystemExtend);
	Obj_SetRenderPriorityI(obj, layFront);
	ObjRender_SetPosition(obj, effX, effY, 0);
	ObjRender_SetBlendType(obj, BLEND_ADD_ARGB);

	//フェードイン
	FadeinDisplay([obj], delay);

	let t = 0;
	let before_score = -1;
	while(IsGame())
	{
		let score = GetZSpellItem();
		if (before_score != score)
		{
			if (GetZSpellItemMax() <= 0)	// 最終エクステンド終わり
			{
				Obj_Delete(obj);
				Obj_Delete(objBase);
				break;
			}
			before_score = score;
		}
		let tmp = score / GetZSpellItemMax();
		let ix = tmp*179;
		let ot = -t;
		ObjPrim_SetVertexPosition(obj, 0, 16, 4, 0);
		ObjPrim_SetVertexPosition(obj, 1, 12, 9, 0);
		ObjPrim_SetVertexPosition(obj, 2, 16+ix, 4, 0);
		ObjPrim_SetVertexPosition(obj, 3, 12+ix, 9, 0);
		ObjPrim_SetVertexUVT(obj, 0, 0+ot, 81);
		ObjPrim_SetVertexUVT(obj, 1, 0+ot, 95);
		ObjPrim_SetVertexUVT(obj, 2, ix+ot, 81);
		ObjPrim_SetVertexUVT(obj, 3, ix+ot, 95);
		t++;
		yield;
	}
}

//----------------------------------------------------
//Graze表示
//----------------------------------------------------
task TGraze(effX, effY, delay)
{
	FrontLine( effX+100, effY+25, delay, [96,96,96], 4.5 );

	//文字列
	let objString = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(objString, imgSystemBase01);
	Obj_SetRenderPriorityI(objString, layFront);
	ObjSprite2D_SetSourceRect(objString, 0, 128, 128, 160);
	ObjSprite2D_SetDestRect(objString, 0, 0, 128*0.6, 32*0.6);
	ObjRender_SetPosition(objString, effX, effY+6, 0);

	//Graze
	let count = 5;
	let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	ObjPrim_SetTexture(obj, imgSystemNumber);
	ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLELIST);
	ObjPrim_SetVertexCount(obj, (count+1)*6);
	Obj_SetRenderPriorityI(obj, layFront);
	ObjRender_SetColor(obj, 180, 180, 180);
	ObjRender_SetPosition(obj, effX+108, effY-2, 0);
	local
	{
		let keta_count = 0;
		let offset_x = 0;
		ascent(iObj in 0 .. count)
		{
			SetNumber_Base(obj, keta_count, offset_x, 0, 16, 32);
			offset_x += 12; keta_count++;
			if (iObj == 1)
			{
				SetNumber_Base(obj, keta_count, offset_x, 0, 16, 32);
				offset_x += 6; keta_count++;
			}
		}
	}
	
	//フェードイン
	FadeinDisplay([objString, obj], delay);

	let before_score = -1;
	while(IsGame())
	{
		let score = GetGraze();
		score = min(score, 99999);
		if (before_score != score)
		{
			before_score = score;
			let listNum = DigitToArray(score, count);
			let keta_count = 0;
			ascent(iObj in 0 .. count)
			{
				let num = listNum[iObj];
				SetNumber(obj, keta_count, num);
				keta_count++;
				if (iObj == 1)
				{
					if (num >= 0) { SetNumber(obj, keta_count, 11); }
					else { SetNumber(obj, keta_count, -1); }
					keta_count++;
				}
			}
		}
		yield;
	}
}

//----------------------------------------------------
//最大得点表示
//----------------------------------------------------
task TMaxScore(effX, effY, delay)
{
	FrontLine( effX+100, effY+25, delay, [96,96,255], 4.5 );

	//文字列
	let objString = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(objString, imgSystemBase01);
	Obj_SetRenderPriorityI(objString, layFront);
	ObjSprite2D_SetSourceRect(objString, 0, 160, 128, 192);
	ObjSprite2D_SetDestRect(objString, 0, 0, 128*0.6, 32*0.6);
	ObjRender_SetPosition(objString, effX, effY+6, 0);

	//最大得点
	let count = 6;
	let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	ObjPrim_SetTexture(obj, imgSystemNumber);
	ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLELIST);
	ObjPrim_SetVertexCount(obj, (count+1)*6);
	Obj_SetRenderPriorityI(obj, layFront);
	ObjRender_SetColor(obj, 200, 230, 255);
	ObjRender_SetPosition(obj, effX+96, effY-2, 0);
	local
	{
		let keta_count = 0;
		let offset_x = 0;
		ascent(iObj in 0 .. count)
		{
			SetNumber_Base(obj, keta_count, offset_x, 0, 16, 32);
			offset_x += 12; keta_count++;
			if (iObj == 2)
			{
				SetNumber_Base(obj, keta_count, offset_x, 0, 16, 32);
				offset_x += 6; keta_count++;
			}
		}
	}
	
	//フェードイン
	FadeinDisplay([objString, obj], delay);


	let before_score = -1;
	while(IsGame())
	{
		let score = GetMaxScore();
		score = min(score, 999990);
		if (before_score != score)
		{
			before_score = score;
			let listNum = DigitToArray(score, count);
			let keta_count = 0;
			ascent(iObj in 0 .. count)
			{
				let num = listNum[iObj];
				SetNumber(obj, keta_count, num);
				keta_count++;
				if (iObj == 2)
				{
					if (num >= 0) { SetNumber(obj, keta_count, 11); }
					else { SetNumber(obj, keta_count, -1); }
					keta_count++;
				}
			}
		}
		yield;
	}
}

//----------------------------------------------------
//　難易度表記
//----------------------------------------------------
task DisplayDifficulty(pos,layer,delay)
{
	let ID		= ObjPrim_Create(OBJ_SPRITE_2D);
	let count	= 0;
	let move1	= 0;
	let moveA	= 0;
	let scaleX	= 0;
	let scaleY	= 0;
	
	//　難易度
	let tmpDiff = Difficult();
	
	ObjPrim_SetTexture(ID, imgSystemDifficulty );
	Obj_SetRenderPriorityI(ID, layer );
	ObjRender_SetBlendType(ID, BLEND_ALPHA );
	ObjRender_SetScaleXYZ(ID, 0, 0, 1 );
	
	alternative( tmpDiff )
	case( D_EASY ){
		ObjSprite2D_SetSourceRect(ID, 0, 0, 128, 32 );
	}
	case( D_NORM ){
		ObjSprite2D_SetSourceRect(ID, 0, 32, 128, 64 );
	}
	case( D_HARD ){
		ObjSprite2D_SetSourceRect(ID, 0, 64, 128, 96 );
	}
	case( D_LUNA ){
		ObjSprite2D_SetSourceRect(ID, 0, 96, 128, 128 );
	}
	case( D_EXTRA ){
		alternative( DifficultEx() )
		case ( D_EX_NORM ) { ObjSprite2D_SetSourceRect(ID, 0, 128, 128, 160 ); }
		case ( D_EX_EASY ) { ObjSprite2D_SetSourceRect(ID, 0, 160, 128, 192 ); }
		case ( D_EX_HARD ) { ObjSprite2D_SetSourceRect(ID, 0, 192, 128, 224 ); }
	}
	/*  Ph  */
	case( D_DRIVE ){
		ObjSprite2D_SetSourceRect(ID, 0, 192, 128, 224 );
	}
	case( D_LAST ){
		ObjSprite2D_SetSourceRect(ID, 0, 224, 128, 256 );
	}
	ObjSprite2D_SetDestCenter(ID);
	
	if (delay > 0 && IsFirstStage())
	{
		loop( delay ){ yield; }
		
		while( count < 135 )
		{
			if (count < 75)
			{
				let tmp = (count+1)/75;
				move1 = sin(min(90, tmp*180));
				scaleX = move1;
				scaleY = move1;
				if (tmp > 0.33)
				{
					let offsetS = (0.33^2 - (0.66-tmp)^2)*sin(tmp*1080) * 3;
					scaleX += offsetS;
					scaleY -= offsetS;
				}
			}
			
			ObjRender_SetPosition(ID, CenX, MinY+64, 0 );
			ObjRender_SetScaleXYZ(ID, scaleX, scaleY, 1 );
			
			if( count > 75 && count < 106 ){
				if( count%4 == 0 ){
					ObjRender_SetColor(ID, 0, 0, 0 );
				}
				else{
					ObjRender_SetColor(ID, 255, 255, 255 );
				}
			}
			
			count++;
			
			yield;
		}
		ObjRender_SetScaleXYZ(ID, 1, 1, 1);
		move1 = 0;
		moveA = 0;
		ObjRender_SetColor(ID, 255, 255, 255 );
		while( move1 < 1 ){
			move1 = 1 * sin( moveA );
			
			ObjRender_SetScaleY(ID, 1 - move1);
			
			moveA += 5;
			
			yield;
		}
		move1 = 0;
		moveA = 0;
		ObjRender_SetColor(ID, 255, 255, 255 );
		ObjRender_SetPosition(ID, pos[0], pos[1], 0 );
		while( move1 < 1 ){
			move1 = 1 * sin( moveA );
			
			ObjRender_SetScaleY(ID, move1 );
			
			if( move1 < 1 ){ moveA += 5; }
			
			yield;
		}
	}
	ObjRender_SetPosition(ID, pos[0], pos[1], 0 );
	ObjRender_SetScaleXYZ(ID, 1, 1, 1 );
	loop
	{
		yield;
	}
	Obj_Delete(ID);
}

//----------------------------------------------------
//　装備アイコン
//----------------------------------------------------
task DisplayEquipment(pos,layer,delay)
{
	let ID		= [ObjPrim_Create(OBJ_SPRITE_2D)];
	let equip_id	= GetPlayerRealWeapon();
	let scale	= 0.4;
	
	ObjPrim_SetTexture(ID[0], imgSystemWpIcon );
	Obj_SetRenderPriorityI(ID[0], layer );
	ObjRender_SetScaleXYZ(ID[0], 0, 0, 1 );
	ObjSprite2D_SetSourceRect(ID[0], 0+128*(equip_id%4), 0+128*trunc(equip_id/4), 128+128*(equip_id%4), 128+128*trunc(equip_id/4) );
	ObjSprite2D_SetDestCenter(ID[0]);
	ObjRender_SetBlendType(ID[0], BLEND_ALPHA );

	let shd		= CreateShaderObject( ID[0], 7 );
	let frame	= 0;
	let light	= [ 0.02, 0.01 ];
	ObjShader_SetVector( shd, "m_color", 0, 0, 0, 0 );
	ObjShader_SetVector( shd, "t_color", 1, 1, 1, 1 );
	ObjShader_SetFloat( shd, "m_alpha", 1 );
	
	if (delay > 0 && IsFirstStage())
	{
		loop( delay ){ yield; }
	}

	ObjRender_SetPosition(ID[0], pos[0], pos[1], 0 );
	ObjRender_SetScaleXYZ(ID[0], scale, scale, 1 );
	
	let t = 0;
	loop(120)
	{
		let tmp = (t+1)/120;
		ObjRender_SetAlpha(ID[0], tmp*255);

		let lighting = light[0] + light[1] * sin( t * 4 );
		ObjShader_SetFloat( shd, "m_alpha", tmp );
		ObjShader_SetFloat( shd, "m_frame", frame );
		ObjShader_SetVector( shd, "m_color", lighting, lighting, lighting, 0 );
		if( t%4 == 0 ){ frame += 4; }

		t++;
		yield;
	}
	while(equip_id == GetPlayerRealWeapon())
	{
		let lighting = light[0] + light[1] * sin( t * 4 );
		ObjShader_SetFloat( shd, "m_frame",frame );
		ObjShader_SetVector( shd, "m_color", lighting, lighting, lighting, 0 );
		if( t%4 == 0 ){ frame += 4; }

		t++;
		yield;
	}

	// 変更後表示
	DisplayEquipment(pos,layer,0);

	descent(t in 0 .. 120)
	{
		let tmp = (t+1)/120;
		ObjShader_SetFloat( shd, "m_alpha", tmp );
		ObjRender_SetAlpha(ID[0], tmp*255);
		ObjRender_SetY(ID[0], ObjRender_GetY(ID[0])+(1-tmp)*2);
		ObjRender_SetAngleZ(ID[0], ObjRender_GetAngleZ(ID[0])+(1-tmp));
		yield;
	}
	ascent(i in 0 .. length(ID)) { Obj_Delete(ID[i]); }
	Obj_Delete(shd);
}

//----------------------------------------------------
//FPS表示
//----------------------------------------------------
task TFPS()
{
	//得点
	let count = 4;
	let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	ObjPrim_SetTexture(obj, imgSystemFPS);
	ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLELIST);
	ObjPrim_SetVertexCount(obj, (count+2)*6);
	Obj_SetRenderPriorityI(obj, layFront+1);
	ObjRender_SetPosition(obj, GetScreenWidth-80, GetScreenHeight-24, 0);
	local
	{
		let offset_x = 0;
		ascent(iObj in 0 .. count)
		{
			SetNumber_BaseFPS(obj, iObj, offset_x, 0, 10, 16);
			offset_x += 10;
			if (iObj == count-2)
			{
				SetNumber_BaseFPS(obj, count, offset_x, 0, 10, 16);
				offset_x += 4;
			}
		}
		SetNumber_BaseFPS(obj, count+1, offset_x, 1, 20, 16);
		SetNumberFPS(obj, count, 10);
		local	/*fps*/
		{
			let keta = count+1;
			let num = 11;
			ObjPrim_SetVertexUVT(obj, keta*6  , num*10, 0);
			ObjPrim_SetVertexUVT(obj, keta*6+1, (num+1)*10+10, 0);
			ObjPrim_SetVertexUVT(obj, keta*6+2, num*10, 16);
			ObjPrim_SetVertexUVT(obj, keta*6+3, (num+1)*10+10, 0);
			ObjPrim_SetVertexUVT(obj, keta*6+4, num*10, 16);
			ObjPrim_SetVertexUVT(obj, keta*6+5, (num+1)*10+10, 16);
		}
	}

	let before_score = -1;
	while(IsGame())
	{
		let score = trunc(GetCurrentFps()*10);
		score = min(score, 9999);
		if (before_score != score)
		{
			before_score = score;
			let listNum = DigitToArray(score, count);
			ascent(iObj in 0 .. count)
			{
				SetNumberFPS(obj, iObj, listNum[iObj]);
			}
		}
		yield;
	}

	//数字用
	function SetNumberFPS(obj, keta, num)
	{
		if (num < 0)
		{
			ascent(i in 0 .. 6)
			{
				ObjPrim_SetVertexUVT(obj, keta*6+i, 0, 0);
			}
		}
		else
		{
			ObjPrim_SetVertexUVT(obj, keta*6  , num*10, 0);
			ObjPrim_SetVertexUVT(obj, keta*6+1, (num+1)*10, 0);
			ObjPrim_SetVertexUVT(obj, keta*6+2, num*10, 16);
			ObjPrim_SetVertexUVT(obj, keta*6+3, (num+1)*10, 0);
			ObjPrim_SetVertexUVT(obj, keta*6+4, num*10, 16);
			ObjPrim_SetVertexUVT(obj, keta*6+5, (num+1)*10, 16);
		}
	}
	function SetNumber_BaseFPS(obj, keta, x, y, w, h)
	{
		ObjPrim_SetVertexPosition(obj, keta*6  , x, y, 0);
		ObjPrim_SetVertexPosition(obj, keta*6+1, x+w, y, 0);
		ObjPrim_SetVertexPosition(obj, keta*6+2, x, y+h, 0);
		ObjPrim_SetVertexPosition(obj, keta*6+3, x+w, y, 0);
		ObjPrim_SetVertexPosition(obj, keta*6+4, x, y+h, 0);
		ObjPrim_SetVertexPosition(obj, keta*6+5, x+w, y+h, 0);
	}
}
task TFPS_Replay()
{
	let configWindowPos = GetAreaCommonData(CAREA_CONFIG, "WINDOW_POS", 0);
	//得点
	let count = 3;
	let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	ObjPrim_SetTexture(obj, imgSystemFPS);
	ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLELIST);
	ObjPrim_SetVertexCount(obj, (count+1)*6);
	Obj_SetRenderPriorityI(obj, 100);
	if (configWindowPos == 0) { ObjRender_SetPosition(obj, MaxX-54, MaxY-18, 0); }
	else { ObjRender_SetPosition(obj, MinX, MaxY-18, 0); }
	ObjRender_SetColor(obj, 200, 200, 200);
	local
	{
		let offset_x = 0;
		ascent(iObj in 0 .. count)
		{
			SetNumber_BaseFPS(obj, iObj, offset_x, 0, 10, 16);
			offset_x += 10;
		}
		SetNumber_BaseFPS(obj, count, offset_x, 1, 20, 16);
		local	/*fps*/
		{
			let keta = count;
			let num = 11;
			ObjPrim_SetVertexUVT(obj, keta*6  , num*10, 0);
			ObjPrim_SetVertexUVT(obj, keta*6+1, (num+1)*10+10, 0);
			ObjPrim_SetVertexUVT(obj, keta*6+2, num*10, 16);
			ObjPrim_SetVertexUVT(obj, keta*6+3, (num+1)*10+10, 0);
			ObjPrim_SetVertexUVT(obj, keta*6+4, num*10, 16);
			ObjPrim_SetVertexUVT(obj, keta*6+5, (num+1)*10+10, 16);
		}
	}

	let before_score = -1;
	while(IsGame())
	{
		let score = trunc(GetReplayFps());
		score = min(score, 9999);
		if (before_score != score)
		{
			before_score = score;
			let listNum = DigitToArray(score, count);
			ascent(iObj in 0 .. count)
			{
				SetNumberFPS(obj, iObj, listNum[iObj]);
			}
		}
		yield;
	}

	//数字用
	function SetNumberFPS(obj, keta, num)
	{
		if (num < 0)
		{
			ascent(i in 0 .. 6)
			{
				ObjPrim_SetVertexUVT(obj, keta*6+i, 0, 0);
			}
		}
		else
		{
			ObjPrim_SetVertexUVT(obj, keta*6  , num*10, 0);
			ObjPrim_SetVertexUVT(obj, keta*6+1, (num+1)*10, 0);
			ObjPrim_SetVertexUVT(obj, keta*6+2, num*10, 16);
			ObjPrim_SetVertexUVT(obj, keta*6+3, (num+1)*10, 0);
			ObjPrim_SetVertexUVT(obj, keta*6+4, num*10, 16);
			ObjPrim_SetVertexUVT(obj, keta*6+5, (num+1)*10, 16);
		}
	}
	function SetNumber_BaseFPS(obj, keta, x, y, w, h)
	{
		ObjPrim_SetVertexPosition(obj, keta*6  , x, y, 0);
		ObjPrim_SetVertexPosition(obj, keta*6+1, x+w, y, 0);
		ObjPrim_SetVertexPosition(obj, keta*6+2, x, y+h, 0);
		ObjPrim_SetVertexPosition(obj, keta*6+3, x+w, y, 0);
		ObjPrim_SetVertexPosition(obj, keta*6+4, x, y+h, 0);
		ObjPrim_SetVertexPosition(obj, keta*6+5, x+w, y+h, 0);
	}
}

