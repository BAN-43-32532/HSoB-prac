//一時停止スクリプト等から呼び出し

#include "./../../lib/lib_SystemAll.dnh"
#include "./../../lib/lib_File.dnh"
#include "./../../lib/lib_String.dnh"
#include "./../../lib/effect/lib_EffectLib.dnh"
#include "./../../lib/fx_function.dnh"
#include "./Tips.dnh"

let IsReplaySave = false;

// マニュアル用
let imgTtManual00	= imgDir ~ "title/manual0.png";
let imgTtManual01	= imgDir ~ "title/manual1.png";
let imgTtManual02	= imgDir ~ "title/manual2.png";
let imgTtManual03a	= imgDir ~ "title/manual3a.png";
let imgTtManual03b	= imgDir ~ "title/manual3b.png";
let imgTtManual03c	= imgDir ~ "title/manual3c.png";
let imgTtManual03d	= imgDir ~ "title/manual3d.png";
let imgTtManual04a	= imgDir ~ "title/manual4a.png";
let imgTtManual04b	= imgDir ~ "title/manual4b.png";
let imgTtManual05	= imgDir ~ "title/manual5.png";
let imgTtManual06	= imgDir ~ "title/manual6.png";
let imgTtManual07	= imgDir ~ "title/manual7.png";

// ふえないわかめ
task SetWakame(parent, pos, color)
{
	let scale = 0.4;
	
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjRender_SetPosition(obj, pos[0], pos[1], 0 );
	ObjPrim_SetTexture(obj, imgSystemPause02 );
	ObjRender_SetBlendType(obj, BLEND_ADD_ARGB );
	ObjRender_SetColor(obj, color[0], color[1], color[2] );
	Obj_SetRenderPriorityI(obj, 9 );
	ObjSprite2D_SetSourceRect(obj, 0, 0, 256, 512);
	ObjSprite2D_SetDestRect(obj, -128*scale, -128*scale, 128*scale, (512-128)*scale);
	
	let shader = CreateShaderObject( obj, 1 );
	ObjShader_SetTexture( shader, "g_Texture", fxMask[1] );
	ObjShader_SetTexture( shader, "g_Texture2", fxMask[2] );

	let t = 0;
	while(!Obj_IsDeleted(parent))
	{
		let a = sin(t*1.5)*5 - 5;
		if (t < 90)
		{
			let tmp = GetCurve((t+1)/90);
			a -= (1-tmp)*60;
//			ObjRender_SetAlpha(obj, tmp*255);
			ObjShader_SetFloat( shader, "m_param", tmp/255*255 );
		}
		
		ObjShader_SetFloat( shader, "m_frame", t/4 );
		ObjShader_SetVector( shader, "m_xyzw", (1/255)*color[0], (1/255)*color[1], (1/255)*color[2], (1/255)*128 );

		ObjRender_SetAngleZ(obj, a);
		t++;
		yield;
	}
	Obj_Delete(obj);
	Obj_Delete(shader);
}


// 文字配置
function SetSceneSelectImage(id, text)
{
	let sca		= 0.8;
	let sca2	= 1;

	alternative(text)
	case("一時停止"){
		ObjSprite2D_SetSourceRect(id,0,0,256,64);
		ObjSprite2D_SetDestCenter(id);
		ObjRender_SetScaleXYZ(id,sca2,sca2,0);
		ObjRender_SetColor(id,255,255,255);
	}
	case("満身創痍"){
		ObjSprite2D_SetSourceRect(id,0,64,256,128);
		ObjSprite2D_SetDestCenter(id);
		ObjRender_SetScaleXYZ(id,sca2,sca2,0);
		ObjRender_SetColor(id,255,255,255);
	}
	case("再生終了"){
		ObjSprite2D_SetSourceRect(id,0,128,256,192);
		ObjSprite2D_SetDestCenter(id);
		ObjRender_SetScaleXYZ(id,sca2,sca2,0);
		ObjRender_SetColor(id,255,255,255);
	}
	case("はい"){
		ObjSprite2D_SetSourceRect(id,0,192,256,256);
		ObjSprite2D_SetDestCenter(id);
		ObjRender_SetScaleXYZ(id,sca,sca,0);
	}
	case("いいえ"){
		ObjSprite2D_SetSourceRect(id,0,256,256,320);
		ObjSprite2D_SetDestCenter(id);
		ObjRender_SetScaleXYZ(id,sca,sca,0);
	}
	case("本当に"){
		ObjSprite2D_SetSourceRect(id,0,320,256,384);
		ObjSprite2D_SetDestCenter(id);
		ObjRender_SetScaleXYZ(id,sca,sca,0);
		ObjRender_SetColor(id,255,255,255);
	}
	case("再開"){
		ObjSprite2D_SetSourceRect(id,0,384,256,448);
		ObjSprite2D_SetDestCenter(id);
		ObjRender_SetScaleXYZ(id,sca,sca,0);
	}
	case("タイトルに戻る"){
		ObjSprite2D_SetSourceRect(id,0,448,256,512);
		ObjSprite2D_SetDestCenter(id);
		ObjRender_SetScaleXYZ(id,sca,sca,0);
	}
	case("最初から始める"){
		ObjSprite2D_SetSourceRect(id,0,512,256,576);
		ObjSprite2D_SetDestCenter(id);
		ObjRender_SetScaleXYZ(id,sca,sca,0);
	}
	case("リプレイを保存する"){
		ObjSprite2D_SetSourceRect(id,0,576,256,640);
		ObjSprite2D_SetDestCenter(id);
		ObjRender_SetScaleXYZ(id,sca,sca,0);
	}
	case("再挑戦"){
		ObjSprite2D_SetSourceRect(id,0,640,256,704);
		ObjSprite2D_SetDestCenter(id);
		ObjRender_SetScaleXYZ(id,sca,sca,0);
	}
	case("操作説明"){
		ObjSprite2D_SetSourceRect(id,0,704,256,768);
		ObjSprite2D_SetDestCenter(id);
		ObjRender_SetScaleXYZ(id,sca,sca,0);
	}
	case("鉄杵成針"){
		ObjSprite2D_SetSourceRect(id,0,768,256,832);
		ObjSprite2D_SetDestCenter(id);
		ObjRender_SetScaleXYZ(id,sca2,sca2,0);
	}
	case("コンティニュー"){
		ObjSprite2D_SetSourceRect(id,0,832,256,896);
		ObjSprite2D_SetDestCenter(id);
		ObjRender_SetScaleXYZ(id,sca2,sca2,0);
		ObjRender_SetColor(id,255,255,255);
	}
	case("あと"){
		ObjSprite2D_SetSourceRect(id,0,896,256,960);
		ObjSprite2D_SetDestCenter(id);
		ObjRender_SetScaleXYZ(id,sca2,sca2,0);
		ObjRender_SetColor(id,255,255,255);
	}
	case("0"){
		ObjSprite2D_SetSourceRect(id,0,960,32,1024);
		ObjSprite2D_SetDestCenter(id);
		ObjRender_SetScaleXYZ(id,sca2,sca2,0);
		ObjRender_SetColor(id,255,255,255);
	}
	case("1"){
		ObjSprite2D_SetSourceRect(id,32,960,64,1024);
		ObjSprite2D_SetDestCenter(id);
		ObjRender_SetScaleXYZ(id,sca2,sca2,0);
		ObjRender_SetColor(id,255,255,255);
	}
	case("2"){
		ObjSprite2D_SetSourceRect(id,64,960,96,1024);
		ObjSprite2D_SetDestCenter(id);
		ObjRender_SetScaleXYZ(id,sca2,sca2,0);
		ObjRender_SetColor(id,255,255,255);
	}
	case("3"){
		ObjSprite2D_SetSourceRect(id,96,960,128,1024);
		ObjSprite2D_SetDestCenter(id);
		ObjRender_SetScaleXYZ(id,sca2,sca2,0);
		ObjRender_SetColor(id,255,255,255);
	}
	case("4"){
		ObjSprite2D_SetSourceRect(id,128,960,160,1024);
		ObjSprite2D_SetDestCenter(id);
		ObjRender_SetScaleXYZ(id,sca2,sca2,0);
		ObjRender_SetColor(id,255,255,255);
	}
	case("5"){
		ObjSprite2D_SetSourceRect(id,160,960,192,1024);
		ObjSprite2D_SetDestCenter(id);
		ObjRender_SetScaleXYZ(id,sca2,sca2,0);
		ObjRender_SetColor(id,255,255,255);
	}
	case("6"){
		ObjSprite2D_SetSourceRect(id,192,960,224,1024);
		ObjSprite2D_SetDestCenter(id);
		ObjRender_SetScaleXYZ(id,sca2,sca2,0);
		ObjRender_SetColor(id,255,255,255);
	}
	case("∞"){
		ObjSprite2D_SetSourceRect(id,224,960,256,1024);
		ObjSprite2D_SetDestCenter(id);
		ObjRender_SetScaleXYZ(id,sca2,sca2,0);
		ObjRender_SetColor(id,255,255,255);
	}
}


//　エフェクト
//----------------------------------------------------------------
//----------------------------------------------------------------
//　はっぱっぱ
task CreatePauseEffect(pos,angle,speed,acc,mx,rgb_h,alpha,kill){
	return;
	let ID		= ObjPrim_Create(OBJ_SPRITE_2D);
	let csd		= GetCurrentScriptDirectory();
	let dis		= 0;
	let move1	= 0;
	let moveA	= 0;
	let frame	= 0;
	let sca		= 0.5;
	let spin	= randEffect(0,360);
	let spinp	= randEffect(-2,2);
	
	ObjRender_SetPosition(ID, pos[0] + dis * cos(angle), pos[1] + dis * sin(angle), 0 );
	ObjRender_SetBlendType(ID, BLEND_ADD_ARGB );
	ObjPrim_SetTexture(ID, imgEffectParticle );
	Obj_SetRenderPriorityI(ID, 10 );
	ObjRender_SetScaleXYZ(ID, sca, sca, 0 );
	ObjSprite2D_SetSourceRect(ID, 64, 0, 128, 64 );
	ObjSprite2D_SetDestCenter(ID);
	
	while( !Obj_IsDeleted(ID) && frame < kill ){
		
		move1 = 1 * sin( moveA );
		
		ObjRender_SetPosition(ID, pos[0] + dis * cos(angle), pos[1] + dis * sin(angle), 0 );
		ObjRender_SetAngleXYZ(ID, 0, 0, spin + spinp );
		ObjRender_SetScaleXYZ(ID, sca + frame/256, sca + frame/256, 0 );
		ObjRender_SetAlpha(ID, move1*alpha );
		
		frame++;
		spin += spinp;
		dis += speed;
		if( speed < mx ){ speed += acc; }
		if( move1 < 1 ){ moveA += 2; }
		
		yield;
	}
	move1 = 0;
	moveA = 0;
	while( !Obj_IsDeleted(ID) && move1 < 1 ){
		
		move1 = 1 * sin( moveA );
		
		ObjRender_SetPosition(ID, pos[0] + dis * cos(angle), pos[1] + dis * sin(angle), 0 );
		ObjRender_SetAngleXYZ(ID, 0, 0, spin + spinp );
		ObjRender_SetScaleXYZ(ID, sca + frame/256, sca + frame/256, 0 );
		ObjRender_SetAlpha(ID, alpha - move1*alpha );
		
		frame++;
		spin += spinp;
		dis += speed;
		if( speed < mx ){ speed += acc; }
		if( move1 < 1 ){ moveA += 1; }
		
		yield;
	}
	Obj_Delete(ID);
}

//　四角いやつ
task TSquareEffect(parent)
{
	while(!Obj_IsDeleted(parent))
	{
		CreateSquareEffect(parent);
		wait(10);
	}
}

task CreateSquareEffect(parent)
{
	let color = [randEffect(0,255),randEffect(0,255),randEffect(0,255)];
	let pos = [trunc(randEffect(0,640)/32)*32, trunc(randEffect(0,480)/32)*32];
	let next = trunc(randEffect(0,360)/4)*90;
	let count = 8;
	let kill = 45;
	let lay = 1;
	
	ascent(i in 0 .. count)
	{
		if (Obj_IsDeleted(parent)) { break; }
		pos[0] = pos[0] + cos(next)*32;
		pos[1] = pos[1] + sin(next)*32;
		_CreateSquareEffect(pos,[color[0]*randEffect(0.5,1),color[1]*randEffect(0.5,1),color[2]*randEffect(0.5,1)],lay,kill);
		next += trunc(randEffect(-1,2))*90;
		wait(5);
	}
}
task _CreateSquareEffect(pos,color,lay,kill)
{
	let ID		= ObjPrim_Create(OBJ_SPRITE_2D);
	
	ObjRender_SetPosition(ID, pos[0], pos[1], 0 );
	ObjRender_SetBlendType(ID, BLEND_ADD_ARGB );
	ObjPrim_SetTexture(ID, imgWhite );
	Obj_SetRenderPriorityI(ID, lay );
	ObjSprite2D_SetDestRect(ID, 0, 0, 32, 32);
	ObjRender_SetColor(ID,color[0], color[1], color[2]);
	
	ascent(t in 0 .. kill)
	{
		ObjRender_SetAlpha(ID, sin(t/kill*180)*(1-t/kill)*128*(1-(t%5)/10));
		yield;
	}
	Obj_Delete(ID);
}


// 暗転
task TBackground
{
	let filterCount = 15;
	let renderTexture = GetTransitionRenderTargetName();
	let renderTexture2 = renderTexture;	// 描画先
	
	// ベースの背景
	let objBaseBg = ObjPrim_Create(OBJ_SPRITE_2D); //2Dスプライトオブジェクト生成
	ObjPrim_SetTexture(objBaseBg, GetTransitionRenderTargetName()); //テクスチャを設定
	ObjSprite2D_SetSourceRect(objBaseBg, 0, 0, GetScreenWidth, GetScreenHeight);
	ObjSprite2D_SetDestRect(objBaseBg, 0, 0, GetScreenWidth, GetScreenHeight);
	Obj_SetRenderPriorityI(objBaseBg, 0);
	
	//--------------------------------
	//ゆがみオブジェクト
	let frameX1 = MinX; let frameY1 = MinY;
	let frameX2 = MaxX; let frameY2 = MaxY;

	let objBg = ObjPrim_Create(OBJ_SPRITE_2D); //2Dスプライトオブジェクト生成
	ObjPrim_SetTexture(objBg, renderTexture); //テクスチャを設定
	ObjSprite2D_SetSourceRect(objBg, frameX1, frameY1, frameX2, frameY2);
	ObjSprite2D_SetDestRect(objBg, frameX1, frameY1, frameX2, frameY2);
	Obj_SetRenderPriorityI(objBg, 0);

	let objBg2 = ObjPrim_Create(OBJ_SPRITE_2D); //2Dスプライトオブジェクト生成
	ObjPrim_SetTexture(objBg2, renderTexture2); //テクスチャを設定
	ObjSprite2D_SetSourceRect(objBg2, frameX1, frameY1, frameX2, frameY2);
	ObjSprite2D_SetDestRect(objBg2, frameX1, frameY1, frameX2, frameY2);
	Obj_SetRenderPriorityI(objBg2, 0);

	//暗転えへくと
	let objBlack = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjSprite2D_SetDestRect(objBlack, 0, 0, GetScreenWidth, GetScreenHeight);
	ObjRender_SetColor(objBlack, 0, 0, 0);
	ObjRender_SetBlendType(objBlack, BLEND_MULTIPLY);
	Obj_SetRenderPriorityI(objBlack, 0);

	//ゆがみオブジェクトにシェーダを設定
	//フィルタの再起処理をさせたかったけど技術ぢからが足りない！→なんか分からないけど出来た！
	ObjShader_SetShaderF(objBg, hlslGaussian);
	ObjShader_SetTechnique(objBg, "TecGaussian");
	
	ascent(i in 0 .. filterCount)
	{
		RenderToTextureB1(renderTexture2, objBg, false);
		
		let tmp_c = 255 * (1-i/filterCount*0.5);
		ObjRender_SetColor(objBlack, tmp_c, tmp_c, tmp_c);
		// 少しずつ暗く
		ObjRender_SetColor(objBg, 240, 240, 240);
		yield;
	}
}

//　メニュー作成関数
task TMenuItem(parent, index, mx, my, text){
	let alpha	= 0;
	let move1	= 0;
	let moveA	= 0;
	let move2	= 0;
	let moveB	= 0;
	let move3	= 0;
	let moveC	= 0;

	let offset_text = 128;	//テキストのオフセット
	
	let objText = CreateMenuTextObject(mx, my, text);
	let objSelect = CreateMenuTextObject(mx, my, text);
	
	let t = 0;
	while(!Obj_IsDeleted(parent))
	{
		let selectIndex = Obj_GetValueD(parent, "VALUE", -1);
		
		//　選択中は横に移動
		if( index == selectIndex )
		{
			move1 = sin( moveA );
			if( move1 < 1 ){ moveA += 15; }
		}
		else
		{
			move1 = sin( moveA );
			if( move1 > 0 ){ moveA -= 15; }
		}
		
		if( IsReplaySave )
		{
			move3 = sin(moveC);
			if( move3 < 1 ){ moveC += 15; }
		}
		else{
			moveC = 0;
			move3 = 0;
		}
		ObjRender_SetAlpha(objText, alpha*(1-moveC) );
		ObjRender_SetAlpha(objSelect, alpha*(1-moveC) );
		
		let tmp_x = mx + (1-move2)*offset_text + move1*24;
		ObjRender_SetPosition(objText, tmp_x, my, 0);
		ObjRender_SetPosition(objSelect, tmp_x, my, 0);
		
		Obj_SetVisible(objSelect, index == selectIndex );
		ObjRender_SetColorHSV(objSelect, t, 64+sin(t*7)*64, 255 );
		
		alpha = min(255, alpha+15);
		if ( move2 < 1 )
		{
			moveB += 10;
			move2 = sin(moveB);
		}
		t++;
		yield;
	}
	Obj_Delete(objText);
	Obj_Delete(objSelect);
}

function CreateMenuTextObject(let mx, let my, let text)
{
	let id		= ObjPrim_Create(OBJ_SPRITE_2D);
	
	ObjRender_SetPosition(id, mx, my, 0 );
	ObjPrim_SetTexture(id, imgSystemPause01 );
	ObjRender_SetBlendType(id, BLEND_ALPHA );
	ObjRender_SetAngleXYZ(id, 0, 0, 0 );
	ObjRender_SetColor(id, 64, 64, 64 );
	ObjRender_SetAlpha(id, 0 );
	Obj_SetRenderPriorityI(id, 10 );
	SetSceneSelectImage(id, text);
	return id;
}

function Menu_AddValue(obj, key, add_value, max_value)
{
	if (max_value <= 0) { Obj_SetValue(obj, key, 0); }
	else { Obj_SetValue(obj, key, (Obj_GetValueD(obj, key, -1)+max_value+add_value)%max_value); }
}

task TMenuBg(parent)
{
	let objText = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(objText, 10);
	ObjRender_SetPosition(objText, 0, 0, 0);
	ObjSprite2D_SetDestRect(objText, 0, 0, GetScreenWidth, GetScreenHeight);
	ObjRender_SetColor(objText, 0, 0, 0);
	
	let base_alpha = 200;
	let alpha = 0;
	while(!Obj_IsDeleted(parent))
	{
		if (alpha < 1)
		{
			alpha = min(1, 0.1+alpha);
			ObjRender_SetAlpha(objText, base_alpha*alpha);
		}
		yield;
	}
	descent(t in 0 .. 10)
	{
		let alpha = base_alpha*((t+1)/10);
		ObjRender_SetAlpha(objText, alpha);
		yield;
	}
	Obj_Delete(objText);
}

//　確認よ
function TReverify(mx, my)
{
	//メニュー配置
	let texts		= [ "はい", "いいえ" ];
	let countMenu	= length(texts);
	let returnValue = false;

	//　メニュータイトル作成
	let objParent = ObjText_Create();	//適当なオブジェクトを生成（データのやり取り用）
	Obj_SetValue(objParent, "VALUE", 0);

	//　項目作成
	TMenuBg(objParent);
	TMenuItem(objParent, countMenu+1, mx+32, my-46, "本当に" );
	
	ascent( var iText in 0 .. countMenu )
	{
		TMenuItem(objParent, iText, mx, my, texts[iText] );
		my += 32;
		mx += 8;
	}
	
	//キー状態がリセットされるまで待機
	WaitForResetKey(VK_OK);
	
	loop
	{
		//キー入力待ち
		let downKey = CheckKey_Menu(5, [VK_UP, VK_DOWN, VK_CANCEL, VK_OK]);

		alternative (downKey)
		case (VK_UP)
		{
			CallSoundPackage(sndTtSelect);
			Menu_AddValue(objParent, "VALUE", -1, countMenu);
		}
		case (VK_DOWN)
		{
			CallSoundPackage(sndTtSelect);
			Menu_AddValue(objParent, "VALUE", 1, countMenu);
		}
		case (VK_CANCEL)
		{
			Obj_SetValue(objParent, "VALUE", 0);
			CallSoundPackage(sndTtCancel);
			break;
		}
		case (VK_OK)
		{
			let selectIndex = Obj_GetValueD(objParent, "VALUE", 0);
			
			if (selectIndex == 0)
			{
				returnValue = true;
				CallSoundPackage(sndTtDecide);
			}
			else
			{
				CallSoundPackage(sndTtCancel);
			}
			break;
		}
		loop(3) { yield; }	//適当に固定ディレイ
	}
	Obj_Delete(objParent);
	if (!returnValue) { WaitForResetKey(VK_OK); }
	return(returnValue);
}


// まにゅある
function SceneManual(selectedDefault)
{
	// 暗転
	let objBlackBack = -1;
	if (selectedDefault == -1)
	{
		selectedDefault = 0;
		objBlackBack = EffectBlackOut(15, 192);
	}

	let imgValue = [0, 1, 2, 3, 4, 5, 6, 15, 7, 8, 9, 11, 12];
	if (DEBUG_MODE || GetAreaCommonData(CAREA_SAVE, "PLAYER_KAGUYA", false )) { imgValue = [0, 1, 2, 3, 4, 5, 6, 15, 7, 8, 9, 10, 11, 12]; }
	if (DEBUG_MODE || GetAreaCommonData(CAREA_SAVE, "EXTRA_FIRST", false)) { imgValue = imgValue ~ [13, 14]; }

	let selectMax = length(imgValue);
	let animeTimer = 10;
	let tmpResult = -1;
	
	let objParent = ObjText_Create();	//適当なオブジェクトを生成（データのやり取り用）
	Obj_SetValue(objParent, "VALUE", selectedDefault);

	//メニュー配置
	local
	{
		let mx = 64+256;
		let my = 48;
		ascent(i in 0 .. selectMax)
		{
			TMenuItemManual(objParent, i, mx, my+22*i, imgValue[i]);
		}
	}
	wait(5);
	//キー状態がリセットされるまで待機
	WaitForResetKeyEx([VK_OK, VK_CANCEL]);

	loop
	{
		//キー入力待ち
		let downKey = CheckKey_MenuEx(30, 6, [VK_UP, VK_DOWN, VK_OK, VK_CANCEL]);
		
		alternative (downKey)
		case (VK_UP)
		{
			CallSoundPackage(sndTtSelect);
			Menu_AddValue(objParent, "VALUE", -1, selectMax);
		}
		case (VK_DOWN)
		{
			CallSoundPackage(sndTtSelect);
			Menu_AddValue(objParent, "VALUE", 1, selectMax);
		}
		case (VK_OK)
		{
			tmpResult = Obj_GetValueD(objParent, "VALUE", 0);
			MenuEnter(objParent);
			break;
		}
		case (VK_CANCEL)
		{
			tmpResult = -1;
			CallSoundPackage(sndTtCancel);
			break;
		}
		wait(2);	//適当に固定ディレイ
	}
	Obj_Delete(objParent);
	// 画像説明へ
	if (tmpResult >= 0) { SceneManual2(tmpResult, imgValue); }
	Obj_SetValue(objBlackBack, "ERASE", true);	// ブラックアウト解除
	
	// メニュー選択時モーション
	function MenuEnter(parent)
	{
		CallSoundPackage(sndTtDecide);
		Obj_SetValue(parent, "FLASH", 1);
		wait(10);
		Obj_SetValue(parent, "FLASH", 0);
	}
	// メニューパーツ
	task TMenuItemManual(parent, index, base_x, base_y, img_index)
	{
		let objText = ObjPrim_Create(OBJ_SPRITE_2D);
		Obj_SetRenderPriorityI(objText, 91);
		ObjPrim_SetTexture(objText, imgTtManual00);
		ObjSprite2D_SetSourceRect(objText, 0, img_index*32, 256, 32+img_index*32);
		ObjSprite2D_SetDestRect(objText, -256, 0, 0, 32);
		ObjRender_SetPosition(objText, base_x, base_y, 0);
		ObjRender_SetScaleX(objText, 0);
		
		let baseColor = 255;
		let tmpColor = baseColor;
		
		let t = 0;
		let before_index = -99999;
		let selected_index = -1;
		while(!Obj_IsDeleted(parent))
		{
			selected_index = Obj_GetValueD(parent, "VALUE", -1);
			let now_index = index-selected_index;
			
			// 開幕アニメ
			if (t < animeTimer)
			{
				let tmp = sin((t+1)/animeTimer*90);
				ObjRender_SetScaleX(objText, tmp);
			}
			// 選択決定
			if (Obj_GetValueD(parent, "FLASH", 0))
			{
				if (selected_index == index) {
					descent(t in 0 .. 10)
					{
						let alpha = 255 - ((trunc(t/3)+1)%2)*128;
						ObjRender_SetAlpha(objText, alpha);
						yield;
					}
				}
				descent(t in 0 .. 10)
				{
					let alpha = 255*((t+1)/10);
					ObjRender_SetAlpha(objText, alpha);
					if (selected_index != index) { ObjRender_SetX(objText, ObjRender_GetX(objText)+3); }
					yield;
				}
				break;
			}
			
			if (before_index != now_index)
			{
				tmpColor = baseColor*max(0.4, (1-absolute(now_index)*0.6));
			}
			// 明滅
			if (selected_index == index) {
				let tmp_c = tmpColor - (sin(t*10)+0.75)*32;
				ObjRender_SetColor(objText, tmp_c, tmp_c, tmp_c);
			} else {
				ObjRender_SetColor(objText, tmpColor, tmpColor, tmpColor);
			}
			t++;
			yield;
		}
		Obj_Delete(objText);
	}

	//ブラックアウト
	function EffectBlackOut(timer, alpha)
	{
		//初期設定
		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		Obj_SetRenderPriorityI(obj, 90);
		ObjSprite2D_SetSourceRect(obj, 0, 0, GetScreenWidth, GetScreenHeight);
		ObjSprite2D_SetDestRect(obj, 0, 0, GetScreenWidth, GetScreenHeight);
		ObjRender_SetBlendType(obj, BLEND_MULTIPLY);
		EffectBlackOut_Animation(obj, alpha);
		return(obj);
		
		task EffectBlackOut_Animation(obj, alpha)
		{
			ascent(i in 0 .. timer)
			{
				let tmp_alpha = 255-(i+1)/timer*alpha;
				ObjRender_SetColor(obj, tmp_alpha, tmp_alpha, tmp_alpha);
				yield;
			}
			while(!Obj_IsDeleted(obj) && !Obj_GetValueD(obj, "ERASE", false))
			{
				yield;
			}
			if (!Obj_IsDeleted(obj))
			{
				descent(i in 0 .. timer)
				{
					let tmp_alpha = 255-(i+1)/timer*alpha;
					ObjRender_SetColor(obj, tmp_alpha, tmp_alpha, tmp_alpha);
					yield;
				}
				Obj_Delete(obj);
			}
		}
	}

}

// まにゅある（画像説明部分）
function SceneManual2(selectedDefault, imgValue)
{
//	let imgValue = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
	let selectMax = length(imgValue);
	let tmpResult = -1;
	
	let objParent = ObjText_Create();	//適当なオブジェクトを生成（データのやり取り用）
	Obj_SetValue(objParent, "VALUE", selectedDefault);

	// 最初の１つ
	TMenuItemManual2(objParent, selectedDefault);
	
	loop
	{
		//キー入力待ち
		let downKey = CheckKey_MenuEx(30, 6, [VK_LEFT, VK_RIGHT, VK_CANCEL]);
		
		alternative (downKey)
		case (VK_LEFT)
		{
			CallSoundPackage(sndTtSelect);
			Menu_AddValue(objParent, "VALUE", -1, selectMax);
			
			let tmpIdx = Obj_GetValueD(objParent, "VALUE", -1);
			TMenuItemManual2(objParent, tmpIdx);
		}
		case (VK_RIGHT)
		{
			CallSoundPackage(sndTtSelect);
			Menu_AddValue(objParent, "VALUE", 1, selectMax);
			
			let tmpIdx = Obj_GetValueD(objParent, "VALUE", -1);
			TMenuItemManual2(objParent, tmpIdx);
		}
		case (VK_CANCEL)
		{
			CallSoundPackage(sndTtCancel);
			break;
		}
		wait(2);	//適当に固定ディレイ
	}
	tmpResult = Obj_GetValueD(objParent, "VALUE", -1);
	Obj_Delete(objParent);
	SceneManual(tmpResult);
	
	// メニューパーツ
	task TMenuItemManual2(parent, _index)
	{
		let ix; let iy; let iw; let ih;
		let imgManual = "";
		let index = imgValue[_index];

		alternative(index)
		case(0)
		{
			ix = 0; iy = 0;
			iw = 512; ih = 256;
			imgManual = imgTtManual01;
		}
		case(1)
		{
			ix = 0; iy = 0;
			iw = 512; ih = 256;
			imgManual = imgTtManual02;
		}
		case(2)
		{
			ix = 0; iy = 0;
			iw = 512; ih = 512;
			imgManual = imgTtManual05;
		}
		case(3)
		{
			ix = 0; iy = 256;
			iw = 512; ih = 128;
			imgManual = imgTtManual02;
		}
		case(4)
		{
			ix = 0; iy = 384;
			iw = 512; ih = 256;
			imgManual = imgTtManual02;
		}
		case(5)
		{
			ix = 0; iy = 640;
			iw = 512; ih = 256;
			imgManual = imgTtManual02;
		}
		case(6)
		{
			ix = 0; iy = 0;
			iw = 512; ih = 256;
			imgManual = imgTtManual06;
		}
		case(7)
		{
			ix = 0; iy = 0;
			iw = 512; ih = 512;
			imgManual = imgTtManual03a;
		}
		case(8)
		{
			ix = 0; iy = 0;
			iw = 512; ih = 512;
			imgManual = imgTtManual03b;
		}
		case(9)
		{
			ix = 0; iy = 0;
			iw = 512; ih = 512;
			imgManual = imgTtManual03c;
		}
		case(10)
		{
			ix = 0; iy = 0;
			iw = 512; ih = 512;
			imgManual = imgTtManual03d;
		}
		case(11)
		{
			ix = 0; iy = 0;
			iw = 512; ih = 512;
			imgManual = imgTtManual04a;
		}
		case(12)
		{
			ix = 0; iy = 0;
			iw = 512; ih = 512;
			imgManual = imgTtManual04b;
		}
		case(13)
		{
			ix = 0; iy = 0;
			iw = 512; ih = 320;
			imgManual = imgTtManual07;
		}
		case(14)
		{
			ix = 0; iy = 320;
			iw = 512; ih = 384;
			imgManual = imgTtManual07;
		}
		case(15)
		{
			ix = 0; iy = 256;
			iw = 512; ih = 256;
			imgManual = imgTtManual06;
		}
		others
		{
			ix = 0; iy = 0;
			iw = 512; ih = 512;
		}
		
		let base_x = GetScreenWidth/2 - iw/2 - 32;
		let base_y = 32;
		let isScrool = false;
		if (ih > 512) { base_y = 96; isScrool = true; }
		if (index == 7 || index == 8 || index == 9 || index == 10) { base_y -= 16; }
		if (index == 2) { base_y = -1; }
		
		let objText = ObjPrim_Create(OBJ_SPRITE_2D);
		Obj_SetRenderPriorityI(objText, 91);
		ObjPrim_SetTexture(objText, imgManual);
		ObjSprite2D_SetSourceRect(objText, ix, iy, ix+iw, iy+ih);
		ObjSprite2D_SetDestRect(objText, 0, 0, iw, ih);
		ObjRender_SetPosition(objText, base_x, base_y, 0);

		let t = 0;
		while(!Obj_IsDeleted(parent))
		{
			// 開幕アニメ
			if (t < 5)
			{
				let alpha = 255*((t+1)/5);
				ObjRender_SetAlpha(objText, alpha);
			}
			// 終了
			if (_index != Obj_GetValueD(parent, "VALUE", -1))
			{
				descent(t in 0 .. 5)
				{
					let alpha = 255*((t+1)/5);
					ObjRender_SetAlpha(objText, alpha);
					yield;
				}
				break;
			}
			// スクロール
			if (isScrool)
			{
				if (GetVirtualKeyState(VK_UP) == KEY_HOLD) { base_y = min(96, base_y+4); }
				if (GetVirtualKeyState(VK_DOWN) == KEY_HOLD) { base_y = max(GetScreenHeight-ih, base_y-4); }
				ObjRender_SetY(objText, base_y);
			}
			t++;
			yield;
		}
		Obj_Delete(objText);
	}
}
