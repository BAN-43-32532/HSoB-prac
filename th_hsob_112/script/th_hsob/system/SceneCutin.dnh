//カットイン
#include "../lib/lib_SystemAll.dnh"
#include "../lib/lib_File.dnh"


let imgEffectCutin		= [
	[imgDir ~ "effect/plCutin01a.png", imgDir ~ "effect/plCutin01b.png", imgDir ~ "effect/plCutin01c.png"],		// 0:霊夢
	[imgDir ~ "effect/plCutin02a.png", imgDir ~ "effect/plCutin01b.png", imgDir ~ "effect/plCutin02c.png"],		// 1:魔理沙
	[imgDir ~ "effect/plCutin03a.png", imgDir ~ "effect/plCutin01b.png", imgDir ~ "effect/plCutin03c.png"],		// 2:咲夜
	[imgDir ~ "effect/plCutin04a.png", imgDir ~ "effect/plCutin01b.png", imgDir ~ "effect/plCutin04c.png"],		// 3:輝夜
	[imgDir ~ "effect/enCutin01a.png", imgDir ~ "effect/enCutin01b.png", imgDir ~ "effect/enCutin01c.png"],		// 4:乱々
	[imgDir ~ "effect/enCutin02a.png", imgDir ~ "effect/enCutin01b.png", imgDir ~ "effect/enCutin02c.png"],		// 5:ちい
	[imgDir ~ "effect/enCutin03a.png", imgDir ~ "effect/enCutin01b.png", imgDir ~ "effect/enCutin03c.png"],		// 6:ひかり子
	[imgDir ~ "effect/enCutin04a.png", imgDir ~ "effect/enCutin01b.png", imgDir ~ "effect/enCutin04c.png"],		// 7:上人
	[imgDir ~ "effect/enCutin05a.png", imgDir ~ "effect/enCutin01b.png", imgDir ~ "effect/enCutin05c.png"],		// 8:ミスティア
	[imgDir ~ "effect/enCutin05a.png", imgDir ~ "effect/enCutin01b.png", imgDir ~ "effect/enCutin05c.png"],		// 9:ネベト
	[imgDir ~ "effect/enCutin06a.png", imgDir ~ "effect/enCutin01b.png", imgDir ~ "effect/enCutin06c.png"],		// 10:セト
	[imgDir ~ "effect/enCutin06a.png", imgDir ~ "effect/enCutin01b.png", imgDir ~ "effect/enCutin06c_b.png"],	// 11:セト(2)
	[imgDir ~ "effect/enCutin07a.png", imgDir ~ "effect/enCutin01b.png", imgDir ~ "effect/enCutin07c.png"],		// 12:ﾎﾛｳﾁｬﾝ
	[imgDir ~ "effect/enCutin07a.png", imgDir ~ "effect/enCutin01b.png", imgDir ~ "effect/enCutin07c_b.png"],	// 13:ﾎﾛｳﾁｬﾝ(2)
	[imgDir ~ "effect/enCutin08a.png", imgDir ~ "effect/plCutin01b.png", imgDir ~ "effect/enCutin08c.png"],		// 14:EX
	[imgDir ~ "effect/enCutin08a_b.png", imgDir ~ "effect/plCutin01b.png", imgDir ~ "effect/enCutin08c_b.png"],		// 15:EX
];

let CUTIN_TIMER = 60;

let StgLeft = 32;
let StgTop = 16;
let StgRignt = 416;
let StgBottom = 464;

@Initialize
{
	SetAutoDeleteObject(true);
	let val = GetScriptArgument(0);
	let cutinID = val[0];
	CUTIN_TIMER = val[1];
	TMain(cutinID);
}

@MainLoop
{
	yield;
}

@Finalize
{
}

task TMain(cutinID)
{
	TBackground();
	TCutin(cutinID, CUTIN_TIMER+30);
	
	let flg = GetAreaCommonData(CAREA_TITLE, "Music_Stop", false);
	// BGM一時停止
//	SetAreaCommonData(CAREA_TITLE, "Music_Stop", true);

	loop(CUTIN_TIMER+30)
	{
		yield;
	}

	CloseScript(GetOwnScriptID());
}

task TBackground
{
	let target = GetTransitionRenderTargetName();

	let obj = ObjPrim_Create(OBJ_SPRITE_2D); //2D頂点ブジェクト生成
	Obj_SetRenderPriorityI(obj, 90); //描画優先度を設定
	ObjPrim_SetTexture(obj, target); //テクスチャを設定
	ObjRender_SetPosition(obj, 0, 0, 0);
	ObjSprite2D_SetDestRect(obj, 0, 0, 640, 480);
	ObjSprite2D_SetSourceRect(obj, 0, 0, 640, 480);
	loop(CUTIN_TIMER+1)
	{
		yield;
	}
	Obj_Delete(obj);
}

task TCutin(cutinID, timer)
{
	// EXラスワ2用特殊処理（応急処置）
	if (absolute(cutinID) == 15) { TCutin_Big(cutinID, timer); return; }
	
	let cutinMuki = 1;
	// IDが負なら敵側
	if (cutinID < 0) { cutinID = -cutinID; cutinMuki = -1; }
	// 左右入れ替え
	if (cutinMuki < 0)
	{
		StgLeft = 416;
		StgRignt = 32;
	}
	
	cutinID = min(length(imgEffectCutin)-1, max(0, cutinID));
	let imgFile = imgEffectCutin[cutinID];
	
	let obj = [ObjPrim_Create(OBJ_PRIMITIVE_2D),	// 上帯
		ObjPrim_Create(OBJ_PRIMITIVE_2D),	// 下帯
		ObjPrim_Create(OBJ_PRIMITIVE_2D),	// カットイン
		ObjPrim_Create(OBJ_PRIMITIVE_2D),	// カットイン裏
		ObjPrim_Create(OBJ_PRIMITIVE_2D),	// テキスト
		ObjPrim_Create(OBJ_PRIMITIVE_2D),	// テキスト
		ObjPrim_Create(OBJ_PRIMITIVE_2D),	// テキスト
		ObjPrim_Create(OBJ_PRIMITIVE_2D),	// テキスト
		ObjPrim_Create(OBJ_PRIMITIVE_2D),	// 上帯テクスチャ
		ObjPrim_Create(OBJ_PRIMITIVE_2D),	// 下帯テクスチャ
		];
	
	ascent(i in 0 .. 10)
	{
		ObjPrim_SetVertexCount(obj[i], 4);
		ObjPrim_SetPrimitiveType(obj[i], PRIMITIVE_TRIANGLESTRIP);
		Obj_SetRenderPriorityI(obj[i], 91); //描画優先度を設定
		ObjRender_SetPosition(obj[i], 0, 0, 0);
	}
	ObjRender_SetBlendType(obj[0], BLEND_INV_DESTRGB);
	ObjRender_SetBlendType(obj[1], BLEND_INV_DESTRGB);

	ObjPrim_SetTexture(obj[2], imgFile[0]);
	ObjPrim_SetTexture(obj[3], imgFile[1]);
	ObjRender_SetBlendType(obj[3], BLEND_ADD_RGB);
	Obj_SetRenderPriorityI(obj[3], 90);

	ObjRender_SetBlendType(obj[8], BLEND_ADD_ARGB);
	Obj_SetRenderPriorityI(obj[8], 90);
	ObjPrim_SetVertexColor(obj[8], 0, 0, 0, 0);
	ObjPrim_SetVertexColor(obj[8], 1, 48, 96, 96);
	ObjPrim_SetVertexColor(obj[8], 2, 0, 0, 0);
	ObjPrim_SetVertexColor(obj[8], 3, 48, 96, 96);

	ObjRender_SetBlendType(obj[9], BLEND_ADD_ARGB);
	Obj_SetRenderPriorityI(obj[9], 90);
	ObjPrim_SetVertexColor(obj[9], 0, 48, 96, 96);
	ObjPrim_SetVertexColor(obj[9], 1, 0, 0, 0);
	ObjPrim_SetVertexColor(obj[9], 2, 48, 96, 96);
	ObjPrim_SetVertexColor(obj[9], 3, 0, 0, 0);
	
	ascent(i in 0 .. 4)
	{
		let id = i+4;
		let sc = 0.85;
		ObjPrim_SetTexture(obj[id], imgFile[2]);

		ObjPrim_SetVertexPosition(obj[id], 0, -256*sc, -32*sc, 0);
		ObjPrim_SetVertexPosition(obj[id], 1, -256*sc,  32*sc, 0);
		ObjPrim_SetVertexPosition(obj[id], 2,  256*sc, -32*sc, 0);
		ObjPrim_SetVertexPosition(obj[id], 3,  256*sc,  32*sc, 0);
		ObjPrim_SetVertexUVT(obj[id], 0, 0, 0+64*(i%2));
		ObjPrim_SetVertexUVT(obj[id], 1, 0, 64+64*(i%2));
		ObjPrim_SetVertexUVT(obj[id], 2, 512, 0+64*(i%2));
		ObjPrim_SetVertexUVT(obj[id], 3, 512, 64+64*(i%2));
//		ObjRender_SetColor(obj[id], 255, 192, 192);

		ObjRender_SetBlendType(obj[id], [BLEND_SUBTRACT, BLEND_ALPHA][trunc(i/2)]);
	}
	
	let StgCenterX = (StgRignt + StgLeft)/2;
	let StgCenterY = (StgTop + StgBottom)/2;
	let StgHeight = StgBottom - StgTop;
	let StgWidth = StgRignt - StgLeft;

//	let timer = 90;
	ascent(t in 0 .. timer)
	{
		let tmp = (t+1)/timer;
		let tmp2 = sin(min(1,(t+1)/30)*90);
		let tmp2b = sin(min(1,max(0,t+1-15)/30)*90);
		let tmp3 = (1-cos(min(1,(timer-t)/30)*90));

		let eff_width = 64*tmp2;
		let eff_width2 = 512-(512-64)*tmp2b;
		let eff_offset = 192*(1-tmp2) + 64;
		let cutin_offset = [(-(1-tmp2)*256-(tmp-0.5)*32)*cutinMuki, (tmp-0.5)*16];
		let cutin_alpha = tmp2*255;
		
		// 上帯
		ObjPrim_SetVertexPosition(obj[0], 0, StgLeft, StgTop, 0);
		ObjPrim_SetVertexPosition(obj[0], 1, StgLeft, StgTop+(StgHeight/2+eff_width-eff_offset)*tmp3, 0);
		ObjPrim_SetVertexPosition(obj[0], 2, StgLeft+StgWidth*tmp2, StgTop, 0);
		ObjPrim_SetVertexPosition(obj[0], 3, StgLeft+StgWidth*tmp2, StgTop+(StgHeight/2-eff_width-eff_offset)*tmp3, 0);
		ObjPrim_SetVertexPosition(obj[8], 0, StgLeft, StgTop, 0);
		ObjPrim_SetVertexPosition(obj[8], 1, StgLeft, StgTop+(StgHeight/2+eff_width-eff_offset)*tmp3, 0);
		ObjPrim_SetVertexPosition(obj[8], 2, StgLeft+StgWidth*tmp2, StgTop, 0);
		ObjPrim_SetVertexPosition(obj[8], 3, StgLeft+StgWidth*tmp2, StgTop+(StgHeight/2-eff_width-eff_offset)*tmp3, 0);
		// 下帯
		ObjPrim_SetVertexPosition(obj[1], 0, StgRignt-StgWidth*tmp2, StgBottom+(-StgHeight/2+eff_width+eff_offset)*tmp3, 0);
		ObjPrim_SetVertexPosition(obj[1], 1, StgRignt-StgWidth*tmp2, StgBottom, 0);
		ObjPrim_SetVertexPosition(obj[1], 2, StgRignt, StgBottom+(-StgHeight/2+eff_width-eff_offset)*tmp3, 0);
		ObjPrim_SetVertexPosition(obj[1], 3, StgRignt, StgBottom, 0);
		ObjPrim_SetVertexPosition(obj[9], 0, StgRignt-StgWidth*tmp2, StgBottom+(-StgHeight/2+eff_width+eff_offset)*tmp3, 0);
		ObjPrim_SetVertexPosition(obj[9], 1, StgRignt-StgWidth*tmp2, StgBottom, 0);
		ObjPrim_SetVertexPosition(obj[9], 2, StgRignt, StgBottom+(-StgHeight/2+eff_width-eff_offset)*tmp3, 0);
		ObjPrim_SetVertexPosition(obj[9], 3, StgRignt, StgBottom, 0);
		// キャラカットイン
		ObjPrim_SetVertexPosition(obj[2], 0, StgLeft, StgCenterY-(eff_width2-eff_offset)*tmp3, 0);
		ObjPrim_SetVertexPosition(obj[2], 1, StgLeft, StgCenterY+(eff_width2+eff_offset)*tmp3, 0);
		ObjPrim_SetVertexPosition(obj[2], 2, StgRignt, StgCenterY-(eff_width2+eff_offset)*tmp3, 0);
		ObjPrim_SetVertexPosition(obj[2], 3, StgRignt, StgCenterY+(eff_width2-eff_offset)*tmp3, 0);
		ObjPrim_SetVertexUVT(obj[2], 0, 512-StgWidth/2+cutin_offset[0], 512-(eff_width2-eff_offset)*tmp3+cutin_offset[1]);
		ObjPrim_SetVertexUVT(obj[2], 1, 512-StgWidth/2+cutin_offset[0], 512+(eff_width2+eff_offset)*tmp3+cutin_offset[1]);
		ObjPrim_SetVertexUVT(obj[2], 2, 512+StgWidth/2+cutin_offset[0], 512-(eff_width2+eff_offset)*tmp3+cutin_offset[1]);
		ObjPrim_SetVertexUVT(obj[2], 3, 512+StgWidth/2+cutin_offset[0], 512+(eff_width2-eff_offset)*tmp3+cutin_offset[1]);
		ObjRender_SetAlpha(obj[2], cutin_alpha);
		// キャラカットイン裏
		ObjPrim_SetVertexPosition(obj[3], 0, StgLeft, StgCenterY-(eff_width-eff_offset)*tmp3, 0);
		ObjPrim_SetVertexPosition(obj[3], 1, StgLeft, StgCenterY+(eff_width+eff_offset)*tmp3, 0);
		ObjPrim_SetVertexPosition(obj[3], 2, StgRignt, StgCenterY-(eff_width+eff_offset)*tmp3, 0);
		ObjPrim_SetVertexPosition(obj[3], 3, StgRignt, StgCenterY+(eff_width-eff_offset)*tmp3, 0);
		ObjPrim_SetVertexUVT(obj[3], 0, -8+t*5, -eff_width*tmp3);
		ObjPrim_SetVertexUVT(obj[3], 1, -8+t*5, +eff_width*tmp3);
		ObjPrim_SetVertexUVT(obj[3], 2, 8+t*5, -eff_width*tmp3);
		ObjPrim_SetVertexUVT(obj[3], 3, 8+t*5, +eff_width*tmp3);
		// テキスト
		let t_oa = -30*cutinMuki;
		let t_or = 32 - (1-tmp2)*256;
		let t_ox = t_or*cos(t_oa);
		let t_oy = t_or*sin(t_oa) + (1-tmp3)*StgCenterY;
		if (cutinMuki < 0) { t_oy -= 12; }	// 調整
		let t_al = min(tmp2,tmp3)*255;
		let t_ea = (-tmp2*18 + (1-tmp3)*36)*cutinMuki;
		ObjRender_SetPosition(obj[4], StgCenterX+t_ox+t_ox/8, StgCenterY+t_oy+eff_width+32+t_oy/8, 0);
		ObjRender_SetAlpha(obj[4], t_al);
		ObjRender_SetAngleZ(obj[4], t_ea);
		ObjRender_SetPosition(obj[5], StgCenterX-t_ox, StgCenterY-t_oy-eff_width-32, 0);
		ObjRender_SetAlpha(obj[5], t_al);
		ObjRender_SetAngleZ(obj[5], t_ea);
		ObjRender_SetPosition(obj[6], StgCenterX+t_ox, StgCenterY+t_oy+eff_width+32, 0);
		ObjRender_SetAlpha(obj[6], t_al);
		ObjRender_SetAngleZ(obj[6], t_ea);
		ObjRender_SetPosition(obj[7], StgCenterX-t_ox-t_ox/8, StgCenterY-t_oy-eff_width-32-t_oy/8, 0);
		ObjRender_SetAlpha(obj[7], t_al);
		ObjRender_SetAngleZ(obj[7], t_ea);

		yield;
	}
	
	ascent(i in 0 .. 10) { Obj_Delete(obj[i]); }
}

task TCutin_Big(cutinID, timer)
{
	let cutinMuki = 1;
	// IDが負なら敵側
	if (cutinID < 0) { cutinID = -cutinID; cutinMuki = -1; }
	// 左右入れ替え
	if (cutinMuki < 0)
	{
		StgLeft = 416;
		StgRignt = 32;
	}
	
	cutinID = min(length(imgEffectCutin)-1, max(0, cutinID));
	let imgFile = imgEffectCutin[cutinID];
	
	let obj = [ObjPrim_Create(OBJ_PRIMITIVE_2D),	// 上帯
		ObjPrim_Create(OBJ_PRIMITIVE_2D),	// 下帯
		ObjPrim_Create(OBJ_PRIMITIVE_2D),	// カットイン
		ObjPrim_Create(OBJ_PRIMITIVE_2D),	// カットイン裏
		ObjPrim_Create(OBJ_PRIMITIVE_2D),	// テキスト
		ObjPrim_Create(OBJ_PRIMITIVE_2D),	// テキスト
		ObjPrim_Create(OBJ_PRIMITIVE_2D),	// テキスト
		ObjPrim_Create(OBJ_PRIMITIVE_2D),	// テキスト
		ObjPrim_Create(OBJ_PRIMITIVE_2D),	// 上帯テクスチャ
		ObjPrim_Create(OBJ_PRIMITIVE_2D),	// 下帯テクスチャ
		];
	
	ascent(i in 0 .. 10)
	{
		ObjPrim_SetVertexCount(obj[i], 4);
		ObjPrim_SetPrimitiveType(obj[i], PRIMITIVE_TRIANGLESTRIP);
		Obj_SetRenderPriorityI(obj[i], 91); //描画優先度を設定
		ObjRender_SetPosition(obj[i], 0, 0, 0);
	}
	ObjRender_SetBlendType(obj[0], BLEND_INV_DESTRGB);
	ObjRender_SetBlendType(obj[1], BLEND_INV_DESTRGB);

	ObjPrim_SetTexture(obj[2], imgFile[0]);
	ObjPrim_SetTexture(obj[3], imgFile[1]);
	ObjRender_SetBlendType(obj[3], BLEND_ADD_RGB);
	Obj_SetRenderPriorityI(obj[3], 90);

	ObjRender_SetBlendType(obj[8], BLEND_ADD_ARGB);
	Obj_SetRenderPriorityI(obj[8], 90);
	ObjPrim_SetVertexColor(obj[8], 0, 0, 0, 0);
	ObjPrim_SetVertexColor(obj[8], 1, 48, 96, 96);
	ObjPrim_SetVertexColor(obj[8], 2, 0, 0, 0);
	ObjPrim_SetVertexColor(obj[8], 3, 48, 96, 96);

	ObjRender_SetBlendType(obj[9], BLEND_ADD_ARGB);
	Obj_SetRenderPriorityI(obj[9], 90);
	ObjPrim_SetVertexColor(obj[9], 0, 48, 96, 96);
	ObjPrim_SetVertexColor(obj[9], 1, 0, 0, 0);
	ObjPrim_SetVertexColor(obj[9], 2, 48, 96, 96);
	ObjPrim_SetVertexColor(obj[9], 3, 0, 0, 0);
	
	ascent(i in 0 .. 4)
	{
		let id = i+4;
		let sc = 0.85;
		ObjPrim_SetTexture(obj[id], imgFile[2]);

		ObjPrim_SetVertexPosition(obj[id], 0, -256*sc, -32*sc, 0);
		ObjPrim_SetVertexPosition(obj[id], 1, -256*sc,  32*sc, 0);
		ObjPrim_SetVertexPosition(obj[id], 2,  256*sc, -32*sc, 0);
		ObjPrim_SetVertexPosition(obj[id], 3,  256*sc,  32*sc, 0);
		ObjPrim_SetVertexUVT(obj[id], 0, 0, 0+64*(i%2));
		ObjPrim_SetVertexUVT(obj[id], 1, 0, 64+64*(i%2));
		ObjPrim_SetVertexUVT(obj[id], 2, 512, 0+64*(i%2));
		ObjPrim_SetVertexUVT(obj[id], 3, 512, 64+64*(i%2));
//		ObjRender_SetColor(obj[id], 255, 192, 192);

		ObjRender_SetBlendType(obj[id], [BLEND_SUBTRACT, BLEND_ALPHA][trunc(i/2)]);
	}
	
	let StgCenterX = (StgRignt + StgLeft)/2;
	let StgCenterY = (StgTop + StgBottom)/2;
	let StgHeight = StgBottom - StgTop;
	let StgWidth = StgRignt - StgLeft;

//	let timer = 90;
	ascent(t in 0 .. timer)
	{
		let tmp = (t+1)/timer;
		let tmp2 = sin(min(1,(t+1)/30)*90);
		let tmp2b = sin(min(1,max(0,t+1-15)/30)*90);
		let tmp3 = (1-cos(min(1,(timer-t)/30)*90));

		let eff_width = 164*tmp2;
		let eff_width2 = 512-(512-164)*tmp2b;
		let eff_offset = 16*tmp2;
		let cutin_offset = [(-(1-tmp2)*256-(tmp-0.5)*32)*cutinMuki, (tmp-0.5)*16];
		let cutin_alpha = tmp2*255;
		
		// 上帯
		ObjPrim_SetVertexPosition(obj[0], 0, StgLeft, StgTop, 0);
		ObjPrim_SetVertexPosition(obj[0], 1, StgLeft, StgTop+(StgHeight/2-eff_width+eff_offset)*tmp3, 0);
		ObjPrim_SetVertexPosition(obj[0], 2, StgLeft+StgWidth*tmp2, StgTop, 0);
		ObjPrim_SetVertexPosition(obj[0], 3, StgLeft+StgWidth*tmp2, StgTop+(StgHeight/2-eff_width-eff_offset)*tmp3, 0);
		ObjPrim_SetVertexPosition(obj[8], 0, StgLeft, StgTop, 0);
		ObjPrim_SetVertexPosition(obj[8], 1, StgLeft, StgTop+(StgHeight/2-eff_width+eff_offset)*tmp3, 0);
		ObjPrim_SetVertexPosition(obj[8], 2, StgLeft+StgWidth*tmp2, StgTop, 0);
		ObjPrim_SetVertexPosition(obj[8], 3, StgLeft+StgWidth*tmp2, StgTop+(StgHeight/2-eff_width-eff_offset)*tmp3, 0);
		// 下帯
		ObjPrim_SetVertexPosition(obj[1], 0, StgRignt-StgWidth*tmp2, StgBottom+(-StgHeight/2+eff_width+eff_offset)*tmp3, 0);
		ObjPrim_SetVertexPosition(obj[1], 1, StgRignt-StgWidth*tmp2, StgBottom, 0);
		ObjPrim_SetVertexPosition(obj[1], 2, StgRignt, StgBottom+(-StgHeight/2+eff_width-eff_offset)*tmp3, 0);
		ObjPrim_SetVertexPosition(obj[1], 3, StgRignt, StgBottom, 0);
		ObjPrim_SetVertexPosition(obj[9], 0, StgRignt-StgWidth*tmp2, StgBottom+(-StgHeight/2+eff_width+eff_offset)*tmp3, 0);
		ObjPrim_SetVertexPosition(obj[9], 1, StgRignt-StgWidth*tmp2, StgBottom, 0);
		ObjPrim_SetVertexPosition(obj[9], 2, StgRignt, StgBottom+(-StgHeight/2+eff_width-eff_offset)*tmp3, 0);
		ObjPrim_SetVertexPosition(obj[9], 3, StgRignt, StgBottom, 0);
		// キャラカットイン
		ObjPrim_SetVertexPosition(obj[2], 0, StgLeft, StgCenterY-(eff_width2-eff_offset)*tmp3, 0);
		ObjPrim_SetVertexPosition(obj[2], 1, StgLeft, StgCenterY+(eff_width2+eff_offset)*tmp3, 0);
		ObjPrim_SetVertexPosition(obj[2], 2, StgRignt, StgCenterY-(eff_width2+eff_offset)*tmp3, 0);
		ObjPrim_SetVertexPosition(obj[2], 3, StgRignt, StgCenterY+(eff_width2-eff_offset)*tmp3, 0);
		ObjPrim_SetVertexUVT(obj[2], 0, 512-StgWidth/2+cutin_offset[0], 512-(eff_width2-eff_offset)*tmp3+cutin_offset[1]);
		ObjPrim_SetVertexUVT(obj[2], 1, 512-StgWidth/2+cutin_offset[0], 512+(eff_width2+eff_offset)*tmp3+cutin_offset[1]);
		ObjPrim_SetVertexUVT(obj[2], 2, 512+StgWidth/2+cutin_offset[0], 512-(eff_width2+eff_offset)*tmp3+cutin_offset[1]);
		ObjPrim_SetVertexUVT(obj[2], 3, 512+StgWidth/2+cutin_offset[0], 512+(eff_width2-eff_offset)*tmp3+cutin_offset[1]);
		ObjRender_SetAlpha(obj[2], cutin_alpha);
		// キャラカットイン裏
		ObjPrim_SetVertexPosition(obj[3], 0, StgLeft, StgCenterY-(eff_width-eff_offset)*tmp3, 0);
		ObjPrim_SetVertexPosition(obj[3], 1, StgLeft, StgCenterY+(eff_width+eff_offset)*tmp3, 0);
		ObjPrim_SetVertexPosition(obj[3], 2, StgRignt, StgCenterY-(eff_width+eff_offset)*tmp3, 0);
		ObjPrim_SetVertexPosition(obj[3], 3, StgRignt, StgCenterY+(eff_width-eff_offset)*tmp3, 0);
		ObjPrim_SetVertexUVT(obj[3], 0, -8+t*5, -eff_width*tmp3);
		ObjPrim_SetVertexUVT(obj[3], 1, -8+t*5, +eff_width*tmp3);
		ObjPrim_SetVertexUVT(obj[3], 2, 8+t*5, -eff_width*tmp3);
		ObjPrim_SetVertexUVT(obj[3], 3, 8+t*5, +eff_width*tmp3);
		// テキスト
		let t_oa = -5*cutinMuki;
		let t_or = 32 - (1-tmp2)*64;
		let t_ox = t_or*cos(t_oa);
		let t_oy = t_or*sin(t_oa) + (1-tmp3)*StgCenterY;
		if (cutinMuki < 0) { t_oy -= 12; }	// 調整
		let t_al = min(tmp2,tmp3)*255;
		let t_ea = (-tmp2*5 + (1-tmp3)*10)*cutinMuki;
		ObjRender_SetPosition(obj[4], StgCenterX+t_ox+t_ox/8, StgCenterY+t_oy+eff_width+32+t_oy/8, 0);
		ObjRender_SetAlpha(obj[4], t_al);
		ObjRender_SetAngleZ(obj[4], t_ea);
		ObjRender_SetPosition(obj[5], StgCenterX-t_ox, StgCenterY-t_oy-eff_width-32-8, 0);
		ObjRender_SetAlpha(obj[5], t_al);
		ObjRender_SetAngleZ(obj[5], t_ea);
		ObjRender_SetPosition(obj[6], StgCenterX+t_ox, StgCenterY+t_oy+eff_width+32, 0);
		ObjRender_SetAlpha(obj[6], t_al);
		ObjRender_SetAngleZ(obj[6], t_ea);
		ObjRender_SetPosition(obj[7], StgCenterX-t_ox-t_ox/8, StgCenterY-t_oy-eff_width-32-t_oy/8-8, 0);
		ObjRender_SetAlpha(obj[7], t_al);
		ObjRender_SetAngleZ(obj[7], t_ea);

		yield;
	}
	
	ascent(i in 0 .. 10) { Obj_Delete(obj[i]); }
}
